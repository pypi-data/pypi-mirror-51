################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.org.locationtech.jts.index.strtree
import javawrappers.org.locationtech.jts.geom
import javawrappers.org.locationtech.jts.operation.distance

from jpype.types import *
from typing import Union

from typing import overload

class SimpleMinimumClearance:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ): ...
	class ComputeMCCoordinateSequenceFilter:
		def __init__(self, arg0: javawrappers.org.locationtech.jts.precision.SimpleMinimumClearance, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ): ...
		def filter(self, arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg1: Union[int, JInt], ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def isGeometryChanged(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def isDone(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	class VertexCoordinateFilter:
		def __init__(self, arg0: javawrappers.org.locationtech.jts.precision.SimpleMinimumClearance, ): ...
		def filter(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	@overload
	def filter(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> None: ...
	@overload
	def filter(self, arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg1: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def getDistance(arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> Union[float, JDouble]: ...
	@overload
	def getDistance(self, ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isGeometryChanged(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def getLine(arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@overload
	def getLine(self, ) -> javawrappers.org.locationtech.jts.geom.LineString: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isDone(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class EnhancedPrecisionOp:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def intersection(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@staticmethod
	def difference(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def buffer(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@staticmethod
	def union(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@staticmethod
	def symDifference(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def notify(self, ) -> None: ...


class SimpleGeometryPrecisionReducer:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.PrecisionModel, ): ...
	class PrecisionReducerCoordinateOperation:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def edit(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
		@overload
		def edit(self, arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	@overload
	def reduce(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@overload
	@staticmethod
	def reduce(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.PrecisionModel, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def edit(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@overload
	def edit(self, arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setRemoveCollapsedComponents(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def setChangePrecisionModel(self, arg0: Union[int, JBoolean], ) -> None: ...


class GeometryPrecisionReducer:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.PrecisionModel, ): ...
	@overload
	@staticmethod
	def reduce(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.PrecisionModel, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@overload
	def reduce(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setPointwise(self, arg0: Union[int, JBoolean], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setRemoveCollapsedComponents(self, arg0: Union[int, JBoolean], ) -> None: ...
	@staticmethod
	def reducePointwise(arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.PrecisionModel, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def notify(self, ) -> None: ...
	def setChangePrecisionModel(self, arg0: Union[int, JBoolean], ) -> None: ...


class MinimumClearance:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ): ...
	class MinClearanceDistance:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def distance(self, arg0: javawrappers.org.locationtech.jts.operation.distance.FacetSequence, arg1: javawrappers.org.locationtech.jts.operation.distance.FacetSequence, ) -> Union[float, JDouble]: ...
		@overload
		def distance(self, arg0: javawrappers.org.locationtech.jts.index.strtree.ItemBoundable, arg1: javawrappers.org.locationtech.jts.index.strtree.ItemBoundable, ) -> Union[float, JDouble]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getCoordinates(self, ) -> JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1): ...
		def notify(self, ) -> None: ...


	@overload
	def getDistance(self, ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def getDistance(arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def distance(self, arg0: javawrappers.org.locationtech.jts.operation.distance.FacetSequence, arg1: javawrappers.org.locationtech.jts.operation.distance.FacetSequence, ) -> Union[float, JDouble]: ...
	@overload
	def distance(self, arg0: javawrappers.org.locationtech.jts.index.strtree.ItemBoundable, arg1: javawrappers.org.locationtech.jts.index.strtree.ItemBoundable, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getLine(self, ) -> javawrappers.org.locationtech.jts.geom.LineString: ...
	@overload
	@staticmethod
	def getLine(arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getCoordinates(self, ) -> JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1): ...
	def notify(self, ) -> None: ...


class CommonBits:
	def __init__(self, ): ...
	def add(self, arg0: Union[float, JDouble], ) -> None: ...
	@staticmethod
	def zeroLowerBits(arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> Union[long, JLong]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def numCommonMostSigMantissaBits(arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[int, JInt]: ...
	@staticmethod
	def signExpBits(arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getCommon(self, ) -> Union[float, JDouble]: ...
	@overload
	def toString(self, arg0: Union[long, JLong], ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def getBit(arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...


class CommonBitsOp:
	@overload
	def __init__(self, arg0: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def intersection(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def difference(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def buffer(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def union(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def symDifference(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def notify(self, ) -> None: ...


class PrecisionReducerCoordinateOperation:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.PrecisionModel, arg1: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def edit(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, arg1: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@overload
	def edit(self, arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), arg1: javawrappers.org.locationtech.jts.geom.Geometry, ) -> JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class CommonBitsRemover:
	def __init__(self, ): ...
	class Translater:
		def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ): ...
		def filter(self, arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg1: Union[int, JInt], ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def isGeometryChanged(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def isDone(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	class CommonCoordinateFilter:
		def filter(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getCommonCoordinate(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
		def notify(self, ) -> None: ...


	def add(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getCommonCoordinate(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	@overload
	def getCommonCoordinate(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def isDone(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@overload
	def filter(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> None: ...
	@overload
	def filter(self, arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg1: Union[int, JInt], ) -> None: ...
	def addCommonBits(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> None: ...
	def removeCommonBits(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def isGeometryChanged(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class CoordinatePrecisionReducerFilter:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.PrecisionModel, ): ...
	def filter(self, arg0: javawrappers.org.locationtech.jts.geom.CoordinateSequence, arg1: Union[int, JInt], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isGeometryChanged(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isDone(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


