################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.org.locationtech.jts.index.chain
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.org.locationtech.jts.geom

from jpype.types import *
from typing import Union

from typing import overload

class MonotoneChainOverlapAction:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def overlap(self, arg0: javawrappers.org.locationtech.jts.index.chain.MonotoneChain, arg1: Union[int, JInt], arg2: javawrappers.org.locationtech.jts.index.chain.MonotoneChain, arg3: Union[int, JInt], ) -> None: ...
	@overload
	def overlap(self, arg0: javawrappers.org.locationtech.jts.geom.LineSegment, arg1: javawrappers.org.locationtech.jts.geom.LineSegment, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MonotoneChainBuilder:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def getChains(arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def getChains(arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), ) -> javawrappers.java.util.List: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def toIntArray(arg0: javawrappers.java.util.List, ) -> JArray(Union[int, JInt], 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getChainStartIndices(arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), ) -> JArray(Union[int, JInt], 1): ...
	def notify(self, ) -> None: ...


class MonotoneChainSelectAction:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def select(self, arg0: javawrappers.org.locationtech.jts.index.chain.MonotoneChain, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def select(self, arg0: javawrappers.org.locationtech.jts.geom.LineSegment, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MonotoneChain:
	def __init__(self, arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.lang.Object, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def computeOverlaps(self, arg0: javawrappers.org.locationtech.jts.index.chain.MonotoneChain, arg1: javawrappers.org.locationtech.jts.index.chain.MonotoneChainOverlapAction, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def select(self, arg0: javawrappers.org.locationtech.jts.geom.Envelope, arg1: javawrappers.org.locationtech.jts.index.chain.MonotoneChainSelectAction, ) -> None: ...
	def getLineSegment(self, arg0: Union[int, JInt], arg1: javawrappers.org.locationtech.jts.geom.LineSegment, ) -> None: ...
	def getStartIndex(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def getId(self, ) -> Union[int, JInt]: ...
	def getCoordinates(self, ) -> JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1): ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getEndIndex(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setId(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEnvelope(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
	def getContext(self, ) -> javawrappers.java.lang.Object: ...


