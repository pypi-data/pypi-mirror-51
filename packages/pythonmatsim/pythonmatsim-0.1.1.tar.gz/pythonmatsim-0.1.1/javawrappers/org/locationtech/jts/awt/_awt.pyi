################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.awt
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.awt.geom
import javawrappers.org.locationtech.jts.geom

from jpype.types import *
from typing import Union

from typing import overload

class ShapeWriter:
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.awt.PointTransformation, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.awt.PointTransformation, arg1: javawrappers.org.locationtech.jts.awt.PointShapeFactory, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setDecimation(self, arg0: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toShape(self, arg0: javawrappers.org.locationtech.jts.geom.Geometry, ) -> javawrappers.java.awt.Shape: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def setRemoveDuplicatePoints(self, arg0: Union[int, JBoolean], ) -> None: ...


class PointShapeFactory:
	class X:
		@overload
		def __init__(self, arg0: Union[float, JDouble], ): ...
		@overload
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def createPoint(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.Shape: ...
		def notify(self, ) -> None: ...


	class Cross:
		@overload
		def __init__(self, arg0: Union[float, JDouble], ): ...
		@overload
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def createPoint(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.Shape: ...
		def notify(self, ) -> None: ...


	class Circle:
		@overload
		def __init__(self, arg0: Union[float, JDouble], ): ...
		@overload
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def createPoint(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.Shape: ...
		def notify(self, ) -> None: ...


	class Triangle:
		@overload
		def __init__(self, arg0: Union[float, JDouble], ): ...
		@overload
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def createPoint(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.Shape: ...
		def notify(self, ) -> None: ...


	class Star:
		@overload
		def __init__(self, arg0: Union[float, JDouble], ): ...
		@overload
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def createPoint(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.Shape: ...
		def notify(self, ) -> None: ...


	class Square:
		@overload
		def __init__(self, arg0: Union[float, JDouble], ): ...
		@overload
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def createPoint(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.Shape: ...
		def notify(self, ) -> None: ...


	class Point:
		@overload
		def __init__(self, arg0: Union[float, JDouble], ): ...
		@overload
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def createPoint(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.Shape: ...
		def notify(self, ) -> None: ...


	class BasePointShapeFactory:
		@overload
		def __init__(self, arg0: Union[float, JDouble], ): ...
		@overload
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def createPoint(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.Shape: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def createPoint(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.Shape: ...
	@overload
	def createPoint(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.Shape: ...
	@overload
	def createPoint(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.Shape: ...
	@overload
	def createPoint(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.Shape: ...
	@overload
	def createPoint(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.Shape: ...
	@overload
	def createPoint(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.Shape: ...
	@overload
	def createPoint(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.Shape: ...
	@overload
	def createPoint(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.Shape: ...
	@overload
	def createPoint(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> javawrappers.java.awt.Shape: ...
	def notify(self, ) -> None: ...


class ShapeCollectionPathIterator:
	def __init__(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.java.awt.geom.AffineTransform, ): ...
	def next(self, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getWindingRule(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def currentSegment(self, arg0: JArray(Union[float, JFloat], 1), ) -> Union[int, JInt]: ...
	@overload
	def currentSegment(self, arg0: JArray(Union[float, JDouble], 1), ) -> Union[int, JInt]: ...
	def isDone(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class IdentityPointTransformation:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def transform(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.java.awt.geom.Point2D, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ShapeReader:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.GeometryFactory, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def toCoordinates(arg0: javawrappers.java.awt.geom.PathIterator, ) -> javawrappers.java.util.List: ...
	@overload
	def read(self, arg0: javawrappers.java.awt.geom.PathIterator, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@overload
	@staticmethod
	def read(arg0: javawrappers.java.awt.Shape, arg1: Union[float, JDouble], arg2: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@overload
	@staticmethod
	def read(arg0: javawrappers.java.awt.geom.PathIterator, arg1: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class GeometryCollectionShape:
	def __init__(self, ): ...
	def add(self, arg0: javawrappers.java.awt.Shape, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def contains(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.awt.geom.Rectangle2D, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def getPathIterator(self, arg0: javawrappers.java.awt.geom.AffineTransform, arg1: Union[float, JDouble], ) -> javawrappers.java.awt.geom.PathIterator: ...
	@overload
	def getPathIterator(self, arg0: javawrappers.java.awt.geom.AffineTransform, ) -> javawrappers.java.awt.geom.PathIterator: ...
	@overload
	def intersects(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def intersects(self, arg0: javawrappers.java.awt.geom.Rectangle2D, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getBounds2D(self, ) -> javawrappers.java.awt.geom.Rectangle2D: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getBounds(self, ) -> javawrappers.java.awt.Rectangle: ...


class PolygonShape:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), arg1: javawrappers.java.util.Collection, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def contains(self, arg0: javawrappers.java.awt.geom.Rectangle2D, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.awt.geom.Point2D, ) -> Union[int, JBoolean]: ...
	@overload
	def getPathIterator(self, arg0: javawrappers.java.awt.geom.AffineTransform, arg1: Union[float, JDouble], ) -> javawrappers.java.awt.geom.PathIterator: ...
	@overload
	def getPathIterator(self, arg0: javawrappers.java.awt.geom.AffineTransform, ) -> javawrappers.java.awt.geom.PathIterator: ...
	@overload
	def intersects(self, arg0: javawrappers.java.awt.geom.Rectangle2D, ) -> Union[int, JBoolean]: ...
	@overload
	def intersects(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getBounds2D(self, ) -> javawrappers.java.awt.geom.Rectangle2D: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getBounds(self, ) -> javawrappers.java.awt.Rectangle: ...


class FontGlyphReader:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def read(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.awt.Font, arg2: Union[float, JDouble], arg3: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@overload
	@staticmethod
	def read(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.awt.Font, arg2: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	@overload
	@staticmethod
	def read(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class PointTransformation:
	def transform(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.java.awt.geom.Point2D, ) -> None: ...


