################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.io
import javawrappers.org.locationtech.jts.geomgraph.index
import javawrappers.org.locationtech.jts.geomgraph
import javawrappers.org.locationtech.jts.geom
import javawrappers.org.locationtech.jts.algorithm

from jpype.types import *
from typing import Union

from typing import overload

class TopologyLocation:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: JArray(Union[int, JInt], 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geomgraph.TopologyLocation, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setAllLocations(self, arg0: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	def allPositionsEqual(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def setLocation(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def setLocation(self, arg0: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isNull(self, ) -> Union[int, JBoolean]: ...
	def merge(self, arg0: javawrappers.org.locationtech.jts.geomgraph.TopologyLocation, ) -> None: ...
	def get(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def isArea(self, ) -> Union[int, JBoolean]: ...
	def isEqualOnSide(self, arg0: javawrappers.org.locationtech.jts.geomgraph.TopologyLocation, arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def isAnyNull(self, ) -> Union[int, JBoolean]: ...
	def getLocations(self, ) -> JArray(Union[int, JInt], 1): ...
	def setLocations(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setAllLocationsIfNull(self, arg0: Union[int, JInt], ) -> None: ...
	def isLine(self, ) -> Union[int, JBoolean]: ...
	def flip(self, ) -> None: ...


class Quadrant:
	def __init__(self, ): ...
	@staticmethod
	def isInHalfPlane(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def isOpposite(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def quadrant(arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def quadrant(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def commonHalfPlane(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def isNorthern(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...


class EdgeEnd:
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Edge, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, arg2: javawrappers.org.locationtech.jts.geom.Coordinate, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Edge, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, arg2: javawrappers.org.locationtech.jts.geom.Coordinate, arg3: javawrappers.org.locationtech.jts.geomgraph.Label, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLabel(self, ) -> javawrappers.org.locationtech.jts.geomgraph.Label: ...
	def getQuadrant(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def setNode(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Node, ) -> None: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def getEdge(self, ) -> javawrappers.org.locationtech.jts.geomgraph.Edge: ...
	def notify(self, ) -> None: ...
	def getDy(self, ) -> Union[float, JDouble]: ...
	def getDx(self, ) -> Union[float, JDouble]: ...
	def getDirectedCoordinate(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def print_(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	def getCoordinate(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def computeLabel(self, arg0: javawrappers.org.locationtech.jts.algorithm.BoundaryNodeRule, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def compareDirection(self, arg0: javawrappers.org.locationtech.jts.geomgraph.EdgeEnd, ) -> Union[int, JInt]: ...
	def getNode(self, ) -> javawrappers.org.locationtech.jts.geomgraph.Node: ...


class EdgeNodingValidator:
	def __init__(self, arg0: javawrappers.java.util.Collection, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def toSegmentStrings(arg0: javawrappers.java.util.Collection, ) -> javawrappers.java.util.Collection: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def checkValid(self, ) -> None: ...
	@overload
	@staticmethod
	def checkValid(arg0: javawrappers.java.util.Collection, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class EdgeIntersectionList:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Edge, ): ...
	def add(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> javawrappers.org.locationtech.jts.geomgraph.EdgeIntersection: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def print_(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def addSplitEdges(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def addEndpoints(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def isIntersection(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[int, JBoolean]: ...


class DirectedEdgeStar:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def computeDepths(self, arg0: javawrappers.org.locationtech.jts.geomgraph.DirectedEdge, ) -> None: ...
	def getLabel(self, ) -> javawrappers.org.locationtech.jts.geomgraph.Label: ...
	def notifyAll(self, ) -> None: ...
	def linkResultDirectedEdges(self, ) -> None: ...
	def insert(self, arg0: javawrappers.org.locationtech.jts.geomgraph.EdgeEnd, ) -> None: ...
	def updateLabelling(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Label, ) -> None: ...
	def notify(self, ) -> None: ...
	def getNextCW(self, arg0: javawrappers.org.locationtech.jts.geomgraph.EdgeEnd, ) -> javawrappers.org.locationtech.jts.geomgraph.EdgeEnd: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def linkAllDirectedEdges(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def mergeSymLabels(self, ) -> None: ...
	def isAreaLabelsConsistent(self, arg0: javawrappers.org.locationtech.jts.geomgraph.GeometryGraph, ) -> Union[int, JBoolean]: ...
	def getRightmostEdge(self, ) -> javawrappers.org.locationtech.jts.geomgraph.DirectedEdge: ...
	def linkMinimalDirectedEdges(self, arg0: javawrappers.org.locationtech.jts.geomgraph.EdgeRing, ) -> None: ...
	def computeLabelling(self, arg0: JArray(javawrappers.org.locationtech.jts.geomgraph.GeometryGraph, 1), ) -> None: ...
	def findIndex(self, arg0: javawrappers.org.locationtech.jts.geomgraph.EdgeEnd, ) -> Union[int, JInt]: ...
	def getCoordinate(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def print_(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def getOutgoingDegree(self, ) -> Union[int, JInt]: ...
	@overload
	def getOutgoingDegree(self, arg0: javawrappers.org.locationtech.jts.geomgraph.EdgeRing, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDegree(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEdges(self, ) -> javawrappers.java.util.List: ...
	def findCoveredLineEdges(self, ) -> None: ...


class EdgeIntersection:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: Union[int, JInt], arg2: Union[float, JDouble], ): ...
	def getDistance(self, ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def compare(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> Union[int, JInt]: ...
	def isEndPoint(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def getSegmentIndex(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def print_(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	def getCoordinate(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class NodeFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def createNode(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.geomgraph.Node: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class EdgeEndStar:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def insert(self, arg0: javawrappers.org.locationtech.jts.geomgraph.EdgeEnd, ) -> None: ...
	def notify(self, ) -> None: ...
	def getNextCW(self, arg0: javawrappers.org.locationtech.jts.geomgraph.EdgeEnd, ) -> javawrappers.org.locationtech.jts.geomgraph.EdgeEnd: ...
	def computeLabelling(self, arg0: JArray(javawrappers.org.locationtech.jts.geomgraph.GeometryGraph, 1), ) -> None: ...
	def findIndex(self, arg0: javawrappers.org.locationtech.jts.geomgraph.EdgeEnd, ) -> Union[int, JInt]: ...
	def print_(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def getCoordinate(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDegree(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEdges(self, ) -> javawrappers.java.util.List: ...
	def isAreaLabelsConsistent(self, arg0: javawrappers.org.locationtech.jts.geomgraph.GeometryGraph, ) -> Union[int, JBoolean]: ...


class Depth:
	def __init__(self, ): ...
	@overload
	def add(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Label, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLocation(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getDepth(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def depthAtLocation(arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getDelta(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def isNull(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isNull(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def isNull(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def normalize(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setDepth(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...


class PlanarGraph:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geomgraph.NodeFactory, ): ...
	def add(self, arg0: javawrappers.org.locationtech.jts.geomgraph.EdgeEnd, ) -> None: ...
	def getEdgeIterator(self, ) -> javawrappers.java.util.Iterator: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def addNode(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Node, ) -> javawrappers.org.locationtech.jts.geomgraph.Node: ...
	@overload
	def addNode(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.geomgraph.Node: ...
	def getNodes(self, ) -> javawrappers.java.util.Collection: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def linkResultDirectedEdges(arg0: javawrappers.java.util.Collection, ) -> None: ...
	@overload
	def linkResultDirectedEdges(self, ) -> None: ...
	def findEdge(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.geomgraph.Edge: ...
	def findEdgeEnd(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Edge, ) -> javawrappers.org.locationtech.jts.geomgraph.EdgeEnd: ...
	def notify(self, ) -> None: ...
	def getNodeIterator(self, ) -> javawrappers.java.util.Iterator: ...
	def findEdgeInSameDirection(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.geomgraph.Edge: ...
	def linkAllDirectedEdges(self, ) -> None: ...
	def addEdges(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def find(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.geomgraph.Node: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getEdgeEnds(self, ) -> javawrappers.java.util.Collection: ...
	def printEdges(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isBoundaryNode(self, arg0: Union[int, JInt], arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[int, JBoolean]: ...


class EdgeList:
	def __init__(self, ): ...
	def add(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Edge, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def print_(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geomgraph.Edge: ...
	def findEqualEdge(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Edge, ) -> javawrappers.org.locationtech.jts.geomgraph.Edge: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEdges(self, ) -> javawrappers.java.util.List: ...
	def findEdgeIndex(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Edge, ) -> Union[int, JInt]: ...


class NodeMap:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geomgraph.NodeFactory, ): ...
	def add(self, arg0: javawrappers.org.locationtech.jts.geomgraph.EdgeEnd, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getBoundaryNodes(self, arg0: Union[int, JInt], ) -> javawrappers.java.util.Collection: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def addNode(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Node, ) -> javawrappers.org.locationtech.jts.geomgraph.Node: ...
	@overload
	def addNode(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.geomgraph.Node: ...
	def notifyAll(self, ) -> None: ...
	def values(self, ) -> javawrappers.java.util.Collection: ...
	def notify(self, ) -> None: ...
	def print_(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def find(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.geomgraph.Node: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class GeometryGraph:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.org.locationtech.jts.geom.Geometry, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.org.locationtech.jts.geom.Geometry, arg2: javawrappers.org.locationtech.jts.algorithm.BoundaryNodeRule, ): ...
	def getEdgeIterator(self, ) -> javawrappers.java.util.Iterator: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getBoundaryNodes(self, ) -> javawrappers.java.util.Collection: ...
	def getBoundaryNodeRule(self, ) -> javawrappers.org.locationtech.jts.algorithm.BoundaryNodeRule: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def computeSelfNodes(self, arg0: javawrappers.org.locationtech.jts.algorithm.LineIntersector, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ) -> javawrappers.org.locationtech.jts.geomgraph.index.SegmentIntersector: ...
	@overload
	def computeSelfNodes(self, arg0: javawrappers.org.locationtech.jts.algorithm.LineIntersector, arg1: Union[int, JBoolean], ) -> javawrappers.org.locationtech.jts.geomgraph.index.SegmentIntersector: ...
	@overload
	def addNode(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Node, ) -> javawrappers.org.locationtech.jts.geomgraph.Node: ...
	@overload
	def addNode(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.geomgraph.Node: ...
	def locate(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[int, JInt]: ...
	def getInvalidPoint(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def linkResultDirectedEdges(arg0: javawrappers.java.util.Collection, ) -> None: ...
	@overload
	def linkResultDirectedEdges(self, ) -> None: ...
	def getGeometry(self, ) -> javawrappers.org.locationtech.jts.geom.Geometry: ...
	def findEdgeEnd(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Edge, ) -> javawrappers.org.locationtech.jts.geomgraph.EdgeEnd: ...
	def notify(self, ) -> None: ...
	def linkAllDirectedEdges(self, ) -> None: ...
	def addEdges(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def computeEdgeIntersections(self, arg0: javawrappers.org.locationtech.jts.geomgraph.GeometryGraph, arg1: javawrappers.org.locationtech.jts.algorithm.LineIntersector, arg2: Union[int, JBoolean], ) -> javawrappers.org.locationtech.jts.geomgraph.index.SegmentIntersector: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def find(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.geomgraph.Node: ...
	def getEdgeEnds(self, ) -> javawrappers.java.util.Collection: ...
	def hasTooFewPoints(self, ) -> Union[int, JBoolean]: ...
	def isBoundaryNode(self, arg0: Union[int, JInt], arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[int, JBoolean]: ...
	def add(self, arg0: javawrappers.org.locationtech.jts.geomgraph.EdgeEnd, ) -> None: ...
	def getNodes(self, ) -> javawrappers.java.util.Collection: ...
	def getBoundaryPoints(self, ) -> JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1): ...
	def computeSplitEdges(self, arg0: javawrappers.java.util.List, ) -> None: ...
	@overload
	def findEdge(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.geomgraph.Edge: ...
	@overload
	def findEdge(self, arg0: javawrappers.org.locationtech.jts.geom.LineString, ) -> javawrappers.org.locationtech.jts.geomgraph.Edge: ...
	@staticmethod
	def determineBoundary(arg0: javawrappers.org.locationtech.jts.algorithm.BoundaryNodeRule, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def addPoint(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> None: ...
	def getNodeIterator(self, ) -> javawrappers.java.util.Iterator: ...
	def findEdgeInSameDirection(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> javawrappers.org.locationtech.jts.geomgraph.Edge: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def printEdges(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def addEdge(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Edge, ) -> None: ...


class Node:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, arg1: javawrappers.org.locationtech.jts.geomgraph.EdgeEndStar, ): ...
	def add(self, arg0: javawrappers.org.locationtech.jts.geomgraph.EdgeEnd, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLabel(self, ) -> javawrappers.org.locationtech.jts.geomgraph.Label: ...
	def isVisited(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isIncidentEdgeInResult(self, ) -> Union[int, JBoolean]: ...
	def setInResult(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setLabelBoundary(self, arg0: Union[int, JInt], ) -> None: ...
	def isIsolated(self, ) -> Union[int, JBoolean]: ...
	def setCovered(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def isCoveredSet(self, ) -> Union[int, JBoolean]: ...
	def print_(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	def getCoordinate(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def updateIM(self, arg0: javawrappers.org.locationtech.jts.geom.IntersectionMatrix, ) -> None: ...
	def setVisited(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def setLabel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def setLabel(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Label, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEdges(self, ) -> javawrappers.org.locationtech.jts.geomgraph.EdgeEndStar: ...
	def isCovered(self, ) -> Union[int, JBoolean]: ...
	@overload
	def mergeLabel(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Label, ) -> None: ...
	@overload
	def mergeLabel(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Node, ) -> None: ...
	def isInResult(self, ) -> Union[int, JBoolean]: ...


class Label:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Label, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getLocation(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getLocation(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def setAllLocations(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@staticmethod
	def toLineLabel(arg0: javawrappers.org.locationtech.jts.geomgraph.Label, ) -> javawrappers.org.locationtech.jts.geomgraph.Label: ...
	def notify(self, ) -> None: ...
	def getGeometryCount(self, ) -> Union[int, JInt]: ...
	def allPositionsEqual(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def setLocation(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def setLocation(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isNull(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def merge(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Label, ) -> None: ...
	@overload
	def isArea(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isArea(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def isEqualOnSide(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Label, arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def isAnyNull(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def setAllLocationsIfNull(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def setAllLocationsIfNull(self, arg0: Union[int, JInt], ) -> None: ...
	def isLine(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def flip(self, ) -> None: ...
	def toLine(self, arg0: Union[int, JInt], ) -> None: ...


class EdgeRing:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geomgraph.DirectedEdge, arg1: javawrappers.org.locationtech.jts.geom.GeometryFactory, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLabel(self, ) -> javawrappers.org.locationtech.jts.geomgraph.Label: ...
	def addHole(self, arg0: javawrappers.org.locationtech.jts.geomgraph.EdgeRing, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isShell(self, ) -> Union[int, JBoolean]: ...
	def isHole(self, ) -> Union[int, JBoolean]: ...
	def isIsolated(self, ) -> Union[int, JBoolean]: ...
	def setInResult(self, ) -> None: ...
	def getNext(self, arg0: javawrappers.org.locationtech.jts.geomgraph.DirectedEdge, ) -> javawrappers.org.locationtech.jts.geomgraph.DirectedEdge: ...
	def notify(self, ) -> None: ...
	def getMaxNodeDegree(self, ) -> Union[int, JInt]: ...
	def getCoordinate(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def getLinearRing(self, ) -> javawrappers.org.locationtech.jts.geom.LinearRing: ...
	def toPolygon(self, arg0: javawrappers.org.locationtech.jts.geom.GeometryFactory, ) -> javawrappers.org.locationtech.jts.geom.Polygon: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def computeRing(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getShell(self, ) -> javawrappers.org.locationtech.jts.geomgraph.EdgeRing: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEdges(self, ) -> javawrappers.java.util.List: ...
	def containsPoint(self, arg0: javawrappers.org.locationtech.jts.geom.Coordinate, ) -> Union[int, JBoolean]: ...
	def setEdgeRing(self, arg0: javawrappers.org.locationtech.jts.geomgraph.DirectedEdge, arg1: javawrappers.org.locationtech.jts.geomgraph.EdgeRing, ) -> None: ...
	def setShell(self, arg0: javawrappers.org.locationtech.jts.geomgraph.EdgeRing, ) -> None: ...


class Edge:
	@overload
	def __init__(self, arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), arg1: javawrappers.org.locationtech.jts.geomgraph.Label, ): ...
	@overload
	def __init__(self, arg0: JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1), ): ...
	def setName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLabel(self, ) -> javawrappers.org.locationtech.jts.geomgraph.Label: ...
	def getDepth(self, ) -> javawrappers.org.locationtech.jts.geomgraph.Depth: ...
	def isCollapsed(self, ) -> Union[int, JBoolean]: ...
	def getNumPoints(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def getDepthDelta(self, ) -> Union[int, JInt]: ...
	def addIntersections(self, arg0: javawrappers.org.locationtech.jts.algorithm.LineIntersector, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def setCovered(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getMonotoneChainEdge(self, ) -> javawrappers.org.locationtech.jts.geomgraph.index.MonotoneChainEdge: ...
	def getEdgeIntersectionList(self, ) -> javawrappers.org.locationtech.jts.geomgraph.EdgeIntersectionList: ...
	def notify(self, ) -> None: ...
	def isCoveredSet(self, ) -> Union[int, JBoolean]: ...
	def printReverse(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	def getMaximumSegmentIndex(self, ) -> Union[int, JInt]: ...
	def addIntersection(self, arg0: javawrappers.org.locationtech.jts.algorithm.LineIntersector, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getCollapsedEdge(self, ) -> javawrappers.org.locationtech.jts.geomgraph.Edge: ...
	def isCovered(self, ) -> Union[int, JBoolean]: ...
	def isInResult(self, ) -> Union[int, JBoolean]: ...
	def isVisited(self, ) -> Union[int, JBoolean]: ...
	def setDepthDelta(self, arg0: Union[int, JInt], ) -> None: ...
	def setInResult(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isIsolated(self, ) -> Union[int, JBoolean]: ...
	def getCoordinates(self, ) -> JArray(javawrappers.org.locationtech.jts.geom.Coordinate, 1): ...
	def print_(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def getCoordinate(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	@overload
	def getCoordinate(self, arg0: Union[int, JInt], ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def isClosed(self, ) -> Union[int, JBoolean]: ...
	def isPointwiseEqual(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Edge, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setVisited(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	@staticmethod
	def updateIM(arg0: javawrappers.org.locationtech.jts.geomgraph.Label, arg1: javawrappers.org.locationtech.jts.geom.IntersectionMatrix, ) -> None: ...
	@overload
	def updateIM(self, arg0: javawrappers.org.locationtech.jts.geom.IntersectionMatrix, ) -> None: ...
	def setLabel(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Label, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEnvelope(self, ) -> javawrappers.org.locationtech.jts.geom.Envelope: ...
	def computeIM(self, arg0: javawrappers.org.locationtech.jts.geom.IntersectionMatrix, ) -> None: ...
	def setIsolated(self, arg0: Union[int, JBoolean], ) -> None: ...


class GraphComponent:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Label, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLabel(self, ) -> javawrappers.org.locationtech.jts.geomgraph.Label: ...
	def isVisited(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isIsolated(self, ) -> Union[int, JBoolean]: ...
	def setInResult(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setCovered(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def isCoveredSet(self, ) -> Union[int, JBoolean]: ...
	def getCoordinate(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def updateIM(self, arg0: javawrappers.org.locationtech.jts.geom.IntersectionMatrix, ) -> None: ...
	def setVisited(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setLabel(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Label, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isCovered(self, ) -> Union[int, JBoolean]: ...
	def isInResult(self, ) -> Union[int, JBoolean]: ...


class DirectedEdge:
	def __init__(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Edge, arg1: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setMinEdgeRing(self, arg0: javawrappers.org.locationtech.jts.geomgraph.EdgeRing, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLabel(self, ) -> javawrappers.org.locationtech.jts.geomgraph.Label: ...
	def getDepth(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getQuadrant(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def getDepthDelta(self, ) -> Union[int, JInt]: ...
	def setSym(self, arg0: javawrappers.org.locationtech.jts.geomgraph.DirectedEdge, ) -> None: ...
	def setNode(self, arg0: javawrappers.org.locationtech.jts.geomgraph.Node, ) -> None: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def setNextMin(self, arg0: javawrappers.org.locationtech.jts.geomgraph.DirectedEdge, ) -> None: ...
	def getNextMin(self, ) -> javawrappers.org.locationtech.jts.geomgraph.DirectedEdge: ...
	def getEdge(self, ) -> javawrappers.org.locationtech.jts.geomgraph.Edge: ...
	def notify(self, ) -> None: ...
	def getDy(self, ) -> Union[float, JDouble]: ...
	def getDx(self, ) -> Union[float, JDouble]: ...
	def getDirectedCoordinate(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def isLineEdge(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def printEdge(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	def getSym(self, ) -> javawrappers.org.locationtech.jts.geomgraph.DirectedEdge: ...
	def compareDirection(self, arg0: javawrappers.org.locationtech.jts.geomgraph.EdgeEnd, ) -> Union[int, JInt]: ...
	def getEdgeRing(self, ) -> javawrappers.org.locationtech.jts.geomgraph.EdgeRing: ...
	def setDepth(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def getMinEdgeRing(self, ) -> javawrappers.org.locationtech.jts.geomgraph.EdgeRing: ...
	def setEdgeRing(self, arg0: javawrappers.org.locationtech.jts.geomgraph.EdgeRing, ) -> None: ...
	def isInResult(self, ) -> Union[int, JBoolean]: ...
	def isVisited(self, ) -> Union[int, JBoolean]: ...
	def setVisitedEdge(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setInResult(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getNext(self, ) -> javawrappers.org.locationtech.jts.geomgraph.DirectedEdge: ...
	def isForward(self, ) -> Union[int, JBoolean]: ...
	def getCoordinate(self, ) -> javawrappers.org.locationtech.jts.geom.Coordinate: ...
	def print_(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isInteriorAreaEdge(self, ) -> Union[int, JBoolean]: ...
	def setVisited(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setNext(self, arg0: javawrappers.org.locationtech.jts.geomgraph.DirectedEdge, ) -> None: ...
	def computeLabel(self, arg0: javawrappers.org.locationtech.jts.algorithm.BoundaryNodeRule, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setEdgeDepths(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def getNode(self, ) -> javawrappers.org.locationtech.jts.geomgraph.Node: ...
	@staticmethod
	def depthFactor(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...


class Position:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def opposite(arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


