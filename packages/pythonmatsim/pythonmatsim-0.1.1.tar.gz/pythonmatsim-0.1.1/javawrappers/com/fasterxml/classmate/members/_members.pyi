################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang.reflect
import javawrappers.java.lang
import javawrappers.com.fasterxml.classmate.members
import javawrappers.com.fasterxml.classmate
import javawrappers.java.lang.annotation
import javawrappers.com.fasterxml.classmate.util

from jpype.types import *
from typing import Union

from typing import overload

class ResolvedConstructor:
	def __init__(self, arg0: javawrappers.com.fasterxml.classmate.ResolvedType, arg1: javawrappers.com.fasterxml.classmate.Annotations, arg2: javawrappers.java.lang.reflect.Constructor, arg3: JArray(javawrappers.com.fasterxml.classmate.ResolvedType, 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isStatic(self, ) -> Union[int, JBoolean]: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def applyParamOverrides(self, arg0: Union[int, JInt], arg1: javawrappers.com.fasterxml.classmate.Annotations, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getRawMember(self, ) -> javawrappers.java.lang.reflect.Member: ...
	def isPrivate(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def isProtected(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def isPublic(self, ) -> Union[int, JBoolean]: ...
	def isFinal(self, ) -> Union[int, JBoolean]: ...
	def applyOverrides(self, arg0: javawrappers.com.fasterxml.classmate.Annotations, ) -> None: ...
	def getParam(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def applyParamDefault(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.annotation.Annotation, ) -> None: ...
	def applyParamOverride(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.annotation.Annotation, ) -> None: ...
	def applyDefault(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> None: ...
	def applyOverride(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> None: ...
	def getAnnotations(self, ) -> javawrappers.com.fasterxml.classmate.Annotations: ...
	def getArgumentType(self, arg0: Union[int, JInt], ) -> javawrappers.com.fasterxml.classmate.ResolvedType: ...
	def getArgumentCount(self, ) -> Union[int, JInt]: ...
	def getType(self, ) -> javawrappers.com.fasterxml.classmate.ResolvedType: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDeclaringType(self, ) -> javawrappers.com.fasterxml.classmate.ResolvedType: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getParameterAnnotations(self, arg0: Union[int, JInt], ) -> javawrappers.com.fasterxml.classmate.Annotations: ...


class HierarchicType:
	def __init__(self, arg0: javawrappers.com.fasterxml.classmate.ResolvedType, arg1: Union[int, JBoolean], arg2: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getType(self, ) -> javawrappers.com.fasterxml.classmate.ResolvedType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPriority(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getErasedType(self, ) -> javawrappers.java.lang.Class: ...
	def isMixin(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class ResolvedField:
	def __init__(self, arg0: javawrappers.com.fasterxml.classmate.ResolvedType, arg1: javawrappers.com.fasterxml.classmate.Annotations, arg2: javawrappers.java.lang.reflect.Field, arg3: javawrappers.com.fasterxml.classmate.ResolvedType, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isStatic(self, ) -> Union[int, JBoolean]: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def isVolatile(self, ) -> Union[int, JBoolean]: ...
	def getRawMember(self, ) -> javawrappers.java.lang.reflect.Member: ...
	def isPrivate(self, ) -> Union[int, JBoolean]: ...
	def applyDefault(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> None: ...
	def applyOverride(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.com.fasterxml.classmate.members.ResolvedField, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def getAnnotations(self, ) -> javawrappers.com.fasterxml.classmate.Annotations: ...
	def notify(self, ) -> None: ...
	def isProtected(self, ) -> Union[int, JBoolean]: ...
	def getType(self, ) -> javawrappers.com.fasterxml.classmate.ResolvedType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def getDeclaringType(self, ) -> javawrappers.com.fasterxml.classmate.ResolvedType: ...
	def isPublic(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isFinal(self, ) -> Union[int, JBoolean]: ...
	def isTransient(self, ) -> Union[int, JBoolean]: ...
	def applyOverrides(self, arg0: javawrappers.com.fasterxml.classmate.Annotations, ) -> None: ...


class RawConstructor:
	def __init__(self, arg0: javawrappers.com.fasterxml.classmate.ResolvedType, arg1: javawrappers.java.lang.reflect.Constructor, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isStatic(self, ) -> Union[int, JBoolean]: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getRawMember(self, ) -> javawrappers.java.lang.reflect.Constructor: ...
	@overload
	def getRawMember(self, ) -> javawrappers.java.lang.reflect.Member: ...
	def createKey(self, ) -> javawrappers.com.fasterxml.classmate.util.MethodKey: ...
	def isPrivate(self, ) -> Union[int, JBoolean]: ...
	def getAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def notify(self, ) -> None: ...
	def isProtected(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getDeclaringType(self, ) -> javawrappers.com.fasterxml.classmate.ResolvedType: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isPublic(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isFinal(self, ) -> Union[int, JBoolean]: ...


class RawField:
	def __init__(self, arg0: javawrappers.com.fasterxml.classmate.ResolvedType, arg1: javawrappers.java.lang.reflect.Field, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isStatic(self, ) -> Union[int, JBoolean]: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def isVolatile(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getRawMember(self, ) -> javawrappers.java.lang.reflect.Member: ...
	@overload
	def getRawMember(self, ) -> javawrappers.java.lang.reflect.Field: ...
	def isPrivate(self, ) -> Union[int, JBoolean]: ...
	def getAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def notify(self, ) -> None: ...
	def isProtected(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getDeclaringType(self, ) -> javawrappers.com.fasterxml.classmate.ResolvedType: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isPublic(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isFinal(self, ) -> Union[int, JBoolean]: ...
	def isTransient(self, ) -> Union[int, JBoolean]: ...


class ResolvedMember:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isStatic(self, ) -> Union[int, JBoolean]: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getRawMember(self, ) -> javawrappers.java.lang.reflect.Member: ...
	def isPrivate(self, ) -> Union[int, JBoolean]: ...
	def applyDefault(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> None: ...
	def applyOverride(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> None: ...
	def getAnnotations(self, ) -> javawrappers.com.fasterxml.classmate.Annotations: ...
	def notify(self, ) -> None: ...
	def isProtected(self, ) -> Union[int, JBoolean]: ...
	def getType(self, ) -> javawrappers.com.fasterxml.classmate.ResolvedType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def getDeclaringType(self, ) -> javawrappers.com.fasterxml.classmate.ResolvedType: ...
	def isPublic(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isFinal(self, ) -> Union[int, JBoolean]: ...
	def applyOverrides(self, arg0: javawrappers.com.fasterxml.classmate.Annotations, ) -> None: ...


class ResolvedParameterizedMember:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isStatic(self, ) -> Union[int, JBoolean]: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def applyParamOverrides(self, arg0: Union[int, JInt], arg1: javawrappers.com.fasterxml.classmate.Annotations, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getRawMember(self, ) -> javawrappers.java.lang.reflect.Member: ...
	def isPrivate(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def isProtected(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def isPublic(self, ) -> Union[int, JBoolean]: ...
	def isFinal(self, ) -> Union[int, JBoolean]: ...
	def applyOverrides(self, arg0: javawrappers.com.fasterxml.classmate.Annotations, ) -> None: ...
	def getParam(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def applyParamDefault(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.annotation.Annotation, ) -> None: ...
	def applyParamOverride(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.annotation.Annotation, ) -> None: ...
	def applyDefault(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> None: ...
	def applyOverride(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> None: ...
	def getAnnotations(self, ) -> javawrappers.com.fasterxml.classmate.Annotations: ...
	def getArgumentType(self, arg0: Union[int, JInt], ) -> javawrappers.com.fasterxml.classmate.ResolvedType: ...
	def getArgumentCount(self, ) -> Union[int, JInt]: ...
	def getType(self, ) -> javawrappers.com.fasterxml.classmate.ResolvedType: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDeclaringType(self, ) -> javawrappers.com.fasterxml.classmate.ResolvedType: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getParameterAnnotations(self, arg0: Union[int, JInt], ) -> javawrappers.com.fasterxml.classmate.Annotations: ...


class ResolvedMethod:
	def __init__(self, arg0: javawrappers.com.fasterxml.classmate.ResolvedType, arg1: javawrappers.com.fasterxml.classmate.Annotations, arg2: javawrappers.java.lang.reflect.Method, arg3: javawrappers.com.fasterxml.classmate.ResolvedType, arg4: JArray(javawrappers.com.fasterxml.classmate.ResolvedType, 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isStatic(self, ) -> Union[int, JBoolean]: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def applyParamOverrides(self, arg0: Union[int, JInt], arg1: javawrappers.com.fasterxml.classmate.Annotations, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getRawMember(self, ) -> javawrappers.java.lang.reflect.Member: ...
	def isPrivate(self, ) -> Union[int, JBoolean]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.com.fasterxml.classmate.members.ResolvedMethod, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def isNative(self, ) -> Union[int, JBoolean]: ...
	def isStrict(self, ) -> Union[int, JBoolean]: ...
	def isProtected(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def isPublic(self, ) -> Union[int, JBoolean]: ...
	def isFinal(self, ) -> Union[int, JBoolean]: ...
	def applyOverrides(self, arg0: javawrappers.com.fasterxml.classmate.Annotations, ) -> None: ...
	def getParam(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def applyParamDefault(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.annotation.Annotation, ) -> None: ...
	def applyParamOverride(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.annotation.Annotation, ) -> None: ...
	def isSynchronized(self, ) -> Union[int, JBoolean]: ...
	def applyDefault(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> None: ...
	def applyOverride(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> None: ...
	def getAnnotations(self, ) -> javawrappers.com.fasterxml.classmate.Annotations: ...
	def isAbstract(self, ) -> Union[int, JBoolean]: ...
	def getArgumentType(self, arg0: Union[int, JInt], ) -> javawrappers.com.fasterxml.classmate.ResolvedType: ...
	def getArgumentCount(self, ) -> Union[int, JInt]: ...
	def getReturnType(self, ) -> javawrappers.com.fasterxml.classmate.ResolvedType: ...
	def getType(self, ) -> javawrappers.com.fasterxml.classmate.ResolvedType: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDeclaringType(self, ) -> javawrappers.com.fasterxml.classmate.ResolvedType: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getParameterAnnotations(self, arg0: Union[int, JInt], ) -> javawrappers.com.fasterxml.classmate.Annotations: ...


class RawMember:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isStatic(self, ) -> Union[int, JBoolean]: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getRawMember(self, ) -> javawrappers.java.lang.reflect.Member: ...
	def isPrivate(self, ) -> Union[int, JBoolean]: ...
	def getAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def notify(self, ) -> None: ...
	def isProtected(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDeclaringType(self, ) -> javawrappers.com.fasterxml.classmate.ResolvedType: ...
	def isPublic(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isFinal(self, ) -> Union[int, JBoolean]: ...


class RawMethod:
	def __init__(self, arg0: javawrappers.com.fasterxml.classmate.ResolvedType, arg1: javawrappers.java.lang.reflect.Method, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isStatic(self, ) -> Union[int, JBoolean]: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getRawMember(self, ) -> javawrappers.java.lang.reflect.Member: ...
	@overload
	def getRawMember(self, ) -> javawrappers.java.lang.reflect.Method: ...
	def createKey(self, ) -> javawrappers.com.fasterxml.classmate.util.MethodKey: ...
	def isSynchronized(self, ) -> Union[int, JBoolean]: ...
	def isPrivate(self, ) -> Union[int, JBoolean]: ...
	def getAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def isAbstract(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def isNative(self, ) -> Union[int, JBoolean]: ...
	def isStrict(self, ) -> Union[int, JBoolean]: ...
	def isProtected(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getDeclaringType(self, ) -> javawrappers.com.fasterxml.classmate.ResolvedType: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isPublic(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isFinal(self, ) -> Union[int, JBoolean]: ...


