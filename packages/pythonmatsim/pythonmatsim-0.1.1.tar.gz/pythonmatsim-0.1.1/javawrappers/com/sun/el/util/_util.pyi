################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang.reflect
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.beans
import javawrappers.javax.el

from jpype.types import *
from typing import Union

from typing import overload

class MessageFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def get(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def get(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def get(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def get(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def get(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def get(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getArray(arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ReflectionUtil:
	class ConstructorWrapper:
		def __init__(self, arg0: javawrappers.java.lang.reflect.Constructor, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def isVarArgs(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getParameterTypes(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
		def isBridge(self, ) -> Union[int, JBoolean]: ...
		@overload
		@staticmethod
		def wrap(arg0: JArray(javawrappers.java.lang.reflect.Method, 1), arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.List: ...
		@overload
		@staticmethod
		def wrap(arg0: JArray(javawrappers.java.lang.reflect.Constructor, 1), ) -> javawrappers.java.util.List: ...
		def unWrap(self, ) -> javawrappers.java.lang.Object: ...
		def notify(self, ) -> None: ...


	class MethodWrapper:
		def __init__(self, arg0: javawrappers.java.lang.reflect.Method, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def isVarArgs(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getParameterTypes(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
		def isBridge(self, ) -> Union[int, JBoolean]: ...
		@overload
		@staticmethod
		def wrap(arg0: JArray(javawrappers.java.lang.reflect.Method, 1), arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.List: ...
		@overload
		@staticmethod
		def wrap(arg0: JArray(javawrappers.java.lang.reflect.Constructor, 1), ) -> javawrappers.java.util.List: ...
		def unWrap(self, ) -> javawrappers.java.lang.Object: ...
		def notify(self, ) -> None: ...


	class Wrapper:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def isVarArgs(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getParameterTypes(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
		def isBridge(self, ) -> Union[int, JBoolean]: ...
		@overload
		@staticmethod
		def wrap(arg0: JArray(javawrappers.java.lang.reflect.Method, 1), arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.List: ...
		@overload
		@staticmethod
		def wrap(arg0: JArray(javawrappers.java.lang.reflect.Constructor, 1), ) -> javawrappers.java.util.List: ...
		def unWrap(self, ) -> javawrappers.java.lang.Object: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getPropertyDescriptor(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.beans.PropertyDescriptor: ...
	@staticmethod
	def forName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
	@overload
	def isVarArgs(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isVarArgs(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isVarArgs(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getParameterTypes(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	@overload
	def getParameterTypes(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	@overload
	def getParameterTypes(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	@overload
	def isBridge(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isBridge(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isBridge(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def toTypeNameArray(arg0: JArray(javawrappers.java.lang.Class, 1), ) -> JArray(javawrappers.java.lang.String, 1): ...
	@staticmethod
	def findMethod(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: JArray(javawrappers.java.lang.Class, 1), arg3: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.reflect.Method: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def toTypeArray(arg0: JArray(javawrappers.java.lang.String, 1), ) -> JArray(javawrappers.java.lang.Class, 1): ...
	@staticmethod
	def invokeMethod(arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.reflect.Method, arg2: javawrappers.java.lang.Object, arg3: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def wrap(arg0: JArray(javawrappers.java.lang.reflect.Method, 1), arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.List: ...
	@overload
	@staticmethod
	def wrap(arg0: JArray(javawrappers.java.lang.reflect.Constructor, 1), ) -> javawrappers.java.util.List: ...
	@overload
	def unWrap(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unWrap(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unWrap(self, ) -> javawrappers.java.lang.Object: ...


