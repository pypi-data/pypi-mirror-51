################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.com.sun.el.stream
import javawrappers.java.util.function
import javawrappers.javax.el

from jpype.types import *
from typing import Union

from typing import overload

class Optional:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def orElseGet(self, arg0: javawrappers.javax.el.LambdaExpression, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, ) -> javawrappers.java.lang.Object: ...
	def ifPresent(self, arg0: javawrappers.javax.el.LambdaExpression, ) -> None: ...
	def isPresent(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def orElse(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...


class StreamELResolver:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getCommonPropertyType(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def invoke(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: JArray(javawrappers.java.lang.Class, 1), arg4: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
	def convertToType(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def getValue(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def isReadOnly(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getType(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> None: ...
	def getFeatureDescriptors(self, arg0: javawrappers.javax.el.ELContext, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Iterator: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class Stream:
	class Iterator2:
		def next(self, ) -> javawrappers.java.lang.Object: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...


	class Iterator1:
		def next(self, ) -> javawrappers.java.lang.Object: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...


	class Iterator0:
		def next(self, ) -> javawrappers.java.lang.Object: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...


	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def average(self, ) -> javawrappers.com.sun.el.stream.Optional: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def distinct(self, ) -> javawrappers.com.sun.el.stream.Stream: ...
	def sum(self, ) -> javawrappers.java.lang.Object: ...
	def findFirst(self, ) -> javawrappers.com.sun.el.stream.Optional: ...
	def toList(self, ) -> javawrappers.java.lang.Object: ...
	def allMatch(self, arg0: javawrappers.javax.el.LambdaExpression, ) -> Union[int, JBoolean]: ...
	def remove(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def min(self, arg0: javawrappers.javax.el.LambdaExpression, ) -> javawrappers.com.sun.el.stream.Optional: ...
	@overload
	def min(self, ) -> javawrappers.com.sun.el.stream.Optional: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def noneMatch(self, arg0: javawrappers.javax.el.LambdaExpression, ) -> Union[int, JBoolean]: ...
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def limit(self, arg0: Union[long, JLong], ) -> javawrappers.com.sun.el.stream.Stream: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def map(self, arg0: javawrappers.javax.el.LambdaExpression, ) -> javawrappers.com.sun.el.stream.Stream: ...
	def anyMatch(self, arg0: javawrappers.javax.el.LambdaExpression, ) -> Union[int, JBoolean]: ...
	@overload
	def substream(self, arg0: Union[long, JLong], ) -> javawrappers.com.sun.el.stream.Stream: ...
	@overload
	def substream(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.com.sun.el.stream.Stream: ...
	@overload
	def reduce(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.el.LambdaExpression, ) -> javawrappers.java.lang.Object: ...
	@overload
	def reduce(self, arg0: javawrappers.javax.el.LambdaExpression, ) -> javawrappers.com.sun.el.stream.Optional: ...
	@overload
	def max(self, arg0: javawrappers.javax.el.LambdaExpression, ) -> javawrappers.com.sun.el.stream.Optional: ...
	@overload
	def max(self, ) -> javawrappers.com.sun.el.stream.Optional: ...
	def forEach(self, arg0: javawrappers.javax.el.LambdaExpression, ) -> None: ...
	def count(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def peek(self, arg0: javawrappers.javax.el.LambdaExpression, ) -> javawrappers.com.sun.el.stream.Stream: ...
	def flatMap(self, arg0: javawrappers.javax.el.LambdaExpression, ) -> javawrappers.com.sun.el.stream.Stream: ...
	def filter(self, arg0: javawrappers.javax.el.LambdaExpression, ) -> javawrappers.com.sun.el.stream.Stream: ...
	@overload
	def sorted(self, arg0: javawrappers.javax.el.LambdaExpression, ) -> javawrappers.com.sun.el.stream.Stream: ...
	@overload
	def sorted(self, ) -> javawrappers.com.sun.el.stream.Stream: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


