################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.com.sun.xml.bind.v2.model.runtime
import javawrappers.java.lang.reflect
import javawrappers.java.util
import javawrappers.com.sun.xml.bind.v2.model.nav
import javawrappers.com.sun.xml.bind.v2.model.impl
import javawrappers.java.lang.annotation
import javawrappers.com.sun.xml.bind.v2.runtime
import javawrappers.com.sun.xml.bind.v2.model.core
import javawrappers.java.lang
import javawrappers.javax.xml.namespace
import javawrappers.java.io
import javawrappers.java.util.function
import javawrappers.com.sun.xml.bind.v2.model.annotation
import javawrappers.com.sun.xml.bind.v2.runtime.output

from jpype.types import *
from typing import Union

from typing import overload

class RuntimeModelBuilder:
	def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, arg1: javawrappers.com.sun.xml.bind.v2.model.annotation.RuntimeAnnotationReader, arg2: javawrappers.java.util.Map, arg3: javawrappers.java.lang.String, ): ...
	class IDTransducerImpl:
		def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Transducer, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def parse(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Object: ...
		def notify(self, ) -> None: ...
		def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
		def useNamespace(self, ) -> Union[int, JBoolean]: ...
		def isDefault(self, ) -> Union[int, JBoolean]: ...
		def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getTypeName(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.javax.xml.namespace.QName: ...
		def declareNamespace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...


	def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getClassInfo(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.com.sun.xml.bind.v2.model.annotation.Locatable, ) -> javawrappers.com.sun.xml.bind.v2.model.runtime.RuntimeNonElement: ...
	@overload
	def getClassInfo(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JBoolean], arg2: javawrappers.com.sun.xml.bind.v2.model.annotation.Locatable, ) -> javawrappers.com.sun.xml.bind.v2.model.core.NonElement: ...
	@overload
	def getClassInfo(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.model.annotation.Locatable, ) -> javawrappers.com.sun.xml.bind.v2.model.core.NonElement: ...
	@overload
	def getClassInfo(self, arg0: javawrappers.java.lang.Class, arg1: Union[int, JBoolean], arg2: javawrappers.com.sun.xml.bind.v2.model.annotation.Locatable, ) -> javawrappers.com.sun.xml.bind.v2.model.runtime.RuntimeNonElement: ...
	def getRegistry(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.com.sun.xml.bind.v2.model.core.RegistryInfo: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def link(self, ) -> javawrappers.com.sun.xml.bind.v2.model.runtime.RuntimeTypeInfoSet: ...
	@overload
	def link(self, ) -> javawrappers.com.sun.xml.bind.v2.model.core.TypeInfoSet: ...
	def notify(self, ) -> None: ...
	def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def createTransducer(arg0: javawrappers.com.sun.xml.bind.v2.model.runtime.RuntimeNonElementRef, ) -> javawrappers.com.sun.xml.bind.v2.runtime.Transducer: ...
	def getTypeName(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.javax.xml.namespace.QName: ...
	def declareNamespace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...
	def getReader(self, ) -> javawrappers.com.sun.xml.bind.v2.model.annotation.AnnotationReader: ...
	def reportError(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.IllegalAnnotationException, ) -> None: ...
	@overload
	def createElementInfo(self, arg0: javawrappers.com.sun.xml.bind.v2.model.impl.RegistryInfoImpl, arg1: javawrappers.java.lang.Object, ) -> javawrappers.com.sun.xml.bind.v2.model.impl.ElementInfoImpl: ...
	@overload
	def createElementInfo(self, arg0: javawrappers.com.sun.xml.bind.v2.model.impl.RegistryInfoImpl, arg1: javawrappers.java.lang.reflect.Method, ) -> javawrappers.com.sun.xml.bind.v2.model.impl.RuntimeElementInfoImpl: ...
	def parse(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Object: ...
	def isReplaced(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNavigator(self, ) -> javawrappers.com.sun.xml.bind.v2.model.nav.Navigator: ...
	def useNamespace(self, ) -> Union[int, JBoolean]: ...
	def isDefault(self, ) -> Union[int, JBoolean]: ...
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
	@overload
	def createArrayInfo(self, arg0: javawrappers.com.sun.xml.bind.v2.model.annotation.Locatable, arg1: javawrappers.java.lang.reflect.Type, ) -> javawrappers.com.sun.xml.bind.v2.model.impl.RuntimeArrayInfoImpl: ...
	@overload
	def createArrayInfo(self, arg0: javawrappers.com.sun.xml.bind.v2.model.annotation.Locatable, arg1: javawrappers.java.lang.Object, ) -> javawrappers.com.sun.xml.bind.v2.model.impl.ArrayInfoImpl: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def addRegistry(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.model.annotation.Locatable, ) -> javawrappers.com.sun.xml.bind.v2.model.core.RegistryInfo: ...
	def setErrorHandler(self, arg0: javawrappers.com.sun.xml.bind.v2.model.core.ErrorHandler, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getTypeInfo(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.model.annotation.Locatable, ) -> javawrappers.com.sun.xml.bind.v2.model.core.NonElement: ...
	@overload
	def getTypeInfo(self, arg0: javawrappers.com.sun.xml.bind.v2.model.core.Ref, ) -> javawrappers.com.sun.xml.bind.v2.model.core.NonElement: ...


class RuntimeBuiltinLeafInfoImpl:
	class StringImplImpl:
		def __init__(self, arg0: javawrappers.java.lang.Class, arg1: JArray(javawrappers.javax.xml.namespace.QName, 1), ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def isSimpleType(self, ) -> Union[int, JBoolean]: ...
		@overload
		def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getLocation(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.Location: ...
		def getUpstream(self, ) -> javawrappers.com.sun.xml.bind.v2.model.annotation.Locatable: ...
		@staticmethod
		def createLeaves(arg0: javawrappers.com.sun.xml.bind.v2.model.nav.Navigator, ) -> javawrappers.java.util.Map: ...
		def notifyAll(self, ) -> None: ...
		def canBeReferencedByIDREF(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def getElementName(self, ) -> javawrappers.javax.xml.namespace.QName: ...
		@overload
		def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
		def getTypeNames(self, ) -> JArray(javawrappers.javax.xml.namespace.QName, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def asElement(self, ) -> javawrappers.com.sun.xml.bind.v2.model.core.Element: ...
		def getTransducer(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.Transducer: ...
		@overload
		def getTypeName(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.javax.xml.namespace.QName: ...
		@overload
		def getTypeName(self, ) -> javawrappers.javax.xml.namespace.QName: ...
		def declareNamespace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...
		def getClazz(self, ) -> javawrappers.java.lang.Class: ...
		def isElement(self, ) -> Union[int, JBoolean]: ...
		@overload
		def parse(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Object: ...
		@overload
		def parse(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.String: ...
		def useNamespace(self, ) -> Union[int, JBoolean]: ...
		def isDefault(self, ) -> Union[int, JBoolean]: ...
		@overload
		def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
		@overload
		def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
		@overload
		def print_(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
		def getType(self, ) -> javawrappers.java.lang.Object: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	class UUIDImpl:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def isSimpleType(self, ) -> Union[int, JBoolean]: ...
		def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getLocation(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.Location: ...
		def getUpstream(self, ) -> javawrappers.com.sun.xml.bind.v2.model.annotation.Locatable: ...
		@staticmethod
		def createLeaves(arg0: javawrappers.com.sun.xml.bind.v2.model.nav.Navigator, ) -> javawrappers.java.util.Map: ...
		def notifyAll(self, ) -> None: ...
		def canBeReferencedByIDREF(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def getElementName(self, ) -> javawrappers.javax.xml.namespace.QName: ...
		def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
		def getTypeNames(self, ) -> JArray(javawrappers.javax.xml.namespace.QName, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def asElement(self, ) -> javawrappers.com.sun.xml.bind.v2.model.core.Element: ...
		def getTransducer(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.Transducer: ...
		@overload
		def getTypeName(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.javax.xml.namespace.QName: ...
		@overload
		def getTypeName(self, ) -> javawrappers.javax.xml.namespace.QName: ...
		def declareNamespace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...
		def getClazz(self, ) -> javawrappers.java.lang.Class: ...
		def isElement(self, ) -> Union[int, JBoolean]: ...
		@overload
		def parse(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Object: ...
		@overload
		def parse(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.util.UUID: ...
		def useNamespace(self, ) -> Union[int, JBoolean]: ...
		def isDefault(self, ) -> Union[int, JBoolean]: ...
		@overload
		def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
		@overload
		def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
		@overload
		def print_(self, arg0: javawrappers.java.util.UUID, ) -> javawrappers.java.lang.String: ...
		def getType(self, ) -> javawrappers.java.lang.Object: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	class PcdataImpl:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def isSimpleType(self, ) -> Union[int, JBoolean]: ...
		def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getLocation(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.Location: ...
		def getUpstream(self, ) -> javawrappers.com.sun.xml.bind.v2.model.annotation.Locatable: ...
		@staticmethod
		def createLeaves(arg0: javawrappers.com.sun.xml.bind.v2.model.nav.Navigator, ) -> javawrappers.java.util.Map: ...
		def notifyAll(self, ) -> None: ...
		def canBeReferencedByIDREF(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def getElementName(self, ) -> javawrappers.javax.xml.namespace.QName: ...
		def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
		def getTypeNames(self, ) -> JArray(javawrappers.javax.xml.namespace.QName, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def asElement(self, ) -> javawrappers.com.sun.xml.bind.v2.model.core.Element: ...
		def getTransducer(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.Transducer: ...
		@overload
		def getTypeName(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.javax.xml.namespace.QName: ...
		@overload
		def getTypeName(self, ) -> javawrappers.javax.xml.namespace.QName: ...
		def declareNamespace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...
		def getClazz(self, ) -> javawrappers.java.lang.Class: ...
		def isElement(self, ) -> Union[int, JBoolean]: ...
		def parse(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Object: ...
		def useNamespace(self, ) -> Union[int, JBoolean]: ...
		def isDefault(self, ) -> Union[int, JBoolean]: ...
		@overload
		def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.sun.xml.bind.v2.runtime.output.Pcdata: ...
		@overload
		def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
		def getType(self, ) -> javawrappers.java.lang.Object: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	class StringImpl:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def isSimpleType(self, ) -> Union[int, JBoolean]: ...
		def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getLocation(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.Location: ...
		def getUpstream(self, ) -> javawrappers.com.sun.xml.bind.v2.model.annotation.Locatable: ...
		@staticmethod
		def createLeaves(arg0: javawrappers.com.sun.xml.bind.v2.model.nav.Navigator, ) -> javawrappers.java.util.Map: ...
		def notifyAll(self, ) -> None: ...
		def canBeReferencedByIDREF(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def getElementName(self, ) -> javawrappers.javax.xml.namespace.QName: ...
		def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
		def getTypeNames(self, ) -> JArray(javawrappers.javax.xml.namespace.QName, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def asElement(self, ) -> javawrappers.com.sun.xml.bind.v2.model.core.Element: ...
		def getTransducer(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.Transducer: ...
		@overload
		def getTypeName(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.javax.xml.namespace.QName: ...
		@overload
		def getTypeName(self, ) -> javawrappers.javax.xml.namespace.QName: ...
		def declareNamespace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...
		def getClazz(self, ) -> javawrappers.java.lang.Class: ...
		def isElement(self, ) -> Union[int, JBoolean]: ...
		def parse(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Object: ...
		def useNamespace(self, ) -> Union[int, JBoolean]: ...
		def isDefault(self, ) -> Union[int, JBoolean]: ...
		@overload
		def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
		@overload
		def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
		def getType(self, ) -> javawrappers.java.lang.Object: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	@overload
	def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeText(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.String, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isSimpleType(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLocation(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.Location: ...
	def getUpstream(self, ) -> javawrappers.com.sun.xml.bind.v2.model.annotation.Locatable: ...
	@staticmethod
	def createLeaves(arg0: javawrappers.com.sun.xml.bind.v2.model.nav.Navigator, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	def canBeReferencedByIDREF(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@overload
	def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeLeafElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, arg1: javawrappers.com.sun.xml.bind.v2.runtime.Name, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.String, ) -> None: ...
	def getElementName(self, ) -> javawrappers.javax.xml.namespace.QName: ...
	def getTypeNames(self, ) -> JArray(javawrappers.javax.xml.namespace.QName, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def asElement(self, ) -> javawrappers.com.sun.xml.bind.v2.model.core.Element: ...
	def getTransducer(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.Transducer: ...
	@overload
	def getTypeName(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.javax.xml.namespace.QName: ...
	@overload
	def getTypeName(self, ) -> javawrappers.javax.xml.namespace.QName: ...
	def declareNamespace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.runtime.XMLSerializer, ) -> None: ...
	def getClazz(self, ) -> javawrappers.java.lang.Class: ...
	def isElement(self, ) -> Union[int, JBoolean]: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Object: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Object: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.util.UUID: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Object: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.String: ...
	def useNamespace(self, ) -> Union[int, JBoolean]: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.sun.xml.bind.v2.runtime.output.Pcdata: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def print_(self, arg0: javawrappers.java.util.UUID, ) -> javawrappers.java.lang.String: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.CharSequence: ...
	def isDefault(self, ) -> Union[int, JBoolean]: ...
	def getType(self, ) -> javawrappers.java.lang.Object: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class ModelBuilder:
	def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.model.annotation.AnnotationReader, arg1: javawrappers.com.sun.xml.bind.v2.model.nav.Navigator, arg2: javawrappers.java.util.Map, arg3: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getClassInfo(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JBoolean], arg2: javawrappers.com.sun.xml.bind.v2.model.annotation.Locatable, ) -> javawrappers.com.sun.xml.bind.v2.model.core.NonElement: ...
	@overload
	def getClassInfo(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.model.annotation.Locatable, ) -> javawrappers.com.sun.xml.bind.v2.model.core.NonElement: ...
	def getRegistry(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.com.sun.xml.bind.v2.model.core.RegistryInfo: ...
	def getReader(self, ) -> javawrappers.com.sun.xml.bind.v2.model.annotation.AnnotationReader: ...
	def notifyAll(self, ) -> None: ...
	def link(self, ) -> javawrappers.com.sun.xml.bind.v2.model.core.TypeInfoSet: ...
	def reportError(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.IllegalAnnotationException, ) -> None: ...
	def isReplaced(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNavigator(self, ) -> javawrappers.com.sun.xml.bind.v2.model.nav.Navigator: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def addRegistry(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.model.annotation.Locatable, ) -> javawrappers.com.sun.xml.bind.v2.model.core.RegistryInfo: ...
	def setErrorHandler(self, arg0: javawrappers.com.sun.xml.bind.v2.model.core.ErrorHandler, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getTypeInfo(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.com.sun.xml.bind.v2.model.annotation.Locatable, ) -> javawrappers.com.sun.xml.bind.v2.model.core.NonElement: ...
	@overload
	def getTypeInfo(self, arg0: javawrappers.com.sun.xml.bind.v2.model.core.Ref, ) -> javawrappers.com.sun.xml.bind.v2.model.core.NonElement: ...


class ClassInfoImpl:
	class PropertyGroup:
		TRANSIENT: ClassInfoImpl.PropertyGroup = ...
		ANY_ATTRIBUTE: ClassInfoImpl.PropertyGroup = ...
		ATTRIBUTE: ClassInfoImpl.PropertyGroup = ...
		VALUE: ClassInfoImpl.PropertyGroup = ...
		ELEMENT: ClassInfoImpl.PropertyGroup = ...
		ELEMENT_REF: ClassInfoImpl.PropertyGroup = ...
		MAP: ClassInfoImpl.PropertyGroup = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.sun.xml.bind.v2.model.impl.ClassInfoImpl.PropertyGroup: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.com.sun.xml.bind.v2.model.impl.ClassInfoImpl.PropertyGroup, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class SecondaryAnnotation:
		JAVA_TYPE: ClassInfoImpl.SecondaryAnnotation = ...
		ID_IDREF: ClassInfoImpl.SecondaryAnnotation = ...
		BINARY: ClassInfoImpl.SecondaryAnnotation = ...
		ELEMENT_WRAPPER: ClassInfoImpl.SecondaryAnnotation = ...
		LIST: ClassInfoImpl.SecondaryAnnotation = ...
		SCHEMA_TYPE: ClassInfoImpl.SecondaryAnnotation = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.sun.xml.bind.v2.model.impl.ClassInfoImpl.SecondaryAnnotation: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.com.sun.xml.bind.v2.model.impl.ClassInfoImpl.SecondaryAnnotation, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class DuplicateException:
		def __init__(self, arg0: javawrappers.java.lang.annotation.Annotation, arg1: javawrappers.java.lang.annotation.Annotation, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
		@overload
		def printStackTrace(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
		def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
		def getMessage(self, ) -> javawrappers.java.lang.String: ...
		def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
		def notify(self, ) -> None: ...
		def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
		def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


	class ConflictException:
		def __init__(self, arg0: javawrappers.java.util.List, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
		@overload
		def printStackTrace(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
		def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
		def getMessage(self, ) -> javawrappers.java.lang.String: ...
		def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
		def notify(self, ) -> None: ...
		def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
		def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


	class PropertySorter:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compare(self, arg0: javawrappers.com.sun.xml.bind.v2.model.impl.PropertyInfoImpl, arg1: javawrappers.com.sun.xml.bind.v2.model.impl.PropertyInfoImpl, ) -> Union[int, JInt]: ...
		def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
		def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
		def notifyAll(self, ) -> None: ...
		def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
		def values(self, ) -> javawrappers.java.util.Collection: ...
		@overload
		def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
		def notify(self, ) -> None: ...
		def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		def checkUnusedProperties(self, ) -> None: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
		def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def keySet(self, ) -> javawrappers.java.util.Set: ...
		def entrySet(self, ) -> javawrappers.java.util.Set: ...
		def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
		def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		def size(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def reversed(self, ) -> javawrappers.java.util.Comparator: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getLocation(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.Location: ...
	def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getUpstream(self, ) -> javawrappers.com.sun.xml.bind.v2.model.annotation.Locatable: ...
	def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def hasProperties(self, ) -> Union[int, JBoolean]: ...
	def declaresAttributeWildcard(self, ) -> Union[int, JBoolean]: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getElementName(self, ) -> javawrappers.javax.xml.namespace.QName: ...
	def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def inheritsAttributeWildcard(self, ) -> Union[int, JBoolean]: ...
	def isOrdered(self, ) -> Union[int, JBoolean]: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def entrySet(self, ) -> javawrappers.java.util.Set: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isElement(self, ) -> Union[int, JBoolean]: ...
	def getProperties(self, ) -> javawrappers.java.util.List: ...
	def hasAttributeWildcard(self, ) -> Union[int, JBoolean]: ...
	def getSubstitutionHead(self, ) -> javawrappers.com.sun.xml.bind.v2.model.core.Element: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def hasSubClasses(self, ) -> Union[int, JBoolean]: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def getType(self, ) -> javawrappers.java.lang.Object: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getScope(self, ) -> javawrappers.com.sun.xml.bind.v2.model.impl.ClassInfoImpl: ...
	@overload
	def getScope(self, ) -> javawrappers.com.sun.xml.bind.v2.model.core.ClassInfo: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...
	def isSimpleType(self, ) -> Union[int, JBoolean]: ...
	@overload
	def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compare(self, arg0: javawrappers.com.sun.xml.bind.v2.model.impl.PropertyInfoImpl, arg1: javawrappers.com.sun.xml.bind.v2.model.impl.PropertyInfoImpl, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.com.sun.xml.bind.v2.model.impl.ClassInfoImpl.PropertyGroup, 1): ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.com.sun.xml.bind.v2.model.impl.ClassInfoImpl.SecondaryAnnotation, 1): ...
	@overload
	def values(self, ) -> javawrappers.java.util.Collection: ...
	def notifyAll(self, ) -> None: ...
	def canBeReferencedByIDREF(self, ) -> Union[int, JBoolean]: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def checkUnusedProperties(self, ) -> None: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def readAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def asElement(self, ) -> javawrappers.com.sun.xml.bind.v2.model.core.Element: ...
	def isFinal(self, ) -> Union[int, JBoolean]: ...
	def getTypeName(self, ) -> javawrappers.javax.xml.namespace.QName: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getFactoryMethod(self, ) -> javawrappers.java.lang.reflect.Method: ...
	def getClazz(self, ) -> javawrappers.java.lang.Object: ...
	def hasValueProperty(self, ) -> Union[int, JBoolean]: ...
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.com.sun.xml.bind.v2.model.core.PropertyInfo: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.sun.xml.bind.v2.model.impl.ClassInfoImpl.PropertyGroup: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.sun.xml.bind.v2.model.impl.ClassInfoImpl.SecondaryAnnotation: ...
	def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getBaseClass(self, ) -> javawrappers.com.sun.xml.bind.v2.model.impl.ClassInfoImpl: ...
	@overload
	def getBaseClass(self, ) -> javawrappers.com.sun.xml.bind.v2.model.core.ClassInfo: ...
	def isAbstract(self, ) -> Union[int, JBoolean]: ...
	def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
	def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def reversed(self, ) -> javawrappers.java.util.Comparator: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class ArrayInfoImpl:
	def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.model.impl.ModelBuilder, arg1: javawrappers.com.sun.xml.bind.v2.model.annotation.Locatable, arg2: javawrappers.java.lang.Object, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isSimpleType(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLocation(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.Location: ...
	def getUpstream(self, ) -> javawrappers.com.sun.xml.bind.v2.model.annotation.Locatable: ...
	def notifyAll(self, ) -> None: ...
	def getItemType(self, ) -> javawrappers.com.sun.xml.bind.v2.model.core.NonElement: ...
	def canBeReferencedByIDREF(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getType(self, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTypeName(self, ) -> javawrappers.javax.xml.namespace.QName: ...


class BuiltinLeafInfoImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isSimpleType(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLocation(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.Location: ...
	def getUpstream(self, ) -> javawrappers.com.sun.xml.bind.v2.model.annotation.Locatable: ...
	@staticmethod
	def createLeaves(arg0: javawrappers.com.sun.xml.bind.v2.model.nav.Navigator, ) -> javawrappers.java.util.Map: ...
	def isElement(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def canBeReferencedByIDREF(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getElementName(self, ) -> javawrappers.javax.xml.namespace.QName: ...
	def getTypeNames(self, ) -> JArray(javawrappers.javax.xml.namespace.QName, 1): ...
	def getType(self, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def asElement(self, ) -> javawrappers.com.sun.xml.bind.v2.model.core.Element: ...
	def getTypeName(self, ) -> javawrappers.javax.xml.namespace.QName: ...


class ModelBuilderI:
	def getReader(self, ) -> javawrappers.com.sun.xml.bind.v2.model.annotation.AnnotationReader: ...
	def getNavigator(self, ) -> javawrappers.com.sun.xml.bind.v2.model.nav.Navigator: ...


class DummyPropertyInfo:
	def addType(self, arg0: javawrappers.com.sun.xml.bind.v2.model.impl.PropertyInfoImpl, ) -> None: ...


