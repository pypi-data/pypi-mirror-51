################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang.reflect
import javawrappers.java.util.logging
import javawrappers.java.util
import javawrappers.org.w3c.dom
import javawrappers.javax.xml.stream
import javawrappers.java.util.concurrent
import javawrappers.com.sun.xml.bind
import javawrappers.com.sun.xml.bind.v2.runtime.reflect
import javawrappers.java.lang
import javawrappers.java.net
import javawrappers.javax.xml.namespace
import javawrappers.javax.xml.datatype
import javawrappers.org.xml.sax
import javawrappers.java.math
import javawrappers.javax.xml.bind

from jpype.types import *
from typing import Union

from typing import overload

class WhiteSpaceProcessor:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def trim(arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.CharSequence: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def replace(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def replace(arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.CharSequence: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def isWhiteSpace(arg0: javawrappers.java.lang.CharSequence, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isWhiteSpace(arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def collapse(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def collapse(arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.CharSequence: ...


class Locatable:
	def sourceLocation(self, ) -> javawrappers.org.xml.sax.Locator: ...


class DatatypeConverterImpl:
	class CalendarFormatter:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def doFormat(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Calendar, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	@staticmethod
	def encode(arg0: Union[int, JInt], ) -> Union[string, JString]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def _printInt(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def _parseDouble(arg0: javawrappers.java.lang.CharSequence, ) -> Union[float, JDouble]: ...
	@staticmethod
	def _parseBoolean(arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Boolean: ...
	def printBoolean(self, arg0: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	def printByte(self, arg0: JByte, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def _printFloat(arg0: Union[float, JFloat], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def _parseFloat(arg0: javawrappers.java.lang.CharSequence, ) -> Union[float, JFloat]: ...
	def printUnsignedShort(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def parseHexBinary(self, arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...
	@staticmethod
	def _parseDecimal(arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.math.BigDecimal: ...
	@staticmethod
	def _parseDateTime(arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.util.GregorianCalendar: ...
	@staticmethod
	def _parseShort(arg0: javawrappers.java.lang.CharSequence, ) -> Union[int, JShort]: ...
	@staticmethod
	def _parseBase64Binary(arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...
	@staticmethod
	def _printShort(arg0: Union[int, JShort], ) -> javawrappers.java.lang.String: ...
	def printDouble(self, arg0: Union[float, JDouble], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def _printInteger(arg0: javawrappers.java.math.BigInteger, ) -> javawrappers.java.lang.String: ...
	def parseQName(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.javax.xml.namespace.NamespaceContext, ) -> javawrappers.javax.xml.namespace.QName: ...
	def parseInteger(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.math.BigInteger: ...
	@overload
	@staticmethod
	def _printBase64Binary(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(Union[string, JString], 1), arg4: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def _printBase64Binary(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def _printBase64Binary(arg0: JArray(JByte, 1), ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def _printBase64Binary(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.javax.xml.stream.XMLStreamWriter, ) -> None: ...
	@overload
	@staticmethod
	def _printBase64Binary(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(JByte, 1), arg4: Union[int, JInt], ) -> Union[int, JInt]: ...
	def parseTime(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Calendar: ...
	def printQName(self, arg0: javawrappers.javax.xml.namespace.QName, arg1: javawrappers.javax.xml.namespace.NamespaceContext, ) -> javawrappers.java.lang.String: ...
	def printDecimal(self, arg0: javawrappers.java.math.BigDecimal, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def encodeByte(arg0: Union[int, JInt], ) -> JByte: ...
	@staticmethod
	def _printDecimal(arg0: javawrappers.java.math.BigDecimal, ) -> javawrappers.java.lang.String: ...
	def printDate(self, arg0: javawrappers.java.util.Calendar, ) -> javawrappers.java.lang.String: ...
	def printAnySimpleType(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def printHexBinary(self, arg0: JArray(JByte, 1), ) -> javawrappers.java.lang.String: ...
	def printLong(self, arg0: Union[long, JLong], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def _parseByte(arg0: javawrappers.java.lang.CharSequence, ) -> JByte: ...
	@staticmethod
	def _parseLong(arg0: javawrappers.java.lang.CharSequence, ) -> Union[long, JLong]: ...
	@staticmethod
	def _parseInt(arg0: javawrappers.java.lang.CharSequence, ) -> Union[int, JInt]: ...
	@staticmethod
	def _printDouble(arg0: Union[float, JDouble], ) -> javawrappers.java.lang.String: ...
	def parseDate(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Calendar: ...
	def parseString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def printUnsignedInt(self, arg0: Union[long, JLong], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def _printDateTime(arg0: javawrappers.java.util.Calendar, ) -> javawrappers.java.lang.String: ...
	def printString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def printBase64Binary(self, arg0: JArray(JByte, 1), ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def _printQName(arg0: javawrappers.javax.xml.namespace.QName, arg1: javawrappers.javax.xml.namespace.NamespaceContext, ) -> javawrappers.java.lang.String: ...
	def parseFloat(self, arg0: javawrappers.java.lang.String, ) -> Union[float, JFloat]: ...
	@staticmethod
	def getDatatypeFactory() -> javawrappers.javax.xml.datatype.DatatypeFactory: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def parseAnySimpleType(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def parseDateTime(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Calendar: ...
	def notifyAll(self, ) -> None: ...
	def parseBoolean(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def _printBoolean(arg0: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def _printByte(arg0: JByte, ) -> javawrappers.java.lang.String: ...
	def printFloat(self, arg0: Union[float, JFloat], ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def parseDouble(self, arg0: javawrappers.java.lang.String, ) -> Union[float, JDouble]: ...
	def parseDecimal(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.math.BigDecimal: ...
	def parseUnsignedInt(self, arg0: javawrappers.java.lang.String, ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def parseShort(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JShort]: ...
	def printShort(self, arg0: Union[int, JShort], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def _parseQName(arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.javax.xml.namespace.NamespaceContext, ) -> javawrappers.javax.xml.namespace.QName: ...
	@staticmethod
	def _parseInteger(arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.math.BigInteger: ...
	def printInteger(self, arg0: javawrappers.java.math.BigInteger, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def _printDate(arg0: javawrappers.java.util.Calendar, ) -> javawrappers.java.lang.String: ...
	def printDateTime(self, arg0: javawrappers.java.util.Calendar, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def _printLong(arg0: Union[long, JLong], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def doFormat(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Calendar, ) -> javawrappers.java.lang.String: ...
	def parseBase64Binary(self, arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...
	def parseByte(self, arg0: javawrappers.java.lang.String, ) -> JByte: ...
	def parseInt(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def parseLong(self, arg0: javawrappers.java.lang.String, ) -> Union[long, JLong]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def printInt(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def parseUnsignedShort(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def printTime(self, arg0: javawrappers.java.util.Calendar, ) -> javawrappers.java.lang.String: ...


class IDResolver:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def bind(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def resolve(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.util.concurrent.Callable: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def endDocument(self, ) -> None: ...
	def startDocument(self, arg0: javawrappers.javax.xml.bind.ValidationEventHandler, ) -> None: ...
	def notify(self, ) -> None: ...


class AccessorFactoryImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def createPropertyAccessor(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.reflect.Method, arg2: javawrappers.java.lang.reflect.Method, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def createFieldAccessor(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.reflect.Field, arg2: Union[int, JBoolean], ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def createFieldAccessor(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.reflect.Field, arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getInstance() -> javawrappers.com.sun.xml.bind.AccessorFactoryImpl: ...
	def notify(self, ) -> None: ...


class XmlAccessorFactory:
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> javawrappers.java.lang.Class: ...


class Util:
	@staticmethod
	def getSystemProperty(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getClassLogger() -> javawrappers.java.util.logging.Logger: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class InternalAccessorFactory:
	def createPropertyAccessor(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.reflect.Method, arg2: javawrappers.java.lang.reflect.Method, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def createFieldAccessor(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.reflect.Field, arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	@overload
	def createFieldAccessor(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.reflect.Field, arg2: Union[int, JBoolean], ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...


class AccessorFactory:
	def createPropertyAccessor(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.reflect.Method, arg2: javawrappers.java.lang.reflect.Method, ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...
	def createFieldAccessor(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.reflect.Field, arg2: Union[int, JBoolean], ) -> javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor: ...


class CycleRecoverable:
	class Context:
		def getMarshaller(self, ) -> javawrappers.javax.xml.bind.Marshaller: ...


	def getMarshaller(self, ) -> javawrappers.javax.xml.bind.Marshaller: ...
	def onCycleDetected(self, arg0: javawrappers.com.sun.xml.bind.CycleRecoverable.Context, ) -> javawrappers.java.lang.Object: ...


class ValidationEventLocatorEx:
	def getLineNumber(self, ) -> Union[int, JInt]: ...
	def getURL(self, ) -> javawrappers.java.net.URL: ...
	def getObject(self, ) -> javawrappers.java.lang.Object: ...
	def getOffset(self, ) -> Union[int, JInt]: ...
	def getColumnNumber(self, ) -> Union[int, JInt]: ...
	def getNode(self, ) -> javawrappers.org.w3c.dom.Node: ...
	def getFieldName(self, ) -> javawrappers.java.lang.String: ...


class AnyTypeAdapter:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def unmarshal(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def marshal(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


