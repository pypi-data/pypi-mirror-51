################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util
import javawrappers.org.w3c.dom
import javawrappers.javax.xml.validation
import javawrappers.javax.xml.transform.sax
import javawrappers.javax.xml.stream
import javawrappers.java.util.stream
import javawrappers.com.sun.xml.bind.unmarshaller
import javawrappers.java.util.concurrent
import javawrappers.com.sun.xml.bind.v2.runtime
import javawrappers.com.sun.xml.bind
import javawrappers.com.sun.xml.bind.v2.runtime.reflect
import javawrappers.javax.xml.transform
import javawrappers.javax.xml.bind.annotation.adapters
import javawrappers.java.lang
import javawrappers.java.net
import javawrappers.javax.xml.namespace
import javawrappers.java.io
import javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller
import javawrappers.org.xml.sax
import javawrappers.com.sun.xml.bind.v2.runtime.output
import javawrappers.javax.xml.bind.attachment
import javawrappers.javax.xml.bind
import javawrappers.javax.activation

from jpype.types import *
from typing import Union

from typing import overload

class Loader:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def handleGenericError(arg0: javawrappers.java.lang.Error, ) -> None: ...
	def startElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def expectText(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def handleGenericException(arg0: javawrappers.java.lang.Exception, arg1: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getExpectedChildElements(self, ) -> javawrappers.java.util.Collection: ...
	@staticmethod
	def reportError(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Exception, arg2: Union[int, JBoolean], ) -> None: ...
	def childElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def leaveElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def getExpectedAttributes(self, ) -> javawrappers.java.util.Collection: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def text(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...


class Receiver:
	def receive(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.Object, ) -> None: ...


class SAXConnector:
	def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.XmlVisitor, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.LocatorEx, ): ...
	class TagNameImpl:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getPrefix(self, ) -> javawrappers.java.lang.String: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def matches(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		@overload
		def matches(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, ) -> Union[int, JBoolean]: ...
		def createQName(self, ) -> javawrappers.javax.xml.namespace.QName: ...
		def notify(self, ) -> None: ...
		def getQname(self, ) -> javawrappers.java.lang.String: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getPrefix(self, ) -> javawrappers.java.lang.String: ...
	def endPrefixMapping(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def startElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.org.xml.sax.Attributes, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def matches(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def matches(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, ) -> Union[int, JBoolean]: ...
	def endDocument(self, ) -> None: ...
	def startDocument(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getQname(self, ) -> javawrappers.java.lang.String: ...
	def characters(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def startPrefixMapping(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def endElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getResult(self, ) -> javawrappers.java.lang.Object: ...
	def skippedEntity(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setDocumentLocator(self, arg0: javawrappers.org.xml.sax.Locator, ) -> None: ...
	def createQName(self, ) -> javawrappers.javax.xml.namespace.QName: ...
	def getContext(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext: ...
	def ignorableWhitespace(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def processingInstruction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...


class XsiNilLoader:
	def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.Loader, ): ...
	class Array:
		def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.Loader, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@staticmethod
		def handleGenericError(arg0: javawrappers.java.lang.Error, ) -> None: ...
		def startElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
		def expectText(self, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def handleGenericException(arg0: javawrappers.java.lang.Exception, arg1: Union[int, JBoolean], ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def getExpectedChildElements(self, ) -> javawrappers.java.util.Collection: ...
		@staticmethod
		def reportError(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Exception, arg2: Union[int, JBoolean], ) -> None: ...
		def childElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
		def notify(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def leaveElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
		def getExpectedAttributes(self, ) -> javawrappers.java.util.Collection: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def text(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...


	class Single:
		def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.Loader, arg1: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@staticmethod
		def handleGenericError(arg0: javawrappers.java.lang.Error, ) -> None: ...
		def startElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
		def expectText(self, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def handleGenericException(arg0: javawrappers.java.lang.Exception, arg1: Union[int, JBoolean], ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def getExpectedChildElements(self, ) -> javawrappers.java.util.Collection: ...
		@staticmethod
		def reportError(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Exception, arg2: Union[int, JBoolean], ) -> None: ...
		def childElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
		def notify(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def leaveElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
		def getExpectedAttributes(self, ) -> javawrappers.java.util.Collection: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def text(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def handleGenericError(arg0: javawrappers.java.lang.Error, ) -> None: ...
	def startElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def expectText(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def handleGenericException(arg0: javawrappers.java.lang.Exception, arg1: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getExpectedChildElements(self, ) -> javawrappers.java.util.Collection: ...
	@staticmethod
	def reportError(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Exception, arg2: Union[int, JBoolean], ) -> None: ...
	def childElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def leaveElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def getExpectedAttributes(self, ) -> javawrappers.java.util.Collection: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def text(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...


class ProxyLoader:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def handleGenericError(arg0: javawrappers.java.lang.Error, ) -> None: ...
	def startElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def expectText(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def handleGenericException(arg0: javawrappers.java.lang.Exception, arg1: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getExpectedChildElements(self, ) -> javawrappers.java.util.Collection: ...
	@staticmethod
	def reportError(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Exception, arg2: Union[int, JBoolean], ) -> None: ...
	def childElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def leaveElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def getExpectedAttributes(self, ) -> javawrappers.java.util.Collection: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def text(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...


class DefaultValueLoaderDecorator:
	def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.Loader, arg1: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def handleGenericError(arg0: javawrappers.java.lang.Error, ) -> None: ...
	def startElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def expectText(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def handleGenericException(arg0: javawrappers.java.lang.Exception, arg1: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getExpectedChildElements(self, ) -> javawrappers.java.util.Collection: ...
	@staticmethod
	def reportError(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Exception, arg2: Union[int, JBoolean], ) -> None: ...
	def childElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def leaveElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def getExpectedAttributes(self, ) -> javawrappers.java.util.Collection: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def text(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...


class InterningXmlVisitor:
	def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.XmlVisitor, ): ...
	class AttributesImpl:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def getIndex(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
		@overload
		def getIndex(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def notify(self, ) -> None: ...
		@overload
		def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
		@overload
		def getValue(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
		@overload
		def getValue(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		def getLocalName(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def getType(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		@overload
		def getType(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
		@overload
		def getType(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getLength(self, ) -> Union[int, JInt]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getQName(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		def getURI(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getIndex(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@overload
	def getIndex(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def endPrefixMapping(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def startElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def endDocument(self, ) -> None: ...
	def startDocument(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.LocatorEx, arg1: javawrappers.javax.xml.namespace.NamespaceContext, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getValue(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def getPredictor(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.XmlVisitor.TextPredictor: ...
	def startPrefixMapping(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def endElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def getLocalName(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getType(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getType(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getType(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getLength(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def text(self, arg0: javawrappers.java.lang.CharSequence, ) -> None: ...
	def getQName(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def getContext(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext: ...
	def getURI(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...


class Intercepter:
	def intercept(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class LeafPropertyLoader:
	def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def handleGenericError(arg0: javawrappers.java.lang.Error, ) -> None: ...
	def startElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def expectText(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def handleGenericException(arg0: javawrappers.java.lang.Exception, arg1: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getExpectedChildElements(self, ) -> javawrappers.java.util.Collection: ...
	@staticmethod
	def reportError(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Exception, arg2: Union[int, JBoolean], ) -> None: ...
	def childElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def leaveElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def getExpectedAttributes(self, ) -> javawrappers.java.util.Collection: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def text(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...


class ValuePropertyLoader:
	def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def handleGenericError(arg0: javawrappers.java.lang.Error, ) -> None: ...
	def startElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def expectText(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def handleGenericException(arg0: javawrappers.java.lang.Exception, arg1: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getExpectedChildElements(self, ) -> javawrappers.java.util.Collection: ...
	@staticmethod
	def reportError(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Exception, arg2: Union[int, JBoolean], ) -> None: ...
	def childElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def leaveElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def getExpectedAttributes(self, ) -> javawrappers.java.util.Collection: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def text(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...


class AttributesExImpl:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getIndex(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@overload
	def getIndex(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def setAttributes(self, arg0: javawrappers.org.xml.sax.Attributes, ) -> None: ...
	def notify(self, ) -> None: ...
	def setAttribute(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: javawrappers.java.lang.String, ) -> None: ...
	def setQName(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def removeAttribute(self, arg0: Union[int, JInt], ) -> None: ...
	def getQName(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def getIndexFast(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@overload
	def getData(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.CharSequence: ...
	@overload
	def getData(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.CharSequence: ...
	def clear(self, ) -> None: ...
	def setURI(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	def setType(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def getValue(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def addAttribute(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, ) -> None: ...
	def getLocalName(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getType(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getType(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getType(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	def getLength(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setLocalName(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	def getURI(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...


class Scope:
	def add(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, arg1: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Lister, arg2: javawrappers.java.lang.Object, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def start(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, arg1: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Lister, ) -> None: ...
	def hasStarted(self, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def finish(self, ) -> None: ...
	def notify(self, ) -> None: ...


class Patcher:
	def run(self, ) -> None: ...


class AttributesEx:
	@overload
	def getValue(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getValue(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getIndex(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@overload
	def getIndex(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def getLocalName(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getType(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getType(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def getType(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getLength(self, ) -> Union[int, JInt]: ...
	def getQName(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def getURI(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getData(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.CharSequence: ...
	@overload
	def getData(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.CharSequence: ...


class IntData:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def length(self, ) -> Union[int, JInt]: ...
	def subSequence(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.CharSequence: ...
	def notify(self, ) -> None: ...
	@overload
	def writeTo(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput, ) -> None: ...
	@overload
	def writeTo(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def chars(self, ) -> javawrappers.java.util.stream.IntStream: ...
	def charAt(self, arg0: Union[int, JInt], ) -> Union[string, JString]: ...
	def codePoints(self, ) -> javawrappers.java.util.stream.IntStream: ...


class LocatorEx:
	class Snapshot:
		def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.LocatorEx, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getLocation(self, ) -> javawrappers.javax.xml.bind.ValidationEventLocator: ...
		def getObject(self, ) -> javawrappers.java.lang.Object: ...
		def getSystemId(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def getOffset(self, ) -> Union[int, JInt]: ...
		def getColumnNumber(self, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def getPublicId(self, ) -> javawrappers.java.lang.String: ...
		def getLineNumber(self, ) -> Union[int, JInt]: ...
		def getURL(self, ) -> javawrappers.java.net.URL: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getNode(self, ) -> javawrappers.org.w3c.dom.Node: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getSystemId(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getSystemId(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getLocation(self, ) -> javawrappers.javax.xml.bind.ValidationEventLocator: ...
	@overload
	def getLocation(self, ) -> javawrappers.javax.xml.bind.ValidationEventLocator: ...
	def notifyAll(self, ) -> None: ...
	def getOffset(self, ) -> Union[int, JInt]: ...
	@overload
	def getColumnNumber(self, ) -> Union[int, JInt]: ...
	@overload
	def getColumnNumber(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	def getPublicId(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getPublicId(self, ) -> javawrappers.java.lang.String: ...
	def getURL(self, ) -> javawrappers.java.net.URL: ...
	@overload
	def getLineNumber(self, ) -> Union[int, JInt]: ...
	@overload
	def getLineNumber(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getNode(self, ) -> javawrappers.org.w3c.dom.Node: ...


class Discarder:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def handleGenericError(arg0: javawrappers.java.lang.Error, ) -> None: ...
	def startElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def expectText(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def handleGenericException(arg0: javawrappers.java.lang.Exception, arg1: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getExpectedChildElements(self, ) -> javawrappers.java.util.Collection: ...
	@staticmethod
	def reportError(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Exception, arg2: Union[int, JBoolean], ) -> None: ...
	def childElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def leaveElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def getExpectedAttributes(self, ) -> javawrappers.java.util.Collection: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def text(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...


class DomLoader:
	def __init__(self, arg0: javawrappers.javax.xml.bind.annotation.DomHandler, ): ...
	class State:
		def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.DomLoader, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getElement(self, ) -> javawrappers.java.lang.Object: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def handleGenericError(arg0: javawrappers.java.lang.Error, ) -> None: ...
	def startElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def expectText(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def handleGenericException(arg0: javawrappers.java.lang.Exception, arg1: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getExpectedChildElements(self, ) -> javawrappers.java.util.Collection: ...
	@staticmethod
	def reportError(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Exception, arg2: Union[int, JBoolean], ) -> None: ...
	def childElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def notify(self, ) -> None: ...
	def getElement(self, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def leaveElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def getExpectedAttributes(self, ) -> javawrappers.java.util.Collection: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def text(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...


class StructureLoader:
	def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.ClassBeanInfoImpl, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def init(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, arg1: javawrappers.com.sun.xml.bind.v2.runtime.ClassBeanInfoImpl, arg2: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def handleGenericError(arg0: javawrappers.java.lang.Error, ) -> None: ...
	def startElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def expectText(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def handleGenericException(arg0: javawrappers.java.lang.Exception, arg1: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getExpectedChildElements(self, ) -> javawrappers.java.util.Collection: ...
	@staticmethod
	def reportError(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Exception, arg2: Union[int, JBoolean], ) -> None: ...
	def childElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def getBeanInfo(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.JaxBeanInfo: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def leaveElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def getExpectedAttributes(self, ) -> javawrappers.java.util.Collection: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def text(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...


class XsiTypeLoader:
	def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JaxBeanInfo, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def handleGenericError(arg0: javawrappers.java.lang.Error, ) -> None: ...
	def startElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def expectText(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def handleGenericException(arg0: javawrappers.java.lang.Exception, arg1: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getExpectedChildElements(self, ) -> javawrappers.java.util.Collection: ...
	@staticmethod
	def reportError(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Exception, arg2: Union[int, JBoolean], ) -> None: ...
	def childElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def leaveElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def getExpectedAttributes(self, ) -> javawrappers.java.util.Collection: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def text(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...


class IntArrayData:
	@overload
	def __init__(self, arg0: JArray(Union[int, JInt], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: JArray(Union[int, JInt], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def length(self, ) -> Union[int, JInt]: ...
	def subSequence(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.CharSequence: ...
	def notify(self, ) -> None: ...
	@overload
	def writeTo(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput, ) -> None: ...
	@overload
	def writeTo(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def chars(self, ) -> javawrappers.java.util.stream.IntStream: ...
	def charAt(self, arg0: Union[int, JInt], ) -> Union[string, JString]: ...
	def codePoints(self, ) -> javawrappers.java.util.stream.IntStream: ...


class TagName:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getPrefix(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def matches(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def matches(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Name, ) -> Union[int, JBoolean]: ...
	def createQName(self, ) -> javawrappers.javax.xml.namespace.QName: ...
	def notify(self, ) -> None: ...
	def getQname(self, ) -> javawrappers.java.lang.String: ...


class ChildLoader:
	def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.Loader, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.Receiver, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class UnmarshallerImpl:
	def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl, arg1: javawrappers.com.sun.xml.bind.v2.runtime.AssociationMap, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setAttachmentUnmarshaller(self, arg0: javawrappers.javax.xml.bind.attachment.AttachmentUnmarshaller, ) -> None: ...
	def handleEvent(self, arg0: javawrappers.javax.xml.bind.ValidationEvent, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def hasEventHandler(self, ) -> Union[int, JBoolean]: ...
	@overload
	def unmarshal0(self, arg0: javawrappers.java.io.InputStream, arg1: javawrappers.com.sun.xml.bind.v2.runtime.JaxBeanInfo, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal0(self, arg0: javawrappers.org.w3c.dom.Node, arg1: javawrappers.com.sun.xml.bind.v2.runtime.JaxBeanInfo, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal0(self, arg0: javawrappers.javax.xml.transform.Source, arg1: javawrappers.com.sun.xml.bind.v2.runtime.JaxBeanInfo, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal0(self, arg0: javawrappers.javax.xml.stream.XMLStreamReader, arg1: javawrappers.com.sun.xml.bind.v2.runtime.JaxBeanInfo, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def setSchema(self, arg0: javawrappers.javax.xml.validation.Schema, ) -> None: ...
	def isValidating(self, ) -> Union[int, JBoolean]: ...
	def createUnmarshalException(self, arg0: javawrappers.org.xml.sax.SAXException, ) -> javawrappers.javax.xml.bind.UnmarshalException: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getAttachmentUnmarshaller(self, ) -> javawrappers.javax.xml.bind.attachment.AttachmentUnmarshaller: ...
	def getUnmarshallerHandler(self, ) -> javawrappers.javax.xml.bind.UnmarshallerHandler: ...
	def setValidating(self, arg0: Union[int, JBoolean], ) -> None: ...
	def close(self, ) -> None: ...
	def getAdapter(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.javax.xml.bind.annotation.adapters.XmlAdapter: ...
	@staticmethod
	def needsInterning(arg0: javawrappers.org.xml.sax.XMLReader, ) -> Union[int, JBoolean]: ...
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	@overload
	def setAdapter(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.javax.xml.bind.annotation.adapters.XmlAdapter, ) -> None: ...
	@overload
	def setAdapter(self, arg0: javawrappers.javax.xml.bind.annotation.adapters.XmlAdapter, ) -> None: ...
	def getEventHandler(self, ) -> javawrappers.javax.xml.bind.ValidationEventHandler: ...
	def getBeanInfo(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.sun.xml.bind.v2.runtime.JaxBeanInfo: ...
	def getSchema(self, ) -> javawrappers.javax.xml.validation.Schema: ...
	@overload
	def unmarshal(self, arg0: javawrappers.javax.xml.transform.Source, arg1: javawrappers.java.lang.Class, ) -> javawrappers.javax.xml.bind.JAXBElement: ...
	@overload
	def unmarshal(self, arg0: javawrappers.javax.xml.transform.sax.SAXSource, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.org.w3c.dom.Node, arg1: javawrappers.java.lang.Class, ) -> javawrappers.javax.xml.bind.JAXBElement: ...
	@overload
	def unmarshal(self, arg0: javawrappers.org.w3c.dom.Node, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.javax.xml.stream.XMLEventReader, arg1: javawrappers.java.lang.Class, ) -> javawrappers.javax.xml.bind.JAXBElement: ...
	@overload
	def unmarshal(self, arg0: javawrappers.javax.xml.stream.XMLEventReader, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.javax.xml.stream.XMLStreamReader, arg1: javawrappers.java.lang.Class, ) -> javawrappers.javax.xml.bind.JAXBElement: ...
	@overload
	def unmarshal(self, arg0: javawrappers.javax.xml.stream.XMLStreamReader, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.java.io.Reader, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.java.io.InputStream, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.java.io.File, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.javax.xml.transform.Source, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.java.net.URL, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.org.xml.sax.InputSource, ) -> javawrappers.java.lang.Object: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def setListener(self, arg0: javawrappers.javax.xml.bind.Unmarshaller.Listener, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setEventHandler(self, arg0: javawrappers.javax.xml.bind.ValidationEventHandler, ) -> None: ...
	def createUnmarshallerHandler(self, arg0: javawrappers.com.sun.xml.bind.unmarshaller.InfosetScanner, arg1: Union[int, JBoolean], arg2: javawrappers.com.sun.xml.bind.v2.runtime.JaxBeanInfo, ) -> javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.XmlVisitor: ...
	def getContext(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext: ...
	def getListener(self, ) -> javawrappers.javax.xml.bind.Unmarshaller.Listener: ...


class WildcardLoader:
	def __init__(self, arg0: javawrappers.javax.xml.bind.annotation.DomHandler, arg1: javawrappers.com.sun.xml.bind.v2.model.core.WildcardMode, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def handleGenericError(arg0: javawrappers.java.lang.Error, ) -> None: ...
	def startElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def expectText(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def handleGenericException(arg0: javawrappers.java.lang.Exception, arg1: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getExpectedChildElements(self, ) -> javawrappers.java.util.Collection: ...
	@staticmethod
	def reportError(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Exception, arg2: Union[int, JBoolean], ) -> None: ...
	def childElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def leaveElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def getExpectedAttributes(self, ) -> javawrappers.java.util.Collection: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def text(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...


class Base64Data:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def set(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def set(self, arg0: JArray(JByte, 1), arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.javax.activation.DataHandler, ) -> None: ...
	def getMimeType(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getDataLen(self, ) -> Union[int, JInt]: ...
	def hasData(self, ) -> Union[int, JBoolean]: ...
	def length(self, ) -> Union[int, JInt]: ...
	def subSequence(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.lang.CharSequence: ...
	def getInputStream(self, ) -> javawrappers.java.io.InputStream: ...
	def getExact(self, ) -> JArray(JByte, 1): ...
	def notify(self, ) -> None: ...
	@overload
	def writeTo(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], ) -> None: ...
	@overload
	def writeTo(self, arg0: javawrappers.javax.xml.stream.XMLStreamWriter, ) -> None: ...
	@overload
	def writeTo(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput, ) -> None: ...
	def getDataHandler(self, ) -> javawrappers.javax.activation.DataHandler: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, ) -> JArray(JByte, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def chars(self, ) -> javawrappers.java.util.stream.IntStream: ...
	def charAt(self, arg0: Union[int, JInt], ) -> Union[string, JString]: ...
	def codePoints(self, ) -> javawrappers.java.util.stream.IntStream: ...


class XmlVisitor:
	class TextPredictor:
		def expectText(self, ) -> Union[int, JBoolean]: ...


	def getPredictor(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.XmlVisitor.TextPredictor: ...
	def startPrefixMapping(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def endElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def endPrefixMapping(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def startElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def expectText(self, ) -> Union[int, JBoolean]: ...
	def text(self, arg0: javawrappers.java.lang.CharSequence, ) -> None: ...
	def getContext(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext: ...
	def endDocument(self, ) -> None: ...
	def startDocument(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.LocatorEx, arg1: javawrappers.javax.xml.namespace.NamespaceContext, ) -> None: ...


class LeafPropertyXsiLoader:
	def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.Loader, arg1: javawrappers.com.sun.xml.bind.v2.runtime.reflect.TransducedAccessor, arg2: javawrappers.com.sun.xml.bind.v2.runtime.reflect.Accessor, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def handleGenericError(arg0: javawrappers.java.lang.Error, ) -> None: ...
	def startElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def expectText(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def handleGenericException(arg0: javawrappers.java.lang.Exception, arg1: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getExpectedChildElements(self, ) -> javawrappers.java.util.Collection: ...
	@staticmethod
	def reportError(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Exception, arg2: Union[int, JBoolean], ) -> None: ...
	def childElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def leaveElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def getExpectedAttributes(self, ) -> javawrappers.java.util.Collection: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def text(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...


class TextLoader:
	def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.Transducer, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def handleGenericError(arg0: javawrappers.java.lang.Error, ) -> None: ...
	def startElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def expectText(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def handleGenericException(arg0: javawrappers.java.lang.Exception, arg1: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getExpectedChildElements(self, ) -> javawrappers.java.util.Collection: ...
	@staticmethod
	def reportError(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Exception, arg2: Union[int, JBoolean], ) -> None: ...
	def childElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def leaveElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def getExpectedAttributes(self, ) -> javawrappers.java.util.Collection: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def text(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...


class UnmarshallingContext:
	def __init__(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl, arg1: javawrappers.com.sun.xml.bind.v2.runtime.AssociationMap, ): ...
	class ExpectedTypeRootLoader:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def receive(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@staticmethod
		def handleGenericError(arg0: javawrappers.java.lang.Error, ) -> None: ...
		def startElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
		def expectText(self, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def handleGenericException(arg0: javawrappers.java.lang.Exception, arg1: Union[int, JBoolean], ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def getExpectedChildElements(self, ) -> javawrappers.java.util.Collection: ...
		@staticmethod
		def reportError(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Exception, arg2: Union[int, JBoolean], ) -> None: ...
		def childElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
		def notify(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def leaveElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
		def getExpectedAttributes(self, ) -> javawrappers.java.util.Collection: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def text(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...


	class DefaultRootLoader:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def receive(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@staticmethod
		def handleGenericError(arg0: javawrappers.java.lang.Error, ) -> None: ...
		def startElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
		def expectText(self, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def handleGenericException(arg0: javawrappers.java.lang.Exception, arg1: Union[int, JBoolean], ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def getExpectedChildElements(self, ) -> javawrappers.java.util.Collection: ...
		@staticmethod
		def reportError(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Exception, arg2: Union[int, JBoolean], ) -> None: ...
		def childElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
		def notify(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def leaveElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
		def getExpectedAttributes(self, ) -> javawrappers.java.util.Collection: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def text(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...


	class Factory:
		def __init__(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.reflect.Method, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def createInstance(self, ) -> javawrappers.java.lang.Object: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class State:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getElementDefaultValue(self, ) -> javawrappers.java.lang.String: ...
		def getLoader(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.Loader: ...
		def notifyAll(self, ) -> None: ...
		def setIntercepter(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.Intercepter, ) -> None: ...
		def setBackup(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def isMixed(self, ) -> Union[int, JBoolean]: ...
		def getPrev(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State: ...
		def setNil(self, arg0: Union[int, JBoolean], ) -> None: ...
		def notify(self, ) -> None: ...
		def setReceiver(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.Receiver, ) -> None: ...
		def getBackup(self, ) -> javawrappers.java.lang.Object: ...
		def getTarget(self, ) -> javawrappers.java.lang.Object: ...
		def setLoader(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.Loader, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def setTarget(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def isNil(self, ) -> Union[int, JBoolean]: ...
		def getContext(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext: ...
		def setElementDefaultValue(self, arg0: javawrappers.java.lang.String, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def endPrefixMapping(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getXMIMEContentType(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def handleGenericException(arg0: javawrappers.java.lang.Exception, arg1: Union[int, JBoolean], ) -> None: ...
	def setIntercepter(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.Intercepter, ) -> None: ...
	def endScope(self, arg0: Union[int, JInt], ) -> None: ...
	@staticmethod
	def _getInstance() -> javawrappers.com.sun.xml.bind.v2.runtime.Coordinator: ...
	def getTarget(self, ) -> javawrappers.java.lang.Object: ...
	def getCurrentExpectedElements(self, ) -> javawrappers.java.util.Collection: ...
	def startScope(self, arg0: Union[int, JInt], ) -> None: ...
	def warning(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def getLocator(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.LocatorEx: ...
	def addPatcher(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.Patcher, ) -> None: ...
	@overload
	def text(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.CharSequence, ) -> None: ...
	@overload
	def text(self, arg0: javawrappers.java.lang.CharSequence, ) -> None: ...
	def setElementDefaultValue(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getAllDeclaredPrefixes(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getAdapter(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.javax.xml.bind.annotation.adapters.XmlAdapter: ...
	@overload
	def createInstance(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def createInstance(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.JaxBeanInfo, ) -> javawrappers.java.lang.Object: ...
	@overload
	def createInstance(self, ) -> javawrappers.java.lang.Object: ...
	def getPrefix(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getLoader(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.Loader: ...
	def fatalError(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def getPrev(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State: ...
	def endDocument(self, ) -> None: ...
	def setReceiver(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.Receiver, ) -> None: ...
	def shouldErrorBeReported(self, ) -> Union[int, JBoolean]: ...
	def leaveElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def reset(self, arg0: javawrappers.com.sun.xml.bind.unmarshaller.InfosetScanner, arg1: Union[int, JBoolean], arg2: javawrappers.com.sun.xml.bind.v2.runtime.JaxBeanInfo, arg3: javawrappers.com.sun.xml.bind.IDResolver, ) -> None: ...
	def getObjectFromId(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.util.concurrent.Callable: ...
	def getPrefixes(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Iterator: ...
	def getNamespaceURI(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def recordOuterPeer(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getNewlyDeclaredPrefixes(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getScope(self, arg0: Union[int, JInt], ) -> javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.Scope: ...
	def getStructureLoader(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.StructureLoader: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setFactories(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@staticmethod
	def handleGenericError(arg0: javawrappers.java.lang.Error, ) -> None: ...
	def getElementDefaultValue(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def handleEvent(self, arg0: javawrappers.javax.xml.bind.ValidationEvent, ) -> Union[int, JBoolean]: ...
	@overload
	def handleEvent(self, arg0: javawrappers.javax.xml.bind.ValidationEvent, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def expectText(self, ) -> Union[int, JBoolean]: ...
	@overload
	def expectText(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def setBackup(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getJAXBContext(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.JAXBContextImpl: ...
	def error(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def setNil(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getInnerPeer(self, ) -> javawrappers.java.lang.Object: ...
	def addToIdTable(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getPredictor(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.XmlVisitor.TextPredictor: ...
	def startPrefixMapping(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def endElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def putAdapter(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.javax.xml.bind.annotation.adapters.XmlAdapter, ) -> javawrappers.javax.xml.bind.annotation.adapters.XmlAdapter: ...
	def getCurrentExpectedAttributes(self, ) -> javawrappers.java.util.Collection: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def handleError(self, arg0: javawrappers.java.lang.Exception, ) -> None: ...
	@overload
	def handleError(self, arg0: javawrappers.java.lang.Exception, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def handleError(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def clearStates(self, ) -> None: ...
	def getExpectedAttributes(self, ) -> javawrappers.java.util.Collection: ...
	def setTarget(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getCurrentState(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State: ...
	def getOuterPeer(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def receive(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def receive(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def errorUnresolvedIDREF(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.String, arg2: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.LocatorEx, ) -> None: ...
	@overload
	def startElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	@overload
	def startElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	@overload
	def getExpectedChildElements(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def getExpectedChildElements(self, ) -> javawrappers.java.util.Collection: ...
	@staticmethod
	def reportError(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Exception, arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def childElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	@overload
	def childElement(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> None: ...
	def isMixed(self, ) -> Union[int, JBoolean]: ...
	def startDocument(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.LocatorEx, arg1: javawrappers.javax.xml.namespace.NamespaceContext, ) -> None: ...
	def getBackup(self, ) -> javawrappers.java.lang.Object: ...
	def recordInnerPeer(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def setLoader(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.Loader, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getResult(self, ) -> javawrappers.java.lang.Object: ...
	def isNil(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def containsAdapter(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getInstance() -> javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext: ...
	@overload
	def getContext(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext: ...
	@overload
	def getContext(self, ) -> javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext: ...
	def selectRootLoader(self, arg0: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.State, arg1: javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.TagName, ) -> javawrappers.com.sun.xml.bind.v2.runtime.unmarshaller.Loader: ...


