################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang.reflect
import javawrappers.com.sun.xml.bind.v2.model.runtime
import javawrappers.java.util
import javawrappers.org.w3c.dom
import javawrappers.javax.xml.stream
import javawrappers.java.lang.annotation
import javawrappers.javax.xml.transform
import javawrappers.java.lang
import javawrappers.javax.xml.namespace
import javawrappers.java.io
import javawrappers.com.sun.xml.bind.api
import javawrappers.org.xml.sax
import javawrappers.com.sun.xml.bind.v2.model.annotation
import javawrappers.javax.xml.bind.attachment
import javawrappers.javax.xml.bind

from jpype.types import *
from typing import Union

from typing import overload

class RawAccessor:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class JAXBRIContext:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def createBridge(self, arg0: javawrappers.com.sun.xml.bind.api.TypeReference, ) -> javawrappers.com.sun.xml.bind.api.Bridge: ...
	@staticmethod
	def mangleNameToVariableName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def createBridgeContext(self, ) -> javawrappers.com.sun.xml.bind.api.BridgeContext: ...
	def notify(self, ) -> None: ...
	@overload
	def getElementName(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.javax.xml.namespace.QName: ...
	@overload
	def getElementName(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.javax.xml.namespace.QName: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def createJAXBIntrospector(self, ) -> javawrappers.javax.xml.bind.JAXBIntrospector: ...
	def getTypeName(self, arg0: javawrappers.com.sun.xml.bind.api.TypeReference, ) -> javawrappers.javax.xml.namespace.QName: ...
	def generateEpisode(self, arg0: javawrappers.javax.xml.transform.Result, ) -> None: ...
	@staticmethod
	def getBaseType(arg0: javawrappers.java.lang.reflect.Type, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.reflect.Type: ...
	def createMarshaller(self, ) -> javawrappers.javax.xml.bind.Marshaller: ...
	def getBuildId(self, ) -> javawrappers.java.lang.String: ...
	def getKnownNamespaceURIs(self, ) -> javawrappers.java.util.List: ...
	@staticmethod
	def mangleNameToPropertyName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getRuntimeTypeInfoSet(self, ) -> javawrappers.com.sun.xml.bind.v2.model.runtime.RuntimeTypeInfoSet: ...
	@staticmethod
	def mangleNameToClassName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def createUnmarshaller(self, ) -> javawrappers.javax.xml.bind.Unmarshaller: ...
	@overload
	@staticmethod
	def newInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.xml.bind.JAXBContext: ...
	@overload
	@staticmethod
	def newInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.ClassLoader, ) -> javawrappers.javax.xml.bind.JAXBContext: ...
	@overload
	@staticmethod
	def newInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.ClassLoader, arg2: javawrappers.java.util.Map, ) -> javawrappers.javax.xml.bind.JAXBContext: ...
	@overload
	@staticmethod
	def newInstance(*arg0: javawrappers.java.lang.Class, ) -> javawrappers.javax.xml.bind.JAXBContext: ...
	@overload
	@staticmethod
	def newInstance(arg0: JArray(javawrappers.java.lang.Class, 1), arg1: javawrappers.java.util.Map, ) -> javawrappers.javax.xml.bind.JAXBContext: ...
	@overload
	@staticmethod
	def newInstance(arg0: JArray(javawrappers.java.lang.Class, 1), arg1: javawrappers.java.util.Collection, arg2: javawrappers.java.util.Map, arg3: javawrappers.java.lang.String, arg4: Union[int, JBoolean], arg5: javawrappers.com.sun.xml.bind.v2.model.annotation.RuntimeAnnotationReader, arg6: Union[int, JBoolean], arg7: Union[int, JBoolean], arg8: Union[int, JBoolean], arg9: Union[int, JBoolean], ) -> javawrappers.com.sun.xml.bind.api.JAXBRIContext: ...
	@overload
	@staticmethod
	def newInstance(arg0: JArray(javawrappers.java.lang.Class, 1), arg1: javawrappers.java.util.Collection, arg2: javawrappers.java.util.Map, arg3: javawrappers.java.lang.String, arg4: Union[int, JBoolean], arg5: javawrappers.com.sun.xml.bind.v2.model.annotation.RuntimeAnnotationReader, ) -> javawrappers.com.sun.xml.bind.api.JAXBRIContext: ...
	@overload
	@staticmethod
	def newInstance(arg0: JArray(javawrappers.java.lang.Class, 1), arg1: javawrappers.java.util.Collection, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.com.sun.xml.bind.api.JAXBRIContext: ...
	@overload
	def createBinder(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.javax.xml.bind.Binder: ...
	@overload
	def createBinder(self, ) -> javawrappers.javax.xml.bind.Binder: ...
	def createValidator(self, ) -> javawrappers.javax.xml.bind.Validator: ...
	def generateSchema(self, arg0: javawrappers.javax.xml.bind.SchemaOutputResolver, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def hasSwaRef(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getElementPropertyAccessor(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> javawrappers.com.sun.xml.bind.api.RawAccessor: ...


class ErrorListener:
	def fatalError(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def warning(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def error(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...
	def info(self, arg0: javawrappers.org.xml.sax.SAXParseException, ) -> None: ...


class CompositeStructure:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ClassResolver:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def resolveElementName(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class TypeReference:
	def __init__(self, arg0: javawrappers.javax.xml.namespace.QName, arg1: javawrappers.java.lang.reflect.Type, *arg2: javawrappers.java.lang.annotation.Annotation, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def toItemType(self, ) -> javawrappers.com.sun.xml.bind.api.TypeReference: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class BridgeContext:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getAttachmentMarshaller(self, ) -> javawrappers.javax.xml.bind.attachment.AttachmentMarshaller: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setAttachmentUnmarshaller(self, arg0: javawrappers.javax.xml.bind.attachment.AttachmentUnmarshaller, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getAttachmentUnmarshaller(self, ) -> javawrappers.javax.xml.bind.attachment.AttachmentUnmarshaller: ...
	def setErrorHandler(self, arg0: javawrappers.javax.xml.bind.ValidationEventHandler, ) -> None: ...
	def setAttachmentMarshaller(self, arg0: javawrappers.javax.xml.bind.attachment.AttachmentMarshaller, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Bridge:
	def getTypeReference(self, ) -> javawrappers.com.sun.xml.bind.api.TypeReference: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def unmarshal(self, arg0: javawrappers.javax.xml.stream.XMLStreamReader, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.javax.xml.transform.Source, arg1: javawrappers.javax.xml.bind.attachment.AttachmentUnmarshaller, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.javax.xml.bind.Unmarshaller, arg1: javawrappers.javax.xml.transform.Source, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.com.sun.xml.bind.api.BridgeContext, arg1: javawrappers.java.io.InputStream, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.java.io.InputStream, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.javax.xml.stream.XMLStreamReader, arg1: javawrappers.javax.xml.bind.attachment.AttachmentUnmarshaller, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.com.sun.xml.bind.api.BridgeContext, arg1: javawrappers.javax.xml.stream.XMLStreamReader, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.javax.xml.bind.Unmarshaller, arg1: javawrappers.java.io.InputStream, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.javax.xml.bind.Unmarshaller, arg1: javawrappers.javax.xml.stream.XMLStreamReader, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.org.w3c.dom.Node, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.javax.xml.transform.Source, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.org.w3c.dom.Node, arg1: javawrappers.javax.xml.bind.attachment.AttachmentUnmarshaller, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.com.sun.xml.bind.api.BridgeContext, arg1: javawrappers.javax.xml.transform.Source, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.com.sun.xml.bind.api.BridgeContext, arg1: javawrappers.org.w3c.dom.Node, ) -> javawrappers.java.lang.Object: ...
	@overload
	def unmarshal(self, arg0: javawrappers.javax.xml.bind.Unmarshaller, arg1: javawrappers.org.w3c.dom.Node, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def marshal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.xml.stream.XMLStreamWriter, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.javax.xml.bind.Marshaller, arg1: javawrappers.java.lang.Object, arg2: javawrappers.javax.xml.transform.Result, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.com.sun.xml.bind.api.BridgeContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.javax.xml.transform.Result, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.com.sun.xml.bind.api.BridgeContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.org.w3c.dom.Node, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.xml.sax.ContentHandler, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.io.OutputStream, arg2: javawrappers.javax.xml.namespace.NamespaceContext, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.xml.transform.Result, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.io.OutputStream, arg2: javawrappers.javax.xml.namespace.NamespaceContext, arg3: javawrappers.javax.xml.bind.attachment.AttachmentMarshaller, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.com.sun.xml.bind.api.BridgeContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.io.OutputStream, arg3: javawrappers.javax.xml.namespace.NamespaceContext, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.javax.xml.bind.Marshaller, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.io.OutputStream, arg3: javawrappers.javax.xml.namespace.NamespaceContext, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.w3c.dom.Node, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.javax.xml.bind.Marshaller, arg1: javawrappers.java.lang.Object, arg2: javawrappers.org.xml.sax.ContentHandler, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.javax.xml.stream.XMLStreamWriter, arg2: javawrappers.javax.xml.bind.attachment.AttachmentMarshaller, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.com.sun.xml.bind.api.BridgeContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.javax.xml.stream.XMLStreamWriter, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.org.xml.sax.ContentHandler, arg2: javawrappers.javax.xml.bind.attachment.AttachmentMarshaller, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.com.sun.xml.bind.api.BridgeContext, arg1: javawrappers.java.lang.Object, arg2: javawrappers.org.xml.sax.ContentHandler, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.javax.xml.bind.Marshaller, arg1: javawrappers.java.lang.Object, arg2: javawrappers.javax.xml.stream.XMLStreamWriter, ) -> None: ...
	@overload
	def marshal(self, arg0: javawrappers.javax.xml.bind.Marshaller, arg1: javawrappers.java.lang.Object, arg2: javawrappers.org.w3c.dom.Node, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getContext(self, ) -> javawrappers.com.sun.xml.bind.api.JAXBRIContext: ...
	def notify(self, ) -> None: ...


class AccessorException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


