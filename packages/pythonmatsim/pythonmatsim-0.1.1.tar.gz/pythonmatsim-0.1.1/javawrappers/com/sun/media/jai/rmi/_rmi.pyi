################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang.reflect
import javawrappers.java.rmi
import javawrappers.java.util
import javawrappers.java.awt.image
import javawrappers.java.awt.geom
import javawrappers.java.beans
import javawrappers.java.rmi.server
import javawrappers.java.awt
import javawrappers.javax.media.jai.remote
import javawrappers.javax.media.jai
import javawrappers.java.lang
import javawrappers.java.io
import javawrappers.com.sun.media.jai.rmi
import javawrappers.java.awt.image.renderable

from jpype.types import *
from typing import Union

from typing import overload

class JAIRMIUtil:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def checkServerParameters(arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.util.Hashtable, ) -> None: ...
	@overload
	@staticmethod
	def checkServerParameters(arg0: javawrappers.java.util.Vector, arg1: javawrappers.java.util.Hashtable, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def replaceStringWithImage(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Hashtable, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def checkClientParameters(arg0: javawrappers.java.util.Vector, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	@staticmethod
	def checkClientParameters(arg0: javawrappers.java.awt.image.renderable.ParameterBlock, arg1: javawrappers.java.lang.String, ) -> None: ...
	@staticmethod
	def replaceIdWithSources(arg0: javawrappers.java.util.Vector, arg1: javawrappers.java.util.Hashtable, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.util.Vector: ...
	@staticmethod
	def replaceImage(arg0: javawrappers.java.awt.image.RenderedImage, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def replaceSourcesWithId(arg0: javawrappers.java.util.Vector, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.Vector: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class RenderingHintsProxy:
	def __init__(self, arg0: javawrappers.java.awt.RenderingHints, ): ...
	class HintElement:
		@overload
		def __init__(self, arg0: javawrappers.java.lang.Object, ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.reflect.Field, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getObject(self, ) -> javawrappers.java.lang.Object: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getObject(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getRenderingHints(self, ) -> javawrappers.java.awt.RenderingHints: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class InterfaceProxy:
	def __init__(self, arg0: javawrappers.java.lang.reflect.InvocationHandler, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def isProxyClass(arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getProxyClass(arg0: javawrappers.java.lang.ClassLoader, *arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Class: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def newProxyInstance(arg0: javawrappers.java.lang.ClassLoader, arg1: JArray(javawrappers.java.lang.Class, 1), arg2: javawrappers.java.lang.reflect.InvocationHandler, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getInvocationHandler(arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.reflect.InvocationHandler: ...
	def notify(self, ) -> None: ...


class JAIRMICRIF:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def mapRenderContext(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: javawrappers.java.awt.image.renderable.RenderContext, arg4: javawrappers.java.awt.image.renderable.ParameterBlock, arg5: javawrappers.java.awt.image.renderable.RenderableImage, ) -> javawrappers.java.awt.image.renderable.RenderContext: ...
	def getProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.awt.image.renderable.ParameterBlock, arg3: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def isDynamic(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getClientCapabilities(self, ) -> javawrappers.javax.media.jai.remote.NegotiableCapabilitySet: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPropertyNames(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getBounds2D(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.awt.image.renderable.ParameterBlock, ) -> javawrappers.java.awt.geom.Rectangle2D: ...
	@overload
	def create(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.awt.image.renderable.ParameterBlock, arg3: javawrappers.java.awt.RenderingHints, ) -> javawrappers.javax.media.jai.remote.RemoteRenderedImage: ...
	@overload
	def create(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.awt.image.renderable.RenderContext, arg3: javawrappers.java.awt.image.renderable.ParameterBlock, ) -> javawrappers.javax.media.jai.remote.RemoteRenderedImage: ...
	@overload
	def create(self, arg0: javawrappers.javax.media.jai.remote.PlanarImageServerProxy, arg1: javawrappers.javax.media.jai.OperationNode, arg2: javawrappers.javax.media.jai.PropertyChangeEventJAI, ) -> javawrappers.javax.media.jai.remote.RemoteRenderedImage: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class RenderingHintsState:
	def __init__(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.awt.RenderingHints, ): ...
	class HintElement:
		@overload
		def __init__(self, arg0: javawrappers.java.lang.Object, ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.reflect.Field, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getObject(self, ) -> javawrappers.java.lang.Object: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getObject(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getObject(self, ) -> javawrappers.java.lang.Object: ...
	def getObjectClass(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getSupportedClasses() -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def permitsSubclasses() -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class SerializerImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getState(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.javax.media.jai.remote.SerializableState: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSupportedClass(self, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def registerSerializers() -> None: ...
	def permitsSubclasses(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class DataBufferProxy:
	def __init__(self, arg0: javawrappers.java.awt.image.DataBuffer, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDataBuffer(self, ) -> javawrappers.java.awt.image.DataBuffer: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class SampleModelState:
	def __init__(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.awt.RenderingHints, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, ) -> javawrappers.java.lang.Object: ...
	def getObjectClass(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getSupportedClasses() -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def permitsSubclasses() -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class ColorModelProxy:
	def __init__(self, arg0: javawrappers.java.awt.image.ColorModel, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getColorModel(self, ) -> javawrappers.java.awt.image.ColorModel: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class RasterState:
	def __init__(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.awt.RenderingHints, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, ) -> javawrappers.java.lang.Object: ...
	def getObjectClass(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getSupportedClasses() -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def permitsSubclasses() -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class SerializableRenderableImage:
	@overload
	def __init__(self, arg0: javawrappers.java.awt.image.renderable.RenderableImage, arg1: javawrappers.javax.media.jai.OperationRegistry, arg2: javawrappers.java.lang.String, arg3: javawrappers.javax.media.jai.tilecodec.TileCodecParameterList, arg4: javawrappers.javax.media.jai.tilecodec.TileCodecParameterList, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.awt.image.renderable.RenderableImage, ): ...
	class :
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class RenderingServer:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def run(self, ) -> None: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def createRendering(self, arg0: javawrappers.java.awt.image.renderable.RenderContext, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def isDynamic(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def run(self, ) -> None: ...
	def getWidth(self, ) -> Union[float, JFloat]: ...
	def getSources(self, ) -> javawrappers.java.util.Vector: ...
	def notify(self, ) -> None: ...
	def getHeight(self, ) -> Union[float, JFloat]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def createScaledRendering(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPropertyNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def dispose(self, ) -> None: ...
	def createDefaultRendering(self, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def getMinX(self, ) -> Union[float, JFloat]: ...
	def getMinY(self, ) -> Union[float, JFloat]: ...


class HashSetState:
	def __init__(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.awt.RenderingHints, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, ) -> javawrappers.java.lang.Object: ...
	def getObjectClass(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getSupportedClasses() -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def permitsSubclasses() -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class RenderContextProxy:
	def __init__(self, arg0: javawrappers.java.awt.image.renderable.RenderContext, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getRenderContext(self, ) -> javawrappers.java.awt.image.renderable.RenderContext: ...
	def notify(self, ) -> None: ...


class RMIImageImpl:
	def __init__(self, ): ...
	def getMinTileX(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getMinTileY(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	@overload
	def setSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.javax.media.jai.RenderedOp, ) -> None: ...
	@overload
	def setSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.javax.media.jai.RenderableOp, arg2: javawrappers.com.sun.media.jai.rmi.RenderContextProxy, ) -> None: ...
	@overload
	def setSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.awt.image.RenderedImage, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTileWidth(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def getNumYTiles(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getWidth(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getSources(self, arg0: javawrappers.java.lang.Long, ) -> javawrappers.java.util.Vector: ...
	def getTileGridXOffset(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getBounds(self, arg0: javawrappers.java.lang.Long, ) -> javawrappers.java.awt.Rectangle: ...
	def getMaxTileY(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getMaxTileX(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getSampleModel(self, arg0: javawrappers.java.lang.Long, ) -> javawrappers.com.sun.media.jai.rmi.SampleModelProxy: ...
	def getHeight(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getPropertyNames(self, arg0: javawrappers.java.lang.Long, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getNumXTiles(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	@overload
	def getData(self, arg0: javawrappers.java.lang.Long, ) -> javawrappers.com.sun.media.jai.rmi.RasterProxy: ...
	@overload
	def getData(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.awt.Rectangle, ) -> javawrappers.com.sun.media.jai.rmi.RasterProxy: ...
	def getRemoteID(self, ) -> javawrappers.java.lang.Long: ...
	def getTileHeight(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getTile(self, arg0: javawrappers.java.lang.Long, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.com.sun.media.jai.rmi.RasterProxy: ...
	def getProperty(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getColorModel(self, arg0: javawrappers.java.lang.Long, ) -> javawrappers.com.sun.media.jai.rmi.ColorModelProxy: ...
	def getMaxX(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getMaxY(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def copyData(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.awt.Rectangle, ) -> javawrappers.com.sun.media.jai.rmi.RasterProxy: ...
	def getTileGridYOffset(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def dispose(self, arg0: javawrappers.java.lang.Long, ) -> None: ...
	def getMinX(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getMinY(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...


class RenderContextState:
	def __init__(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.awt.RenderingHints, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, ) -> javawrappers.java.lang.Object: ...
	def getObjectClass(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getSupportedClasses() -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def permitsSubclasses() -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class RMIImageImpl_Stub:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.rmi.server.RemoteRef, ): ...
	def getMinTileX(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getMinTileY(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	@overload
	def setSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.javax.media.jai.RenderableOp, arg2: javawrappers.com.sun.media.jai.rmi.RenderContextProxy, ) -> None: ...
	@overload
	def setSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.javax.media.jai.RenderedOp, ) -> None: ...
	@overload
	def setSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.awt.image.RenderedImage, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTileWidth(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def getNumYTiles(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getWidth(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getSources(self, arg0: javawrappers.java.lang.Long, ) -> javawrappers.java.util.Vector: ...
	def getTileGridXOffset(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getSampleModel(self, arg0: javawrappers.java.lang.Long, ) -> javawrappers.com.sun.media.jai.rmi.SampleModelProxy: ...
	def getHeight(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getRef(self, ) -> javawrappers.java.rmi.server.RemoteRef: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getPropertyNames(self, arg0: javawrappers.java.lang.Long, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getNumXTiles(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	@overload
	def getData(self, arg0: javawrappers.java.lang.Long, ) -> javawrappers.com.sun.media.jai.rmi.RasterProxy: ...
	@overload
	def getData(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.awt.Rectangle, ) -> javawrappers.com.sun.media.jai.rmi.RasterProxy: ...
	def getRemoteID(self, ) -> javawrappers.java.lang.Long: ...
	def getTileHeight(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getTile(self, arg0: javawrappers.java.lang.Long, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.com.sun.media.jai.rmi.RasterProxy: ...
	def getProperty(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getColorModel(self, arg0: javawrappers.java.lang.Long, ) -> javawrappers.com.sun.media.jai.rmi.ColorModelProxy: ...
	def copyData(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.awt.Rectangle, ) -> javawrappers.com.sun.media.jai.rmi.RasterProxy: ...
	def getTileGridYOffset(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def dispose(self, arg0: javawrappers.java.lang.Long, ) -> None: ...
	@staticmethod
	def toStub(arg0: javawrappers.java.rmi.Remote, ) -> javawrappers.java.rmi.Remote: ...
	def getMinX(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getMinY(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...


class JAIRMIImageServer:
	def __init__(self, arg0: Union[int, JInt], ): ...
	@staticmethod
	def setLog(arg0: javawrappers.java.io.OutputStream, ) -> None: ...
	def getMinTileX(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getMinTileY(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def exportObject(arg0: javawrappers.java.rmi.Remote, arg1: Union[int, JInt], ) -> javawrappers.java.rmi.Remote: ...
	@overload
	@staticmethod
	def exportObject(arg0: javawrappers.java.rmi.Remote, arg1: Union[int, JInt], arg2: javawrappers.java.rmi.server.RMIClientSocketFactory, arg3: javawrappers.java.rmi.server.RMIServerSocketFactory, arg4: javawrappers.java.io.ObjectInputFilter, ) -> javawrappers.java.rmi.Remote: ...
	@overload
	@staticmethod
	def exportObject(arg0: javawrappers.java.rmi.Remote, arg1: Union[int, JInt], arg2: javawrappers.java.rmi.server.RMIClientSocketFactory, arg3: javawrappers.java.rmi.server.RMIServerSocketFactory, ) -> javawrappers.java.rmi.Remote: ...
	@overload
	@staticmethod
	def exportObject(arg0: javawrappers.java.rmi.Remote, arg1: Union[int, JInt], arg2: javawrappers.java.io.ObjectInputFilter, ) -> javawrappers.java.rmi.Remote: ...
	@overload
	@staticmethod
	def exportObject(arg0: javawrappers.java.rmi.Remote, ) -> javawrappers.java.rmi.server.RemoteStub: ...
	@staticmethod
	def getLog() -> javawrappers.java.io.PrintStream: ...
	@staticmethod
	def main(arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def getNumYTiles(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getBounds(self, arg0: javawrappers.java.lang.Long, ) -> javawrappers.java.awt.Rectangle: ...
	def createRenderedOp(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.awt.image.renderable.ParameterBlock, arg3: javawrappers.javax.media.jai.remote.SerializableState, ) -> None: ...
	def getSampleModel(self, arg0: javawrappers.java.lang.Long, ) -> javawrappers.javax.media.jai.remote.SerializableState: ...
	def getRenderableHeight(self, arg0: javawrappers.java.lang.Long, ) -> Union[float, JFloat]: ...
	def getInvalidRegion(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.awt.image.renderable.ParameterBlock, arg2: javawrappers.javax.media.jai.remote.SerializableState, arg3: javawrappers.java.awt.image.renderable.ParameterBlock, arg4: javawrappers.javax.media.jai.remote.SerializableState, ) -> javawrappers.javax.media.jai.remote.SerializableState: ...
	@staticmethod
	def unexportObject(arg0: javawrappers.java.rmi.Remote, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def getPropertyNames(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	def getPropertyNames(self, arg0: javawrappers.java.lang.Long, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def setRenderableRMIServerProxyAsSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.lang.Long, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: Union[int, JInt], ) -> None: ...
	def getNumXTiles(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getRemoteID(self, ) -> javawrappers.java.lang.Long: ...
	def getTile(self, arg0: javawrappers.java.lang.Long, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.javax.media.jai.remote.SerializableState: ...
	def createRendering(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.javax.media.jai.remote.SerializableState, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def mapSourceRect(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.awt.Rectangle, arg2: Union[int, JInt], ) -> javawrappers.java.awt.Rectangle: ...
	@overload
	def isDynamic(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def isDynamic(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JBoolean]: ...
	def getServerSupportedOperationNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def mapDestRect(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.awt.Rectangle, arg2: Union[int, JInt], ) -> javawrappers.java.awt.Rectangle: ...
	def dispose(self, arg0: javawrappers.java.lang.Long, ) -> None: ...
	@overload
	def setRenderableSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.lang.Long, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: Union[int, JInt], ) -> None: ...
	@overload
	def setRenderableSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.awt.image.RenderedImage, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def setRenderableSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.javax.media.jai.RenderableOp, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def setRenderableSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.com.sun.media.jai.rmi.SerializableRenderableImage, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def setRenderableSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.lang.Long, arg2: Union[int, JInt], ) -> None: ...
	def getMinX(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getMinY(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def setServerNegotiatedValues(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.javax.media.jai.remote.NegotiableCapabilitySet, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def mapRenderContext(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Long, arg2: javawrappers.java.lang.String, arg3: javawrappers.javax.media.jai.remote.SerializableState, ) -> javawrappers.javax.media.jai.remote.SerializableState: ...
	@overload
	def getRendering(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.javax.media.jai.remote.SerializableState, ) -> javawrappers.java.lang.Long: ...
	@overload
	def getRendering(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JBoolean]: ...
	def getTileWidth(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	@overload
	def handleEvent(self, arg0: javawrappers.java.lang.Long, arg1: Union[int, JInt], arg2: javawrappers.javax.media.jai.remote.SerializableState, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Long: ...
	@overload
	def handleEvent(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Long: ...
	def notifyAll(self, ) -> None: ...
	def incrementRefCount(self, arg0: javawrappers.java.lang.Long, ) -> None: ...
	def getWidth(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getTileGridXOffset(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getRenderableWidth(self, arg0: javawrappers.java.lang.Long, ) -> Union[float, JFloat]: ...
	def getMaxTileY(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getOperationDescriptors(self, ) -> javawrappers.java.util.List: ...
	def getMaxTileX(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getHeight(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getRenderableMinY(self, arg0: javawrappers.java.lang.Long, ) -> Union[float, JFloat]: ...
	def getRenderableMinX(self, arg0: javawrappers.java.lang.Long, ) -> Union[float, JFloat]: ...
	def getRef(self, ) -> javawrappers.java.rmi.server.RemoteRef: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def createRenderableOp(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.awt.image.renderable.ParameterBlock, ) -> None: ...
	def createDefaultRendering(self, arg0: javawrappers.java.lang.Long, ) -> javawrappers.java.awt.image.RenderedImage: ...
	@overload
	def getData(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.awt.Rectangle, ) -> javawrappers.javax.media.jai.remote.SerializableState: ...
	@overload
	def getData(self, arg0: javawrappers.java.lang.Long, ) -> javawrappers.javax.media.jai.remote.SerializableState: ...
	def getTileHeight(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getProperty(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getColorModel(self, arg0: javawrappers.java.lang.Long, ) -> javawrappers.javax.media.jai.remote.SerializableState: ...
	def getMaxX(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getMaxY(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getCompressedTile(self, arg0: javawrappers.java.lang.Long, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	def setRenderedSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.lang.Long, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def setRenderedSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.lang.Long, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: Union[int, JInt], ) -> None: ...
	@overload
	def setRenderedSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.awt.image.RenderedImage, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def setRenderedSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.javax.media.jai.RenderedOp, arg2: Union[int, JInt], ) -> None: ...
	def copyData(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.awt.Rectangle, ) -> javawrappers.javax.media.jai.remote.SerializableState: ...
	def getTileGridYOffset(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getServerCapabilities(self, ) -> javawrappers.javax.media.jai.remote.NegotiableCapabilitySet: ...
	def createScaledRendering(self, arg0: javawrappers.java.lang.Long, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.javax.media.jai.remote.SerializableState, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getClientHost() -> javawrappers.java.lang.String: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def getBounds2D(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.lang.String, ) -> javawrappers.javax.media.jai.remote.SerializableState: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getNode(self, arg0: javawrappers.java.lang.Long, ) -> javawrappers.javax.media.jai.RenderedOp: ...
	@staticmethod
	def toStub(arg0: javawrappers.java.rmi.Remote, ) -> javawrappers.java.rmi.Remote: ...


class ColorModelState:
	def __init__(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.awt.RenderingHints, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, ) -> javawrappers.java.lang.Object: ...
	def getObjectClass(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getSupportedClasses() -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def permitsSubclasses() -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class VectorState:
	def __init__(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.awt.RenderingHints, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, ) -> javawrappers.java.lang.Object: ...
	def getObjectClass(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getSupportedClasses() -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def permitsSubclasses() -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class RenderableRMIServerProxy:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.awt.image.renderable.ParameterBlock, arg3: javawrappers.java.lang.Long, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def createRendering(self, arg0: javawrappers.java.awt.image.renderable.RenderContext, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def isDynamic(self, ) -> Union[int, JBoolean]: ...
	def getOperationName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getWidth(self, ) -> Union[float, JFloat]: ...
	def getSources(self, ) -> javawrappers.java.util.Vector: ...
	def getServerName(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getHeight(self, ) -> Union[float, JFloat]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def createScaledRendering(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPropertyNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getRMIID(self, ) -> javawrappers.java.lang.Long: ...
	def createDefaultRendering(self, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def getMinX(self, ) -> Union[float, JFloat]: ...
	def getMinY(self, ) -> Union[float, JFloat]: ...


class RenderedImageState:
	def __init__(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.awt.RenderingHints, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, ) -> javawrappers.java.lang.Object: ...
	def getObjectClass(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getSupportedClasses() -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def permitsSubclasses() -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class SerializableStateImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, ) -> javawrappers.java.lang.Object: ...
	def getObjectClass(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getSupportedClasses() -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def permitsSubclasses() -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class DataBufferState:
	def __init__(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.awt.RenderingHints, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, ) -> javawrappers.java.lang.Object: ...
	def getObjectClass(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getSupportedClasses() -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def permitsSubclasses() -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class ImageServer:
	def getMinTileX(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def setServerNegotiatedValues(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.javax.media.jai.remote.NegotiableCapabilitySet, ) -> None: ...
	def getMinTileY(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def mapRenderContext(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Long, arg2: javawrappers.java.lang.String, arg3: javawrappers.javax.media.jai.remote.SerializableState, ) -> javawrappers.javax.media.jai.remote.SerializableState: ...
	@overload
	def getRendering(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JBoolean]: ...
	@overload
	def getRendering(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.javax.media.jai.remote.SerializableState, ) -> javawrappers.java.lang.Long: ...
	def getTileWidth(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	@overload
	def handleEvent(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Long: ...
	@overload
	def handleEvent(self, arg0: javawrappers.java.lang.Long, arg1: Union[int, JInt], arg2: javawrappers.javax.media.jai.remote.SerializableState, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Long: ...
	def getNumYTiles(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def incrementRefCount(self, arg0: javawrappers.java.lang.Long, ) -> None: ...
	def getWidth(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getTileGridXOffset(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getRenderableWidth(self, arg0: javawrappers.java.lang.Long, ) -> Union[float, JFloat]: ...
	def createRenderedOp(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.awt.image.renderable.ParameterBlock, arg3: javawrappers.javax.media.jai.remote.SerializableState, ) -> None: ...
	def getOperationDescriptors(self, ) -> javawrappers.java.util.List: ...
	def getSampleModel(self, arg0: javawrappers.java.lang.Long, ) -> javawrappers.javax.media.jai.remote.SerializableState: ...
	def getHeight(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getRenderableHeight(self, arg0: javawrappers.java.lang.Long, ) -> Union[float, JFloat]: ...
	def getRenderableMinY(self, arg0: javawrappers.java.lang.Long, ) -> Union[float, JFloat]: ...
	def getInvalidRegion(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.awt.image.renderable.ParameterBlock, arg2: javawrappers.javax.media.jai.remote.SerializableState, arg3: javawrappers.java.awt.image.renderable.ParameterBlock, arg4: javawrappers.javax.media.jai.remote.SerializableState, ) -> javawrappers.javax.media.jai.remote.SerializableState: ...
	def getRenderableMinX(self, arg0: javawrappers.java.lang.Long, ) -> Union[float, JFloat]: ...
	@overload
	def getPropertyNames(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	def getPropertyNames(self, arg0: javawrappers.java.lang.Long, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def setRenderableRMIServerProxyAsSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.lang.Long, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: Union[int, JInt], ) -> None: ...
	def createRenderableOp(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.awt.image.renderable.ParameterBlock, ) -> None: ...
	def createDefaultRendering(self, arg0: javawrappers.java.lang.Long, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def getNumXTiles(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	@overload
	def getData(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.awt.Rectangle, ) -> javawrappers.javax.media.jai.remote.SerializableState: ...
	@overload
	def getData(self, arg0: javawrappers.java.lang.Long, ) -> javawrappers.javax.media.jai.remote.SerializableState: ...
	def getRemoteID(self, ) -> javawrappers.java.lang.Long: ...
	def getTileHeight(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getTile(self, arg0: javawrappers.java.lang.Long, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.javax.media.jai.remote.SerializableState: ...
	def createRendering(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.javax.media.jai.remote.SerializableState, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def mapSourceRect(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.awt.Rectangle, arg2: Union[int, JInt], ) -> javawrappers.java.awt.Rectangle: ...
	def getProperty(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getColorModel(self, arg0: javawrappers.java.lang.Long, ) -> javawrappers.javax.media.jai.remote.SerializableState: ...
	@overload
	def isDynamic(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def isDynamic(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JBoolean]: ...
	def getCompressedTile(self, arg0: javawrappers.java.lang.Long, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	def setRenderedSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.awt.image.RenderedImage, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def setRenderedSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.lang.Long, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def setRenderedSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.javax.media.jai.RenderedOp, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def setRenderedSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.lang.Long, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: Union[int, JInt], ) -> None: ...
	def copyData(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.awt.Rectangle, ) -> javawrappers.javax.media.jai.remote.SerializableState: ...
	def getServerSupportedOperationNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getTileGridYOffset(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def mapDestRect(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.awt.Rectangle, arg2: Union[int, JInt], ) -> javawrappers.java.awt.Rectangle: ...
	def getServerCapabilities(self, ) -> javawrappers.javax.media.jai.remote.NegotiableCapabilitySet: ...
	def createScaledRendering(self, arg0: javawrappers.java.lang.Long, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.javax.media.jai.remote.SerializableState, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def getBounds2D(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.lang.String, ) -> javawrappers.javax.media.jai.remote.SerializableState: ...
	def dispose(self, arg0: javawrappers.java.lang.Long, ) -> None: ...
	def getNode(self, arg0: javawrappers.java.lang.Long, ) -> javawrappers.javax.media.jai.RenderedOp: ...
	@overload
	def setRenderableSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.javax.media.jai.RenderableOp, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def setRenderableSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.lang.Long, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: Union[int, JInt], ) -> None: ...
	@overload
	def setRenderableSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.lang.Long, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def setRenderableSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.awt.image.RenderedImage, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def setRenderableSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.com.sun.media.jai.rmi.SerializableRenderableImage, arg2: Union[int, JInt], ) -> None: ...
	def getMinX(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getMinY(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...


class SampleModelProxy:
	def __init__(self, arg0: javawrappers.java.awt.image.SampleModel, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getSampleModel(self, ) -> javawrappers.java.awt.image.SampleModel: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class RMIServerProxy:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.awt.RenderingHints, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.awt.image.renderable.ParameterBlock, arg3: javawrappers.java.awt.RenderingHints, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.awt.image.renderable.ParameterBlock, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.awt.RenderingHints, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.awt.image.renderable.ParameterBlock, arg3: javawrappers.java.awt.RenderingHints, arg4: javawrappers.java.lang.Long, ): ...
	@overload
	def __init__(self, arg0: javawrappers.javax.media.jai.remote.PlanarImageServerProxy, arg1: javawrappers.javax.media.jai.OperationNode, arg2: javawrappers.javax.media.jai.PropertyChangeEventJAI, ): ...
	@overload
	def __init__(self, arg0: javawrappers.javax.media.jai.remote.PlanarImageServerProxy, arg1: javawrappers.javax.media.jai.OperationNode, arg2: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.awt.image.renderable.ParameterBlock, arg3: javawrappers.java.awt.image.renderable.RenderContext, arg4: Union[int, JBoolean], ): ...
	def getMinTileX(self, ) -> Union[int, JInt]: ...
	def getMinTileY(self, ) -> Union[int, JInt]: ...
	def getOperationName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def tileXToX(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def tileXToX(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getAsBufferedImage(self, ) -> javawrappers.java.awt.image.BufferedImage: ...
	@overload
	def getAsBufferedImage(self, arg0: javawrappers.java.awt.Rectangle, arg1: javawrappers.java.awt.image.ColorModel, ) -> javawrappers.java.awt.image.BufferedImage: ...
	@staticmethod
	def createColorModel(arg0: javawrappers.java.awt.image.SampleModel, ) -> javawrappers.java.awt.image.ColorModel: ...
	def getServerName(self, ) -> javawrappers.java.lang.String: ...
	def getBounds(self, ) -> javawrappers.java.awt.Rectangle: ...
	def copyExtendedData(self, arg0: javawrappers.java.awt.image.WritableRaster, arg1: javawrappers.javax.media.jai.BorderExtender, ) -> None: ...
	def getTileComputationListeners(self, ) -> JArray(javawrappers.javax.media.jai.TileComputationListener, 1): ...
	def createSnapshot(self, ) -> javawrappers.javax.media.jai.PlanarImage: ...
	@overload
	def YToTileY(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def YToTileY(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getPropertyNames(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	def getPropertyNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	@staticmethod
	def XToTileX(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def XToTileX(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def queueTiles(self, arg0: JArray(javawrappers.java.awt.Point, 1), ) -> javawrappers.javax.media.jai.TileRequest: ...
	def setNumRetries(self, arg0: Union[int, JInt], ) -> None: ...
	def getTileFactory(self, ) -> javawrappers.javax.media.jai.TileFactory: ...
	def getRenderingID(self, ) -> javawrappers.java.lang.Long: ...
	def setNegotiationPreferences(self, arg0: javawrappers.javax.media.jai.remote.NegotiableCapabilitySet, ) -> None: ...
	def getProtocolName(self, ) -> javawrappers.java.lang.String: ...
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getNegotiatedValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.media.jai.remote.NegotiableCapability: ...
	def getSplits(self, arg0: javawrappers.javax.media.jai.IntegerSequence, arg1: javawrappers.javax.media.jai.IntegerSequence, arg2: javawrappers.java.awt.Rectangle, ) -> None: ...
	def getMinX(self, ) -> Union[int, JInt]: ...
	def getMinY(self, ) -> Union[int, JInt]: ...
	def setServerNegotiatedValues(self, arg0: javawrappers.javax.media.jai.remote.NegotiableCapabilitySet, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTileWidth(self, ) -> Union[int, JInt]: ...
	def getImageID(self, ) -> javawrappers.java.lang.Object: ...
	def setTileCache(self, arg0: javawrappers.javax.media.jai.TileCache, ) -> None: ...
	@staticmethod
	def getDefaultColorModel(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.ColorModel: ...
	def getWidth(self, ) -> Union[int, JInt]: ...
	def addTileComputationListener(self, arg0: javawrappers.javax.media.jai.TileComputationListener, ) -> None: ...
	def removeSink(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getTileGridXOffset(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def overlapsMultipleTiles(self, arg0: javawrappers.java.awt.Rectangle, ) -> Union[int, JBoolean]: ...
	def getMaxTileY(self, ) -> Union[int, JInt]: ...
	def getMaxTileX(self, ) -> Union[int, JInt]: ...
	def getHeight(self, ) -> Union[int, JInt]: ...
	def computeTile(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.Raster: ...
	def getSourceImage(self, arg0: Union[int, JInt], ) -> javawrappers.javax.media.jai.PlanarImage: ...
	def addSink(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getData(self, arg0: javawrappers.java.awt.Rectangle, ) -> javawrappers.java.awt.image.Raster: ...
	@overload
	def getData(self, ) -> javawrappers.java.awt.image.Raster: ...
	def getTileHeight(self, ) -> Union[int, JInt]: ...
	def getColorModel(self, ) -> javawrappers.java.awt.image.ColorModel: ...
	def setRetryInterval(self, arg0: Union[int, JInt], ) -> None: ...
	def getMaxX(self, ) -> Union[int, JInt]: ...
	def getMaxY(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def wrapRenderedImage(arg0: javawrappers.java.awt.image.RenderedImage, ) -> javawrappers.javax.media.jai.PlanarImage: ...
	@overload
	def copyData(self, arg0: javawrappers.java.awt.image.WritableRaster, ) -> javawrappers.java.awt.image.WritableRaster: ...
	@overload
	def copyData(self, ) -> javawrappers.java.awt.image.WritableRaster: ...
	def getNumRetries(self, ) -> Union[int, JInt]: ...
	def getTileGridYOffset(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTileRect(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.Rectangle: ...
	def getRMIID(self, ) -> javawrappers.java.lang.Long: ...
	def getNegotiationPreferences(self, ) -> javawrappers.javax.media.jai.remote.NegotiableCapabilitySet: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getRetryInterval(self, ) -> Union[int, JInt]: ...
	def canBeRendered(self, ) -> Union[int, JBoolean]: ...
	def prefetchTiles(self, arg0: JArray(javawrappers.java.awt.Point, 1), ) -> None: ...
	def getNumYTiles(self, ) -> Union[int, JInt]: ...
	def getNegotiatedValues(self, ) -> javawrappers.javax.media.jai.remote.NegotiableCapabilitySet: ...
	def getSampleModel(self, ) -> javawrappers.java.awt.image.SampleModel: ...
	def getRemotePropertyNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def cancelTiles(self, arg0: javawrappers.javax.media.jai.TileRequest, arg1: JArray(javawrappers.java.awt.Point, 1), ) -> None: ...
	def getNumXTiles(self, ) -> Union[int, JInt]: ...
	def getTileCache(self, ) -> javawrappers.javax.media.jai.TileCache: ...
	def getTile(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.Raster: ...
	def mapSourceRect(self, arg0: javawrappers.java.awt.Rectangle, arg1: Union[int, JInt], ) -> javawrappers.java.awt.Rectangle: ...
	@overload
	def tileYToY(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def tileYToY(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getSinks(self, ) -> javawrappers.java.util.Vector: ...
	def getImageLayout(self, ) -> javawrappers.javax.media.jai.ImageLayout: ...
	@overload
	def removePropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	@overload
	def removePropertyChangeListener(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def mapDestRect(self, arg0: javawrappers.java.awt.Rectangle, arg1: Union[int, JInt], ) -> javawrappers.java.awt.Rectangle: ...
	def getSource(self, arg0: Union[int, JInt], ) -> javawrappers.javax.media.jai.PlanarImage: ...
	def getTileIndices(self, arg0: javawrappers.java.awt.Rectangle, ) -> JArray(javawrappers.java.awt.Point, 1): ...
	def dispose(self, ) -> None: ...
	def removeProperty(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getRenderingHints(self, ) -> javawrappers.java.awt.RenderingHints: ...
	def getNumBands(self, ) -> Union[int, JInt]: ...
	def getSources(self, ) -> javawrappers.java.util.Vector: ...
	def getTileCacheMetric(self, ) -> javawrappers.java.lang.Object: ...
	def removeSinks(self, ) -> None: ...
	def removeTileComputationListener(self, arg0: javawrappers.javax.media.jai.TileComputationListener, ) -> None: ...
	def getParameterBlock(self, ) -> javawrappers.java.awt.image.renderable.ParameterBlock: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getExtendedData(self, arg0: javawrappers.java.awt.Rectangle, arg1: javawrappers.javax.media.jai.BorderExtender, ) -> javawrappers.java.awt.image.Raster: ...
	def getGraphics(self, ) -> javawrappers.java.awt.Graphics: ...
	@overload
	def addPropertyChangeListener(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	@overload
	def addPropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def getPropertyClass(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
	def getNumSources(self, ) -> Union[int, JInt]: ...
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getSourceObject(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def getRemoteProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getTiles(self, arg0: JArray(javawrappers.java.awt.Point, 1), ) -> JArray(javawrappers.java.awt.image.Raster, 1): ...
	@overload
	def getTiles(self, ) -> JArray(javawrappers.java.awt.image.Raster, 1): ...


class InterfaceState:
	def __init__(self, arg0: javawrappers.java.lang.Object, arg1: JArray(javawrappers.javax.media.jai.remote.Serializer, 1), arg2: javawrappers.java.awt.RenderingHints, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, ) -> javawrappers.java.lang.Object: ...
	def getObjectClass(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class HashtableState:
	def __init__(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.awt.RenderingHints, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, ) -> javawrappers.java.lang.Object: ...
	def getObjectClass(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getSupportedClasses() -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def permitsSubclasses() -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class RasterProxy:
	def __init__(self, arg0: javawrappers.java.awt.image.Raster, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getRaster(self, ) -> javawrappers.java.awt.image.Raster: ...


class JAIRMIImageServer_Stub:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.rmi.server.RemoteRef, ): ...
	def getMinTileX(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getMinTileY(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getNumYTiles(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def createRenderedOp(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.awt.image.renderable.ParameterBlock, arg3: javawrappers.javax.media.jai.remote.SerializableState, ) -> None: ...
	def getSampleModel(self, arg0: javawrappers.java.lang.Long, ) -> javawrappers.javax.media.jai.remote.SerializableState: ...
	def getRenderableHeight(self, arg0: javawrappers.java.lang.Long, ) -> Union[float, JFloat]: ...
	def getInvalidRegion(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.awt.image.renderable.ParameterBlock, arg2: javawrappers.javax.media.jai.remote.SerializableState, arg3: javawrappers.java.awt.image.renderable.ParameterBlock, arg4: javawrappers.javax.media.jai.remote.SerializableState, ) -> javawrappers.javax.media.jai.remote.SerializableState: ...
	@overload
	def getPropertyNames(self, arg0: javawrappers.java.lang.Long, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	def getPropertyNames(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def setRenderableRMIServerProxyAsSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.lang.Long, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: Union[int, JInt], ) -> None: ...
	def getNumXTiles(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getRemoteID(self, ) -> javawrappers.java.lang.Long: ...
	def getTile(self, arg0: javawrappers.java.lang.Long, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.javax.media.jai.remote.SerializableState: ...
	def createRendering(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.javax.media.jai.remote.SerializableState, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def mapSourceRect(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.awt.Rectangle, arg2: Union[int, JInt], ) -> javawrappers.java.awt.Rectangle: ...
	@overload
	def isDynamic(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def isDynamic(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JBoolean]: ...
	def getServerSupportedOperationNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def mapDestRect(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.awt.Rectangle, arg2: Union[int, JInt], ) -> javawrappers.java.awt.Rectangle: ...
	def dispose(self, arg0: javawrappers.java.lang.Long, ) -> None: ...
	@overload
	def setRenderableSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.com.sun.media.jai.rmi.SerializableRenderableImage, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def setRenderableSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.javax.media.jai.RenderableOp, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def setRenderableSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.lang.Long, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: Union[int, JInt], ) -> None: ...
	@overload
	def setRenderableSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.lang.Long, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def setRenderableSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.awt.image.RenderedImage, arg2: Union[int, JInt], ) -> None: ...
	def getMinX(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getMinY(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def setServerNegotiatedValues(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.javax.media.jai.remote.NegotiableCapabilitySet, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def mapRenderContext(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Long, arg2: javawrappers.java.lang.String, arg3: javawrappers.javax.media.jai.remote.SerializableState, ) -> javawrappers.javax.media.jai.remote.SerializableState: ...
	@overload
	def getRendering(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JBoolean]: ...
	@overload
	def getRendering(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.javax.media.jai.remote.SerializableState, ) -> javawrappers.java.lang.Long: ...
	def getTileWidth(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	@overload
	def handleEvent(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Long: ...
	@overload
	def handleEvent(self, arg0: javawrappers.java.lang.Long, arg1: Union[int, JInt], arg2: javawrappers.javax.media.jai.remote.SerializableState, arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Long: ...
	def notifyAll(self, ) -> None: ...
	def incrementRefCount(self, arg0: javawrappers.java.lang.Long, ) -> None: ...
	def getWidth(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getTileGridXOffset(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getRenderableWidth(self, arg0: javawrappers.java.lang.Long, ) -> Union[float, JFloat]: ...
	def getOperationDescriptors(self, ) -> javawrappers.java.util.List: ...
	def getHeight(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getRenderableMinY(self, arg0: javawrappers.java.lang.Long, ) -> Union[float, JFloat]: ...
	def getRenderableMinX(self, arg0: javawrappers.java.lang.Long, ) -> Union[float, JFloat]: ...
	def getRef(self, ) -> javawrappers.java.rmi.server.RemoteRef: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def createRenderableOp(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.awt.image.renderable.ParameterBlock, ) -> None: ...
	def createDefaultRendering(self, arg0: javawrappers.java.lang.Long, ) -> javawrappers.java.awt.image.RenderedImage: ...
	@overload
	def getData(self, arg0: javawrappers.java.lang.Long, ) -> javawrappers.javax.media.jai.remote.SerializableState: ...
	@overload
	def getData(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.awt.Rectangle, ) -> javawrappers.javax.media.jai.remote.SerializableState: ...
	def getTileHeight(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getProperty(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getColorModel(self, arg0: javawrappers.java.lang.Long, ) -> javawrappers.javax.media.jai.remote.SerializableState: ...
	def getCompressedTile(self, arg0: javawrappers.java.lang.Long, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	def setRenderedSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.lang.Long, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: Union[int, JInt], ) -> None: ...
	@overload
	def setRenderedSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.javax.media.jai.RenderedOp, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def setRenderedSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.lang.Long, arg2: Union[int, JInt], ) -> None: ...
	@overload
	def setRenderedSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.awt.image.RenderedImage, arg2: Union[int, JInt], ) -> None: ...
	def copyData(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.awt.Rectangle, ) -> javawrappers.javax.media.jai.remote.SerializableState: ...
	def getTileGridYOffset(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getServerCapabilities(self, ) -> javawrappers.javax.media.jai.remote.NegotiableCapabilitySet: ...
	def createScaledRendering(self, arg0: javawrappers.java.lang.Long, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.javax.media.jai.remote.SerializableState, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getBounds2D(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.lang.String, ) -> javawrappers.javax.media.jai.remote.SerializableState: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getNode(self, arg0: javawrappers.java.lang.Long, ) -> javawrappers.javax.media.jai.RenderedOp: ...
	@staticmethod
	def toStub(arg0: javawrappers.java.rmi.Remote, ) -> javawrappers.java.rmi.Remote: ...


class RMIImageImpl_Skel:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getOperations(self, ) -> JArray(javawrappers.java.rmi.server.Operation, 1): ...
	def dispatch(self, arg0: javawrappers.java.rmi.Remote, arg1: javawrappers.java.rmi.server.RemoteCall, arg2: Union[int, JInt], arg3: Union[long, JLong], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ShapeState:
	def __init__(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.awt.RenderingHints, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, ) -> javawrappers.java.lang.Object: ...
	def getObjectClass(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getSupportedClasses() -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def permitsSubclasses() -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class RenderingKeyState:
	def __init__(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.awt.RenderingHints, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, ) -> javawrappers.java.lang.Object: ...
	def getObjectClass(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getSupportedClasses() -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def permitsSubclasses() -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class RMIImage:
	def getTileHeight(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getMinTileX(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getMinTileY(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getTile(self, arg0: javawrappers.java.lang.Long, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.com.sun.media.jai.rmi.RasterProxy: ...
	@overload
	def setSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.javax.media.jai.RenderedOp, ) -> None: ...
	@overload
	def setSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.awt.image.RenderedImage, ) -> None: ...
	@overload
	def setSource(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.javax.media.jai.RenderableOp, arg2: javawrappers.com.sun.media.jai.rmi.RenderContextProxy, ) -> None: ...
	def getTileWidth(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getProperty(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getColorModel(self, arg0: javawrappers.java.lang.Long, ) -> javawrappers.com.sun.media.jai.rmi.ColorModelProxy: ...
	def getNumYTiles(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getWidth(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getSources(self, arg0: javawrappers.java.lang.Long, ) -> javawrappers.java.util.Vector: ...
	def getTileGridXOffset(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def copyData(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.awt.Rectangle, ) -> javawrappers.com.sun.media.jai.rmi.RasterProxy: ...
	def getTileGridYOffset(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getSampleModel(self, arg0: javawrappers.java.lang.Long, ) -> javawrappers.com.sun.media.jai.rmi.SampleModelProxy: ...
	def getHeight(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getPropertyNames(self, arg0: javawrappers.java.lang.Long, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def dispose(self, arg0: javawrappers.java.lang.Long, ) -> None: ...
	def getNumXTiles(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	@overload
	def getData(self, arg0: javawrappers.java.lang.Long, arg1: javawrappers.java.awt.Rectangle, ) -> javawrappers.com.sun.media.jai.rmi.RasterProxy: ...
	@overload
	def getData(self, arg0: javawrappers.java.lang.Long, ) -> javawrappers.com.sun.media.jai.rmi.RasterProxy: ...
	def getMinX(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...
	def getRemoteID(self, ) -> javawrappers.java.lang.Long: ...
	def getMinY(self, arg0: javawrappers.java.lang.Long, ) -> Union[int, JInt]: ...


class JAIRMIImageServer_Skel:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getOperations(self, ) -> JArray(javawrappers.java.rmi.server.Operation, 1): ...
	def dispatch(self, arg0: javawrappers.java.rmi.Remote, arg1: javawrappers.java.rmi.server.RemoteCall, arg2: Union[int, JInt], arg3: Union[long, JLong], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


