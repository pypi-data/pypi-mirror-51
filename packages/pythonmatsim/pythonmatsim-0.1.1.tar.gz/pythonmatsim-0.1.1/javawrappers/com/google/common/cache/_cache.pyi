################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.com.google.common.cache
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.time
import javawrappers.java.io
import javawrappers.com.google.common.base
import javawrappers.java.util.concurrent
import javawrappers.com.google.common.util.concurrent
import javawrappers.java.util.function
import javawrappers.com.google.common.collect

from jpype.types import *
from typing import Union

from typing import overload

class Cache:
	def getAllPresent(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.collect.ImmutableMap: ...
	def size(self, ) -> Union[long, JLong]: ...
	@overload
	def invalidateAll(self, arg0: javawrappers.java.lang.Iterable, ) -> None: ...
	@overload
	def invalidateAll(self, ) -> None: ...
	def cleanUp(self, ) -> None: ...
	def stats(self, ) -> javawrappers.com.google.common.cache.CacheStats: ...
	def asMap(self, ) -> javawrappers.java.util.concurrent.ConcurrentMap: ...
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def get(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.concurrent.Callable, ) -> javawrappers.java.lang.Object: ...
	def invalidate(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getIfPresent(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class ForwardingCache:
	class SimpleForwardingCache:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getAllPresent(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.collect.ImmutableMap: ...
		def asMap(self, ) -> javawrappers.java.util.concurrent.ConcurrentMap: ...
		def notifyAll(self, ) -> None: ...
		def invalidate(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def notify(self, ) -> None: ...
		def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
		def size(self, ) -> Union[long, JLong]: ...
		@overload
		def invalidateAll(self, ) -> None: ...
		@overload
		def invalidateAll(self, arg0: javawrappers.java.lang.Iterable, ) -> None: ...
		def cleanUp(self, ) -> None: ...
		def stats(self, ) -> javawrappers.com.google.common.cache.CacheStats: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
		def get(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.concurrent.Callable, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getIfPresent(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAllPresent(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.collect.ImmutableMap: ...
	def asMap(self, ) -> javawrappers.java.util.concurrent.ConcurrentMap: ...
	def notifyAll(self, ) -> None: ...
	def invalidate(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def notify(self, ) -> None: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def size(self, ) -> Union[long, JLong]: ...
	@overload
	def invalidateAll(self, ) -> None: ...
	@overload
	def invalidateAll(self, arg0: javawrappers.java.lang.Iterable, ) -> None: ...
	def cleanUp(self, ) -> None: ...
	def stats(self, ) -> javawrappers.com.google.common.cache.CacheStats: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def get(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.concurrent.Callable, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getIfPresent(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class RemovalListener:
	def onRemoval(self, arg0: javawrappers.com.google.common.cache.RemovalNotification, ) -> None: ...


class Weigher:
	def weigh(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...


class RemovalListeners:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def asynchronous(arg0: javawrappers.com.google.common.cache.RemovalListener, arg1: javawrappers.java.util.concurrent.Executor, ) -> javawrappers.com.google.common.cache.RemovalListener: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class AbstractCache:
	class SimpleStatsCounter:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def recordLoadException(self, arg0: Union[long, JLong], ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def recordLoadSuccess(self, arg0: Union[long, JLong], ) -> None: ...
		def notify(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def incrementBy(self, arg0: javawrappers.com.google.common.cache.AbstractCache.StatsCounter, ) -> None: ...
		def recordEviction(self, ) -> None: ...
		def recordHits(self, arg0: Union[int, JInt], ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def recordMisses(self, arg0: Union[int, JInt], ) -> None: ...
		def snapshot(self, ) -> javawrappers.com.google.common.cache.CacheStats: ...


	class StatsCounter:
		def recordLoadException(self, arg0: Union[long, JLong], ) -> None: ...
		def recordEviction(self, ) -> None: ...
		def recordHits(self, arg0: Union[int, JInt], ) -> None: ...
		def recordMisses(self, arg0: Union[int, JInt], ) -> None: ...
		def recordLoadSuccess(self, arg0: Union[long, JLong], ) -> None: ...
		def snapshot(self, ) -> javawrappers.com.google.common.cache.CacheStats: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def recordLoadException(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def recordLoadException(self, arg0: Union[long, JLong], ) -> None: ...
	def asMap(self, ) -> javawrappers.java.util.concurrent.ConcurrentMap: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def cleanUp(self, ) -> None: ...
	def stats(self, ) -> javawrappers.com.google.common.cache.CacheStats: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def incrementBy(self, arg0: javawrappers.com.google.common.cache.AbstractCache.StatsCounter, ) -> None: ...
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def get(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.concurrent.Callable, ) -> javawrappers.java.lang.Object: ...
	@overload
	def recordMisses(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def recordMisses(self, arg0: Union[int, JInt], ) -> None: ...
	def getIfPresent(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getAllPresent(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.collect.ImmutableMap: ...
	def invalidate(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def recordLoadSuccess(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def recordLoadSuccess(self, arg0: Union[long, JLong], ) -> None: ...
	def size(self, ) -> Union[long, JLong]: ...
	@overload
	def invalidateAll(self, arg0: javawrappers.java.lang.Iterable, ) -> None: ...
	@overload
	def invalidateAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def recordEviction(self, ) -> None: ...
	@overload
	def recordEviction(self, ) -> None: ...
	@overload
	def recordHits(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def recordHits(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def snapshot(self, ) -> javawrappers.com.google.common.cache.CacheStats: ...
	@overload
	def snapshot(self, ) -> javawrappers.com.google.common.cache.CacheStats: ...


class CacheLoader:
	class InvalidCacheLoadException:
		def __init__(self, arg0: javawrappers.java.lang.String, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
		@overload
		def printStackTrace(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
		def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
		def getMessage(self, ) -> javawrappers.java.lang.String: ...
		def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
		def notify(self, ) -> None: ...
		def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
		def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


	class UnsupportedLoadingOperationException:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
		@overload
		def printStackTrace(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
		def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
		def getMessage(self, ) -> javawrappers.java.lang.String: ...
		def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
		def notify(self, ) -> None: ...
		def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
		def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


	class SupplierToCacheLoader:
		def __init__(self, arg0: javawrappers.com.google.common.base.Supplier, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def reload(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.util.concurrent.ListenableFuture: ...
		def load(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@staticmethod
		def asyncReloading(arg0: javawrappers.com.google.common.cache.CacheLoader, arg1: javawrappers.java.util.concurrent.Executor, ) -> javawrappers.com.google.common.cache.CacheLoader: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		@staticmethod
		def from_(arg0: javawrappers.com.google.common.base.Supplier, ) -> javawrappers.com.google.common.cache.CacheLoader: ...
		@overload
		@staticmethod
		def from_(arg0: javawrappers.com.google.common.base.Function, ) -> javawrappers.com.google.common.cache.CacheLoader: ...
		def loadAll(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.java.util.Map: ...
		def notify(self, ) -> None: ...


	class FunctionToCacheLoader:
		def __init__(self, arg0: javawrappers.com.google.common.base.Function, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def reload(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.util.concurrent.ListenableFuture: ...
		def load(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@staticmethod
		def asyncReloading(arg0: javawrappers.com.google.common.cache.CacheLoader, arg1: javawrappers.java.util.concurrent.Executor, ) -> javawrappers.com.google.common.cache.CacheLoader: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		@staticmethod
		def from_(arg0: javawrappers.com.google.common.base.Supplier, ) -> javawrappers.com.google.common.cache.CacheLoader: ...
		@overload
		@staticmethod
		def from_(arg0: javawrappers.com.google.common.base.Function, ) -> javawrappers.com.google.common.cache.CacheLoader: ...
		def loadAll(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.java.util.Map: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def loadAll(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.java.util.Map: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def reload(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.util.concurrent.ListenableFuture: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	@overload
	def load(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def load(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def load(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def asyncReloading(arg0: javawrappers.com.google.common.cache.CacheLoader, arg1: javawrappers.java.util.concurrent.Executor, ) -> javawrappers.com.google.common.cache.CacheLoader: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def from_(arg0: javawrappers.com.google.common.base.Supplier, ) -> javawrappers.com.google.common.cache.CacheLoader: ...
	@overload
	@staticmethod
	def from_(arg0: javawrappers.com.google.common.base.Function, ) -> javawrappers.com.google.common.cache.CacheLoader: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class ForwardingLoadingCache:
	class SimpleForwardingLoadingCache:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getAllPresent(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.collect.ImmutableMap: ...
		def getAll(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.collect.ImmutableMap: ...
		def apply(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def asMap(self, ) -> javawrappers.java.util.concurrent.ConcurrentMap: ...
		def notifyAll(self, ) -> None: ...
		def refresh(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def invalidate(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def getUnchecked(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def andThen(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.function.Function: ...
		def notify(self, ) -> None: ...
		def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
		def size(self, ) -> Union[long, JLong]: ...
		@overload
		def invalidateAll(self, ) -> None: ...
		@overload
		def invalidateAll(self, arg0: javawrappers.java.lang.Iterable, ) -> None: ...
		def compose(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.function.Function: ...
		def cleanUp(self, ) -> None: ...
		def stats(self, ) -> javawrappers.com.google.common.cache.CacheStats: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
		@overload
		def get(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.concurrent.Callable, ) -> javawrappers.java.lang.Object: ...
		@overload
		def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getIfPresent(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAllPresent(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.collect.ImmutableMap: ...
	def getAll(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.collect.ImmutableMap: ...
	def apply(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def asMap(self, ) -> javawrappers.java.util.concurrent.ConcurrentMap: ...
	def notifyAll(self, ) -> None: ...
	def refresh(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def invalidate(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getUnchecked(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def andThen(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.function.Function: ...
	def notify(self, ) -> None: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def size(self, ) -> Union[long, JLong]: ...
	@overload
	def invalidateAll(self, ) -> None: ...
	@overload
	def invalidateAll(self, arg0: javawrappers.java.lang.Iterable, ) -> None: ...
	def compose(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.function.Function: ...
	def cleanUp(self, ) -> None: ...
	def stats(self, ) -> javawrappers.com.google.common.cache.CacheStats: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.concurrent.Callable, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getIfPresent(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class RemovalNotification:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getKey(self, ) -> javawrappers.java.lang.Object: ...
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def wasEvicted(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def create(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.com.google.common.cache.RemovalCause, ) -> javawrappers.com.google.common.cache.RemovalNotification: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.com.google.common.cache.RemovalCause: ...
	def notify(self, ) -> None: ...


class CacheBuilder:
	class OneWeigher:
		INSTANCE: CacheBuilder.OneWeigher = ...
		def weigh(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.cache.CacheBuilder.OneWeigher: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def values() -> JArray(javawrappers.com.google.common.cache.CacheBuilder.OneWeigher, 1): ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class NullListener:
		INSTANCE: CacheBuilder.NullListener = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.cache.CacheBuilder.NullListener: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def values() -> JArray(javawrappers.com.google.common.cache.CacheBuilder.NullListener, 1): ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def onRemoval(self, arg0: javawrappers.com.google.common.cache.RemovalNotification, ) -> None: ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def weigh(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def weakValues(self, ) -> javawrappers.com.google.common.cache.CacheBuilder: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def weakKeys(self, ) -> javawrappers.com.google.common.cache.CacheBuilder: ...
	@overload
	def refreshAfterWrite(self, arg0: javawrappers.java.time.Duration, ) -> javawrappers.com.google.common.cache.CacheBuilder: ...
	@overload
	def refreshAfterWrite(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.concurrent.TimeUnit, ) -> javawrappers.com.google.common.cache.CacheBuilder: ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.com.google.common.cache.CacheBuilder.OneWeigher, 1): ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.com.google.common.cache.CacheBuilder.NullListener, 1): ...
	def notifyAll(self, ) -> None: ...
	def initialCapacity(self, arg0: Union[int, JInt], ) -> javawrappers.com.google.common.cache.CacheBuilder: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	@overload
	def expireAfterAccess(self, arg0: javawrappers.java.time.Duration, ) -> javawrappers.com.google.common.cache.CacheBuilder: ...
	@overload
	def expireAfterAccess(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.concurrent.TimeUnit, ) -> javawrappers.com.google.common.cache.CacheBuilder: ...
	def notify(self, ) -> None: ...
	def maximumWeight(self, arg0: Union[long, JLong], ) -> javawrappers.com.google.common.cache.CacheBuilder: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def concurrencyLevel(self, arg0: Union[int, JInt], ) -> javawrappers.com.google.common.cache.CacheBuilder: ...
	def recordStats(self, ) -> javawrappers.com.google.common.cache.CacheBuilder: ...
	def softValues(self, ) -> javawrappers.com.google.common.cache.CacheBuilder: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def from_(arg0: javawrappers.com.google.common.cache.CacheBuilderSpec, ) -> javawrappers.com.google.common.cache.CacheBuilder: ...
	@overload
	@staticmethod
	def from_(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.cache.CacheBuilder: ...
	def ticker(self, arg0: javawrappers.com.google.common.base.Ticker, ) -> javawrappers.com.google.common.cache.CacheBuilder: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.cache.CacheBuilder.OneWeigher: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.cache.CacheBuilder.NullListener: ...
	@staticmethod
	def newBuilder() -> javawrappers.com.google.common.cache.CacheBuilder: ...
	@overload
	def expireAfterWrite(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.concurrent.TimeUnit, ) -> javawrappers.com.google.common.cache.CacheBuilder: ...
	@overload
	def expireAfterWrite(self, arg0: javawrappers.java.time.Duration, ) -> javawrappers.com.google.common.cache.CacheBuilder: ...
	@overload
	def build(self, arg0: javawrappers.com.google.common.cache.CacheLoader, ) -> javawrappers.com.google.common.cache.LoadingCache: ...
	@overload
	def build(self, ) -> javawrappers.com.google.common.cache.Cache: ...
	def onRemoval(self, arg0: javawrappers.com.google.common.cache.RemovalNotification, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def maximumSize(self, arg0: Union[long, JLong], ) -> javawrappers.com.google.common.cache.CacheBuilder: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def removalListener(self, arg0: javawrappers.com.google.common.cache.RemovalListener, ) -> javawrappers.com.google.common.cache.CacheBuilder: ...
	def weigher(self, arg0: javawrappers.com.google.common.cache.Weigher, ) -> javawrappers.com.google.common.cache.CacheBuilder: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class LoadingCache:
	def getAllPresent(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.collect.ImmutableMap: ...
	def getAll(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.collect.ImmutableMap: ...
	def apply(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def asMap(self, ) -> javawrappers.java.util.concurrent.ConcurrentMap: ...
	def refresh(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def invalidate(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getUnchecked(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def andThen(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.function.Function: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def size(self, ) -> Union[long, JLong]: ...
	@overload
	def invalidateAll(self, arg0: javawrappers.java.lang.Iterable, ) -> None: ...
	@overload
	def invalidateAll(self, ) -> None: ...
	def compose(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.function.Function: ...
	def cleanUp(self, ) -> None: ...
	def stats(self, ) -> javawrappers.com.google.common.cache.CacheStats: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.concurrent.Callable, ) -> javawrappers.java.lang.Object: ...
	def getIfPresent(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class AbstractLoadingCache:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAllPresent(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.collect.ImmutableMap: ...
	def getAll(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.collect.ImmutableMap: ...
	def apply(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def asMap(self, ) -> javawrappers.java.util.concurrent.ConcurrentMap: ...
	def notifyAll(self, ) -> None: ...
	def refresh(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def invalidate(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getUnchecked(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def andThen(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.function.Function: ...
	def notify(self, ) -> None: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def size(self, ) -> Union[long, JLong]: ...
	@overload
	def invalidateAll(self, arg0: javawrappers.java.lang.Iterable, ) -> None: ...
	@overload
	def invalidateAll(self, ) -> None: ...
	def compose(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.function.Function: ...
	def cleanUp(self, ) -> None: ...
	def stats(self, ) -> javawrappers.com.google.common.cache.CacheStats: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.concurrent.Callable, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getIfPresent(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class RemovalCause:
	EXPLICIT: RemovalCause = ...
	REPLACED: RemovalCause = ...
	COLLECTED: RemovalCause = ...
	EXPIRED: RemovalCause = ...
	SIZE: RemovalCause = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.cache.RemovalCause: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.com.google.common.cache.RemovalCause, 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class CacheStats:
	def __init__(self, arg0: Union[long, JLong], arg1: Union[long, JLong], arg2: Union[long, JLong], arg3: Union[long, JLong], arg4: Union[long, JLong], arg5: Union[long, JLong], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def requestCount(self, ) -> Union[long, JLong]: ...
	def minus(self, arg0: javawrappers.com.google.common.cache.CacheStats, ) -> javawrappers.com.google.common.cache.CacheStats: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def evictionCount(self, ) -> Union[long, JLong]: ...
	def totalLoadTime(self, ) -> Union[long, JLong]: ...
	def hitCount(self, ) -> Union[long, JLong]: ...
	def notifyAll(self, ) -> None: ...
	def hitRate(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def plus(self, arg0: javawrappers.com.google.common.cache.CacheStats, ) -> javawrappers.com.google.common.cache.CacheStats: ...
	def loadCount(self, ) -> Union[long, JLong]: ...
	def averageLoadPenalty(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def loadSuccessCount(self, ) -> Union[long, JLong]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def missRate(self, ) -> Union[float, JDouble]: ...
	def loadExceptionRate(self, ) -> Union[float, JDouble]: ...
	def loadExceptionCount(self, ) -> Union[long, JLong]: ...
	def missCount(self, ) -> Union[long, JLong]: ...


class CacheBuilderSpec:
	class RefreshDurationParser:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def parse(self, arg0: javawrappers.com.google.common.cache.CacheBuilderSpec, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
		def notify(self, ) -> None: ...


	class WriteDurationParser:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def parse(self, arg0: javawrappers.com.google.common.cache.CacheBuilderSpec, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
		def notify(self, ) -> None: ...


	class AccessDurationParser:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def parse(self, arg0: javawrappers.com.google.common.cache.CacheBuilderSpec, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
		def notify(self, ) -> None: ...


	class DurationParser:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def parse(self, arg0: javawrappers.com.google.common.cache.CacheBuilderSpec, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
		def notify(self, ) -> None: ...


	class RecordStatsParser:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def parse(self, arg0: javawrappers.com.google.common.cache.CacheBuilderSpec, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
		def notify(self, ) -> None: ...


	class ValueStrengthParser:
		def __init__(self, arg0: javawrappers.com.google.common.cache.LocalCache.Strength, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def parse(self, arg0: javawrappers.com.google.common.cache.CacheBuilderSpec, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
		def notify(self, ) -> None: ...


	class KeyStrengthParser:
		def __init__(self, arg0: javawrappers.com.google.common.cache.LocalCache.Strength, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def parse(self, arg0: javawrappers.com.google.common.cache.CacheBuilderSpec, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
		def notify(self, ) -> None: ...


	class ConcurrencyLevelParser:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def parse(self, arg0: javawrappers.com.google.common.cache.CacheBuilderSpec, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
		def notify(self, ) -> None: ...


	class MaximumWeightParser:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def parse(self, arg0: javawrappers.com.google.common.cache.CacheBuilderSpec, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
		def notify(self, ) -> None: ...


	class MaximumSizeParser:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def parse(self, arg0: javawrappers.com.google.common.cache.CacheBuilderSpec, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
		def notify(self, ) -> None: ...


	class InitialCapacityParser:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def parse(self, arg0: javawrappers.com.google.common.cache.CacheBuilderSpec, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
		def notify(self, ) -> None: ...


	class LongParser:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def parse(self, arg0: javawrappers.com.google.common.cache.CacheBuilderSpec, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
		def notify(self, ) -> None: ...


	class IntegerParser:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def parse(self, arg0: javawrappers.com.google.common.cache.CacheBuilderSpec, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
		def notify(self, ) -> None: ...


	class ValueParser:
		def parse(self, arg0: javawrappers.com.google.common.cache.CacheBuilderSpec, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def toParsableString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def disableCaching() -> javawrappers.com.google.common.cache.CacheBuilderSpec: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def parse(self, arg0: javawrappers.com.google.common.cache.CacheBuilderSpec, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	@staticmethod
	def parse(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.cache.CacheBuilderSpec: ...
	@overload
	def parse(self, arg0: javawrappers.com.google.common.cache.CacheBuilderSpec, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.com.google.common.cache.CacheBuilderSpec, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.com.google.common.cache.CacheBuilderSpec, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.com.google.common.cache.CacheBuilderSpec, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.com.google.common.cache.CacheBuilderSpec, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.com.google.common.cache.CacheBuilderSpec, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...


