################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.com.google.common.graph
import javawrappers.java.util.function
import javawrappers.com.google.common.collect

from jpype.types import *
from typing import Union

from typing import overload

class Graphs:
	class NodeVisitState:
		PENDING: Graphs.NodeVisitState = ...
		COMPLETE: Graphs.NodeVisitState = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.graph.Graphs.NodeVisitState: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.com.google.common.graph.Graphs.NodeVisitState, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class TransposedNetwork:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
		@overload
		def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
		def inDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		@overload
		def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
		@overload
		def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
		def outDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		def adjacentEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
		def nodeOrder(self, ) -> javawrappers.com.google.common.graph.ElementOrder: ...
		def notify(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def hasEdgeConnecting(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def hasEdgeConnecting(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> Union[int, JBoolean]: ...
		def allowsSelfLoops(self, ) -> Union[int, JBoolean]: ...
		def outEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
		def degree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		def edges(self, ) -> javawrappers.java.util.Set: ...
		def asGraph(self, ) -> javawrappers.com.google.common.graph.Graph: ...
		def incidentNodes(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.graph.EndpointPair: ...
		@overload
		def edgeConnecting(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> javawrappers.java.util.Optional: ...
		@overload
		def edgeConnecting(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Optional: ...
		def edgeOrder(self, ) -> javawrappers.com.google.common.graph.ElementOrder: ...
		def allowsParallelEdges(self, ) -> Union[int, JBoolean]: ...
		def inEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
		def nodes(self, ) -> javawrappers.java.util.Set: ...
		def adjacentNodes(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
		def isDirected(self, ) -> Union[int, JBoolean]: ...
		def incidentEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def edgeConnectingOrNull(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> javawrappers.java.lang.Object: ...
		@overload
		def edgeConnectingOrNull(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def edgesConnecting(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
		@overload
		def edgesConnecting(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> javawrappers.java.util.Set: ...


	class TransposedValueGraph:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
		@overload
		def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
		def inDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def edges(self, ) -> javawrappers.java.util.Set: ...
		def degree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
		@overload
		def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
		def asGraph(self, ) -> javawrappers.com.google.common.graph.Graph: ...
		def outDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		def nodeOrder(self, ) -> javawrappers.com.google.common.graph.ElementOrder: ...
		def notify(self, ) -> None: ...
		@overload
		def edgeValue(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Optional: ...
		@overload
		def edgeValue(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> javawrappers.java.util.Optional: ...
		def nodes(self, ) -> javawrappers.java.util.Set: ...
		def adjacentNodes(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
		def isDirected(self, ) -> Union[int, JBoolean]: ...
		def incidentEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def hasEdgeConnecting(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def hasEdgeConnecting(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> Union[int, JBoolean]: ...
		@overload
		def edgeValueOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def edgeValueOrDefault(self, arg0: javawrappers.com.google.common.graph.EndpointPair, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def allowsSelfLoops(self, ) -> Union[int, JBoolean]: ...


	class TransposedGraph:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
		@overload
		def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
		def inDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def edges(self, ) -> javawrappers.java.util.Set: ...
		def degree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
		@overload
		def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
		def outDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		def nodeOrder(self, ) -> javawrappers.com.google.common.graph.ElementOrder: ...
		def notify(self, ) -> None: ...
		def nodes(self, ) -> javawrappers.java.util.Set: ...
		def adjacentNodes(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
		def isDirected(self, ) -> Union[int, JBoolean]: ...
		def incidentEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def hasEdgeConnecting(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def hasEdgeConnecting(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def allowsSelfLoops(self, ) -> Union[int, JBoolean]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def transitiveClosure(arg0: javawrappers.com.google.common.graph.Graph, ) -> javawrappers.com.google.common.graph.Graph: ...
	@overload
	def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	@overload
	def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	@overload
	def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def reachableNodes(arg0: javawrappers.com.google.common.graph.Graph, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	@overload
	def inDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def inDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def inDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@staticmethod
	def values() -> JArray(javawrappers.com.google.common.graph.Graphs.NodeVisitState, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	@overload
	def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	@overload
	def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	@overload
	def outDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def outDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def outDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def adjacentEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	@overload
	def nodeOrder(self, ) -> javawrappers.com.google.common.graph.ElementOrder: ...
	@overload
	def nodeOrder(self, ) -> javawrappers.com.google.common.graph.ElementOrder: ...
	@overload
	def nodeOrder(self, ) -> javawrappers.com.google.common.graph.ElementOrder: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hasEdgeConnecting(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def hasEdgeConnecting(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> Union[int, JBoolean]: ...
	@overload
	def hasEdgeConnecting(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def hasEdgeConnecting(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> Union[int, JBoolean]: ...
	@overload
	def hasEdgeConnecting(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def hasEdgeConnecting(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def inducedSubgraph(arg0: javawrappers.com.google.common.graph.ValueGraph, arg1: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.graph.MutableValueGraph: ...
	@overload
	@staticmethod
	def inducedSubgraph(arg0: javawrappers.com.google.common.graph.Graph, arg1: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.graph.MutableGraph: ...
	@overload
	@staticmethod
	def inducedSubgraph(arg0: javawrappers.com.google.common.graph.Network, arg1: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.graph.MutableNetwork: ...
	@overload
	def allowsSelfLoops(self, ) -> Union[int, JBoolean]: ...
	@overload
	def allowsSelfLoops(self, ) -> Union[int, JBoolean]: ...
	@overload
	def allowsSelfLoops(self, ) -> Union[int, JBoolean]: ...
	def outEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.graph.Graphs.NodeVisitState: ...
	@overload
	def edges(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def edges(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def edges(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def degree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def degree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def degree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def incidentNodes(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.graph.EndpointPair: ...
	@overload
	def asGraph(self, ) -> javawrappers.com.google.common.graph.Graph: ...
	@overload
	def asGraph(self, ) -> javawrappers.com.google.common.graph.Graph: ...
	@overload
	def edgeConnecting(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> javawrappers.java.util.Optional: ...
	@overload
	def edgeConnecting(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Optional: ...
	@overload
	@staticmethod
	def copyOf(arg0: javawrappers.com.google.common.graph.Graph, ) -> javawrappers.com.google.common.graph.MutableGraph: ...
	@overload
	@staticmethod
	def copyOf(arg0: javawrappers.com.google.common.graph.Network, ) -> javawrappers.com.google.common.graph.MutableNetwork: ...
	@overload
	@staticmethod
	def copyOf(arg0: javawrappers.com.google.common.graph.ValueGraph, ) -> javawrappers.com.google.common.graph.MutableValueGraph: ...
	def edgeOrder(self, ) -> javawrappers.com.google.common.graph.ElementOrder: ...
	@overload
	def edgeValue(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Optional: ...
	@overload
	def edgeValue(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> javawrappers.java.util.Optional: ...
	def allowsParallelEdges(self, ) -> Union[int, JBoolean]: ...
	def inEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	@overload
	@staticmethod
	def hasCycle(arg0: javawrappers.com.google.common.graph.Graph, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def hasCycle(arg0: javawrappers.com.google.common.graph.Network, ) -> Union[int, JBoolean]: ...
	@overload
	def nodes(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def nodes(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def nodes(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def adjacentNodes(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	@overload
	def adjacentNodes(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	@overload
	def adjacentNodes(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	@overload
	def isDirected(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isDirected(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isDirected(self, ) -> Union[int, JBoolean]: ...
	@overload
	def incidentEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	@overload
	def incidentEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	@overload
	def incidentEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def edgeValueOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def edgeValueOrDefault(self, arg0: javawrappers.com.google.common.graph.EndpointPair, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def edgeConnectingOrNull(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> javawrappers.java.lang.Object: ...
	@overload
	def edgeConnectingOrNull(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def edgesConnecting(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	@overload
	def edgesConnecting(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> javawrappers.java.util.Set: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def transpose(arg0: javawrappers.com.google.common.graph.Graph, ) -> javawrappers.com.google.common.graph.Graph: ...
	@overload
	@staticmethod
	def transpose(arg0: javawrappers.com.google.common.graph.ValueGraph, ) -> javawrappers.com.google.common.graph.ValueGraph: ...
	@overload
	@staticmethod
	def transpose(arg0: javawrappers.com.google.common.graph.Network, ) -> javawrappers.com.google.common.graph.Network: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class PredecessorsFunction:
	def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...


class ImmutableValueGraph:
	class Builder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def putEdgeValue(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.graph.ImmutableValueGraph.Builder: ...
		@overload
		def putEdgeValue(self, arg0: javawrappers.com.google.common.graph.EndpointPair, arg1: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.graph.ImmutableValueGraph.Builder: ...
		def addNode(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.graph.ImmutableValueGraph.Builder: ...
		def build(self, ) -> javawrappers.com.google.common.graph.ImmutableValueGraph: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def inDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def addNode(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.graph.ImmutableValueGraph.Builder: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def outDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def nodeOrder(self, ) -> javawrappers.com.google.common.graph.ElementOrder: ...
	def notify(self, ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hasEdgeConnecting(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def hasEdgeConnecting(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> Union[int, JBoolean]: ...
	def allowsSelfLoops(self, ) -> Union[int, JBoolean]: ...
	def degree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def edges(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def asGraph(self, ) -> javawrappers.com.google.common.graph.Graph: ...
	@overload
	def asGraph(self, ) -> javawrappers.com.google.common.graph.ImmutableGraph: ...
	@overload
	@staticmethod
	def copyOf(arg0: javawrappers.com.google.common.graph.ValueGraph, ) -> javawrappers.com.google.common.graph.ImmutableValueGraph: ...
	@overload
	@staticmethod
	def copyOf(arg0: javawrappers.com.google.common.graph.ImmutableValueGraph, ) -> javawrappers.com.google.common.graph.ImmutableValueGraph: ...
	@overload
	def edgeValue(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> javawrappers.java.util.Optional: ...
	@overload
	def edgeValue(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Optional: ...
	def nodes(self, ) -> javawrappers.java.util.Set: ...
	def adjacentNodes(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def isDirected(self, ) -> Union[int, JBoolean]: ...
	@overload
	def putEdgeValue(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.graph.ImmutableValueGraph.Builder: ...
	@overload
	def putEdgeValue(self, arg0: javawrappers.com.google.common.graph.EndpointPair, arg1: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.graph.ImmutableValueGraph.Builder: ...
	def incidentEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def build(self, ) -> javawrappers.com.google.common.graph.ImmutableValueGraph: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def edgeValueOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def edgeValueOrDefault(self, arg0: javawrappers.com.google.common.graph.EndpointPair, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...


class MutableNetwork:
	@overload
	def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def inDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def addNode(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def outDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def adjacentEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def nodeOrder(self, ) -> javawrappers.com.google.common.graph.ElementOrder: ...
	def removeEdge(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hasEdgeConnecting(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def hasEdgeConnecting(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> Union[int, JBoolean]: ...
	def allowsSelfLoops(self, ) -> Union[int, JBoolean]: ...
	def removeNode(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def outEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def degree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def edges(self, ) -> javawrappers.java.util.Set: ...
	def asGraph(self, ) -> javawrappers.com.google.common.graph.Graph: ...
	def incidentNodes(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.graph.EndpointPair: ...
	@overload
	def edgeConnecting(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Optional: ...
	@overload
	def edgeConnecting(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> javawrappers.java.util.Optional: ...
	def edgeOrder(self, ) -> javawrappers.com.google.common.graph.ElementOrder: ...
	def allowsParallelEdges(self, ) -> Union[int, JBoolean]: ...
	def inEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def nodes(self, ) -> javawrappers.java.util.Set: ...
	def adjacentNodes(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def isDirected(self, ) -> Union[int, JBoolean]: ...
	def incidentEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def edgeConnectingOrNull(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def edgeConnectingOrNull(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> javawrappers.java.lang.Object: ...
	@overload
	def edgesConnecting(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	@overload
	def edgesConnecting(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> javawrappers.java.util.Set: ...
	@overload
	def addEdge(self, arg0: javawrappers.com.google.common.graph.EndpointPair, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def addEdge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class NetworkBuilder:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def directed() -> javawrappers.com.google.common.graph.NetworkBuilder: ...
	@staticmethod
	def undirected() -> javawrappers.com.google.common.graph.NetworkBuilder: ...
	def expectedEdgeCount(self, arg0: Union[int, JInt], ) -> javawrappers.com.google.common.graph.NetworkBuilder: ...
	def notifyAll(self, ) -> None: ...
	def nodeOrder(self, arg0: javawrappers.com.google.common.graph.ElementOrder, ) -> javawrappers.com.google.common.graph.NetworkBuilder: ...
	def notify(self, ) -> None: ...
	def edgeOrder(self, arg0: javawrappers.com.google.common.graph.ElementOrder, ) -> javawrappers.com.google.common.graph.NetworkBuilder: ...
	def allowsParallelEdges(self, arg0: Union[int, JBoolean], ) -> javawrappers.com.google.common.graph.NetworkBuilder: ...
	def immutable(self, ) -> javawrappers.com.google.common.graph.ImmutableNetwork.Builder: ...
	def build(self, ) -> javawrappers.com.google.common.graph.MutableNetwork: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def expectedNodeCount(self, arg0: Union[int, JInt], ) -> javawrappers.com.google.common.graph.NetworkBuilder: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def from_(arg0: javawrappers.com.google.common.graph.Network, ) -> javawrappers.com.google.common.graph.NetworkBuilder: ...
	def allowsSelfLoops(self, arg0: Union[int, JBoolean], ) -> javawrappers.com.google.common.graph.NetworkBuilder: ...


class GraphBuilder:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def directed() -> javawrappers.com.google.common.graph.GraphBuilder: ...
	@staticmethod
	def undirected() -> javawrappers.com.google.common.graph.GraphBuilder: ...
	def notifyAll(self, ) -> None: ...
	def nodeOrder(self, arg0: javawrappers.com.google.common.graph.ElementOrder, ) -> javawrappers.com.google.common.graph.GraphBuilder: ...
	def notify(self, ) -> None: ...
	def immutable(self, ) -> javawrappers.com.google.common.graph.ImmutableGraph.Builder: ...
	def build(self, ) -> javawrappers.com.google.common.graph.MutableGraph: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def expectedNodeCount(self, arg0: Union[int, JInt], ) -> javawrappers.com.google.common.graph.GraphBuilder: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def from_(arg0: javawrappers.com.google.common.graph.Graph, ) -> javawrappers.com.google.common.graph.GraphBuilder: ...
	def allowsSelfLoops(self, arg0: Union[int, JBoolean], ) -> javawrappers.com.google.common.graph.GraphBuilder: ...


class Traverser:
	class Order:
		PREORDER: Traverser.Order = ...
		POSTORDER: Traverser.Order = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.graph.Traverser.Order: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.com.google.common.graph.Traverser.Order, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class TreeTraverser:
		class DepthFirstPostOrderIterator:
			class NodeAndChildren:
				def getClass(self, ) -> javawrappers.java.lang.Class: ...
				@overload
				def wait(self, arg0: Union[long, JLong], ) -> None: ...
				@overload
				def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
				@overload
				def wait(self, ) -> None: ...
				def hashCode(self, ) -> Union[int, JInt]: ...
				def notifyAll(self, ) -> None: ...
				def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
				def toString(self, ) -> javawrappers.java.lang.String: ...
				def notify(self, ) -> None: ...


			def next(self, ) -> javawrappers.java.lang.Object: ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def hasNext(self, ) -> Union[int, JBoolean]: ...
			def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
			def notify(self, ) -> None: ...
			def remove(self, ) -> None: ...
			def peek(self, ) -> javawrappers.java.lang.Object: ...


		class DepthFirstPreOrderIterator:
			def next(self, ) -> javawrappers.java.lang.Object: ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def hasNext(self, ) -> Union[int, JBoolean]: ...
			def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
			def notify(self, ) -> None: ...
			def remove(self, ) -> None: ...


		class BreadthFirstIterator:
			def next(self, ) -> javawrappers.java.lang.Object: ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def hasNext(self, ) -> Union[int, JBoolean]: ...
			def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
			def notify(self, ) -> None: ...
			def remove(self, ) -> None: ...


		@overload
		def next(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def next(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def next(self, ) -> javawrappers.java.lang.Object: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		@overload
		def breadthFirst(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.java.lang.Iterable: ...
		@overload
		def breadthFirst(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
		@overload
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		@overload
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		@overload
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def remove(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def peek(self, ) -> javawrappers.java.lang.Object: ...
		@staticmethod
		def forTree(arg0: javawrappers.com.google.common.graph.SuccessorsFunction, ) -> javawrappers.com.google.common.graph.Traverser: ...
		@staticmethod
		def forGraph(arg0: javawrappers.com.google.common.graph.SuccessorsFunction, ) -> javawrappers.com.google.common.graph.Traverser: ...
		@overload
		def depthFirstPreOrder(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.java.lang.Iterable: ...
		@overload
		def depthFirstPreOrder(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		@overload
		def depthFirstPostOrder(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.java.lang.Iterable: ...
		@overload
		def depthFirstPostOrder(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...


	class GraphTraverser:
		class DepthFirstIterator:
			class NodeAndSuccessors:
				def getClass(self, ) -> javawrappers.java.lang.Class: ...
				@overload
				def wait(self, arg0: Union[long, JLong], ) -> None: ...
				@overload
				def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
				@overload
				def wait(self, ) -> None: ...
				def hashCode(self, ) -> Union[int, JInt]: ...
				def notifyAll(self, ) -> None: ...
				def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
				def toString(self, ) -> javawrappers.java.lang.String: ...
				def notify(self, ) -> None: ...


			def next(self, ) -> javawrappers.java.lang.Object: ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def hasNext(self, ) -> Union[int, JBoolean]: ...
			def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
			def notify(self, ) -> None: ...
			def remove(self, ) -> None: ...
			def peek(self, ) -> javawrappers.java.lang.Object: ...


		class BreadthFirstIterator:
			def next(self, ) -> javawrappers.java.lang.Object: ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def hasNext(self, ) -> Union[int, JBoolean]: ...
			def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
			def notify(self, ) -> None: ...
			def remove(self, ) -> None: ...


		@overload
		def next(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def next(self, ) -> javawrappers.java.lang.Object: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		@overload
		def breadthFirst(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.java.lang.Iterable: ...
		@overload
		def breadthFirst(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
		@overload
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		@overload
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def remove(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def peek(self, ) -> javawrappers.java.lang.Object: ...
		@staticmethod
		def forTree(arg0: javawrappers.com.google.common.graph.SuccessorsFunction, ) -> javawrappers.com.google.common.graph.Traverser: ...
		@staticmethod
		def forGraph(arg0: javawrappers.com.google.common.graph.SuccessorsFunction, ) -> javawrappers.com.google.common.graph.Traverser: ...
		@overload
		def depthFirstPreOrder(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.java.lang.Iterable: ...
		@overload
		def depthFirstPreOrder(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		@overload
		def depthFirstPostOrder(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.java.lang.Iterable: ...
		@overload
		def depthFirstPostOrder(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...


	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.graph.Traverser.Order: ...
	@staticmethod
	def values() -> JArray(javawrappers.com.google.common.graph.Traverser.Order, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def breadthFirst(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def breadthFirst(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def breadthFirst(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def breadthFirst(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def breadthFirst(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def breadthFirst(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def remove(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def peek(self, ) -> javawrappers.java.lang.Object: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def forTree(arg0: javawrappers.com.google.common.graph.SuccessorsFunction, ) -> javawrappers.com.google.common.graph.Traverser: ...
	@overload
	def depthFirstPreOrder(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def depthFirstPreOrder(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def depthFirstPreOrder(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def depthFirstPreOrder(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def depthFirstPreOrder(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def depthFirstPreOrder(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	@staticmethod
	def forGraph(arg0: javawrappers.com.google.common.graph.SuccessorsFunction, ) -> javawrappers.com.google.common.graph.Traverser: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def depthFirstPostOrder(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def depthFirstPostOrder(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def depthFirstPostOrder(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def depthFirstPostOrder(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def depthFirstPostOrder(self, arg0: javawrappers.java.lang.Iterable, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def depthFirstPostOrder(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class ImmutableNetwork:
	class Builder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def addNode(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.graph.ImmutableNetwork.Builder: ...
		def build(self, ) -> javawrappers.com.google.common.graph.ImmutableNetwork: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def addEdge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.graph.ImmutableNetwork.Builder: ...
		@overload
		def addEdge(self, arg0: javawrappers.com.google.common.graph.EndpointPair, arg1: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.graph.ImmutableNetwork.Builder: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	@overload
	def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	def inDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def addNode(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.graph.ImmutableNetwork.Builder: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	@overload
	def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	def outDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def adjacentEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def nodeOrder(self, ) -> javawrappers.com.google.common.graph.ElementOrder: ...
	def notify(self, ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hasEdgeConnecting(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def hasEdgeConnecting(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> Union[int, JBoolean]: ...
	def allowsSelfLoops(self, ) -> Union[int, JBoolean]: ...
	def outEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def degree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def edges(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def asGraph(self, ) -> javawrappers.com.google.common.graph.Graph: ...
	@overload
	def asGraph(self, ) -> javawrappers.com.google.common.graph.ImmutableGraph: ...
	def incidentNodes(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.graph.EndpointPair: ...
	@overload
	def edgeConnecting(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> javawrappers.java.util.Optional: ...
	@overload
	def edgeConnecting(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Optional: ...
	@overload
	@staticmethod
	def copyOf(arg0: javawrappers.com.google.common.graph.Network, ) -> javawrappers.com.google.common.graph.ImmutableNetwork: ...
	@overload
	@staticmethod
	def copyOf(arg0: javawrappers.com.google.common.graph.ImmutableNetwork, ) -> javawrappers.com.google.common.graph.ImmutableNetwork: ...
	def edgeOrder(self, ) -> javawrappers.com.google.common.graph.ElementOrder: ...
	def allowsParallelEdges(self, ) -> Union[int, JBoolean]: ...
	def inEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def nodes(self, ) -> javawrappers.java.util.Set: ...
	def adjacentNodes(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def isDirected(self, ) -> Union[int, JBoolean]: ...
	def incidentEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def build(self, ) -> javawrappers.com.google.common.graph.ImmutableNetwork: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def edgeConnectingOrNull(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def edgeConnectingOrNull(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> javawrappers.java.lang.Object: ...
	@overload
	def edgesConnecting(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	@overload
	def edgesConnecting(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> javawrappers.java.util.Set: ...
	@overload
	def addEdge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.graph.ImmutableNetwork.Builder: ...
	@overload
	def addEdge(self, arg0: javawrappers.com.google.common.graph.EndpointPair, arg1: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.graph.ImmutableNetwork.Builder: ...


class AbstractNetwork:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def inDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def outDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def adjacentEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def nodeOrder(self, ) -> javawrappers.com.google.common.graph.ElementOrder: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hasEdgeConnecting(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def hasEdgeConnecting(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> Union[int, JBoolean]: ...
	def allowsSelfLoops(self, ) -> Union[int, JBoolean]: ...
	def outEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def edges(self, ) -> javawrappers.java.util.Set: ...
	def degree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def incidentNodes(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.graph.EndpointPair: ...
	def asGraph(self, ) -> javawrappers.com.google.common.graph.Graph: ...
	@overload
	def edgeConnecting(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> javawrappers.java.util.Optional: ...
	@overload
	def edgeConnecting(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Optional: ...
	def edgeOrder(self, ) -> javawrappers.com.google.common.graph.ElementOrder: ...
	def allowsParallelEdges(self, ) -> Union[int, JBoolean]: ...
	def inEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def nodes(self, ) -> javawrappers.java.util.Set: ...
	def adjacentNodes(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def isDirected(self, ) -> Union[int, JBoolean]: ...
	def incidentEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def edgeConnectingOrNull(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def edgeConnectingOrNull(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> javawrappers.java.lang.Object: ...
	@overload
	def edgesConnecting(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> javawrappers.java.util.Set: ...
	@overload
	def edgesConnecting(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...


class ImmutableGraph:
	class Builder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def addNode(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.graph.ImmutableGraph.Builder: ...
		def build(self, ) -> javawrappers.com.google.common.graph.ImmutableGraph: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def putEdge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.graph.ImmutableGraph.Builder: ...
		@overload
		def putEdge(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> javawrappers.com.google.common.graph.ImmutableGraph.Builder: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	@overload
	def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	def inDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def addNode(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.graph.ImmutableGraph.Builder: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def putEdge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.graph.ImmutableGraph.Builder: ...
	@overload
	def putEdge(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> javawrappers.com.google.common.graph.ImmutableGraph.Builder: ...
	def edges(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def degree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def outDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def copyOf(arg0: javawrappers.com.google.common.graph.Graph, ) -> javawrappers.com.google.common.graph.ImmutableGraph: ...
	@overload
	@staticmethod
	def copyOf(arg0: javawrappers.com.google.common.graph.ImmutableGraph, ) -> javawrappers.com.google.common.graph.ImmutableGraph: ...
	def nodeOrder(self, ) -> javawrappers.com.google.common.graph.ElementOrder: ...
	def notify(self, ) -> None: ...
	def nodes(self, ) -> javawrappers.java.util.Set: ...
	def adjacentNodes(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def isDirected(self, ) -> Union[int, JBoolean]: ...
	def incidentEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def build(self, ) -> javawrappers.com.google.common.graph.ImmutableGraph: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def hasEdgeConnecting(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> Union[int, JBoolean]: ...
	@overload
	def hasEdgeConnecting(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def allowsSelfLoops(self, ) -> Union[int, JBoolean]: ...


class AbstractValueGraph:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def inDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def degree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def edges(self, ) -> javawrappers.java.util.Set: ...
	def asGraph(self, ) -> javawrappers.com.google.common.graph.Graph: ...
	def outDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def nodeOrder(self, ) -> javawrappers.com.google.common.graph.ElementOrder: ...
	def notify(self, ) -> None: ...
	@overload
	def edgeValue(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> javawrappers.java.util.Optional: ...
	@overload
	def edgeValue(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Optional: ...
	def nodes(self, ) -> javawrappers.java.util.Set: ...
	def adjacentNodes(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def isDirected(self, ) -> Union[int, JBoolean]: ...
	def incidentEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def hasEdgeConnecting(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> Union[int, JBoolean]: ...
	@overload
	def hasEdgeConnecting(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def edgeValueOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def edgeValueOrDefault(self, arg0: javawrappers.com.google.common.graph.EndpointPair, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def allowsSelfLoops(self, ) -> Union[int, JBoolean]: ...


class Network:
	def outEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	@overload
	def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def inDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def degree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def edges(self, ) -> javawrappers.java.util.Set: ...
	def asGraph(self, ) -> javawrappers.com.google.common.graph.Graph: ...
	def outDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def incidentNodes(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.graph.EndpointPair: ...
	@overload
	def edgeConnecting(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Optional: ...
	@overload
	def edgeConnecting(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> javawrappers.java.util.Optional: ...
	def adjacentEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def nodeOrder(self, ) -> javawrappers.com.google.common.graph.ElementOrder: ...
	def edgeOrder(self, ) -> javawrappers.com.google.common.graph.ElementOrder: ...
	def allowsParallelEdges(self, ) -> Union[int, JBoolean]: ...
	def inEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def nodes(self, ) -> javawrappers.java.util.Set: ...
	def adjacentNodes(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def isDirected(self, ) -> Union[int, JBoolean]: ...
	def incidentEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def hasEdgeConnecting(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def hasEdgeConnecting(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> Union[int, JBoolean]: ...
	@overload
	def edgeConnectingOrNull(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def edgeConnectingOrNull(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> javawrappers.java.lang.Object: ...
	@overload
	def edgesConnecting(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	@overload
	def edgesConnecting(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> javawrappers.java.util.Set: ...
	def allowsSelfLoops(self, ) -> Union[int, JBoolean]: ...


class EndpointPair:
	class Unordered:
		@staticmethod
		def unordered(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.graph.EndpointPair: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@staticmethod
		def ordered(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.graph.EndpointPair: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
		def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def adjacentNode(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def notifyAll(self, ) -> None: ...
		def source(self, ) -> javawrappers.java.lang.Object: ...
		def notify(self, ) -> None: ...
		def target(self, ) -> javawrappers.java.lang.Object: ...
		def nodeU(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def iterator(self, ) -> javawrappers.com.google.common.collect.UnmodifiableIterator: ...
		@overload
		def iterator(self, ) -> javawrappers.java.util.Iterator: ...
		def nodeV(self, ) -> javawrappers.java.lang.Object: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def isOrdered(self, ) -> Union[int, JBoolean]: ...


	class Ordered:
		@staticmethod
		def unordered(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.graph.EndpointPair: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@staticmethod
		def ordered(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.graph.EndpointPair: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
		def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def adjacentNode(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def notifyAll(self, ) -> None: ...
		def source(self, ) -> javawrappers.java.lang.Object: ...
		def notify(self, ) -> None: ...
		def target(self, ) -> javawrappers.java.lang.Object: ...
		def nodeU(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def iterator(self, ) -> javawrappers.java.util.Iterator: ...
		@overload
		def iterator(self, ) -> javawrappers.com.google.common.collect.UnmodifiableIterator: ...
		def nodeV(self, ) -> javawrappers.java.lang.Object: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def isOrdered(self, ) -> Union[int, JBoolean]: ...


	@staticmethod
	def unordered(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.graph.EndpointPair: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def ordered(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.graph.EndpointPair: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def adjacentNode(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def source(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def source(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def source(self, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	@overload
	def target(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def target(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def target(self, ) -> javawrappers.java.lang.Object: ...
	def nodeU(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def iterator(self, ) -> javawrappers.com.google.common.collect.UnmodifiableIterator: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def nodeV(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def isOrdered(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isOrdered(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isOrdered(self, ) -> Union[int, JBoolean]: ...


class ValueGraphBuilder:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def directed() -> javawrappers.com.google.common.graph.ValueGraphBuilder: ...
	@staticmethod
	def undirected() -> javawrappers.com.google.common.graph.ValueGraphBuilder: ...
	def notifyAll(self, ) -> None: ...
	def nodeOrder(self, arg0: javawrappers.com.google.common.graph.ElementOrder, ) -> javawrappers.com.google.common.graph.ValueGraphBuilder: ...
	def notify(self, ) -> None: ...
	def immutable(self, ) -> javawrappers.com.google.common.graph.ImmutableValueGraph.Builder: ...
	def build(self, ) -> javawrappers.com.google.common.graph.MutableValueGraph: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def expectedNodeCount(self, arg0: Union[int, JInt], ) -> javawrappers.com.google.common.graph.ValueGraphBuilder: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def from_(arg0: javawrappers.com.google.common.graph.ValueGraph, ) -> javawrappers.com.google.common.graph.ValueGraphBuilder: ...
	def allowsSelfLoops(self, arg0: Union[int, JBoolean], ) -> javawrappers.com.google.common.graph.ValueGraphBuilder: ...


class SuccessorsFunction:
	def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...


class AbstractGraph:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	@overload
	def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def inDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def degree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def edges(self, ) -> javawrappers.java.util.Set: ...
	def outDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def nodeOrder(self, ) -> javawrappers.com.google.common.graph.ElementOrder: ...
	def notify(self, ) -> None: ...
	def nodes(self, ) -> javawrappers.java.util.Set: ...
	def adjacentNodes(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def isDirected(self, ) -> Union[int, JBoolean]: ...
	def incidentEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def hasEdgeConnecting(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def hasEdgeConnecting(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def allowsSelfLoops(self, ) -> Union[int, JBoolean]: ...


class ValueGraph:
	@overload
	def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def inDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def degree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def edges(self, ) -> javawrappers.java.util.Set: ...
	def asGraph(self, ) -> javawrappers.com.google.common.graph.Graph: ...
	def outDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def nodeOrder(self, ) -> javawrappers.com.google.common.graph.ElementOrder: ...
	@overload
	def edgeValue(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> javawrappers.java.util.Optional: ...
	@overload
	def edgeValue(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Optional: ...
	def nodes(self, ) -> javawrappers.java.util.Set: ...
	def adjacentNodes(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def isDirected(self, ) -> Union[int, JBoolean]: ...
	def incidentEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def hasEdgeConnecting(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> Union[int, JBoolean]: ...
	@overload
	def hasEdgeConnecting(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def edgeValueOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def edgeValueOrDefault(self, arg0: javawrappers.com.google.common.graph.EndpointPair, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def allowsSelfLoops(self, ) -> Union[int, JBoolean]: ...


class ElementOrder:
	class Type:
		UNORDERED: ElementOrder.Type = ...
		INSERTION: ElementOrder.Type = ...
		SORTED: ElementOrder.Type = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.graph.ElementOrder.Type: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.com.google.common.graph.ElementOrder.Type, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	@staticmethod
	def unordered() -> javawrappers.com.google.common.graph.ElementOrder: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def natural() -> javawrappers.com.google.common.graph.ElementOrder: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.graph.ElementOrder.Type: ...
	@staticmethod
	def values() -> JArray(javawrappers.com.google.common.graph.ElementOrder.Type, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def type(self, ) -> javawrappers.com.google.common.graph.ElementOrder.Type: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def comparator(self, ) -> javawrappers.java.util.Comparator: ...
	@staticmethod
	def sorted(arg0: javawrappers.java.util.Comparator, ) -> javawrappers.com.google.common.graph.ElementOrder: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def insertion() -> javawrappers.com.google.common.graph.ElementOrder: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class Graph:
	@overload
	def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	@overload
	def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	def inDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def degree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def edges(self, ) -> javawrappers.java.util.Set: ...
	def outDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def nodeOrder(self, ) -> javawrappers.com.google.common.graph.ElementOrder: ...
	def nodes(self, ) -> javawrappers.java.util.Set: ...
	def adjacentNodes(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def isDirected(self, ) -> Union[int, JBoolean]: ...
	def incidentEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def hasEdgeConnecting(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> Union[int, JBoolean]: ...
	@overload
	def hasEdgeConnecting(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def allowsSelfLoops(self, ) -> Union[int, JBoolean]: ...


class MutableGraph:
	@overload
	def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	@overload
	def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	def inDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def addNode(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def degree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def edges(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def putEdge(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> Union[int, JBoolean]: ...
	@overload
	def putEdge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def outDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def nodeOrder(self, ) -> javawrappers.com.google.common.graph.ElementOrder: ...
	@overload
	def removeEdge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def removeEdge(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> Union[int, JBoolean]: ...
	def nodes(self, ) -> javawrappers.java.util.Set: ...
	def adjacentNodes(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def isDirected(self, ) -> Union[int, JBoolean]: ...
	def incidentEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def hasEdgeConnecting(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> Union[int, JBoolean]: ...
	@overload
	def hasEdgeConnecting(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def allowsSelfLoops(self, ) -> Union[int, JBoolean]: ...
	def removeNode(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class MutableValueGraph:
	@overload
	def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def predecessors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def inDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def addNode(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Iterable: ...
	@overload
	def successors(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def degree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def edges(self, ) -> javawrappers.java.util.Set: ...
	def asGraph(self, ) -> javawrappers.com.google.common.graph.Graph: ...
	def outDegree(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def nodeOrder(self, ) -> javawrappers.com.google.common.graph.ElementOrder: ...
	@overload
	def edgeValue(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> javawrappers.java.util.Optional: ...
	@overload
	def edgeValue(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Optional: ...
	@overload
	def removeEdge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def removeEdge(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> javawrappers.java.lang.Object: ...
	def nodes(self, ) -> javawrappers.java.util.Set: ...
	def adjacentNodes(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	def isDirected(self, ) -> Union[int, JBoolean]: ...
	def incidentEdges(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Set: ...
	@overload
	def putEdgeValue(self, arg0: javawrappers.com.google.common.graph.EndpointPair, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def putEdgeValue(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def hasEdgeConnecting(self, arg0: javawrappers.com.google.common.graph.EndpointPair, ) -> Union[int, JBoolean]: ...
	@overload
	def hasEdgeConnecting(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def edgeValueOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def edgeValueOrDefault(self, arg0: javawrappers.com.google.common.graph.EndpointPair, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def allowsSelfLoops(self, ) -> Union[int, JBoolean]: ...
	def removeNode(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


