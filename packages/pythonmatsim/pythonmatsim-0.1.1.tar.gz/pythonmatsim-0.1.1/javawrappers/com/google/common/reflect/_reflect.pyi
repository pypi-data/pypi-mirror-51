################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang.reflect
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.net
import javawrappers.java.util.stream
import javawrappers.com.google.common.reflect
import javawrappers.java.lang.annotation
import javawrappers.java.util.function
import javawrappers.com.google.common.io
import javawrappers.com.google.common.collect
import javawrappers.java.nio.charset

from jpype.types import *
from typing import Union

from typing import overload

class TypeResolver:
	def __init__(self, ): ...
	class TypeVariableKey:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class WildcardCapturer:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class TypeMappingIntrospector:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def visit(self, *arg0: javawrappers.java.lang.reflect.Type, ) -> None: ...
		def notify(self, ) -> None: ...


	class TypeTable:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def resolveType(self, arg0: javawrappers.java.lang.reflect.Type, ) -> javawrappers.java.lang.reflect.Type: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def where(self, arg0: javawrappers.java.lang.reflect.Type, arg1: javawrappers.java.lang.reflect.Type, ) -> javawrappers.com.google.common.reflect.TypeResolver: ...
	def visit(self, *arg0: javawrappers.java.lang.reflect.Type, ) -> None: ...
	def notify(self, ) -> None: ...


class TypeToInstanceMap:
	def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def entrySet(self, ) -> javawrappers.java.util.Set: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
	def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
	def values(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def putInstance(self, arg0: javawrappers.com.google.common.reflect.TypeToken, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def putInstance(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getInstance(self, arg0: javawrappers.com.google.common.reflect.TypeToken, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getInstance(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class Reflection:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def newProxy(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.reflect.InvocationHandler, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def getPackageName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getPackageName(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def initialize(*arg0: javawrappers.java.lang.Class, ) -> None: ...
	def notify(self, ) -> None: ...


class Parameter:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isAnnotationPresent(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def notify(self, ) -> None: ...
	def getDeclaredAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getDeclaringInvokable(self, ) -> javawrappers.com.google.common.reflect.Invokable: ...
	def getAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getType(self, ) -> javawrappers.com.google.common.reflect.TypeToken: ...
	def getDeclaredAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDeclaredAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAnnotatedType(self, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...


class ImmutableTypeToInstanceMap:
	class Builder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def build(self, ) -> javawrappers.com.google.common.reflect.ImmutableTypeToInstanceMap: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		@overload
		def put(self, arg0: javawrappers.com.google.common.reflect.TypeToken, arg1: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.reflect.ImmutableTypeToInstanceMap.Builder: ...
		@overload
		def put(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.reflect.ImmutableTypeToInstanceMap.Builder: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def values(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
	def notify(self, ) -> None: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def put(self, arg0: javawrappers.com.google.common.reflect.TypeToken, arg1: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.reflect.ImmutableTypeToInstanceMap.Builder: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Object, ) -> javawrappers.com.google.common.reflect.ImmutableTypeToInstanceMap.Builder: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def put(self, arg0: javawrappers.com.google.common.reflect.TypeToken, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def putInstance(self, arg0: javawrappers.com.google.common.reflect.TypeToken, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def putInstance(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def of() -> javawrappers.com.google.common.reflect.ImmutableTypeToInstanceMap: ...
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	@staticmethod
	def builder() -> javawrappers.com.google.common.reflect.ImmutableTypeToInstanceMap.Builder: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def entrySet(self, ) -> javawrappers.java.util.Set: ...
	def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def size(self, ) -> Union[int, JInt]: ...
	def build(self, ) -> javawrappers.com.google.common.reflect.ImmutableTypeToInstanceMap: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getInstance(self, arg0: javawrappers.com.google.common.reflect.TypeToken, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getInstance(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class ClassPath:
	class DefaultScanner:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def scan(self, arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Scanner:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def scan(self, arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class ClassInfo:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def getResourceName(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def url(self, ) -> javawrappers.java.net.URL: ...
		def asByteSource(self, ) -> javawrappers.com.google.common.io.ByteSource: ...
		def load(self, ) -> javawrappers.java.lang.Class: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSimpleName(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getPackageName(self, ) -> javawrappers.java.lang.String: ...
		def asCharSource(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.io.CharSource: ...


	class ResourceInfo:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def asByteSource(self, ) -> javawrappers.com.google.common.io.ByteSource: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getResourceName(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def asCharSource(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.io.CharSource: ...
		def notify(self, ) -> None: ...
		def url(self, ) -> javawrappers.java.net.URL: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def scan(self, arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	def getResourceName(self, ) -> javawrappers.java.lang.String: ...
	def url(self, ) -> javawrappers.java.net.URL: ...
	def notify(self, ) -> None: ...
	def getTopLevelClassesRecursive(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.collect.ImmutableSet: ...
	def asByteSource(self, ) -> javawrappers.com.google.common.io.ByteSource: ...
	def load(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def getTopLevelClasses(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.collect.ImmutableSet: ...
	@overload
	def getTopLevelClasses(self, ) -> javawrappers.com.google.common.collect.ImmutableSet: ...
	def getResources(self, ) -> javawrappers.com.google.common.collect.ImmutableSet: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getAllClasses(self, ) -> javawrappers.com.google.common.collect.ImmutableSet: ...
	def getSimpleName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def from_(arg0: javawrappers.java.lang.ClassLoader, ) -> javawrappers.com.google.common.reflect.ClassPath: ...
	def getPackageName(self, ) -> javawrappers.java.lang.String: ...
	def asCharSource(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.io.CharSource: ...


class TypeToken:
	class TypeCollector:
		class ForwardingTypeCollector:
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def notify(self, ) -> None: ...


		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class SimpleTypeToken:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getRawType(self, ) -> javawrappers.java.lang.Class: ...
		def resolveType(self, arg0: javawrappers.java.lang.reflect.Type, ) -> javawrappers.com.google.common.reflect.TypeToken: ...
		def method(self, arg0: javawrappers.java.lang.reflect.Method, ) -> javawrappers.com.google.common.reflect.Invokable: ...
		def notifyAll(self, ) -> None: ...
		def constructor(self, arg0: javawrappers.java.lang.reflect.Constructor, ) -> javawrappers.com.google.common.reflect.Invokable: ...
		def notify(self, ) -> None: ...
		def unwrap(self, ) -> javawrappers.com.google.common.reflect.TypeToken: ...
		@overload
		def isSubtypeOf(self, arg0: javawrappers.com.google.common.reflect.TypeToken, ) -> Union[int, JBoolean]: ...
		@overload
		def isSubtypeOf(self, arg0: javawrappers.java.lang.reflect.Type, ) -> Union[int, JBoolean]: ...
		def getType(self, ) -> javawrappers.java.lang.reflect.Type: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def of(arg0: javawrappers.java.lang.reflect.Type, ) -> javawrappers.com.google.common.reflect.TypeToken: ...
		@overload
		@staticmethod
		def of(arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.common.reflect.TypeToken: ...
		def getComponentType(self, ) -> javawrappers.com.google.common.reflect.TypeToken: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSubtype(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.common.reflect.TypeToken: ...
		def isArray(self, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def where(self, arg0: javawrappers.com.google.common.reflect.TypeParameter, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.google.common.reflect.TypeToken: ...
		@overload
		def where(self, arg0: javawrappers.com.google.common.reflect.TypeParameter, arg1: javawrappers.com.google.common.reflect.TypeToken, ) -> javawrappers.com.google.common.reflect.TypeToken: ...
		def getSupertype(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.common.reflect.TypeToken: ...
		def getTypes(self, ) -> javawrappers.com.google.common.reflect.TypeToken.TypeSet: ...
		@overload
		def isSupertypeOf(self, arg0: javawrappers.com.google.common.reflect.TypeToken, ) -> Union[int, JBoolean]: ...
		@overload
		def isSupertypeOf(self, arg0: javawrappers.java.lang.reflect.Type, ) -> Union[int, JBoolean]: ...
		def wrap(self, ) -> javawrappers.com.google.common.reflect.TypeToken: ...
		def isPrimitive(self, ) -> Union[int, JBoolean]: ...


	class Bounds:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class TypeFilter:
		IGNORE_TYPE_VARIABLE_OR_WILDCARD: TypeToken.TypeFilter = ...
		INTERFACE_ONLY: TypeToken.TypeFilter = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def or_(self, arg0: javawrappers.java.util.function.Predicate, ) -> javawrappers.java.util.function.Predicate: ...
		def test(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def apply(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.reflect.TypeToken.TypeFilter: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def values() -> JArray(javawrappers.com.google.common.reflect.TypeToken.TypeFilter, 1): ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		def and(self, arg0: javawrappers.java.util.function.Predicate, ) -> javawrappers.java.util.function.Predicate: ...
		def negate(self, ) -> javawrappers.java.util.function.Predicate: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class ClassSet:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def classes(self, ) -> javawrappers.com.google.common.reflect.TypeToken.TypeSet: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.java.util.Iterator: ...
		def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def rawTypes(self, ) -> javawrappers.java.util.Set: ...
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def interfaces(self, ) -> javawrappers.com.google.common.reflect.TypeToken.TypeSet: ...
		def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
		def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


	class InterfaceSet:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def classes(self, ) -> javawrappers.com.google.common.reflect.TypeToken.TypeSet: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.java.util.Iterator: ...
		def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def rawTypes(self, ) -> javawrappers.java.util.Set: ...
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def interfaces(self, ) -> javawrappers.com.google.common.reflect.TypeToken.TypeSet: ...
		def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
		def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


	class TypeSet:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def classes(self, ) -> javawrappers.com.google.common.reflect.TypeToken.TypeSet: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.java.util.Iterator: ...
		def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def rawTypes(self, ) -> javawrappers.java.util.Set: ...
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def interfaces(self, ) -> javawrappers.com.google.common.reflect.TypeToken.TypeSet: ...
		def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
		def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def unwrap(self, ) -> javawrappers.com.google.common.reflect.TypeToken: ...
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def resolveType(self, arg0: javawrappers.java.lang.reflect.Type, ) -> javawrappers.com.google.common.reflect.TypeToken: ...
	def test(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def method(self, arg0: javawrappers.java.lang.reflect.Method, ) -> javawrappers.com.google.common.reflect.Invokable: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def constructor(self, arg0: javawrappers.java.lang.reflect.Constructor, ) -> javawrappers.com.google.common.reflect.Invokable: ...
	def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
	@overload
	def isSubtypeOf(self, arg0: javawrappers.com.google.common.reflect.TypeToken, ) -> Union[int, JBoolean]: ...
	@overload
	def isSubtypeOf(self, arg0: javawrappers.java.lang.reflect.Type, ) -> Union[int, JBoolean]: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def getType(self, ) -> javawrappers.java.lang.reflect.Type: ...
	def getComponentType(self, ) -> javawrappers.com.google.common.reflect.TypeToken: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def getSubtype(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.common.reflect.TypeToken: ...
	def isArray(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isSupertypeOf(self, arg0: javawrappers.com.google.common.reflect.TypeToken, ) -> Union[int, JBoolean]: ...
	@overload
	def isSupertypeOf(self, arg0: javawrappers.java.lang.reflect.Type, ) -> Union[int, JBoolean]: ...
	def isPrimitive(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getRawType(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def values() -> JArray(javawrappers.com.google.common.reflect.TypeToken.TypeFilter, 1): ...
	@overload
	def classes(self, ) -> javawrappers.com.google.common.reflect.TypeToken.TypeSet: ...
	@overload
	def classes(self, ) -> javawrappers.com.google.common.reflect.TypeToken.TypeSet: ...
	@overload
	def classes(self, ) -> javawrappers.com.google.common.reflect.TypeToken.TypeSet: ...
	def notifyAll(self, ) -> None: ...
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def and(self, arg0: javawrappers.java.util.function.Predicate, ) -> javawrappers.java.util.function.Predicate: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def of(arg0: javawrappers.java.lang.reflect.Type, ) -> javawrappers.com.google.common.reflect.TypeToken: ...
	@overload
	@staticmethod
	def of(arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.common.reflect.TypeToken: ...
	@overload
	def rawTypes(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def rawTypes(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def rawTypes(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def where(self, arg0: javawrappers.com.google.common.reflect.TypeParameter, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.google.common.reflect.TypeToken: ...
	@overload
	def where(self, arg0: javawrappers.com.google.common.reflect.TypeParameter, arg1: javawrappers.com.google.common.reflect.TypeToken, ) -> javawrappers.com.google.common.reflect.TypeToken: ...
	def getSupertype(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.common.reflect.TypeToken: ...
	@overload
	def interfaces(self, ) -> javawrappers.com.google.common.reflect.TypeToken.TypeSet: ...
	@overload
	def interfaces(self, ) -> javawrappers.com.google.common.reflect.TypeToken.TypeSet: ...
	@overload
	def interfaces(self, ) -> javawrappers.com.google.common.reflect.TypeToken.TypeSet: ...
	def or_(self, arg0: javawrappers.java.util.function.Predicate, ) -> javawrappers.java.util.function.Predicate: ...
	def apply(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.reflect.TypeToken.TypeFilter: ...
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def negate(self, ) -> javawrappers.java.util.function.Predicate: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTypes(self, ) -> javawrappers.com.google.common.reflect.TypeToken.TypeSet: ...
	def wrap(self, ) -> javawrappers.com.google.common.reflect.TypeToken: ...
	def ordinal(self, ) -> Union[int, JInt]: ...
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


class TypeParameter:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Invokable:
	class ConstructorInvokable:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def isStatic(self, ) -> Union[int, JBoolean]: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		def isAnnotationPresent(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def isSynthetic(self, ) -> Union[int, JBoolean]: ...
		def invoke(self, arg0: javawrappers.java.lang.Object, *arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def isPrivate(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def isNative(self, ) -> Union[int, JBoolean]: ...
		def getDeclaredAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		def isProtected(self, ) -> Union[int, JBoolean]: ...
		def getAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def canAccess(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def isPublic(self, ) -> Union[int, JBoolean]: ...
		@overload
		@staticmethod
		def from_(arg0: javawrappers.java.lang.reflect.Method, ) -> javawrappers.com.google.common.reflect.Invokable: ...
		@overload
		@staticmethod
		def from_(arg0: javawrappers.java.lang.reflect.Constructor, ) -> javawrappers.com.google.common.reflect.Invokable: ...
		def isFinal(self, ) -> Union[int, JBoolean]: ...
		def getModifiers(self, ) -> Union[int, JInt]: ...
		def getTypeParameters(self, ) -> JArray(javawrappers.java.lang.reflect.TypeVariable, 1): ...
		def trySetAccessible(self, ) -> Union[int, JBoolean]: ...
		def isAccessible(self, ) -> Union[int, JBoolean]: ...
		@overload
		def setAccessible(self, arg0: Union[int, JBoolean], ) -> None: ...
		@overload
		@staticmethod
		def setAccessible(arg0: JArray(javawrappers.java.lang.reflect.AccessibleObject, 1), arg1: Union[int, JBoolean], ) -> None: ...
		def isVarArgs(self, ) -> Union[int, JBoolean]: ...
		def isPackagePrivate(self, ) -> Union[int, JBoolean]: ...
		def isOverridable(self, ) -> Union[int, JBoolean]: ...
		def isSynchronized(self, ) -> Union[int, JBoolean]: ...
		def isAbstract(self, ) -> Union[int, JBoolean]: ...
		def getAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
		def getOwnerType(self, ) -> javawrappers.com.google.common.reflect.TypeToken: ...
		def getExceptionTypes(self, ) -> javawrappers.com.google.common.collect.ImmutableList: ...
		def getReturnType(self, ) -> javawrappers.com.google.common.reflect.TypeToken: ...
		def getDeclaredAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
		def getAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
		@overload
		def returning(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.common.reflect.Invokable: ...
		@overload
		def returning(self, arg0: javawrappers.com.google.common.reflect.TypeToken, ) -> javawrappers.com.google.common.reflect.Invokable: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getDeclaredAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
		def getParameters(self, ) -> javawrappers.com.google.common.collect.ImmutableList: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getAnnotatedReturnType(self, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...


	class MethodInvokable:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def isStatic(self, ) -> Union[int, JBoolean]: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		def isAnnotationPresent(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def isSynthetic(self, ) -> Union[int, JBoolean]: ...
		def invoke(self, arg0: javawrappers.java.lang.Object, *arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def isPrivate(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def isNative(self, ) -> Union[int, JBoolean]: ...
		def getDeclaredAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		def isProtected(self, ) -> Union[int, JBoolean]: ...
		def getAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def canAccess(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def isPublic(self, ) -> Union[int, JBoolean]: ...
		@overload
		@staticmethod
		def from_(arg0: javawrappers.java.lang.reflect.Method, ) -> javawrappers.com.google.common.reflect.Invokable: ...
		@overload
		@staticmethod
		def from_(arg0: javawrappers.java.lang.reflect.Constructor, ) -> javawrappers.com.google.common.reflect.Invokable: ...
		def isFinal(self, ) -> Union[int, JBoolean]: ...
		def getModifiers(self, ) -> Union[int, JInt]: ...
		def getTypeParameters(self, ) -> JArray(javawrappers.java.lang.reflect.TypeVariable, 1): ...
		def trySetAccessible(self, ) -> Union[int, JBoolean]: ...
		def isAccessible(self, ) -> Union[int, JBoolean]: ...
		@overload
		def setAccessible(self, arg0: Union[int, JBoolean], ) -> None: ...
		@overload
		@staticmethod
		def setAccessible(arg0: JArray(javawrappers.java.lang.reflect.AccessibleObject, 1), arg1: Union[int, JBoolean], ) -> None: ...
		def isVarArgs(self, ) -> Union[int, JBoolean]: ...
		def isPackagePrivate(self, ) -> Union[int, JBoolean]: ...
		def isOverridable(self, ) -> Union[int, JBoolean]: ...
		def isSynchronized(self, ) -> Union[int, JBoolean]: ...
		def isAbstract(self, ) -> Union[int, JBoolean]: ...
		def getAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
		def getOwnerType(self, ) -> javawrappers.com.google.common.reflect.TypeToken: ...
		def getExceptionTypes(self, ) -> javawrappers.com.google.common.collect.ImmutableList: ...
		def getReturnType(self, ) -> javawrappers.com.google.common.reflect.TypeToken: ...
		def getDeclaredAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
		def getAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
		@overload
		def returning(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.common.reflect.Invokable: ...
		@overload
		def returning(self, arg0: javawrappers.com.google.common.reflect.TypeToken, ) -> javawrappers.com.google.common.reflect.Invokable: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getDeclaredAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
		def getParameters(self, ) -> javawrappers.com.google.common.collect.ImmutableList: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getAnnotatedReturnType(self, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isStatic(self, ) -> Union[int, JBoolean]: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def isAnnotationPresent(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isSynthetic(self, ) -> Union[int, JBoolean]: ...
	def invoke(self, arg0: javawrappers.java.lang.Object, *arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def isPrivate(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def isNative(self, ) -> Union[int, JBoolean]: ...
	def getDeclaredAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def isProtected(self, ) -> Union[int, JBoolean]: ...
	def getAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def canAccess(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isPublic(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def from_(arg0: javawrappers.java.lang.reflect.Method, ) -> javawrappers.com.google.common.reflect.Invokable: ...
	@overload
	@staticmethod
	def from_(arg0: javawrappers.java.lang.reflect.Constructor, ) -> javawrappers.com.google.common.reflect.Invokable: ...
	@overload
	def getTypeParameters(self, ) -> JArray(javawrappers.java.lang.reflect.TypeVariable, 1): ...
	@overload
	def getTypeParameters(self, ) -> JArray(javawrappers.java.lang.reflect.TypeVariable, 1): ...
	@overload
	def getTypeParameters(self, ) -> JArray(javawrappers.java.lang.reflect.TypeVariable, 1): ...
	def isFinal(self, ) -> Union[int, JBoolean]: ...
	def getModifiers(self, ) -> Union[int, JInt]: ...
	def trySetAccessible(self, ) -> Union[int, JBoolean]: ...
	def isAccessible(self, ) -> Union[int, JBoolean]: ...
	@overload
	def setAccessible(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	@staticmethod
	def setAccessible(arg0: JArray(javawrappers.java.lang.reflect.AccessibleObject, 1), arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def isVarArgs(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isVarArgs(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isVarArgs(self, ) -> Union[int, JBoolean]: ...
	def isPackagePrivate(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isOverridable(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isOverridable(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isOverridable(self, ) -> Union[int, JBoolean]: ...
	def isSynchronized(self, ) -> Union[int, JBoolean]: ...
	def isAbstract(self, ) -> Union[int, JBoolean]: ...
	def getAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getOwnerType(self, ) -> javawrappers.com.google.common.reflect.TypeToken: ...
	def getExceptionTypes(self, ) -> javawrappers.com.google.common.collect.ImmutableList: ...
	def getReturnType(self, ) -> javawrappers.com.google.common.reflect.TypeToken: ...
	def getDeclaredAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	@overload
	def returning(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.common.reflect.Invokable: ...
	@overload
	def returning(self, arg0: javawrappers.com.google.common.reflect.TypeToken, ) -> javawrappers.com.google.common.reflect.Invokable: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDeclaredAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def getParameters(self, ) -> javawrappers.com.google.common.collect.ImmutableList: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getAnnotatedReturnType(self, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...
	@overload
	def getAnnotatedReturnType(self, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...
	@overload
	def getAnnotatedReturnType(self, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...


class MutableTypeToInstanceMap:
	def __init__(self, ): ...
	class UnmodifiableEntry:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getKey(self, ) -> javawrappers.java.lang.Object: ...
		def getValue(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def setValue(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def values(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
	def notify(self, ) -> None: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def put(self, arg0: javawrappers.com.google.common.reflect.TypeToken, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def putInstance(self, arg0: javawrappers.com.google.common.reflect.TypeToken, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def putInstance(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getKey(self, ) -> javawrappers.java.lang.Object: ...
	def entrySet(self, ) -> javawrappers.java.util.Set: ...
	def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def size(self, ) -> Union[int, JInt]: ...
	def setValue(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getInstance(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getInstance(self, arg0: javawrappers.com.google.common.reflect.TypeToken, ) -> javawrappers.java.lang.Object: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class AbstractInvocationHandler:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def invoke(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.reflect.Method, arg2: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...


