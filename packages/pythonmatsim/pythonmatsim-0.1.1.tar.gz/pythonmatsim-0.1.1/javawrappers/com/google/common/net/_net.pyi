################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.net
import javawrappers.com.google.common.base
import javawrappers.com.google.common.escape
import javawrappers.com.google.common.net
import javawrappers.com.google.common.collect
import javawrappers.java.nio.charset

from jpype.types import *
from typing import Union

from typing import overload

class UrlEscapers:
	@staticmethod
	def urlFragmentEscaper() -> javawrappers.com.google.common.escape.Escaper: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def urlPathSegmentEscaper() -> javawrappers.com.google.common.escape.Escaper: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def urlFormParameterEscaper() -> javawrappers.com.google.common.escape.Escaper: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class PercentEscaper:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def asFunction(self, ) -> javawrappers.com.google.common.base.Function: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def escape(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MediaType:
	class Tokenizer:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def charset(self, ) -> javawrappers.com.google.common.base.Optional: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def withoutParameters(self, ) -> javawrappers.com.google.common.net.MediaType: ...
	def is_(self, arg0: javawrappers.com.google.common.net.MediaType, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def parse(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.net.MediaType: ...
	def type(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def withParameter(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.net.MediaType: ...
	def subtype(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def withCharset(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.com.google.common.net.MediaType: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def withParameters(self, arg0: javawrappers.com.google.common.collect.Multimap, ) -> javawrappers.com.google.common.net.MediaType: ...
	@overload
	def withParameters(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Iterable, ) -> javawrappers.com.google.common.net.MediaType: ...
	@staticmethod
	def create(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.net.MediaType: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def parameters(self, ) -> javawrappers.com.google.common.collect.ImmutableListMultimap: ...
	def hasWildcard(self, ) -> Union[int, JBoolean]: ...


class InetAddresses:
	class TeredoInfo:
		def __init__(self, arg0: javawrappers.java.net.Inet4Address, arg1: javawrappers.java.net.Inet4Address, arg2: Union[int, JInt], arg3: Union[int, JInt], ): ...
		def getServer(self, ) -> javawrappers.java.net.Inet4Address: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getPort(self, ) -> Union[int, JInt]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getClient(self, ) -> javawrappers.java.net.Inet4Address: ...
		def getFlags(self, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def toAddrString(arg0: javawrappers.java.net.InetAddress, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def toUriString(arg0: javawrappers.java.net.InetAddress, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def isIsatapAddress(arg0: javawrappers.java.net.Inet6Address, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def isTeredoAddress(arg0: javawrappers.java.net.Inet6Address, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def increment(arg0: javawrappers.java.net.InetAddress, ) -> javawrappers.java.net.InetAddress: ...
	@staticmethod
	def coerceToInteger(arg0: javawrappers.java.net.InetAddress, ) -> Union[int, JInt]: ...
	@staticmethod
	def get6to4IPv4Address(arg0: javawrappers.java.net.Inet6Address, ) -> javawrappers.java.net.Inet4Address: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def getCoercedIPv4Address(arg0: javawrappers.java.net.InetAddress, ) -> javawrappers.java.net.Inet4Address: ...
	@staticmethod
	def isMappedIPv4Address(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def hasEmbeddedIPv4ClientAddress(arg0: javawrappers.java.net.Inet6Address, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getCompatIPv4Address(arg0: javawrappers.java.net.Inet6Address, ) -> javawrappers.java.net.Inet4Address: ...
	@staticmethod
	def forUriString(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.InetAddress: ...
	@staticmethod
	def isMaximum(arg0: javawrappers.java.net.InetAddress, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def fromLittleEndianByteArray(arg0: JArray(JByte, 1), ) -> javawrappers.java.net.InetAddress: ...
	@staticmethod
	def forString(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.InetAddress: ...
	@staticmethod
	def isInetAddress(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getServer(self, ) -> javawrappers.java.net.Inet4Address: ...
	@staticmethod
	def isUriInetAddress(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getEmbeddedIPv4ClientAddress(arg0: javawrappers.java.net.Inet6Address, ) -> javawrappers.java.net.Inet4Address: ...
	@staticmethod
	def getIsatapIPv4Address(arg0: javawrappers.java.net.Inet6Address, ) -> javawrappers.java.net.Inet4Address: ...
	def getClient(self, ) -> javawrappers.java.net.Inet4Address: ...
	@staticmethod
	def is6to4Address(arg0: javawrappers.java.net.Inet6Address, ) -> Union[int, JBoolean]: ...
	def getPort(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getTeredoInfo(arg0: javawrappers.java.net.Inet6Address, ) -> javawrappers.com.google.common.net.InetAddresses.TeredoInfo: ...
	@staticmethod
	def decrement(arg0: javawrappers.java.net.InetAddress, ) -> javawrappers.java.net.InetAddress: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def fromInteger(arg0: Union[int, JInt], ) -> javawrappers.java.net.Inet4Address: ...
	@staticmethod
	def isCompatIPv4Address(arg0: javawrappers.java.net.Inet6Address, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getFlags(self, ) -> Union[int, JInt]: ...


class InternetDomainName:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def parent(self, ) -> javawrappers.com.google.common.net.InternetDomainName: ...
	def hasPublicSuffix(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isTopDomainUnderRegistrySuffix(self, ) -> Union[int, JBoolean]: ...
	def isPublicSuffix(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def isValid(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def topDomainUnderRegistrySuffix(self, ) -> javawrappers.com.google.common.net.InternetDomainName: ...
	def notify(self, ) -> None: ...
	def topPrivateDomain(self, ) -> javawrappers.com.google.common.net.InternetDomainName: ...
	def isUnderRegistrySuffix(self, ) -> Union[int, JBoolean]: ...
	def isUnderPublicSuffix(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def parts(self, ) -> javawrappers.com.google.common.collect.ImmutableList: ...
	def registrySuffix(self, ) -> javawrappers.com.google.common.net.InternetDomainName: ...
	@staticmethod
	def from_(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.net.InternetDomainName: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isRegistrySuffix(self, ) -> Union[int, JBoolean]: ...
	def isTopPrivateDomain(self, ) -> Union[int, JBoolean]: ...
	def publicSuffix(self, ) -> javawrappers.com.google.common.net.InternetDomainName: ...
	def hasRegistrySuffix(self, ) -> Union[int, JBoolean]: ...
	def child(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.net.InternetDomainName: ...
	def hasParent(self, ) -> Union[int, JBoolean]: ...


class HostSpecifier:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def fromValid(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.net.HostSpecifier: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isValid(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def from_(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.net.HostSpecifier: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class HttpHeaders:
	class ReferrerPolicyValues:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class HostAndPort:
	def withDefaultPort(self, arg0: Union[int, JInt], ) -> javawrappers.com.google.common.net.HostAndPort: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def fromParts(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.com.google.common.net.HostAndPort: ...
	def notifyAll(self, ) -> None: ...
	def requireBracketsForIPv6(self, ) -> javawrappers.com.google.common.net.HostAndPort: ...
	def notify(self, ) -> None: ...
	def getPortOrDefault(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getPort(self, ) -> Union[int, JInt]: ...
	def hasPort(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def fromHost(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.net.HostAndPort: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def fromString(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.common.net.HostAndPort: ...
	def getHost(self, ) -> javawrappers.java.lang.String: ...


