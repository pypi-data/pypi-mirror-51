################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.com.google.inject.internal.cglib.core
import javawrappers.java.lang.reflect
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.com.google.inject.internal.cglib.proxy
import javawrappers.java.io
import javawrappers.com.google.inject.internal.asm

from jpype.types import *
from typing import Union

from typing import overload

class $FixedValue:
	def loadObject(self, ) -> javawrappers.java.lang.Object: ...


class $Dispatcher:
	def loadObject(self, ) -> javawrappers.java.lang.Object: ...


class $MethodProxy:
	class CreateInfo:
		def __init__(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class FastClassInfo:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSuperName(self, ) -> javawrappers.java.lang.String: ...
	def invokeSuper(self, arg0: javawrappers.java.lang.Object, arg1: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def getSignature(self, ) -> javawrappers.com.google.inject.internal.cglib.core.$Signature: ...
	def invoke(self, arg0: javawrappers.java.lang.Object, arg1: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def getSuperIndex(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def find(arg0: javawrappers.java.lang.Class, arg1: javawrappers.com.google.inject.internal.cglib.core.$Signature, ) -> javawrappers.com.google.inject.internal.cglib.proxy.$MethodProxy: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def create(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, ) -> javawrappers.com.google.inject.internal.cglib.proxy.$MethodProxy: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class $ProxyRefDispatcher:
	def loadObject(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class $Callback:


class $Factory:
	def setCallbacks(self, arg0: JArray(javawrappers.com.google.inject.internal.cglib.proxy.$Callback, 1), ) -> None: ...
	def setCallback(self, arg0: Union[int, JInt], arg1: javawrappers.com.google.inject.internal.cglib.proxy.$Callback, ) -> None: ...
	@overload
	def newInstance(self, arg0: JArray(javawrappers.java.lang.Class, 1), arg1: JArray(javawrappers.java.lang.Object, 1), arg2: JArray(javawrappers.com.google.inject.internal.cglib.proxy.$Callback, 1), ) -> javawrappers.java.lang.Object: ...
	@overload
	def newInstance(self, arg0: JArray(javawrappers.com.google.inject.internal.cglib.proxy.$Callback, 1), ) -> javawrappers.java.lang.Object: ...
	@overload
	def newInstance(self, arg0: javawrappers.com.google.inject.internal.cglib.proxy.$Callback, ) -> javawrappers.java.lang.Object: ...
	def getCallbacks(self, ) -> JArray(javawrappers.com.google.inject.internal.cglib.proxy.$Callback, 1): ...
	def getCallback(self, arg0: Union[int, JInt], ) -> javawrappers.com.google.inject.internal.cglib.proxy.$Callback: ...


class $Enhancer:
	def __init__(self, ): ...
	class EnhancerKey:
		def newInstance(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.String, 1), arg2: javawrappers.com.google.inject.internal.cglib.proxy.$CallbackFilter, arg3: JArray(javawrappers.com.google.inject.internal.asm.$Type, 1), arg4: Union[int, JBoolean], arg5: Union[int, JBoolean], arg6: javawrappers.java.lang.Long, ) -> javawrappers.java.lang.Object: ...


	def getStrategy(self, ) -> javawrappers.com.google.inject.internal.cglib.core.$GeneratorStrategy: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setInterfaces(self, arg0: JArray(javawrappers.java.lang.Class, 1), ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setCallbacks(self, arg0: JArray(javawrappers.com.google.inject.internal.cglib.proxy.$Callback, 1), ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setCallback(self, arg0: javawrappers.com.google.inject.internal.cglib.proxy.$Callback, ) -> None: ...
	def getClassLoader(self, ) -> javawrappers.java.lang.ClassLoader: ...
	@staticmethod
	def registerStaticCallbacks(arg0: javawrappers.java.lang.Class, arg1: JArray(javawrappers.com.google.inject.internal.cglib.proxy.$Callback, 1), ) -> None: ...
	def setClassLoader(self, arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getAttemptLoad(self, ) -> Union[int, JBoolean]: ...
	def getUseCache(self, ) -> Union[int, JBoolean]: ...
	def setCallbackTypes(self, arg0: JArray(javawrappers.java.lang.Class, 1), ) -> None: ...
	def setStrategy(self, arg0: javawrappers.com.google.inject.internal.cglib.core.$GeneratorStrategy, ) -> None: ...
	def setNamingPolicy(self, arg0: javawrappers.com.google.inject.internal.cglib.core.$NamingPolicy, ) -> None: ...
	@overload
	def create(self, arg0: JArray(javawrappers.java.lang.Class, 1), arg1: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.lang.Class, arg1: JArray(javawrappers.java.lang.Class, 1), arg2: javawrappers.com.google.inject.internal.cglib.proxy.$CallbackFilter, arg3: JArray(javawrappers.com.google.inject.internal.cglib.proxy.$Callback, 1), ) -> javawrappers.java.lang.Object: ...
	@overload
	def create(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.lang.Class, arg1: JArray(javawrappers.java.lang.Class, 1), arg2: javawrappers.com.google.inject.internal.cglib.proxy.$Callback, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.lang.Class, arg1: javawrappers.com.google.inject.internal.cglib.proxy.$Callback, ) -> javawrappers.java.lang.Object: ...
	def createClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def registerCallbacks(arg0: javawrappers.java.lang.Class, arg1: JArray(javawrappers.com.google.inject.internal.cglib.proxy.$Callback, 1), ) -> None: ...
	def setAttemptLoad(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setUseCache(self, arg0: Union[int, JBoolean], ) -> None: ...
	def generateClass(self, arg0: javawrappers.com.google.inject.internal.asm.$ClassVisitor, ) -> None: ...
	def newInstance(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.String, 1), arg2: javawrappers.com.google.inject.internal.cglib.proxy.$CallbackFilter, arg3: JArray(javawrappers.com.google.inject.internal.asm.$Type, 1), arg4: Union[int, JBoolean], arg5: Union[int, JBoolean], arg6: javawrappers.java.lang.Long, ) -> javawrappers.java.lang.Object: ...
	def getNamingPolicy(self, ) -> javawrappers.com.google.inject.internal.cglib.core.$NamingPolicy: ...
	def setUseFactory(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setSuperclass(self, arg0: javawrappers.java.lang.Class, ) -> None: ...
	def setInterceptDuringConstruction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setCallbackFilter(self, arg0: javawrappers.com.google.inject.internal.cglib.proxy.$CallbackFilter, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getCurrent() -> javawrappers.com.google.inject.internal.cglib.core.$AbstractClassGenerator: ...
	@staticmethod
	def getMethods(arg0: javawrappers.java.lang.Class, arg1: JArray(javawrappers.java.lang.Class, 1), arg2: javawrappers.java.util.List, ) -> None: ...
	def setSerialVersionUID(self, arg0: javawrappers.java.lang.Long, ) -> None: ...
	def setCallbackType(self, arg0: javawrappers.java.lang.Class, ) -> None: ...
	@staticmethod
	def isEnhanced(arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...


class $CallbackFilter:
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def accept(self, arg0: javawrappers.java.lang.reflect.Method, ) -> Union[int, JInt]: ...


class $NoOp:


class $MethodInterceptor:
	def intercept(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.reflect.Method, arg2: JArray(javawrappers.java.lang.Object, 1), arg3: javawrappers.com.google.inject.internal.cglib.proxy.$MethodProxy, ) -> javawrappers.java.lang.Object: ...


class $UndeclaredThrowableException:
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getUndeclaredThrowable(self, ) -> javawrappers.java.lang.Throwable: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class $LazyLoader:
	def loadObject(self, ) -> javawrappers.java.lang.Object: ...


class $InvocationHandler:
	def invoke(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.reflect.Method, arg2: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...


