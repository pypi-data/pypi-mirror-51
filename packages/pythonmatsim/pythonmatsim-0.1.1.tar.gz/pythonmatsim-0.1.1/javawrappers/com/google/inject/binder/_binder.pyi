################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang.reflect
import javawrappers.java.lang
import javawrappers.com.google.inject
import javawrappers.java.lang.annotation
import javawrappers.com.google.inject.binder
import javawrappers.javax.inject

from jpype.types import *
from typing import Union

from typing import overload

class AnnotatedElementBuilder:
	@overload
	def annotatedWith(self, arg0: javawrappers.java.lang.Class, ) -> None: ...
	@overload
	def annotatedWith(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> None: ...


class ScopedBindingBuilder:
	@overload
	def in_(self, arg0: javawrappers.com.google.inject.Scope, ) -> None: ...
	@overload
	def in_(self, arg0: javawrappers.java.lang.Class, ) -> None: ...
	def asEagerSingleton(self, ) -> None: ...


class AnnotatedBindingBuilder:
	def toInstance(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def in_(self, arg0: javawrappers.com.google.inject.Scope, ) -> None: ...
	@overload
	def in_(self, arg0: javawrappers.java.lang.Class, ) -> None: ...
	@overload
	def to(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.binder.ScopedBindingBuilder: ...
	@overload
	def to(self, arg0: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.binder.ScopedBindingBuilder: ...
	@overload
	def to(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.binder.ScopedBindingBuilder: ...
	@overload
	def annotatedWith(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.binder.LinkedBindingBuilder: ...
	@overload
	def annotatedWith(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> javawrappers.com.google.inject.binder.LinkedBindingBuilder: ...
	def asEagerSingleton(self, ) -> None: ...
	@overload
	def toConstructor(self, arg0: javawrappers.java.lang.reflect.Constructor, ) -> javawrappers.com.google.inject.binder.ScopedBindingBuilder: ...
	@overload
	def toConstructor(self, arg0: javawrappers.java.lang.reflect.Constructor, arg1: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.binder.ScopedBindingBuilder: ...
	@overload
	def toProvider(self, arg0: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.binder.ScopedBindingBuilder: ...
	@overload
	def toProvider(self, arg0: javawrappers.com.google.inject.Provider, ) -> javawrappers.com.google.inject.binder.ScopedBindingBuilder: ...
	@overload
	def toProvider(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.binder.ScopedBindingBuilder: ...
	@overload
	def toProvider(self, arg0: javawrappers.javax.inject.Provider, ) -> javawrappers.com.google.inject.binder.ScopedBindingBuilder: ...
	@overload
	def toProvider(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.binder.ScopedBindingBuilder: ...


class ConstantBindingBuilder:
	@overload
	def to(self, arg0: JByte, ) -> None: ...
	@overload
	def to(self, arg0: Union[float, JFloat], ) -> None: ...
	@overload
	def to(self, arg0: Union[int, JShort], ) -> None: ...
	@overload
	def to(self, arg0: Union[string, JString], ) -> None: ...
	@overload
	def to(self, arg0: javawrappers.java.lang.Class, ) -> None: ...
	@overload
	def to(self, arg0: javawrappers.java.lang.Enum, ) -> None: ...
	@overload
	def to(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def to(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def to(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def to(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def to(self, arg0: Union[float, JDouble], ) -> None: ...


class AnnotatedConstantBindingBuilder:
	@overload
	def annotatedWith(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.binder.ConstantBindingBuilder: ...
	@overload
	def annotatedWith(self, arg0: javawrappers.java.lang.annotation.Annotation, ) -> javawrappers.com.google.inject.binder.ConstantBindingBuilder: ...


class LinkedBindingBuilder:
	def toInstance(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def in_(self, arg0: javawrappers.com.google.inject.Scope, ) -> None: ...
	@overload
	def in_(self, arg0: javawrappers.java.lang.Class, ) -> None: ...
	@overload
	def to(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.binder.ScopedBindingBuilder: ...
	@overload
	def to(self, arg0: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.binder.ScopedBindingBuilder: ...
	@overload
	def to(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.binder.ScopedBindingBuilder: ...
	def asEagerSingleton(self, ) -> None: ...
	@overload
	def toConstructor(self, arg0: javawrappers.java.lang.reflect.Constructor, ) -> javawrappers.com.google.inject.binder.ScopedBindingBuilder: ...
	@overload
	def toConstructor(self, arg0: javawrappers.java.lang.reflect.Constructor, arg1: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.binder.ScopedBindingBuilder: ...
	@overload
	def toProvider(self, arg0: javawrappers.com.google.inject.TypeLiteral, ) -> javawrappers.com.google.inject.binder.ScopedBindingBuilder: ...
	@overload
	def toProvider(self, arg0: javawrappers.com.google.inject.Provider, ) -> javawrappers.com.google.inject.binder.ScopedBindingBuilder: ...
	@overload
	def toProvider(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.binder.ScopedBindingBuilder: ...
	@overload
	def toProvider(self, arg0: javawrappers.javax.inject.Provider, ) -> javawrappers.com.google.inject.binder.ScopedBindingBuilder: ...
	@overload
	def toProvider(self, arg0: javawrappers.com.google.inject.Key, ) -> javawrappers.com.google.inject.binder.ScopedBindingBuilder: ...


