################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang.reflect
import javawrappers.com.google.inject.internal.cglib.core
import javawrappers.java.lang
import javawrappers.com.google.inject.internal.asm
import javawrappers.com.google.inject.internal.cglib.reflect

from jpype.types import *
from typing import Union

from typing import overload

class $FastMethod:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getIndex(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def getParameterTypes(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def invoke(self, arg0: javawrappers.java.lang.Object, arg1: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def getJavaMethod(self, ) -> javawrappers.java.lang.reflect.Method: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def getExceptionTypes(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def getReturnType(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getModifiers(self, ) -> Union[int, JInt]: ...


class $FastMember:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getExceptionTypes(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getIndex(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameterTypes(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getModifiers(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class $FastConstructor:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getIndex(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def getParameterTypes(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	@overload
	def newInstance(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def newInstance(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def getExceptionTypes(self, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def getJavaConstructor(self, ) -> javawrappers.java.lang.reflect.Constructor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getModifiers(self, ) -> Union[int, JInt]: ...


class $FastClass:
	class Generator:
		def __init__(self, ): ...
		def getStrategy(self, ) -> javawrappers.com.google.inject.internal.cglib.core.$GeneratorStrategy: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def setAttemptLoad(self, arg0: Union[int, JBoolean], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def setUseCache(self, arg0: Union[int, JBoolean], ) -> None: ...
		def generateClass(self, arg0: javawrappers.com.google.inject.internal.asm.$ClassVisitor, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def getClassLoader(self, ) -> javawrappers.java.lang.ClassLoader: ...
		def getNamingPolicy(self, ) -> javawrappers.com.google.inject.internal.cglib.core.$NamingPolicy: ...
		def setType(self, arg0: javawrappers.java.lang.Class, ) -> None: ...
		def setClassLoader(self, arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
		def notify(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getAttemptLoad(self, ) -> Union[int, JBoolean]: ...
		def getUseCache(self, ) -> Union[int, JBoolean]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def setStrategy(self, arg0: javawrappers.com.google.inject.internal.cglib.core.$GeneratorStrategy, ) -> None: ...
		def setNamingPolicy(self, arg0: javawrappers.com.google.inject.internal.cglib.core.$NamingPolicy, ) -> None: ...
		def create(self, ) -> javawrappers.com.google.inject.internal.cglib.reflect.$FastClass: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def getCurrent() -> javawrappers.com.google.inject.internal.cglib.core.$AbstractClassGenerator: ...


	def getStrategy(self, ) -> javawrappers.com.google.inject.internal.cglib.core.$GeneratorStrategy: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getIndex(self, arg0: JArray(javawrappers.java.lang.Class, 1), ) -> Union[int, JInt]: ...
	@overload
	def getIndex(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.Class, 1), ) -> Union[int, JInt]: ...
	@overload
	def getIndex(self, arg0: javawrappers.com.google.inject.internal.cglib.core.$Signature, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def getClassLoader(self, ) -> javawrappers.java.lang.ClassLoader: ...
	@overload
	def invoke(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, arg2: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
	@overload
	def invoke(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.Class, 1), arg2: javawrappers.java.lang.Object, arg3: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
	@overload
	def getMethod(self, arg0: javawrappers.java.lang.reflect.Method, ) -> javawrappers.com.google.inject.internal.cglib.reflect.$FastMethod: ...
	@overload
	def getMethod(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.Class, 1), ) -> javawrappers.com.google.inject.internal.cglib.reflect.$FastMethod: ...
	def setClassLoader(self, arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	def notify(self, ) -> None: ...
	def getAttemptLoad(self, ) -> Union[int, JBoolean]: ...
	def getUseCache(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setStrategy(self, arg0: javawrappers.com.google.inject.internal.cglib.core.$GeneratorStrategy, ) -> None: ...
	def setNamingPolicy(self, arg0: javawrappers.com.google.inject.internal.cglib.core.$NamingPolicy, ) -> None: ...
	@overload
	def create(self, ) -> javawrappers.com.google.inject.internal.cglib.reflect.$FastClass: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.internal.cglib.reflect.$FastClass: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.lang.ClassLoader, arg1: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.internal.cglib.reflect.$FastClass: ...
	def getJavaClass(self, ) -> javawrappers.java.lang.Class: ...
	def setAttemptLoad(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setUseCache(self, arg0: Union[int, JBoolean], ) -> None: ...
	def generateClass(self, arg0: javawrappers.com.google.inject.internal.asm.$ClassVisitor, ) -> None: ...
	@overload
	def newInstance(self, arg0: Union[int, JInt], arg1: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
	@overload
	def newInstance(self, arg0: JArray(javawrappers.java.lang.Class, 1), arg1: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
	@overload
	def newInstance(self, ) -> javawrappers.java.lang.Object: ...
	def getNamingPolicy(self, ) -> javawrappers.com.google.inject.internal.cglib.core.$NamingPolicy: ...
	def setType(self, arg0: javawrappers.java.lang.Class, ) -> None: ...
	@overload
	def getConstructor(self, arg0: JArray(javawrappers.java.lang.Class, 1), ) -> javawrappers.com.google.inject.internal.cglib.reflect.$FastConstructor: ...
	@overload
	def getConstructor(self, arg0: javawrappers.java.lang.reflect.Constructor, ) -> javawrappers.com.google.inject.internal.cglib.reflect.$FastConstructor: ...
	def getMaxIndex(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getCurrent() -> javawrappers.com.google.inject.internal.cglib.core.$AbstractClassGenerator: ...


