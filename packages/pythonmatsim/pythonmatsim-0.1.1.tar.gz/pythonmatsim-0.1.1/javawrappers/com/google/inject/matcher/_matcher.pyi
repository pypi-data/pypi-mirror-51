################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang.reflect
import javawrappers.java.lang
import javawrappers.com.google.inject.matcher
import javawrappers.java.lang.annotation

from jpype.types import *
from typing import Union

from typing import overload

class Matchers:
	class Returns:
		def __init__(self, arg0: javawrappers.com.google.inject.matcher.Matcher, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def or_(self, arg0: javawrappers.com.google.inject.matcher.Matcher, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
		def and(self, arg0: javawrappers.com.google.inject.matcher.Matcher, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def matches(self, arg0: javawrappers.java.lang.reflect.Method, ) -> Union[int, JBoolean]: ...
		@overload
		def matches(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	class InSubpackage:
		def __init__(self, arg0: javawrappers.java.lang.String, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def or_(self, arg0: javawrappers.com.google.inject.matcher.Matcher, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
		def and(self, arg0: javawrappers.com.google.inject.matcher.Matcher, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def matches(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
		@overload
		def matches(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	class InPackage:
		def __init__(self, arg0: javawrappers.java.lang.Package, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def or_(self, arg0: javawrappers.com.google.inject.matcher.Matcher, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
		def readResolve(self, ) -> javawrappers.java.lang.Object: ...
		def and(self, arg0: javawrappers.com.google.inject.matcher.Matcher, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def matches(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
		@overload
		def matches(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	class IdenticalTo:
		def __init__(self, arg0: javawrappers.java.lang.Object, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def or_(self, arg0: javawrappers.com.google.inject.matcher.Matcher, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
		def and(self, arg0: javawrappers.com.google.inject.matcher.Matcher, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def matches(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	class Only:
		def __init__(self, arg0: javawrappers.java.lang.Object, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def or_(self, arg0: javawrappers.com.google.inject.matcher.Matcher, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
		def and(self, arg0: javawrappers.com.google.inject.matcher.Matcher, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def matches(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	class SubclassesOf:
		def __init__(self, arg0: javawrappers.java.lang.Class, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def or_(self, arg0: javawrappers.com.google.inject.matcher.Matcher, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
		def and(self, arg0: javawrappers.com.google.inject.matcher.Matcher, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def matches(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
		@overload
		def matches(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	class AnnotatedWith:
		def __init__(self, arg0: javawrappers.java.lang.annotation.Annotation, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def or_(self, arg0: javawrappers.com.google.inject.matcher.Matcher, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
		def and(self, arg0: javawrappers.com.google.inject.matcher.Matcher, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def matches(self, arg0: javawrappers.java.lang.reflect.AnnotatedElement, ) -> Union[int, JBoolean]: ...
		@overload
		def matches(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	class AnnotatedWithType:
		def __init__(self, arg0: javawrappers.java.lang.Class, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def or_(self, arg0: javawrappers.com.google.inject.matcher.Matcher, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
		def and(self, arg0: javawrappers.com.google.inject.matcher.Matcher, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def matches(self, arg0: javawrappers.java.lang.reflect.AnnotatedElement, ) -> Union[int, JBoolean]: ...
		@overload
		def matches(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	class Not:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def or_(self, arg0: javawrappers.com.google.inject.matcher.Matcher, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
		def and(self, arg0: javawrappers.com.google.inject.matcher.Matcher, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def matches(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	class Any:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def or_(self, arg0: javawrappers.com.google.inject.matcher.Matcher, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
		def readResolve(self, ) -> javawrappers.java.lang.Object: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def and(self, arg0: javawrappers.com.google.inject.matcher.Matcher, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def matches(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def or_(self, arg0: javawrappers.com.google.inject.matcher.Matcher, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
	@overload
	def readResolve(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def readResolve(self, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def matches(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def matches(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def matches(self, arg0: javawrappers.java.lang.reflect.AnnotatedElement, ) -> Union[int, JBoolean]: ...
	@overload
	def matches(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def matches(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	@overload
	def matches(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def matches(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	@overload
	def matches(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def matches(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	@overload
	def matches(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def matches(self, arg0: javawrappers.java.lang.reflect.Method, ) -> Union[int, JBoolean]: ...
	@overload
	def matches(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def matches(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def matches(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def matches(self, arg0: javawrappers.java.lang.reflect.AnnotatedElement, ) -> Union[int, JBoolean]: ...
	@overload
	def matches(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def any() -> javawrappers.com.google.inject.matcher.Matcher: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def identicalTo(arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
	@staticmethod
	def inPackage(arg0: javawrappers.java.lang.Package, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
	@staticmethod
	def not_(arg0: javawrappers.com.google.inject.matcher.Matcher, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
	def and(self, arg0: javawrappers.com.google.inject.matcher.Matcher, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def only(arg0: javawrappers.java.lang.Object, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
	@staticmethod
	def subclassesOf(arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def returns(arg0: javawrappers.com.google.inject.matcher.Matcher, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
	@staticmethod
	def inSubpackage(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
	@overload
	@staticmethod
	def annotatedWith(arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
	@overload
	@staticmethod
	def annotatedWith(arg0: javawrappers.java.lang.annotation.Annotation, ) -> javawrappers.com.google.inject.matcher.Matcher: ...


class Matcher:
	def or_(self, arg0: javawrappers.com.google.inject.matcher.Matcher, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
	def and(self, arg0: javawrappers.com.google.inject.matcher.Matcher, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
	def matches(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...


class AbstractMatcher:
	def __init__(self, ): ...
	class OrMatcher:
		def __init__(self, arg0: javawrappers.com.google.inject.matcher.Matcher, arg1: javawrappers.com.google.inject.matcher.Matcher, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def or_(self, arg0: javawrappers.com.google.inject.matcher.Matcher, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
		def and(self, arg0: javawrappers.com.google.inject.matcher.Matcher, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def matches(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	class AndMatcher:
		def __init__(self, arg0: javawrappers.com.google.inject.matcher.Matcher, arg1: javawrappers.com.google.inject.matcher.Matcher, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def or_(self, arg0: javawrappers.com.google.inject.matcher.Matcher, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
		def and(self, arg0: javawrappers.com.google.inject.matcher.Matcher, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def matches(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def or_(self, arg0: javawrappers.com.google.inject.matcher.Matcher, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def and(self, arg0: javawrappers.com.google.inject.matcher.Matcher, ) -> javawrappers.com.google.inject.matcher.Matcher: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def matches(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def matches(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def matches(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


