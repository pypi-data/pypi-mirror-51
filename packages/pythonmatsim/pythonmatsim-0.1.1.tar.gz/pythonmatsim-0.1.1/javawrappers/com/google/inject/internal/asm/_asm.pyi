################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang.reflect
import javawrappers.java.lang
import javawrappers.com.google.inject.internal.asm

from jpype.types import *
from typing import Union

from typing import overload

class $MethodVisitor:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.com.google.inject.internal.asm.$MethodVisitor, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitTypeAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.com.google.inject.internal.asm.$TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.com.google.inject.internal.asm.$AnnotationVisitor: ...
	def visitJumpInsn(self, arg0: Union[int, JInt], arg1: javawrappers.com.google.inject.internal.asm.$Label, ) -> None: ...
	def visitAttribute(self, arg0: javawrappers.com.google.inject.internal.asm.$Attribute, ) -> None: ...
	@overload
	def visitMethodInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def visitMethodInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def visitTryCatchBlock(self, arg0: javawrappers.com.google.inject.internal.asm.$Label, arg1: javawrappers.com.google.inject.internal.asm.$Label, arg2: javawrappers.com.google.inject.internal.asm.$Label, arg3: javawrappers.java.lang.String, ) -> None: ...
	def visitTableSwitchInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.com.google.inject.internal.asm.$Label, *arg3: javawrappers.com.google.inject.internal.asm.$Label, ) -> None: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.com.google.inject.internal.asm.$AnnotationVisitor: ...
	def notify(self, ) -> None: ...
	def visitParameterAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], ) -> javawrappers.com.google.inject.internal.asm.$AnnotationVisitor: ...
	def visitParameter(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def visitInsnAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.com.google.inject.internal.asm.$TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.com.google.inject.internal.asm.$AnnotationVisitor: ...
	def visitMultiANewArrayInsn(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	def visitCode(self, ) -> None: ...
	def visitLdcInsn(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def visitTypeInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	def visitFrame(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(javawrappers.java.lang.Object, 1), arg3: Union[int, JInt], arg4: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	def visitLocalVariable(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.com.google.inject.internal.asm.$Label, arg4: javawrappers.com.google.inject.internal.asm.$Label, arg5: Union[int, JInt], ) -> None: ...
	def visitEnd(self, ) -> None: ...
	def visitLabel(self, arg0: javawrappers.com.google.inject.internal.asm.$Label, ) -> None: ...
	def visitLookupSwitchInsn(self, arg0: javawrappers.com.google.inject.internal.asm.$Label, arg1: JArray(Union[int, JInt], 1), arg2: JArray(javawrappers.com.google.inject.internal.asm.$Label, 1), ) -> None: ...
	def visitLocalVariableAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.com.google.inject.internal.asm.$TypePath, arg2: JArray(javawrappers.com.google.inject.internal.asm.$Label, 1), arg3: JArray(javawrappers.com.google.inject.internal.asm.$Label, 1), arg4: JArray(Union[int, JInt], 1), arg5: javawrappers.java.lang.String, arg6: Union[int, JBoolean], ) -> javawrappers.com.google.inject.internal.asm.$AnnotationVisitor: ...
	def visitIntInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitIincInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitInsn(self, arg0: Union[int, JInt], ) -> None: ...
	def visitLineNumber(self, arg0: Union[int, JInt], arg1: javawrappers.com.google.inject.internal.asm.$Label, ) -> None: ...
	def visitVarInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitTryCatchAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.com.google.inject.internal.asm.$TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.com.google.inject.internal.asm.$AnnotationVisitor: ...
	def visitInvokeDynamicInsn(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.com.google.inject.internal.asm.$Handle, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visitAnnotationDefault(self, ) -> javawrappers.com.google.inject.internal.asm.$AnnotationVisitor: ...
	def visitMaxs(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitFieldInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...


class $ClassReader:
	@overload
	def __init__(self, arg0: JArray(JByte, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.InputStream, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSuperName(self, ) -> javawrappers.java.lang.String: ...
	def getAccess(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def getItemCount(self, ) -> Union[int, JInt]: ...
	def getInterfaces(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getItem(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def readUTF8(self, arg0: Union[int, JInt], arg1: JArray(Union[string, JString], 1), ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@overload
	def accept(self, arg0: javawrappers.com.google.inject.internal.asm.$ClassVisitor, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def accept(self, arg0: javawrappers.com.google.inject.internal.asm.$ClassVisitor, arg1: JArray(javawrappers.com.google.inject.internal.asm.$Attribute, 1), arg2: Union[int, JInt], ) -> None: ...
	def readClass(self, arg0: Union[int, JInt], arg1: JArray(Union[string, JString], 1), ) -> javawrappers.java.lang.String: ...
	def readLong(self, arg0: Union[int, JInt], ) -> Union[long, JLong]: ...
	def readShort(self, arg0: Union[int, JInt], ) -> Union[int, JShort]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readConst(self, arg0: Union[int, JInt], arg1: JArray(Union[string, JString], 1), ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getClassName(self, ) -> javawrappers.java.lang.String: ...
	def readInt(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def readByte(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getMaxStringLength(self, ) -> Union[int, JInt]: ...
	def readUnsignedShort(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...


class $AnnotationVisitor:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.com.google.inject.internal.asm.$AnnotationVisitor, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitArray(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.inject.internal.asm.$AnnotationVisitor: ...
	def visitEnd(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visit(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.com.google.inject.internal.asm.$AnnotationVisitor: ...
	def notify(self, ) -> None: ...
	def visitEnum(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...


class $Label:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getOffset(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class $ClassWriter:
	@overload
	def __init__(self, arg0: javawrappers.com.google.inject.internal.asm.$ClassReader, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitTypeAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.com.google.inject.internal.asm.$TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.com.google.inject.internal.asm.$AnnotationVisitor: ...
	def newHandle(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def visitAttribute(self, arg0: javawrappers.com.google.inject.internal.asm.$Attribute, ) -> None: ...
	def visitOuterClass(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def newField(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def newUTF8(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.com.google.inject.internal.asm.$AnnotationVisitor: ...
	def notify(self, ) -> None: ...
	def newMethod(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> Union[int, JInt]: ...
	def visitField(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Object, ) -> javawrappers.com.google.inject.internal.asm.$FieldVisitor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def newMethodType(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def visitInnerClass(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: Union[int, JInt], ) -> None: ...
	def visitEnd(self, ) -> None: ...
	def newConst(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def visitMethod(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: JArray(javawrappers.java.lang.String, 1), ) -> javawrappers.com.google.inject.internal.asm.$MethodVisitor: ...
	def visitSource(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def newClass(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toByteArray(self, ) -> JArray(JByte, 1): ...
	def newNameType(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visit(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def newInvokeDynamic(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.com.google.inject.internal.asm.$Handle, *arg3: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...


class $ByteVector:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def putByte(self, arg0: Union[int, JInt], ) -> javawrappers.com.google.inject.internal.asm.$ByteVector: ...
	def putInt(self, arg0: Union[int, JInt], ) -> javawrappers.com.google.inject.internal.asm.$ByteVector: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def putUTF8(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.inject.internal.asm.$ByteVector: ...
	def putLong(self, arg0: Union[long, JLong], ) -> javawrappers.com.google.inject.internal.asm.$ByteVector: ...
	def putShort(self, arg0: Union[int, JInt], ) -> javawrappers.com.google.inject.internal.asm.$ByteVector: ...
	def notify(self, ) -> None: ...
	def putByteArray(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.com.google.inject.internal.asm.$ByteVector: ...


class $Opcodes:


class $Type:
	@overload
	@staticmethod
	def getDescriptor(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.String: ...
	@overload
	def getDescriptor(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getElementType(self, ) -> javawrappers.com.google.inject.internal.asm.$Type: ...
	@overload
	@staticmethod
	def getArgumentTypes(arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.com.google.inject.internal.asm.$Type, 1): ...
	@overload
	@staticmethod
	def getArgumentTypes(arg0: javawrappers.java.lang.reflect.Method, ) -> JArray(javawrappers.com.google.inject.internal.asm.$Type, 1): ...
	@overload
	def getArgumentTypes(self, ) -> JArray(javawrappers.com.google.inject.internal.asm.$Type, 1): ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getArgumentsAndReturnSizes(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def getArgumentsAndReturnSizes(arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDimensions(self, ) -> Union[int, JInt]: ...
	def getSort(self, ) -> Union[int, JInt]: ...
	def getSize(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def getMethodDescriptor(arg0: javawrappers.com.google.inject.internal.asm.$Type, *arg1: javawrappers.com.google.inject.internal.asm.$Type, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getMethodDescriptor(arg0: javawrappers.java.lang.reflect.Method, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getReturnType(arg0: javawrappers.java.lang.reflect.Method, ) -> javawrappers.com.google.inject.internal.asm.$Type: ...
	@overload
	def getReturnType(self, ) -> javawrappers.com.google.inject.internal.asm.$Type: ...
	@overload
	@staticmethod
	def getReturnType(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.inject.internal.asm.$Type: ...
	@overload
	@staticmethod
	def getType(arg0: javawrappers.java.lang.reflect.Constructor, ) -> javawrappers.com.google.inject.internal.asm.$Type: ...
	@overload
	@staticmethod
	def getType(arg0: javawrappers.java.lang.reflect.Method, ) -> javawrappers.com.google.inject.internal.asm.$Type: ...
	@overload
	@staticmethod
	def getType(arg0: javawrappers.java.lang.Class, ) -> javawrappers.com.google.inject.internal.asm.$Type: ...
	@overload
	@staticmethod
	def getType(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.inject.internal.asm.$Type: ...
	@overload
	@staticmethod
	def getInternalName(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.String: ...
	@overload
	def getInternalName(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def getMethodType(arg0: javawrappers.com.google.inject.internal.asm.$Type, *arg1: javawrappers.com.google.inject.internal.asm.$Type, ) -> javawrappers.com.google.inject.internal.asm.$Type: ...
	@overload
	@staticmethod
	def getMethodType(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.inject.internal.asm.$Type: ...
	@staticmethod
	def getConstructorDescriptor(arg0: javawrappers.java.lang.reflect.Constructor, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getObjectType(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.inject.internal.asm.$Type: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getClassName(self, ) -> javawrappers.java.lang.String: ...
	def getOpcode(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...


class $Attribute:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isUnknown(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def isCodeAttribute(self, ) -> Union[int, JBoolean]: ...


class $ClassVisitor:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.com.google.inject.internal.asm.$ClassVisitor, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitInnerClass(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: Union[int, JInt], ) -> None: ...
	def visitTypeAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.com.google.inject.internal.asm.$TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.com.google.inject.internal.asm.$AnnotationVisitor: ...
	def visitEnd(self, ) -> None: ...
	def visitAttribute(self, arg0: javawrappers.com.google.inject.internal.asm.$Attribute, ) -> None: ...
	def visitOuterClass(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.com.google.inject.internal.asm.$AnnotationVisitor: ...
	def visitMethod(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: JArray(javawrappers.java.lang.String, 1), ) -> javawrappers.com.google.inject.internal.asm.$MethodVisitor: ...
	def visitSource(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...
	def visitField(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Object, ) -> javawrappers.com.google.inject.internal.asm.$FieldVisitor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visit(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: JArray(javawrappers.java.lang.String, 1), ) -> None: ...


class $Handle:
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDesc(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOwner(self, ) -> javawrappers.java.lang.String: ...
	def getTag(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class $TypePath:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getStep(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getLength(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getStepArgument(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def fromString(arg0: javawrappers.java.lang.String, ) -> javawrappers.com.google.inject.internal.asm.$TypePath: ...
	def notify(self, ) -> None: ...


class $FieldVisitor:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.com.google.inject.internal.asm.$FieldVisitor, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitTypeAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.com.google.inject.internal.asm.$TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.com.google.inject.internal.asm.$AnnotationVisitor: ...
	def visitEnd(self, ) -> None: ...
	def visitAttribute(self, arg0: javawrappers.com.google.inject.internal.asm.$Attribute, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.com.google.inject.internal.asm.$AnnotationVisitor: ...
	def notify(self, ) -> None: ...


