################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.io
import javawrappers.au.com.objectix.jgridshift

from jpype.types import *
from typing import Union

from typing import overload

class GridShift:
	def __init__(self, ): ...
	def getLonShiftPositiveWestSeconds(self, ) -> Union[float, JDouble]: ...
	def getShiftedLatDegrees(self, ) -> Union[float, JDouble]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setSubGridName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setLonAccuracySeconds(self, arg0: Union[float, JDouble], ) -> None: ...
	def getLatShiftSeconds(self, ) -> Union[float, JDouble]: ...
	def getShiftedLonPositiveEastDegrees(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def getLatSeconds(self, ) -> Union[float, JDouble]: ...
	def getLatAccuracyMetres(self, ) -> Union[float, JDouble]: ...
	def setLonPositiveEastDegrees(self, arg0: Union[float, JDouble], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def copy(self, arg0: javawrappers.au.com.objectix.jgridshift.GridShift, ) -> None: ...
	def setLonShiftPositiveWestSeconds(self, arg0: Union[float, JDouble], ) -> None: ...
	def setLatShiftSeconds(self, arg0: Union[float, JDouble], ) -> None: ...
	def setLatSeconds(self, arg0: Union[float, JDouble], ) -> None: ...
	def getLonAccuracyMetres(self, ) -> Union[float, JDouble]: ...
	def getLonAccuracyDegrees(self, ) -> Union[float, JDouble]: ...
	def getShiftedLonPositiveWestSeconds(self, ) -> Union[float, JDouble]: ...
	def getLatAccuracyDegrees(self, ) -> Union[float, JDouble]: ...
	def getLatShiftDegrees(self, ) -> Union[float, JDouble]: ...
	def setLatAccuracyAvailable(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getLonShiftPositiveEastDegrees(self, ) -> Union[float, JDouble]: ...
	def getLatDegrees(self, ) -> Union[float, JDouble]: ...
	def getLonPositiveEastDegrees(self, ) -> Union[float, JDouble]: ...
	def isLatAccuracyAvailable(self, ) -> Union[int, JBoolean]: ...
	def setLatDegrees(self, arg0: Union[float, JDouble], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setLonPositiveWestSeconds(self, arg0: Union[float, JDouble], ) -> None: ...
	def getLonPositiveWestSeconds(self, ) -> Union[float, JDouble]: ...
	def getLatAccuracySeconds(self, ) -> Union[float, JDouble]: ...
	def getLonAccuracySeconds(self, ) -> Union[float, JDouble]: ...
	def getSubGridName(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getShiftedLatSeconds(self, ) -> Union[float, JDouble]: ...
	def setLonAccuracyAvailable(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setLatAccuracySeconds(self, arg0: Union[float, JDouble], ) -> None: ...
	def isLonAccuracyAvailable(self, ) -> Union[int, JBoolean]: ...


class SubGrid:
	@overload
	def __init__(self, arg0: javawrappers.java.io.RandomAccessFile, arg1: Union[long, JLong], arg2: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.InputStream, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def interpolateGridShift(self, arg0: javawrappers.au.com.objectix.jgridshift.GridShift, ) -> javawrappers.au.com.objectix.jgridshift.GridShift: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSubGridCount(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def getDetails(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getMinLat(self, ) -> Union[float, JDouble]: ...
	def getParentSubGridName(self, ) -> javawrappers.java.lang.String: ...
	def getNodeCount(self, ) -> Union[int, JInt]: ...
	def getMaxLat(self, ) -> Union[float, JDouble]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSubGrid(self, arg0: Union[int, JInt], ) -> javawrappers.au.com.objectix.jgridshift.SubGrid: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def getMaxLon(self, ) -> Union[float, JDouble]: ...
	def getSubGridName(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setSubGridArray(self, arg0: JArray(javawrappers.au.com.objectix.jgridshift.SubGrid, 1), ) -> None: ...
	def getMinLon(self, ) -> Union[float, JDouble]: ...
	def getSubGridForCoord(self, arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.au.com.objectix.jgridshift.SubGrid: ...


class Util:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def getInt(arg0: JArray(JByte, 1), arg1: Union[int, JBoolean], ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def isNioAvailable() -> Union[int, JBoolean]: ...
	@staticmethod
	def getIntBE(arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getDouble(arg0: JArray(JByte, 1), arg1: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getFloat(arg0: JArray(JByte, 1), arg1: Union[int, JBoolean], ) -> Union[float, JFloat]: ...
	@staticmethod
	def getIntLE(arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class GridShiftFile:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getSubGridTree(self, ) -> JArray(javawrappers.au.com.objectix.jgridshift.SubGrid, 1): ...
	def isLoaded(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def unload(self, ) -> None: ...
	def gridShiftReverse(self, arg0: javawrappers.au.com.objectix.jgridshift.GridShift, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def loadGridShiftFile(self, arg0: javawrappers.java.io.RandomAccessFile, ) -> None: ...
	@overload
	def loadGridShiftFile(self, arg0: javawrappers.java.io.InputStream, arg1: Union[int, JBoolean], ) -> None: ...
	def getToEllipsoid(self, ) -> javawrappers.java.lang.String: ...
	def gridShiftForward(self, arg0: javawrappers.au.com.objectix.jgridshift.GridShift, ) -> Union[int, JBoolean]: ...
	def getFromEllipsoid(self, ) -> javawrappers.java.lang.String: ...


