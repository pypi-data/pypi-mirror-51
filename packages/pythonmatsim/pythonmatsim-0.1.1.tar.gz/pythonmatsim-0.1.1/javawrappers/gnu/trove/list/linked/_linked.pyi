################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.gnu.trove.list.linked
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.gnu.trove.function
import javawrappers.gnu.trove.list
import javawrappers.java.io
import javawrappers.java.util.stream
import javawrappers.gnu.trove.procedure
import javawrappers.gnu.trove
import javawrappers.java.util.function
import javawrappers.gnu.trove.iterator

from jpype.types import *
from typing import Union

from typing import overload

class TFloatLinkedList:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.list.TFloatList, ): ...
	@overload
	def __init__(self, arg0: Union[float, JFloat], ): ...
	class RemoveProcedure:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def isChanged(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def execute(self, arg0: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	class TFloatLink:
		def getPrevious(self, ) -> javawrappers.gnu.trove.list.linked.TFloatLinkedList.TFloatLink: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getValue(self, ) -> Union[float, JFloat]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def setValue(self, arg0: Union[float, JFloat], ) -> None: ...
		def setNext(self, arg0: javawrappers.gnu.trove.list.linked.TFloatLinkedList.TFloatLink, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getNext(self, ) -> javawrappers.gnu.trove.list.linked.TFloatLinkedList.TFloatLink: ...
		def notify(self, ) -> None: ...
		def setPrevious(self, arg0: javawrappers.gnu.trove.list.linked.TFloatLinkedList.TFloatLink, ) -> None: ...


	def getPrevious(self, ) -> javawrappers.gnu.trove.list.linked.TFloatLinkedList.TFloatLink: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def replace(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	@overload
	def removeAll(self, arg0: JArray(Union[float, JFloat], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TFloatCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TFloatIterator: ...
	def inverseGrep(self, arg0: javawrappers.gnu.trove.procedure.TFloatProcedure, ) -> javawrappers.gnu.trove.list.TFloatList: ...
	@overload
	def toArray(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def toArray(self, ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def indexOf(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> Union[int, JInt]: ...
	@overload
	def indexOf(self, arg0: Union[float, JFloat], ) -> Union[int, JInt]: ...
	def getLinkAt(self, arg0: Union[int, JInt], ) -> javawrappers.gnu.trove.list.linked.TFloatLinkedList.TFloatLink: ...
	@overload
	def add(self, arg0: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def add(self, arg0: JArray(Union[float, JFloat], 1), ) -> None: ...
	def getNoEntryValue(self, ) -> Union[float, JFloat]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def sort(self, ) -> None: ...
	@overload
	def sort(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def fill(self, arg0: Union[float, JFloat], ) -> None: ...
	@overload
	def fill(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JFloat], ) -> None: ...
	def execute(self, arg0: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	def contains(self, arg0: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def setNext(self, arg0: javawrappers.gnu.trove.list.linked.TFloatLinkedList.TFloatLink, ) -> None: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def removeAt(self, arg0: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def transformValues(self, arg0: javawrappers.gnu.trove.function.TFloatFunction, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def insert(self, arg0: Union[int, JInt], arg1: JArray(Union[float, JFloat], 1), arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def insert(self, arg0: Union[int, JInt], arg1: JArray(Union[float, JFloat], 1), ) -> None: ...
	@overload
	def insert(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> None: ...
	def sum(self, ) -> Union[float, JFloat]: ...
	@overload
	def binarySearch(self, arg0: Union[float, JFloat], ) -> Union[int, JInt]: ...
	@overload
	def binarySearch(self, arg0: Union[float, JFloat], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def min(self, ) -> Union[float, JFloat]: ...
	def isChanged(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def setPrevious(self, arg0: javawrappers.gnu.trove.list.linked.TFloatLinkedList.TFloatLink, ) -> None: ...
	def subList(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.gnu.trove.list.TFloatList: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: JArray(Union[float, JFloat], 1), ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: JArray(Union[float, JFloat], 1), arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def max(self, ) -> Union[float, JFloat]: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TFloatProcedure, ) -> Union[int, JBoolean]: ...
	def grep(self, arg0: javawrappers.gnu.trove.procedure.TFloatProcedure, ) -> javawrappers.gnu.trove.list.TFloatList: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TFloatCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(Union[float, JFloat], 1), ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getNext(self, ) -> javawrappers.gnu.trove.list.linked.TFloatLinkedList.TFloatLink: ...
	@overload
	def reverse(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def reverse(self, ) -> None: ...
	def getValue(self, ) -> Union[float, JFloat]: ...
	@overload
	def lastIndexOf(self, arg0: Union[float, JFloat], ) -> Union[int, JInt]: ...
	@overload
	def lastIndexOf(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> Union[int, JInt]: ...
	def forEachDescending(self, arg0: javawrappers.gnu.trove.procedure.TFloatProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TFloatCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(Union[float, JFloat], 1), ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: Union[float, JFloat], ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def shuffle(self, arg0: javawrappers.java.util.Random, ) -> None: ...
	@overload
	def retainAll(self, arg0: JArray(Union[float, JFloat], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TFloatCollection, ) -> Union[int, JBoolean]: ...


class TDoubleLinkedList:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.list.TDoubleList, ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], ): ...
	class RemoveProcedure:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def isChanged(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def execute(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	class TDoubleLink:
		def getPrevious(self, ) -> javawrappers.gnu.trove.list.linked.TDoubleLinkedList.TDoubleLink: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getValue(self, ) -> Union[float, JDouble]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def setValue(self, arg0: Union[float, JDouble], ) -> None: ...
		def setNext(self, arg0: javawrappers.gnu.trove.list.linked.TDoubleLinkedList.TDoubleLink, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getNext(self, ) -> javawrappers.gnu.trove.list.linked.TDoubleLinkedList.TDoubleLink: ...
		def notify(self, ) -> None: ...
		def setPrevious(self, arg0: javawrappers.gnu.trove.list.linked.TDoubleLinkedList.TDoubleLink, ) -> None: ...


	def getPrevious(self, ) -> javawrappers.gnu.trove.list.linked.TDoubleLinkedList.TDoubleLink: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def replace(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def removeAll(self, arg0: JArray(Union[float, JDouble], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TDoubleCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TDoubleIterator: ...
	def inverseGrep(self, arg0: javawrappers.gnu.trove.procedure.TDoubleProcedure, ) -> javawrappers.gnu.trove.list.TDoubleList: ...
	@overload
	def toArray(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def toArray(self, ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def indexOf(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> Union[int, JInt]: ...
	@overload
	def indexOf(self, arg0: Union[float, JDouble], ) -> Union[int, JInt]: ...
	def getLinkAt(self, arg0: Union[int, JInt], ) -> javawrappers.gnu.trove.list.linked.TDoubleLinkedList.TDoubleLink: ...
	@overload
	def add(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def add(self, arg0: JArray(Union[float, JDouble], 1), ) -> None: ...
	def getNoEntryValue(self, ) -> Union[float, JDouble]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def sort(self, ) -> None: ...
	@overload
	def sort(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def fill(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def fill(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[float, JDouble], ) -> None: ...
	def execute(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def contains(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def setNext(self, arg0: javawrappers.gnu.trove.list.linked.TDoubleLinkedList.TDoubleLink, ) -> None: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def removeAt(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def transformValues(self, arg0: javawrappers.gnu.trove.function.TDoubleFunction, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def insert(self, arg0: Union[int, JInt], arg1: JArray(Union[float, JDouble], 1), arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def insert(self, arg0: Union[int, JInt], arg1: JArray(Union[float, JDouble], 1), ) -> None: ...
	@overload
	def insert(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> None: ...
	def sum(self, ) -> Union[float, JDouble]: ...
	@overload
	def binarySearch(self, arg0: Union[float, JDouble], ) -> Union[int, JInt]: ...
	@overload
	def binarySearch(self, arg0: Union[float, JDouble], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def min(self, ) -> Union[float, JDouble]: ...
	def isChanged(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setPrevious(self, arg0: javawrappers.gnu.trove.list.linked.TDoubleLinkedList.TDoubleLink, ) -> None: ...
	def subList(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.gnu.trove.list.TDoubleList: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: JArray(Union[float, JDouble], 1), ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: JArray(Union[float, JDouble], 1), arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def max(self, ) -> Union[float, JDouble]: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TDoubleProcedure, ) -> Union[int, JBoolean]: ...
	def grep(self, arg0: javawrappers.gnu.trove.procedure.TDoubleProcedure, ) -> javawrappers.gnu.trove.list.TDoubleList: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TDoubleCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(Union[float, JDouble], 1), ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getNext(self, ) -> javawrappers.gnu.trove.list.linked.TDoubleLinkedList.TDoubleLink: ...
	@overload
	def reverse(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def reverse(self, ) -> None: ...
	def getValue(self, ) -> Union[float, JDouble]: ...
	@overload
	def lastIndexOf(self, arg0: Union[float, JDouble], ) -> Union[int, JInt]: ...
	@overload
	def lastIndexOf(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> Union[int, JInt]: ...
	def forEachDescending(self, arg0: javawrappers.gnu.trove.procedure.TDoubleProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TDoubleCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(Union[float, JDouble], 1), ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def shuffle(self, arg0: javawrappers.java.util.Random, ) -> None: ...
	@overload
	def retainAll(self, arg0: JArray(Union[float, JDouble], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TDoubleCollection, ) -> Union[int, JBoolean]: ...


class TIntLinkedList:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.list.TIntList, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	class RemoveProcedure:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def isChanged(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def execute(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	class TIntLink:
		def getPrevious(self, ) -> javawrappers.gnu.trove.list.linked.TIntLinkedList.TIntLink: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getValue(self, ) -> Union[int, JInt]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def setValue(self, arg0: Union[int, JInt], ) -> None: ...
		def setNext(self, arg0: javawrappers.gnu.trove.list.linked.TIntLinkedList.TIntLink, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getNext(self, ) -> javawrappers.gnu.trove.list.linked.TIntLinkedList.TIntLink: ...
		def notify(self, ) -> None: ...
		def setPrevious(self, arg0: javawrappers.gnu.trove.list.linked.TIntLinkedList.TIntLink, ) -> None: ...


	def getPrevious(self, ) -> javawrappers.gnu.trove.list.linked.TIntLinkedList.TIntLink: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def replace(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def removeAll(self, arg0: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TIntCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TIntIterator: ...
	def inverseGrep(self, arg0: javawrappers.gnu.trove.procedure.TIntProcedure, ) -> javawrappers.gnu.trove.list.TIntList: ...
	@overload
	def toArray(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def toArray(self, ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[int, JInt], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[int, JInt], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def indexOf(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def indexOf(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getLinkAt(self, arg0: Union[int, JInt], ) -> javawrappers.gnu.trove.list.linked.TIntLinkedList.TIntLink: ...
	@overload
	def add(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: JArray(Union[int, JInt], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def add(self, arg0: JArray(Union[int, JInt], 1), ) -> None: ...
	def getNoEntryValue(self, ) -> Union[int, JInt]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def sort(self, ) -> None: ...
	@overload
	def sort(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def fill(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def fill(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def execute(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def contains(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def setNext(self, arg0: javawrappers.gnu.trove.list.linked.TIntLinkedList.TIntLink, ) -> None: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def removeAt(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def transformValues(self, arg0: javawrappers.gnu.trove.function.TIntFunction, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def insert(self, arg0: Union[int, JInt], arg1: JArray(Union[int, JInt], 1), arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def insert(self, arg0: Union[int, JInt], arg1: JArray(Union[int, JInt], 1), ) -> None: ...
	@overload
	def insert(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def sum(self, ) -> Union[int, JInt]: ...
	@overload
	def binarySearch(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def binarySearch(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def min(self, ) -> Union[int, JInt]: ...
	def isChanged(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def setPrevious(self, arg0: javawrappers.gnu.trove.list.linked.TIntLinkedList.TIntLink, ) -> None: ...
	def subList(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.gnu.trove.list.TIntList: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: JArray(Union[int, JInt], 1), ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: JArray(Union[int, JInt], 1), arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def max(self, ) -> Union[int, JInt]: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TIntProcedure, ) -> Union[int, JBoolean]: ...
	def grep(self, arg0: javawrappers.gnu.trove.procedure.TIntProcedure, ) -> javawrappers.gnu.trove.list.TIntList: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TIntCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getNext(self, ) -> javawrappers.gnu.trove.list.linked.TIntLinkedList.TIntLink: ...
	@overload
	def reverse(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def reverse(self, ) -> None: ...
	def getValue(self, ) -> Union[int, JInt]: ...
	@overload
	def lastIndexOf(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def lastIndexOf(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def forEachDescending(self, arg0: javawrappers.gnu.trove.procedure.TIntProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TIntCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def shuffle(self, arg0: javawrappers.java.util.Random, ) -> None: ...
	@overload
	def retainAll(self, arg0: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TIntCollection, ) -> Union[int, JBoolean]: ...


class TByteLinkedList:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.list.TByteList, ): ...
	@overload
	def __init__(self, arg0: JByte, ): ...
	class RemoveProcedure:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def isChanged(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def execute(self, arg0: JByte, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	class TByteLink:
		def getPrevious(self, ) -> javawrappers.gnu.trove.list.linked.TByteLinkedList.TByteLink: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getValue(self, ) -> JByte: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def setValue(self, arg0: JByte, ) -> None: ...
		def setNext(self, arg0: javawrappers.gnu.trove.list.linked.TByteLinkedList.TByteLink, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getNext(self, ) -> javawrappers.gnu.trove.list.linked.TByteLinkedList.TByteLink: ...
		def notify(self, ) -> None: ...
		def setPrevious(self, arg0: javawrappers.gnu.trove.list.linked.TByteLinkedList.TByteLink, ) -> None: ...


	def getPrevious(self, ) -> javawrappers.gnu.trove.list.linked.TByteLinkedList.TByteLink: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def replace(self, arg0: Union[int, JInt], arg1: JByte, ) -> JByte: ...
	@overload
	def removeAll(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TByteCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TByteIterator: ...
	def inverseGrep(self, arg0: javawrappers.gnu.trove.procedure.TByteProcedure, ) -> javawrappers.gnu.trove.list.TByteList: ...
	@overload
	def toArray(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	def toArray(self, ) -> JArray(JByte, 1): ...
	@overload
	def toArray(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	def toArray(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	def toArray(self, arg0: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	@overload
	def indexOf(self, arg0: Union[int, JInt], arg1: JByte, ) -> Union[int, JInt]: ...
	@overload
	def indexOf(self, arg0: JByte, ) -> Union[int, JInt]: ...
	def getLinkAt(self, arg0: Union[int, JInt], ) -> javawrappers.gnu.trove.list.linked.TByteLinkedList.TByteLink: ...
	@overload
	def add(self, arg0: JByte, ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def add(self, arg0: JArray(JByte, 1), ) -> None: ...
	def getNoEntryValue(self, ) -> JByte: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def sort(self, ) -> None: ...
	@overload
	def sort(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def fill(self, arg0: JByte, ) -> None: ...
	@overload
	def fill(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JByte, ) -> None: ...
	def execute(self, arg0: JByte, ) -> Union[int, JBoolean]: ...
	def contains(self, arg0: JByte, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def setNext(self, arg0: javawrappers.gnu.trove.list.linked.TByteLinkedList.TByteLink, ) -> None: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def removeAt(self, arg0: Union[int, JInt], ) -> JByte: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def transformValues(self, arg0: javawrappers.gnu.trove.function.TByteFunction, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def insert(self, arg0: Union[int, JInt], arg1: JArray(JByte, 1), arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def insert(self, arg0: Union[int, JInt], arg1: JArray(JByte, 1), ) -> None: ...
	@overload
	def insert(self, arg0: Union[int, JInt], arg1: JByte, ) -> None: ...
	def sum(self, ) -> JByte: ...
	@overload
	def binarySearch(self, arg0: JByte, ) -> Union[int, JInt]: ...
	@overload
	def binarySearch(self, arg0: JByte, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: JByte, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def min(self, ) -> JByte: ...
	def isChanged(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: Union[int, JInt], ) -> JByte: ...
	def setPrevious(self, arg0: javawrappers.gnu.trove.list.linked.TByteLinkedList.TByteLink, ) -> None: ...
	def subList(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.gnu.trove.list.TByteList: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: JArray(JByte, 1), ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: JByte, ) -> JByte: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: JArray(JByte, 1), arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def max(self, ) -> JByte: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TByteProcedure, ) -> Union[int, JBoolean]: ...
	def grep(self, arg0: javawrappers.gnu.trove.procedure.TByteProcedure, ) -> javawrappers.gnu.trove.list.TByteList: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TByteCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getNext(self, ) -> javawrappers.gnu.trove.list.linked.TByteLinkedList.TByteLink: ...
	@overload
	def reverse(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def reverse(self, ) -> None: ...
	def getValue(self, ) -> JByte: ...
	@overload
	def lastIndexOf(self, arg0: JByte, ) -> Union[int, JInt]: ...
	@overload
	def lastIndexOf(self, arg0: Union[int, JInt], arg1: JByte, ) -> Union[int, JInt]: ...
	def forEachDescending(self, arg0: javawrappers.gnu.trove.procedure.TByteProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TByteCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: JByte, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def shuffle(self, arg0: javawrappers.java.util.Random, ) -> None: ...
	@overload
	def retainAll(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TByteCollection, ) -> Union[int, JBoolean]: ...


class TCharLinkedList:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.list.TCharList, ): ...
	@overload
	def __init__(self, arg0: Union[string, JString], ): ...
	class RemoveProcedure:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def isChanged(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def execute(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	class TCharLink:
		def getPrevious(self, ) -> javawrappers.gnu.trove.list.linked.TCharLinkedList.TCharLink: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getValue(self, ) -> Union[string, JString]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def setValue(self, arg0: Union[string, JString], ) -> None: ...
		def setNext(self, arg0: javawrappers.gnu.trove.list.linked.TCharLinkedList.TCharLink, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getNext(self, ) -> javawrappers.gnu.trove.list.linked.TCharLinkedList.TCharLink: ...
		def notify(self, ) -> None: ...
		def setPrevious(self, arg0: javawrappers.gnu.trove.list.linked.TCharLinkedList.TCharLink, ) -> None: ...


	def getPrevious(self, ) -> javawrappers.gnu.trove.list.linked.TCharLinkedList.TCharLink: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def replace(self, arg0: Union[int, JInt], arg1: Union[string, JString], ) -> Union[string, JString]: ...
	@overload
	def removeAll(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TCharCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TCharIterator: ...
	def inverseGrep(self, arg0: javawrappers.gnu.trove.procedure.TCharProcedure, ) -> javawrappers.gnu.trove.list.TCharList: ...
	@overload
	def toArray(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> JArray(Union[string, JString], 1): ...
	@overload
	def toArray(self, ) -> JArray(Union[string, JString], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(Union[string, JString], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> JArray(Union[string, JString], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[string, JString], 1), ) -> JArray(Union[string, JString], 1): ...
	@overload
	def indexOf(self, arg0: Union[int, JInt], arg1: Union[string, JString], ) -> Union[int, JInt]: ...
	@overload
	def indexOf(self, arg0: Union[string, JString], ) -> Union[int, JInt]: ...
	def getLinkAt(self, arg0: Union[int, JInt], ) -> javawrappers.gnu.trove.list.linked.TCharLinkedList.TCharLink: ...
	@overload
	def add(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def add(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	def getNoEntryValue(self, ) -> Union[string, JString]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def sort(self, ) -> None: ...
	@overload
	def sort(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def fill(self, arg0: Union[string, JString], ) -> None: ...
	@overload
	def fill(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[string, JString], ) -> None: ...
	def execute(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	def contains(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def setNext(self, arg0: javawrappers.gnu.trove.list.linked.TCharLinkedList.TCharLink, ) -> None: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def removeAt(self, arg0: Union[int, JInt], ) -> Union[string, JString]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def transformValues(self, arg0: javawrappers.gnu.trove.function.TCharFunction, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def insert(self, arg0: Union[int, JInt], arg1: JArray(Union[string, JString], 1), arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def insert(self, arg0: Union[int, JInt], arg1: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def insert(self, arg0: Union[int, JInt], arg1: Union[string, JString], ) -> None: ...
	def sum(self, ) -> Union[string, JString]: ...
	@overload
	def binarySearch(self, arg0: Union[string, JString], ) -> Union[int, JInt]: ...
	@overload
	def binarySearch(self, arg0: Union[string, JString], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def min(self, ) -> Union[string, JString]: ...
	def isChanged(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: Union[int, JInt], ) -> Union[string, JString]: ...
	def setPrevious(self, arg0: javawrappers.gnu.trove.list.linked.TCharLinkedList.TCharLink, ) -> None: ...
	def subList(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.gnu.trove.list.TCharList: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[string, JString], ) -> Union[string, JString]: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: JArray(Union[string, JString], 1), arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def max(self, ) -> Union[string, JString]: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TCharProcedure, ) -> Union[int, JBoolean]: ...
	def grep(self, arg0: javawrappers.gnu.trove.procedure.TCharProcedure, ) -> javawrappers.gnu.trove.list.TCharList: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TCharCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getNext(self, ) -> javawrappers.gnu.trove.list.linked.TCharLinkedList.TCharLink: ...
	@overload
	def reverse(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def reverse(self, ) -> None: ...
	def getValue(self, ) -> Union[string, JString]: ...
	@overload
	def lastIndexOf(self, arg0: Union[string, JString], ) -> Union[int, JInt]: ...
	@overload
	def lastIndexOf(self, arg0: Union[int, JInt], arg1: Union[string, JString], ) -> Union[int, JInt]: ...
	def forEachDescending(self, arg0: javawrappers.gnu.trove.procedure.TCharProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TCharCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: Union[string, JString], ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def shuffle(self, arg0: javawrappers.java.util.Random, ) -> None: ...
	@overload
	def retainAll(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TCharCollection, ) -> Union[int, JBoolean]: ...


class TLinkedList:
	def __init__(self, ): ...
	class IteratorImpl:
		@overload
		def next(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def next(self, ) -> javawrappers.gnu.trove.list.TLinkable: ...
		@overload
		def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def add(self, arg0: javawrappers.gnu.trove.list.TLinkable, ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def set(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def set(self, arg0: javawrappers.gnu.trove.list.TLinkable, ) -> None: ...
		@overload
		def previous(self, ) -> javawrappers.java.lang.Object: ...
		@overload
		def previous(self, ) -> javawrappers.gnu.trove.list.TLinkable: ...
		def notifyAll(self, ) -> None: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def nextIndex(self, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def hasPrevious(self, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def previousIndex(self, ) -> Union[int, JInt]: ...


	def getPrevious(self, arg0: javawrappers.gnu.trove.list.TLinkable, ) -> javawrappers.gnu.trove.list.TLinkable: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getLast(self, ) -> javawrappers.gnu.trove.list.TLinkable: ...
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def addAfter(self, arg0: javawrappers.gnu.trove.list.TLinkable, arg1: javawrappers.gnu.trove.list.TLinkable, ) -> None: ...
	def getFirst(self, ) -> javawrappers.gnu.trove.list.TLinkable: ...
	def removeFirst(self, ) -> javawrappers.gnu.trove.list.TLinkable: ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def toUnlinkedArray(self, arg0: JArray(javawrappers.gnu.trove.list.TLinkable, 1), ) -> JArray(javawrappers.gnu.trove.list.TLinkable, 1): ...
	@overload
	def toUnlinkedArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def indexOf(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def add(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: javawrappers.gnu.trove.list.TLinkable, ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: Union[int, JInt], arg1: javawrappers.gnu.trove.list.TLinkable, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.gnu.trove.list.TLinkable, ) -> None: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def sort(self, arg0: javawrappers.java.util.Comparator, ) -> None: ...
	def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
	def addBefore(self, arg0: javawrappers.gnu.trove.list.TLinkable, arg1: javawrappers.gnu.trove.list.TLinkable, ) -> None: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	@overload
	def listIterator(self, ) -> javawrappers.java.util.ListIterator: ...
	@overload
	def listIterator(self, arg0: Union[int, JInt], ) -> javawrappers.java.util.ListIterator: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def next(self, ) -> javawrappers.gnu.trove.list.TLinkable: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def nextIndex(self, ) -> Union[int, JInt]: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.UnaryOperator, ) -> None: ...
	def removeLast(self, ) -> javawrappers.gnu.trove.list.TLinkable: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, ) -> None: ...
	def addLast(self, arg0: javawrappers.gnu.trove.list.TLinkable, ) -> None: ...
	def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def get(self, arg0: Union[int, JInt], ) -> javawrappers.gnu.trove.list.TLinkable: ...
	@overload
	def get(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def hasPrevious(self, ) -> Union[int, JBoolean]: ...
	def subList(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.util.List: ...
	@overload
	def set(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.gnu.trove.list.TLinkable, ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def previous(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def previous(self, ) -> javawrappers.gnu.trove.list.TLinkable: ...
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getNext(self, arg0: javawrappers.gnu.trove.list.TLinkable, ) -> javawrappers.gnu.trove.list.TLinkable: ...
	def lastIndexOf(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def forEachValue(self, arg0: javawrappers.gnu.trove.procedure.TObjectProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def previousIndex(self, ) -> Union[int, JInt]: ...
	def addFirst(self, arg0: javawrappers.gnu.trove.list.TLinkable, ) -> None: ...
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


class TLongLinkedList:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.list.TLongList, ): ...
	@overload
	def __init__(self, arg0: Union[long, JLong], ): ...
	class RemoveProcedure:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def isChanged(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def execute(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	class TLongLink:
		def getPrevious(self, ) -> javawrappers.gnu.trove.list.linked.TLongLinkedList.TLongLink: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getValue(self, ) -> Union[long, JLong]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def setValue(self, arg0: Union[long, JLong], ) -> None: ...
		def setNext(self, arg0: javawrappers.gnu.trove.list.linked.TLongLinkedList.TLongLink, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getNext(self, ) -> javawrappers.gnu.trove.list.linked.TLongLinkedList.TLongLink: ...
		def notify(self, ) -> None: ...
		def setPrevious(self, arg0: javawrappers.gnu.trove.list.linked.TLongLinkedList.TLongLink, ) -> None: ...


	def getPrevious(self, ) -> javawrappers.gnu.trove.list.linked.TLongLinkedList.TLongLink: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def replace(self, arg0: Union[int, JInt], arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def removeAll(self, arg0: JArray(Union[long, JLong], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TLongCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TLongIterator: ...
	def inverseGrep(self, arg0: javawrappers.gnu.trove.procedure.TLongProcedure, ) -> javawrappers.gnu.trove.list.TLongList: ...
	@overload
	def toArray(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> JArray(Union[long, JLong], 1): ...
	@overload
	def toArray(self, ) -> JArray(Union[long, JLong], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[long, JLong], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(Union[long, JLong], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[long, JLong], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> JArray(Union[long, JLong], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[long, JLong], 1), ) -> JArray(Union[long, JLong], 1): ...
	@overload
	def indexOf(self, arg0: Union[int, JInt], arg1: Union[long, JLong], ) -> Union[int, JInt]: ...
	@overload
	def indexOf(self, arg0: Union[long, JLong], ) -> Union[int, JInt]: ...
	def getLinkAt(self, arg0: Union[int, JInt], ) -> javawrappers.gnu.trove.list.linked.TLongLinkedList.TLongLink: ...
	@overload
	def add(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: JArray(Union[long, JLong], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def add(self, arg0: JArray(Union[long, JLong], 1), ) -> None: ...
	def getNoEntryValue(self, ) -> Union[long, JLong]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def sort(self, ) -> None: ...
	@overload
	def sort(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def fill(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def fill(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[long, JLong], ) -> None: ...
	def execute(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def contains(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def setNext(self, arg0: javawrappers.gnu.trove.list.linked.TLongLinkedList.TLongLink, ) -> None: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def removeAt(self, arg0: Union[int, JInt], ) -> Union[long, JLong]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def transformValues(self, arg0: javawrappers.gnu.trove.function.TLongFunction, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def insert(self, arg0: Union[int, JInt], arg1: JArray(Union[long, JLong], 1), arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def insert(self, arg0: Union[int, JInt], arg1: JArray(Union[long, JLong], 1), ) -> None: ...
	@overload
	def insert(self, arg0: Union[int, JInt], arg1: Union[long, JLong], ) -> None: ...
	def sum(self, ) -> Union[long, JLong]: ...
	@overload
	def binarySearch(self, arg0: Union[long, JLong], ) -> Union[int, JInt]: ...
	@overload
	def binarySearch(self, arg0: Union[long, JLong], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def min(self, ) -> Union[long, JLong]: ...
	def isChanged(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: Union[int, JInt], ) -> Union[long, JLong]: ...
	def setPrevious(self, arg0: javawrappers.gnu.trove.list.linked.TLongLinkedList.TLongLink, ) -> None: ...
	def subList(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.gnu.trove.list.TLongList: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: JArray(Union[long, JLong], 1), ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: JArray(Union[long, JLong], 1), arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def max(self, ) -> Union[long, JLong]: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TLongProcedure, ) -> Union[int, JBoolean]: ...
	def grep(self, arg0: javawrappers.gnu.trove.procedure.TLongProcedure, ) -> javawrappers.gnu.trove.list.TLongList: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TLongCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(Union[long, JLong], 1), ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getNext(self, ) -> javawrappers.gnu.trove.list.linked.TLongLinkedList.TLongLink: ...
	@overload
	def reverse(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def reverse(self, ) -> None: ...
	def getValue(self, ) -> Union[long, JLong]: ...
	@overload
	def lastIndexOf(self, arg0: Union[long, JLong], ) -> Union[int, JInt]: ...
	@overload
	def lastIndexOf(self, arg0: Union[int, JInt], arg1: Union[long, JLong], ) -> Union[int, JInt]: ...
	def forEachDescending(self, arg0: javawrappers.gnu.trove.procedure.TLongProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TLongCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(Union[long, JLong], 1), ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def shuffle(self, arg0: javawrappers.java.util.Random, ) -> None: ...
	@overload
	def retainAll(self, arg0: JArray(Union[long, JLong], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TLongCollection, ) -> Union[int, JBoolean]: ...


class TShortLinkedList:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.list.TShortList, ): ...
	@overload
	def __init__(self, arg0: Union[int, JShort], ): ...
	class RemoveProcedure:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def isChanged(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def execute(self, arg0: Union[int, JShort], ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	class TShortLink:
		def getPrevious(self, ) -> javawrappers.gnu.trove.list.linked.TShortLinkedList.TShortLink: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getValue(self, ) -> Union[int, JShort]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def setValue(self, arg0: Union[int, JShort], ) -> None: ...
		def setNext(self, arg0: javawrappers.gnu.trove.list.linked.TShortLinkedList.TShortLink, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getNext(self, ) -> javawrappers.gnu.trove.list.linked.TShortLinkedList.TShortLink: ...
		def notify(self, ) -> None: ...
		def setPrevious(self, arg0: javawrappers.gnu.trove.list.linked.TShortLinkedList.TShortLink, ) -> None: ...


	def getPrevious(self, ) -> javawrappers.gnu.trove.list.linked.TShortLinkedList.TShortLink: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def replace(self, arg0: Union[int, JInt], arg1: Union[int, JShort], ) -> Union[int, JShort]: ...
	@overload
	def removeAll(self, arg0: JArray(Union[int, JShort], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TShortCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TShortIterator: ...
	def inverseGrep(self, arg0: javawrappers.gnu.trove.procedure.TShortProcedure, ) -> javawrappers.gnu.trove.list.TShortList: ...
	@overload
	def toArray(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> JArray(Union[int, JShort], 1): ...
	@overload
	def toArray(self, ) -> JArray(Union[int, JShort], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[int, JShort], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(Union[int, JShort], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[int, JShort], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> JArray(Union[int, JShort], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[int, JShort], 1), ) -> JArray(Union[int, JShort], 1): ...
	@overload
	def indexOf(self, arg0: Union[int, JInt], arg1: Union[int, JShort], ) -> Union[int, JInt]: ...
	@overload
	def indexOf(self, arg0: Union[int, JShort], ) -> Union[int, JInt]: ...
	def getLinkAt(self, arg0: Union[int, JInt], ) -> javawrappers.gnu.trove.list.linked.TShortLinkedList.TShortLink: ...
	@overload
	def add(self, arg0: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: JArray(Union[int, JShort], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def add(self, arg0: JArray(Union[int, JShort], 1), ) -> None: ...
	def getNoEntryValue(self, ) -> Union[int, JShort]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def sort(self, ) -> None: ...
	@overload
	def sort(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def fill(self, arg0: Union[int, JShort], ) -> None: ...
	@overload
	def fill(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JShort], ) -> None: ...
	def execute(self, arg0: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	def contains(self, arg0: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def setNext(self, arg0: javawrappers.gnu.trove.list.linked.TShortLinkedList.TShortLink, ) -> None: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def removeAt(self, arg0: Union[int, JInt], ) -> Union[int, JShort]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def transformValues(self, arg0: javawrappers.gnu.trove.function.TShortFunction, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def insert(self, arg0: Union[int, JInt], arg1: JArray(Union[int, JShort], 1), arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	@overload
	def insert(self, arg0: Union[int, JInt], arg1: JArray(Union[int, JShort], 1), ) -> None: ...
	@overload
	def insert(self, arg0: Union[int, JInt], arg1: Union[int, JShort], ) -> None: ...
	def sum(self, ) -> Union[int, JShort]: ...
	@overload
	def binarySearch(self, arg0: Union[int, JShort], ) -> Union[int, JInt]: ...
	@overload
	def binarySearch(self, arg0: Union[int, JShort], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def min(self, ) -> Union[int, JShort]: ...
	def isChanged(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: Union[int, JInt], ) -> Union[int, JShort]: ...
	def setPrevious(self, arg0: javawrappers.gnu.trove.list.linked.TShortLinkedList.TShortLink, ) -> None: ...
	def subList(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.gnu.trove.list.TShortList: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: JArray(Union[int, JShort], 1), ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JShort], ) -> Union[int, JShort]: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: JArray(Union[int, JShort], 1), arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def max(self, ) -> Union[int, JShort]: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TShortProcedure, ) -> Union[int, JBoolean]: ...
	def grep(self, arg0: javawrappers.gnu.trove.procedure.TShortProcedure, ) -> javawrappers.gnu.trove.list.TShortList: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TShortCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(Union[int, JShort], 1), ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getNext(self, ) -> javawrappers.gnu.trove.list.linked.TShortLinkedList.TShortLink: ...
	@overload
	def reverse(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def reverse(self, ) -> None: ...
	def getValue(self, ) -> Union[int, JShort]: ...
	@overload
	def lastIndexOf(self, arg0: Union[int, JShort], ) -> Union[int, JInt]: ...
	@overload
	def lastIndexOf(self, arg0: Union[int, JInt], arg1: Union[int, JShort], ) -> Union[int, JInt]: ...
	def forEachDescending(self, arg0: javawrappers.gnu.trove.procedure.TShortProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TShortCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(Union[int, JShort], 1), ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: Union[int, JShort], ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def shuffle(self, arg0: javawrappers.java.util.Random, ) -> None: ...
	@overload
	def retainAll(self, arg0: JArray(Union[int, JShort], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TShortCollection, ) -> Union[int, JBoolean]: ...


