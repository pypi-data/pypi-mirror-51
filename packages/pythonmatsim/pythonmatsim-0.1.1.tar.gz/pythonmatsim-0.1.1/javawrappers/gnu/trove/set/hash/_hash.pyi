################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.io
import javawrappers.java.util.stream
import javawrappers.gnu.trove.iterator.hash
import javawrappers.gnu.trove.procedure
import javawrappers.gnu.trove
import javawrappers.java.util.function
import javawrappers.gnu.trove.iterator

from jpype.types import *
from typing import Union

from typing import overload

class TLongHashSet:
	@overload
	def __init__(self, arg0: JArray(Union[long, JLong], 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.TLongCollection, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[long, JLong], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Collection, ): ...
	class TLongHashIterator:
		def __init__(self, arg0: javawrappers.gnu.trove.set.hash.TLongHashSet, arg1: javawrappers.gnu.trove.impl.hash.TLongHash, ): ...
		def next(self, ) -> Union[long, JLong]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...


	def next(self, ) -> Union[long, JLong]: ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, ) -> None: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TLongCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: JArray(Union[long, JLong], 1), ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TLongIterator: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def toArray(self, ) -> JArray(Union[long, JLong], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[long, JLong], 1), ) -> JArray(Union[long, JLong], 1): ...
	def add(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def getNoEntryValue(self, ) -> Union[long, JLong]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TLongProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TLongCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(Union[long, JLong], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def contains(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TLongCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(Union[long, JLong], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: JArray(Union[long, JLong], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TLongCollection, ) -> Union[int, JBoolean]: ...


class TShortHashSet:
	@overload
	def __init__(self, arg0: JArray(Union[int, JShort], 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.TShortCollection, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[int, JShort], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Collection, ): ...
	class TShortHashIterator:
		def __init__(self, arg0: javawrappers.gnu.trove.set.hash.TShortHashSet, arg1: javawrappers.gnu.trove.impl.hash.TShortHash, ): ...
		def next(self, ) -> Union[int, JShort]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...


	def next(self, ) -> Union[int, JShort]: ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, ) -> None: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TShortCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: JArray(Union[int, JShort], 1), ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TShortIterator: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def toArray(self, ) -> JArray(Union[int, JShort], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[int, JShort], 1), ) -> JArray(Union[int, JShort], 1): ...
	def add(self, arg0: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	def getNoEntryValue(self, ) -> Union[int, JShort]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TShortProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TShortCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(Union[int, JShort], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def contains(self, arg0: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TShortCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(Union[int, JShort], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: JArray(Union[int, JShort], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TShortCollection, ) -> Union[int, JBoolean]: ...


class TByteHashSet:
	@overload
	def __init__(self, arg0: JArray(JByte, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.TByteCollection, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: JByte, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Collection, ): ...
	class TByteHashIterator:
		def __init__(self, arg0: javawrappers.gnu.trove.set.hash.TByteHashSet, arg1: javawrappers.gnu.trove.impl.hash.TByteHash, ): ...
		def next(self, ) -> JByte: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...


	def next(self, ) -> JByte: ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: JByte, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, ) -> None: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TByteCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TByteIterator: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def toArray(self, ) -> JArray(JByte, 1): ...
	@overload
	def toArray(self, arg0: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	def add(self, arg0: JByte, ) -> Union[int, JBoolean]: ...
	def getNoEntryValue(self, ) -> JByte: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TByteProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TByteCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def contains(self, arg0: JByte, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TByteCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TByteCollection, ) -> Union[int, JBoolean]: ...


class TIntHashSet:
	@overload
	def __init__(self, arg0: JArray(Union[int, JInt], 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.TIntCollection, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Collection, ): ...
	class TIntHashIterator:
		def __init__(self, arg0: javawrappers.gnu.trove.set.hash.TIntHashSet, arg1: javawrappers.gnu.trove.impl.hash.TIntHash, ): ...
		def next(self, ) -> Union[int, JInt]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...


	def next(self, ) -> Union[int, JInt]: ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, ) -> None: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TIntCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TIntIterator: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def toArray(self, ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	def add(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getNoEntryValue(self, ) -> Union[int, JInt]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TIntProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TIntCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def contains(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TIntCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TIntCollection, ) -> Union[int, JBoolean]: ...


class THashSet:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Collection, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	class HashProcedure:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getHashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def execute(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.hash.TObjectHashIterator: ...
	def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def setUp(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	@overload
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TObjectProcedure, ) -> Union[int, JBoolean]: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def execute(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def getHashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


class TFloatHashSet:
	@overload
	def __init__(self, arg0: JArray(Union[float, JFloat], 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.TFloatCollection, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Collection, ): ...
	class TFloatHashIterator:
		def __init__(self, arg0: javawrappers.gnu.trove.set.hash.TFloatHashSet, arg1: javawrappers.gnu.trove.impl.hash.TFloatHash, ): ...
		def next(self, ) -> Union[float, JFloat]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...


	def next(self, ) -> Union[float, JFloat]: ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, ) -> None: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TFloatCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: JArray(Union[float, JFloat], 1), ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TFloatIterator: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def toArray(self, ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	def add(self, arg0: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	def getNoEntryValue(self, ) -> Union[float, JFloat]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TFloatProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TFloatCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(Union[float, JFloat], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def contains(self, arg0: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TFloatCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(Union[float, JFloat], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: JArray(Union[float, JFloat], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TFloatCollection, ) -> Union[int, JBoolean]: ...


class TCharHashSet:
	@overload
	def __init__(self, arg0: JArray(Union[string, JString], 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.TCharCollection, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[string, JString], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Collection, ): ...
	class TCharHashIterator:
		def __init__(self, arg0: javawrappers.gnu.trove.set.hash.TCharHashSet, arg1: javawrappers.gnu.trove.impl.hash.TCharHash, ): ...
		def next(self, ) -> Union[string, JString]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...


	def next(self, ) -> Union[string, JString]: ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, ) -> None: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TCharCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TCharIterator: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def toArray(self, ) -> JArray(Union[string, JString], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[string, JString], 1), ) -> JArray(Union[string, JString], 1): ...
	def add(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	def getNoEntryValue(self, ) -> Union[string, JString]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TCharProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TCharCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def contains(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TCharCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TCharCollection, ) -> Union[int, JBoolean]: ...


class TCustomHashSet:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, arg1: javawrappers.java.util.Collection, ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, arg1: Union[int, JInt], arg2: Union[float, JFloat], ): ...
	class HashProcedure:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getHashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def execute(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.hash.TObjectHashIterator: ...
	def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def setUp(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	@overload
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TObjectProcedure, ) -> Union[int, JBoolean]: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def execute(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def getHashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


class TLinkedHashSet:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Collection, ): ...
	class ForEachProcedure:
		def __init__(self, arg0: javawrappers.gnu.trove.set.hash.TLinkedHashSet, arg1: JArray(javawrappers.java.lang.Object, 1), arg2: javawrappers.gnu.trove.procedure.TObjectProcedure, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def execute(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	class WriteProcedure:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def execute(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def getIoException(self, ) -> javawrappers.java.io.IOException: ...


	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.hash.TObjectHashIterator: ...
	def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def setUp(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	@overload
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TObjectProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	@overload
	def execute(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def execute(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getIoException(self, ) -> javawrappers.java.io.IOException: ...
	def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


class TDoubleHashSet:
	@overload
	def __init__(self, arg0: JArray(Union[float, JDouble], 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.TDoubleCollection, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Collection, ): ...
	class TDoubleHashIterator:
		def __init__(self, arg0: javawrappers.gnu.trove.set.hash.TDoubleHashSet, arg1: javawrappers.gnu.trove.impl.hash.TDoubleHash, ): ...
		def next(self, ) -> Union[float, JDouble]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...


	def next(self, ) -> Union[float, JDouble]: ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, ) -> None: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TDoubleCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: JArray(Union[float, JDouble], 1), ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TDoubleIterator: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def toArray(self, ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	def add(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def getNoEntryValue(self, ) -> Union[float, JDouble]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TDoubleProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TDoubleCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(Union[float, JDouble], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def contains(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TDoubleCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(Union[float, JDouble], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: JArray(Union[float, JDouble], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TDoubleCollection, ) -> Union[int, JBoolean]: ...


