################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util
import javawrappers.java.lang
import javawrappers.gnu.trove.procedure
import javawrappers.gnu.trove
import javawrappers.gnu.trove.iterator

from jpype.types import *
from typing import Union

from typing import overload

class TCharSet:
	def add(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	def getNoEntryValue(self, ) -> Union[string, JString]: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TCharProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TCharCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def remove(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TCharCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TCharIterator: ...
	def contains(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TCharCollection, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toArray(self, ) -> JArray(Union[string, JString], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[string, JString], 1), ) -> JArray(Union[string, JString], 1): ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TCharCollection, ) -> Union[int, JBoolean]: ...


class TByteSet:
	def add(self, arg0: JByte, ) -> Union[int, JBoolean]: ...
	def getNoEntryValue(self, ) -> JByte: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TByteProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TByteCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def remove(self, arg0: JByte, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TByteCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TByteIterator: ...
	def contains(self, arg0: JByte, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TByteCollection, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toArray(self, ) -> JArray(JByte, 1): ...
	@overload
	def toArray(self, arg0: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TByteCollection, ) -> Union[int, JBoolean]: ...


class TIntSet:
	def add(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getNoEntryValue(self, ) -> Union[int, JInt]: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TIntProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TIntCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def remove(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TIntCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TIntIterator: ...
	def contains(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TIntCollection, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toArray(self, ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TIntCollection, ) -> Union[int, JBoolean]: ...


class TDoubleSet:
	def add(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def getNoEntryValue(self, ) -> Union[float, JDouble]: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TDoubleProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TDoubleCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(Union[float, JDouble], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def remove(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TDoubleCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: JArray(Union[float, JDouble], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TDoubleIterator: ...
	def contains(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(Union[float, JDouble], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TDoubleCollection, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toArray(self, ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: JArray(Union[float, JDouble], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TDoubleCollection, ) -> Union[int, JBoolean]: ...


class TFloatSet:
	def add(self, arg0: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	def getNoEntryValue(self, ) -> Union[float, JFloat]: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TFloatProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TFloatCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(Union[float, JFloat], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def remove(self, arg0: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TFloatCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: JArray(Union[float, JFloat], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TFloatIterator: ...
	def contains(self, arg0: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(Union[float, JFloat], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TFloatCollection, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toArray(self, ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: JArray(Union[float, JFloat], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TFloatCollection, ) -> Union[int, JBoolean]: ...


class TShortSet:
	def add(self, arg0: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	def getNoEntryValue(self, ) -> Union[int, JShort]: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TShortProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TShortCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(Union[int, JShort], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def remove(self, arg0: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TShortCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: JArray(Union[int, JShort], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TShortIterator: ...
	def contains(self, arg0: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(Union[int, JShort], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TShortCollection, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toArray(self, ) -> JArray(Union[int, JShort], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[int, JShort], 1), ) -> JArray(Union[int, JShort], 1): ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: JArray(Union[int, JShort], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TShortCollection, ) -> Union[int, JBoolean]: ...


class TLongSet:
	def add(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def getNoEntryValue(self, ) -> Union[long, JLong]: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TLongProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TLongCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(Union[long, JLong], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def remove(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TLongCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: JArray(Union[long, JLong], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TLongIterator: ...
	def contains(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(Union[long, JLong], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TLongCollection, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toArray(self, ) -> JArray(Union[long, JLong], 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[long, JLong], 1), ) -> JArray(Union[long, JLong], 1): ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: JArray(Union[long, JLong], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TLongCollection, ) -> Union[int, JBoolean]: ...


