################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.gnu.trove.function
import javawrappers.java.io
import javawrappers.java.util.stream
import javawrappers.gnu.trove.procedure
import javawrappers.gnu.trove
import javawrappers.java.util.function
import javawrappers.gnu.trove.map
import javawrappers.gnu.trove.iterator

from jpype.types import *
from typing import Union

from typing import overload

class TObjectCharCustomHashMap:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, arg1: javawrappers.gnu.trove.map.TObjectCharMap, ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, arg1: Union[int, JInt], arg2: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, arg1: Union[int, JInt], arg2: Union[float, JFloat], arg3: Union[string, JString], ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, arg1: Union[int, JInt], ): ...
	class TObjectCharHashIterator:
		def __init__(self, arg0: javawrappers.gnu.trove.map.custom_hash.TObjectCharCustomHashMap, arg1: javawrappers.gnu.trove.map.custom_hash.TObjectCharCustomHashMap, ): ...
		def next(self, ) -> javawrappers.java.lang.Object: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...
		def advance(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def setValue(self, arg0: Union[string, JString], ) -> Union[string, JString]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def value(self, ) -> Union[string, JString]: ...
		def key(self, ) -> javawrappers.java.lang.Object: ...


	class TCharValueCollection:
		class TObjectCharValueHashIterator:
			def next(self, ) -> Union[string, JString]: ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def hasNext(self, ) -> Union[int, JBoolean]: ...
			def notify(self, ) -> None: ...
			def remove(self, ) -> None: ...


		def next(self, ) -> Union[string, JString]: ...
		def add(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getNoEntryValue(self, ) -> Union[string, JString]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def forEach(self, arg0: javawrappers.gnu.trove.procedure.TCharProcedure, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		@overload
		def containsAll(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JBoolean]: ...
		@overload
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		@overload
		def containsAll(self, arg0: javawrappers.gnu.trove.TCharCollection, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		@overload
		def remove(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
		@overload
		def remove(self, ) -> None: ...
		@overload
		def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		@overload
		def removeAll(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JBoolean]: ...
		@overload
		def removeAll(self, arg0: javawrappers.gnu.trove.TCharCollection, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.gnu.trove.iterator.TCharIterator: ...
		def contains(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		@overload
		def addAll(self, arg0: javawrappers.gnu.trove.TCharCollection, ) -> Union[int, JBoolean]: ...
		@overload
		def addAll(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JBoolean]: ...
		@overload
		def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def toArray(self, arg0: JArray(Union[string, JString], 1), ) -> JArray(Union[string, JString], 1): ...
		@overload
		def toArray(self, ) -> JArray(Union[string, JString], 1): ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		@overload
		def retainAll(self, arg0: javawrappers.gnu.trove.TCharCollection, ) -> Union[int, JBoolean]: ...
		@overload
		def retainAll(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JBoolean]: ...


	class MapBackedView:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.java.util.Iterator: ...
		def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def containsElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
		def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def removeElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


	class KeyView:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.java.util.Iterator: ...
		def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def containsElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
		def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def removeElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def compact(self, ) -> None: ...
	def valueCollection(self, ) -> javawrappers.gnu.trove.TCharCollection: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def containsValue(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: Union[string, JString], ) -> Union[string, JString]: ...
	def advance(self, ) -> None: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TCharCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TCharIterator: ...
	@overload
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TObjectCharIterator: ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[string, JString], 1), ) -> JArray(Union[string, JString], 1): ...
	@overload
	def toArray(self, ) -> JArray(Union[string, JString], 1): ...
	@overload
	def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def setUp(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def containsElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def containsElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	@overload
	def getNoEntryValue(self, ) -> Union[string, JString]: ...
	@overload
	def getNoEntryValue(self, ) -> Union[string, JString]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	def adjustOrPutValue(self, arg0: javawrappers.java.lang.Object, arg1: Union[string, JString], arg2: Union[string, JString], ) -> Union[string, JString]: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def next(self, ) -> Union[string, JString]: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def forEachEntry(self, arg0: javawrappers.gnu.trove.procedure.TObjectCharProcedure, ) -> Union[int, JBoolean]: ...
	def transformValues(self, arg0: javawrappers.gnu.trove.function.TCharFunction, ) -> None: ...
	@overload
	def keys(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def keys(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def values(self, arg0: JArray(Union[string, JString], 1), ) -> JArray(Union[string, JString], 1): ...
	@overload
	def values(self, ) -> JArray(Union[string, JString], 1): ...
	def increment(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[string, JString]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	@overload
	def putAll(self, arg0: javawrappers.gnu.trove.map.TObjectCharMap, ) -> None: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> Union[string, JString]: ...
	def retainEntries(self, arg0: javawrappers.gnu.trove.procedure.TObjectCharProcedure, ) -> Union[int, JBoolean]: ...
	def value(self, ) -> Union[string, JString]: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def key(self, ) -> javawrappers.java.lang.Object: ...
	def trimToSize(self, ) -> None: ...
	@overload
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TCharProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TObjectProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TCharCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	def forEachValue(self, arg0: javawrappers.gnu.trove.procedure.TCharProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TCharCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: Union[string, JString], ) -> Union[string, JString]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def forEachKey(self, arg0: javawrappers.gnu.trove.procedure.TObjectProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def removeElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def removeElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: Union[string, JString], ) -> Union[string, JString]: ...
	def adjustValue(self, arg0: javawrappers.java.lang.Object, arg1: Union[string, JString], ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TCharCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JBoolean]: ...


class TObjectShortCustomHashMap:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, arg1: javawrappers.gnu.trove.map.TObjectShortMap, ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, arg1: Union[int, JInt], arg2: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, arg1: Union[int, JInt], arg2: Union[float, JFloat], arg3: Union[int, JShort], ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, arg1: Union[int, JInt], ): ...
	class TObjectShortHashIterator:
		def __init__(self, arg0: javawrappers.gnu.trove.map.custom_hash.TObjectShortCustomHashMap, arg1: javawrappers.gnu.trove.map.custom_hash.TObjectShortCustomHashMap, ): ...
		def next(self, ) -> javawrappers.java.lang.Object: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...
		def advance(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def setValue(self, arg0: Union[int, JShort], ) -> Union[int, JShort]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def value(self, ) -> Union[int, JShort]: ...
		def key(self, ) -> javawrappers.java.lang.Object: ...


	class TShortValueCollection:
		class TObjectShortValueHashIterator:
			def next(self, ) -> Union[int, JShort]: ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def hasNext(self, ) -> Union[int, JBoolean]: ...
			def notify(self, ) -> None: ...
			def remove(self, ) -> None: ...


		def next(self, ) -> Union[int, JShort]: ...
		def add(self, arg0: Union[int, JShort], ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getNoEntryValue(self, ) -> Union[int, JShort]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def forEach(self, arg0: javawrappers.gnu.trove.procedure.TShortProcedure, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		@overload
		def containsAll(self, arg0: JArray(Union[int, JShort], 1), ) -> Union[int, JBoolean]: ...
		@overload
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		@overload
		def containsAll(self, arg0: javawrappers.gnu.trove.TShortCollection, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		@overload
		def remove(self, arg0: Union[int, JShort], ) -> Union[int, JBoolean]: ...
		@overload
		def remove(self, ) -> None: ...
		@overload
		def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		@overload
		def removeAll(self, arg0: JArray(Union[int, JShort], 1), ) -> Union[int, JBoolean]: ...
		@overload
		def removeAll(self, arg0: javawrappers.gnu.trove.TShortCollection, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.gnu.trove.iterator.TShortIterator: ...
		def contains(self, arg0: Union[int, JShort], ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		@overload
		def addAll(self, arg0: javawrappers.gnu.trove.TShortCollection, ) -> Union[int, JBoolean]: ...
		@overload
		def addAll(self, arg0: JArray(Union[int, JShort], 1), ) -> Union[int, JBoolean]: ...
		@overload
		def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def toArray(self, arg0: JArray(Union[int, JShort], 1), ) -> JArray(Union[int, JShort], 1): ...
		@overload
		def toArray(self, ) -> JArray(Union[int, JShort], 1): ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		@overload
		def retainAll(self, arg0: javawrappers.gnu.trove.TShortCollection, ) -> Union[int, JBoolean]: ...
		@overload
		def retainAll(self, arg0: JArray(Union[int, JShort], 1), ) -> Union[int, JBoolean]: ...


	class MapBackedView:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.java.util.Iterator: ...
		def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def containsElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
		def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def removeElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


	class KeyView:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.java.util.Iterator: ...
		def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def containsElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
		def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def removeElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def compact(self, ) -> None: ...
	def valueCollection(self, ) -> javawrappers.gnu.trove.TShortCollection: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def containsValue(self, arg0: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JShort], ) -> Union[int, JShort]: ...
	def advance(self, ) -> None: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: JArray(Union[int, JShort], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TShortCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TObjectShortIterator: ...
	@overload
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TShortIterator: ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[int, JShort], 1), ) -> JArray(Union[int, JShort], 1): ...
	@overload
	def toArray(self, ) -> JArray(Union[int, JShort], 1): ...
	@overload
	def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def setUp(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def containsElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def containsElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	@overload
	def getNoEntryValue(self, ) -> Union[int, JShort]: ...
	@overload
	def getNoEntryValue(self, ) -> Union[int, JShort]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	def adjustOrPutValue(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JShort], arg2: Union[int, JShort], ) -> Union[int, JShort]: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def next(self, ) -> Union[int, JShort]: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def forEachEntry(self, arg0: javawrappers.gnu.trove.procedure.TObjectShortProcedure, ) -> Union[int, JBoolean]: ...
	def transformValues(self, arg0: javawrappers.gnu.trove.function.TShortFunction, ) -> None: ...
	@overload
	def keys(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def keys(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def values(self, arg0: JArray(Union[int, JShort], 1), ) -> JArray(Union[int, JShort], 1): ...
	@overload
	def values(self, ) -> JArray(Union[int, JShort], 1): ...
	def increment(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JShort]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, ) -> None: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	@overload
	def putAll(self, arg0: javawrappers.gnu.trove.map.TObjectShortMap, ) -> None: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JShort]: ...
	def retainEntries(self, arg0: javawrappers.gnu.trove.procedure.TObjectShortProcedure, ) -> Union[int, JBoolean]: ...
	def value(self, ) -> Union[int, JShort]: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def key(self, ) -> javawrappers.java.lang.Object: ...
	def trimToSize(self, ) -> None: ...
	@overload
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TObjectProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TShortProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(Union[int, JShort], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TShortCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	def forEachValue(self, arg0: javawrappers.gnu.trove.procedure.TShortProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TShortCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(Union[int, JShort], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: Union[int, JShort], ) -> Union[int, JShort]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def forEachKey(self, arg0: javawrappers.gnu.trove.procedure.TObjectProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def removeElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def removeElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JShort], ) -> Union[int, JShort]: ...
	def adjustValue(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TShortCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: JArray(Union[int, JShort], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


class TObjectDoubleCustomHashMap:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, arg1: javawrappers.gnu.trove.map.TObjectDoubleMap, ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, arg1: Union[int, JInt], arg2: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, arg1: Union[int, JInt], arg2: Union[float, JFloat], arg3: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, arg1: Union[int, JInt], ): ...
	class TObjectDoubleHashIterator:
		def __init__(self, arg0: javawrappers.gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap, arg1: javawrappers.gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap, ): ...
		def next(self, ) -> javawrappers.java.lang.Object: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...
		def advance(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def setValue(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def value(self, ) -> Union[float, JDouble]: ...
		def key(self, ) -> javawrappers.java.lang.Object: ...


	class TDoubleValueCollection:
		class TObjectDoubleValueHashIterator:
			def next(self, ) -> Union[float, JDouble]: ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def hasNext(self, ) -> Union[int, JBoolean]: ...
			def notify(self, ) -> None: ...
			def remove(self, ) -> None: ...


		def next(self, ) -> Union[float, JDouble]: ...
		def add(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getNoEntryValue(self, ) -> Union[float, JDouble]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def forEach(self, arg0: javawrappers.gnu.trove.procedure.TDoubleProcedure, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		@overload
		def containsAll(self, arg0: JArray(Union[float, JDouble], 1), ) -> Union[int, JBoolean]: ...
		@overload
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		@overload
		def containsAll(self, arg0: javawrappers.gnu.trove.TDoubleCollection, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		@overload
		def remove(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
		@overload
		def remove(self, ) -> None: ...
		@overload
		def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		@overload
		def removeAll(self, arg0: JArray(Union[float, JDouble], 1), ) -> Union[int, JBoolean]: ...
		@overload
		def removeAll(self, arg0: javawrappers.gnu.trove.TDoubleCollection, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.gnu.trove.iterator.TDoubleIterator: ...
		def contains(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		@overload
		def addAll(self, arg0: javawrappers.gnu.trove.TDoubleCollection, ) -> Union[int, JBoolean]: ...
		@overload
		def addAll(self, arg0: JArray(Union[float, JDouble], 1), ) -> Union[int, JBoolean]: ...
		@overload
		def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def toArray(self, arg0: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
		@overload
		def toArray(self, ) -> JArray(Union[float, JDouble], 1): ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		@overload
		def retainAll(self, arg0: javawrappers.gnu.trove.TDoubleCollection, ) -> Union[int, JBoolean]: ...
		@overload
		def retainAll(self, arg0: JArray(Union[float, JDouble], 1), ) -> Union[int, JBoolean]: ...


	class MapBackedView:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.java.util.Iterator: ...
		def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def containsElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
		def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def removeElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


	class KeyView:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.java.util.Iterator: ...
		def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def containsElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
		def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def removeElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def compact(self, ) -> None: ...
	def valueCollection(self, ) -> javawrappers.gnu.trove.TDoubleCollection: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def containsValue(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def advance(self, ) -> None: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: JArray(Union[float, JDouble], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TDoubleCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TDoubleIterator: ...
	@overload
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TObjectDoubleIterator: ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def toArray(self, ) -> JArray(Union[float, JDouble], 1): ...
	def setUp(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def containsElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def containsElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getNoEntryValue(self, ) -> Union[float, JDouble]: ...
	@overload
	def getNoEntryValue(self, ) -> Union[float, JDouble]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	def adjustOrPutValue(self, arg0: javawrappers.java.lang.Object, arg1: Union[float, JDouble], arg2: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def next(self, ) -> Union[float, JDouble]: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def forEachEntry(self, arg0: javawrappers.gnu.trove.procedure.TObjectDoubleProcedure, ) -> Union[int, JBoolean]: ...
	def transformValues(self, arg0: javawrappers.gnu.trove.function.TDoubleFunction, ) -> None: ...
	@overload
	def keys(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def keys(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def values(self, arg0: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def values(self, ) -> JArray(Union[float, JDouble], 1): ...
	def increment(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[float, JDouble]: ...
	@overload
	def remove(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, ) -> None: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	@overload
	def putAll(self, arg0: javawrappers.gnu.trove.map.TObjectDoubleMap, ) -> None: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> Union[float, JDouble]: ...
	def retainEntries(self, arg0: javawrappers.gnu.trove.procedure.TObjectDoubleProcedure, ) -> Union[int, JBoolean]: ...
	def value(self, ) -> Union[float, JDouble]: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def key(self, ) -> javawrappers.java.lang.Object: ...
	def trimToSize(self, ) -> None: ...
	@overload
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TDoubleProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TObjectProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(Union[float, JDouble], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TDoubleCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	def forEachValue(self, arg0: javawrappers.gnu.trove.procedure.TDoubleProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TDoubleCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(Union[float, JDouble], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def forEachKey(self, arg0: javawrappers.gnu.trove.procedure.TObjectProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def removeElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def removeElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def adjustValue(self, arg0: javawrappers.java.lang.Object, arg1: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TDoubleCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: JArray(Union[float, JDouble], 1), ) -> Union[int, JBoolean]: ...


class TObjectFloatCustomHashMap:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, arg1: javawrappers.gnu.trove.map.TObjectFloatMap, ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, arg1: Union[int, JInt], arg2: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, arg1: Union[int, JInt], arg2: Union[float, JFloat], arg3: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, arg1: Union[int, JInt], ): ...
	class TObjectFloatHashIterator:
		def __init__(self, arg0: javawrappers.gnu.trove.map.custom_hash.TObjectFloatCustomHashMap, arg1: javawrappers.gnu.trove.map.custom_hash.TObjectFloatCustomHashMap, ): ...
		def next(self, ) -> javawrappers.java.lang.Object: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...
		def advance(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def setValue(self, arg0: Union[float, JFloat], ) -> Union[float, JFloat]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def value(self, ) -> Union[float, JFloat]: ...
		def key(self, ) -> javawrappers.java.lang.Object: ...


	class TFloatValueCollection:
		class TObjectFloatValueHashIterator:
			def next(self, ) -> Union[float, JFloat]: ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def hasNext(self, ) -> Union[int, JBoolean]: ...
			def notify(self, ) -> None: ...
			def remove(self, ) -> None: ...


		def next(self, ) -> Union[float, JFloat]: ...
		def add(self, arg0: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getNoEntryValue(self, ) -> Union[float, JFloat]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def forEach(self, arg0: javawrappers.gnu.trove.procedure.TFloatProcedure, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		@overload
		def containsAll(self, arg0: JArray(Union[float, JFloat], 1), ) -> Union[int, JBoolean]: ...
		@overload
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		@overload
		def containsAll(self, arg0: javawrappers.gnu.trove.TFloatCollection, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		@overload
		def remove(self, arg0: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
		@overload
		def remove(self, ) -> None: ...
		@overload
		def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		@overload
		def removeAll(self, arg0: JArray(Union[float, JFloat], 1), ) -> Union[int, JBoolean]: ...
		@overload
		def removeAll(self, arg0: javawrappers.gnu.trove.TFloatCollection, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.gnu.trove.iterator.TFloatIterator: ...
		def contains(self, arg0: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		@overload
		def addAll(self, arg0: javawrappers.gnu.trove.TFloatCollection, ) -> Union[int, JBoolean]: ...
		@overload
		def addAll(self, arg0: JArray(Union[float, JFloat], 1), ) -> Union[int, JBoolean]: ...
		@overload
		def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def toArray(self, arg0: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
		@overload
		def toArray(self, ) -> JArray(Union[float, JFloat], 1): ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		@overload
		def retainAll(self, arg0: javawrappers.gnu.trove.TFloatCollection, ) -> Union[int, JBoolean]: ...
		@overload
		def retainAll(self, arg0: JArray(Union[float, JFloat], 1), ) -> Union[int, JBoolean]: ...


	class MapBackedView:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.java.util.Iterator: ...
		def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def containsElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
		def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def removeElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


	class KeyView:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.java.util.Iterator: ...
		def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def containsElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
		def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def removeElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def compact(self, ) -> None: ...
	def valueCollection(self, ) -> javawrappers.gnu.trove.TFloatCollection: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def containsValue(self, arg0: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	def advance(self, ) -> None: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: JArray(Union[float, JFloat], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TFloatCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TObjectFloatIterator: ...
	@overload
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TFloatIterator: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def toArray(self, arg0: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def toArray(self, ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def setUp(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def containsElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def containsElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getNoEntryValue(self, ) -> Union[float, JFloat]: ...
	@overload
	def getNoEntryValue(self, ) -> Union[float, JFloat]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	def adjustOrPutValue(self, arg0: javawrappers.java.lang.Object, arg1: Union[float, JFloat], arg2: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def next(self, ) -> Union[float, JFloat]: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def forEachEntry(self, arg0: javawrappers.gnu.trove.procedure.TObjectFloatProcedure, ) -> Union[int, JBoolean]: ...
	def transformValues(self, arg0: javawrappers.gnu.trove.function.TFloatFunction, ) -> None: ...
	@overload
	def keys(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def keys(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def values(self, arg0: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def values(self, ) -> JArray(Union[float, JFloat], 1): ...
	def increment(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[float, JFloat]: ...
	@overload
	def remove(self, arg0: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, ) -> None: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	@overload
	def putAll(self, arg0: javawrappers.gnu.trove.map.TObjectFloatMap, ) -> None: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> Union[float, JFloat]: ...
	def retainEntries(self, arg0: javawrappers.gnu.trove.procedure.TObjectFloatProcedure, ) -> Union[int, JBoolean]: ...
	def value(self, ) -> Union[float, JFloat]: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def key(self, ) -> javawrappers.java.lang.Object: ...
	def trimToSize(self, ) -> None: ...
	@overload
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TObjectProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TFloatProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(Union[float, JFloat], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TFloatCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	def forEachValue(self, arg0: javawrappers.gnu.trove.procedure.TFloatProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TFloatCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(Union[float, JFloat], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def forEachKey(self, arg0: javawrappers.gnu.trove.procedure.TObjectProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def removeElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def removeElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	def adjustValue(self, arg0: javawrappers.java.lang.Object, arg1: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TFloatCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: JArray(Union[float, JFloat], 1), ) -> Union[int, JBoolean]: ...


class TObjectLongCustomHashMap:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, arg1: javawrappers.gnu.trove.map.TObjectLongMap, ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, arg1: Union[int, JInt], arg2: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, arg1: Union[int, JInt], arg2: Union[float, JFloat], arg3: Union[long, JLong], ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, arg1: Union[int, JInt], ): ...
	class TObjectLongHashIterator:
		def __init__(self, arg0: javawrappers.gnu.trove.map.custom_hash.TObjectLongCustomHashMap, arg1: javawrappers.gnu.trove.map.custom_hash.TObjectLongCustomHashMap, ): ...
		def next(self, ) -> javawrappers.java.lang.Object: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...
		def advance(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def setValue(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def value(self, ) -> Union[long, JLong]: ...
		def key(self, ) -> javawrappers.java.lang.Object: ...


	class TLongValueCollection:
		class TObjectLongValueHashIterator:
			def next(self, ) -> Union[long, JLong]: ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def hasNext(self, ) -> Union[int, JBoolean]: ...
			def notify(self, ) -> None: ...
			def remove(self, ) -> None: ...


		def next(self, ) -> Union[long, JLong]: ...
		def add(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getNoEntryValue(self, ) -> Union[long, JLong]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def forEach(self, arg0: javawrappers.gnu.trove.procedure.TLongProcedure, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		@overload
		def containsAll(self, arg0: JArray(Union[long, JLong], 1), ) -> Union[int, JBoolean]: ...
		@overload
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		@overload
		def containsAll(self, arg0: javawrappers.gnu.trove.TLongCollection, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		@overload
		def remove(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
		@overload
		def remove(self, ) -> None: ...
		@overload
		def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		@overload
		def removeAll(self, arg0: JArray(Union[long, JLong], 1), ) -> Union[int, JBoolean]: ...
		@overload
		def removeAll(self, arg0: javawrappers.gnu.trove.TLongCollection, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.gnu.trove.iterator.TLongIterator: ...
		def contains(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		@overload
		def addAll(self, arg0: javawrappers.gnu.trove.TLongCollection, ) -> Union[int, JBoolean]: ...
		@overload
		def addAll(self, arg0: JArray(Union[long, JLong], 1), ) -> Union[int, JBoolean]: ...
		@overload
		def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def toArray(self, arg0: JArray(Union[long, JLong], 1), ) -> JArray(Union[long, JLong], 1): ...
		@overload
		def toArray(self, ) -> JArray(Union[long, JLong], 1): ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		@overload
		def retainAll(self, arg0: javawrappers.gnu.trove.TLongCollection, ) -> Union[int, JBoolean]: ...
		@overload
		def retainAll(self, arg0: JArray(Union[long, JLong], 1), ) -> Union[int, JBoolean]: ...


	class MapBackedView:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.java.util.Iterator: ...
		def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def containsElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
		def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def removeElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


	class KeyView:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.java.util.Iterator: ...
		def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def containsElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
		def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def removeElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def compact(self, ) -> None: ...
	def valueCollection(self, ) -> javawrappers.gnu.trove.TLongCollection: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def containsValue(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def advance(self, ) -> None: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: JArray(Union[long, JLong], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TLongCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TObjectLongIterator: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TLongIterator: ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[long, JLong], 1), ) -> JArray(Union[long, JLong], 1): ...
	@overload
	def toArray(self, ) -> JArray(Union[long, JLong], 1): ...
	@overload
	def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def setUp(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def containsElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def containsElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	@overload
	def getNoEntryValue(self, ) -> Union[long, JLong]: ...
	@overload
	def getNoEntryValue(self, ) -> Union[long, JLong]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	def adjustOrPutValue(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[long, JLong]: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def next(self, ) -> Union[long, JLong]: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def forEachEntry(self, arg0: javawrappers.gnu.trove.procedure.TObjectLongProcedure, ) -> Union[int, JBoolean]: ...
	def transformValues(self, arg0: javawrappers.gnu.trove.function.TLongFunction, ) -> None: ...
	@overload
	def keys(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def keys(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def values(self, arg0: JArray(Union[long, JLong], 1), ) -> JArray(Union[long, JLong], 1): ...
	@overload
	def values(self, ) -> JArray(Union[long, JLong], 1): ...
	def increment(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, ) -> None: ...
	@overload
	def remove(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[long, JLong]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	@overload
	def putAll(self, arg0: javawrappers.gnu.trove.map.TObjectLongMap, ) -> None: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> Union[long, JLong]: ...
	def retainEntries(self, arg0: javawrappers.gnu.trove.procedure.TObjectLongProcedure, ) -> Union[int, JBoolean]: ...
	def value(self, ) -> Union[long, JLong]: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def key(self, ) -> javawrappers.java.lang.Object: ...
	def trimToSize(self, ) -> None: ...
	@overload
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TObjectProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TLongProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(Union[long, JLong], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TLongCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	def forEachValue(self, arg0: javawrappers.gnu.trove.procedure.TLongProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TLongCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(Union[long, JLong], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def forEachKey(self, arg0: javawrappers.gnu.trove.procedure.TObjectProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def removeElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def removeElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def adjustValue(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TLongCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: JArray(Union[long, JLong], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


class TObjectIntCustomHashMap:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, arg1: javawrappers.gnu.trove.map.TObjectIntMap, ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, arg1: Union[int, JInt], arg2: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, arg1: Union[int, JInt], arg2: Union[float, JFloat], arg3: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, arg1: Union[int, JInt], ): ...
	class TObjectIntHashIterator:
		def __init__(self, arg0: javawrappers.gnu.trove.map.custom_hash.TObjectIntCustomHashMap, arg1: javawrappers.gnu.trove.map.custom_hash.TObjectIntCustomHashMap, ): ...
		def next(self, ) -> javawrappers.java.lang.Object: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...
		def advance(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def setValue(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def value(self, ) -> Union[int, JInt]: ...
		def key(self, ) -> javawrappers.java.lang.Object: ...


	class TIntValueCollection:
		class TObjectIntValueHashIterator:
			def next(self, ) -> Union[int, JInt]: ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def hasNext(self, ) -> Union[int, JBoolean]: ...
			def notify(self, ) -> None: ...
			def remove(self, ) -> None: ...


		def next(self, ) -> Union[int, JInt]: ...
		def add(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getNoEntryValue(self, ) -> Union[int, JInt]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def forEach(self, arg0: javawrappers.gnu.trove.procedure.TIntProcedure, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		@overload
		def containsAll(self, arg0: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
		@overload
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		@overload
		def containsAll(self, arg0: javawrappers.gnu.trove.TIntCollection, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		@overload
		def remove(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
		@overload
		def remove(self, ) -> None: ...
		@overload
		def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		@overload
		def removeAll(self, arg0: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
		@overload
		def removeAll(self, arg0: javawrappers.gnu.trove.TIntCollection, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.gnu.trove.iterator.TIntIterator: ...
		def contains(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		@overload
		def addAll(self, arg0: javawrappers.gnu.trove.TIntCollection, ) -> Union[int, JBoolean]: ...
		@overload
		def addAll(self, arg0: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
		@overload
		def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def toArray(self, arg0: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
		@overload
		def toArray(self, ) -> JArray(Union[int, JInt], 1): ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		@overload
		def retainAll(self, arg0: javawrappers.gnu.trove.TIntCollection, ) -> Union[int, JBoolean]: ...
		@overload
		def retainAll(self, arg0: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...


	class MapBackedView:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.java.util.Iterator: ...
		def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def containsElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
		def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def removeElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


	class KeyView:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.java.util.Iterator: ...
		def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def containsElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
		def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def removeElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def compact(self, ) -> None: ...
	def valueCollection(self, ) -> javawrappers.gnu.trove.TIntCollection: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def containsValue(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def advance(self, ) -> None: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TIntCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TIntIterator: ...
	@overload
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TObjectIntIterator: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def toArray(self, ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def setUp(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def containsElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def containsElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def getNoEntryValue(self, ) -> Union[int, JInt]: ...
	@overload
	def getNoEntryValue(self, ) -> Union[int, JInt]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	def adjustOrPutValue(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def next(self, ) -> Union[int, JInt]: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def forEachEntry(self, arg0: javawrappers.gnu.trove.procedure.TObjectIntProcedure, ) -> Union[int, JBoolean]: ...
	def transformValues(self, arg0: javawrappers.gnu.trove.function.TIntFunction, ) -> None: ...
	@overload
	def keys(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def keys(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def values(self, arg0: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	@overload
	def values(self, ) -> JArray(Union[int, JInt], 1): ...
	def increment(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def remove(self, ) -> None: ...
	@overload
	def remove(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, ) -> None: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	@overload
	def putAll(self, arg0: javawrappers.gnu.trove.map.TObjectIntMap, ) -> None: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def retainEntries(self, arg0: javawrappers.gnu.trove.procedure.TObjectIntProcedure, ) -> Union[int, JBoolean]: ...
	def value(self, ) -> Union[int, JInt]: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def key(self, ) -> javawrappers.java.lang.Object: ...
	def trimToSize(self, ) -> None: ...
	@overload
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TObjectProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TIntProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TIntCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	def forEachValue(self, arg0: javawrappers.gnu.trove.procedure.TIntProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TIntCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def forEachKey(self, arg0: javawrappers.gnu.trove.procedure.TObjectProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def removeElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def removeElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def adjustValue(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TIntCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: JArray(Union[int, JInt], 1), ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


class TObjectByteCustomHashMap:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, arg1: javawrappers.gnu.trove.map.TObjectByteMap, ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, arg1: Union[int, JInt], arg2: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, arg1: Union[int, JInt], arg2: Union[float, JFloat], arg3: JByte, ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, arg1: Union[int, JInt], ): ...
	class TObjectByteHashIterator:
		def __init__(self, arg0: javawrappers.gnu.trove.map.custom_hash.TObjectByteCustomHashMap, arg1: javawrappers.gnu.trove.map.custom_hash.TObjectByteCustomHashMap, ): ...
		def next(self, ) -> javawrappers.java.lang.Object: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...
		def advance(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def setValue(self, arg0: JByte, ) -> JByte: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def value(self, ) -> JByte: ...
		def key(self, ) -> javawrappers.java.lang.Object: ...


	class TByteValueCollection:
		class TObjectByteValueHashIterator:
			def next(self, ) -> JByte: ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def hasNext(self, ) -> Union[int, JBoolean]: ...
			def notify(self, ) -> None: ...
			def remove(self, ) -> None: ...


		def next(self, ) -> JByte: ...
		def add(self, arg0: JByte, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getNoEntryValue(self, ) -> JByte: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def forEach(self, arg0: javawrappers.gnu.trove.procedure.TByteProcedure, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		@overload
		def containsAll(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
		@overload
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		@overload
		def containsAll(self, arg0: javawrappers.gnu.trove.TByteCollection, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		@overload
		def remove(self, arg0: JByte, ) -> Union[int, JBoolean]: ...
		@overload
		def remove(self, ) -> None: ...
		@overload
		def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		@overload
		def removeAll(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
		@overload
		def removeAll(self, arg0: javawrappers.gnu.trove.TByteCollection, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.gnu.trove.iterator.TByteIterator: ...
		def contains(self, arg0: JByte, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		@overload
		def addAll(self, arg0: javawrappers.gnu.trove.TByteCollection, ) -> Union[int, JBoolean]: ...
		@overload
		def addAll(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
		@overload
		def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def toArray(self, arg0: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
		@overload
		def toArray(self, ) -> JArray(JByte, 1): ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		@overload
		def retainAll(self, arg0: javawrappers.gnu.trove.TByteCollection, ) -> Union[int, JBoolean]: ...
		@overload
		def retainAll(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...


	class MapBackedView:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.java.util.Iterator: ...
		def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def containsElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
		def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def removeElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


	class KeyView:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.java.util.Iterator: ...
		def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def containsElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
		def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def removeElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def compact(self, ) -> None: ...
	def valueCollection(self, ) -> javawrappers.gnu.trove.TByteCollection: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def containsValue(self, arg0: JByte, ) -> Union[int, JBoolean]: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: JByte, ) -> JByte: ...
	def advance(self, ) -> None: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
	@overload
	def removeAll(self, arg0: javawrappers.gnu.trove.TByteCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TObjectByteIterator: ...
	@overload
	def iterator(self, ) -> javawrappers.gnu.trove.iterator.TByteIterator: ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	@overload
	def toArray(self, ) -> JArray(JByte, 1): ...
	@overload
	def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def setUp(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def containsElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def containsElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def add(self, arg0: JByte, ) -> Union[int, JBoolean]: ...
	@overload
	def getNoEntryValue(self, ) -> JByte: ...
	@overload
	def getNoEntryValue(self, ) -> JByte: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	def adjustOrPutValue(self, arg0: javawrappers.java.lang.Object, arg1: JByte, arg2: JByte, ) -> JByte: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def contains(self, arg0: JByte, ) -> Union[int, JBoolean]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def next(self, ) -> JByte: ...
	@overload
	def next(self, ) -> javawrappers.java.lang.Object: ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def forEachEntry(self, arg0: javawrappers.gnu.trove.procedure.TObjectByteProcedure, ) -> Union[int, JBoolean]: ...
	def transformValues(self, arg0: javawrappers.gnu.trove.function.TByteFunction, ) -> None: ...
	@overload
	def keys(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def keys(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def values(self, arg0: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	@overload
	def values(self, ) -> JArray(JByte, 1): ...
	def increment(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, ) -> None: ...
	@overload
	def remove(self, arg0: JByte, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> JByte: ...
	@overload
	def remove(self, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	@overload
	def putAll(self, arg0: javawrappers.gnu.trove.map.TObjectByteMap, ) -> None: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> JByte: ...
	def retainEntries(self, arg0: javawrappers.gnu.trove.procedure.TObjectByteProcedure, ) -> Union[int, JBoolean]: ...
	def value(self, ) -> JByte: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def key(self, ) -> javawrappers.java.lang.Object: ...
	def trimToSize(self, ) -> None: ...
	@overload
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TObjectProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TByteProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def containsAll(self, arg0: javawrappers.gnu.trove.TByteCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	def forEachValue(self, arg0: javawrappers.gnu.trove.procedure.TByteProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.gnu.trove.TByteCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def setValue(self, arg0: JByte, ) -> JByte: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def forEachKey(self, arg0: javawrappers.gnu.trove.procedure.TObjectProcedure, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def removeElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def removeElement(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: JByte, ) -> JByte: ...
	def adjustValue(self, arg0: javawrappers.java.lang.Object, arg1: JByte, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.gnu.trove.TByteCollection, ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: JArray(JByte, 1), ) -> Union[int, JBoolean]: ...
	@overload
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


