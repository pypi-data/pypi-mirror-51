################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.io
import javawrappers.gnu.trove.procedure
import javawrappers.java.util.function

from jpype.types import *
from typing import Union

from typing import overload

class TByteFloatHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: JByte, arg3: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[float, JFloat]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TByteProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> JByte: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: JByte, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TByteCharHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: JByte, arg3: Union[string, JString], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[string, JString]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TByteProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> JByte: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: JByte, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TShortDoubleHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[int, JShort], arg3: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[float, JDouble]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TShortProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[int, JShort]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TIntLongHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[int, JInt], arg3: Union[long, JLong], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[long, JLong]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TIntProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[int, JInt]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TByteShortHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: JByte, arg3: Union[int, JShort], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[int, JShort]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TByteProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> JByte: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: JByte, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TFloatLongHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[float, JFloat], arg3: Union[long, JLong], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[long, JLong]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TFloatProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[float, JFloat]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TShortHash:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[int, JShort], ): ...
	@overload
	def __init__(self, ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	def getNoEntryValue(self, ) -> Union[int, JShort]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TShortProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TLongIntHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[long, JLong], arg3: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[int, JInt]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TLongProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[long, JLong]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TFloatHash:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[float, JFloat], ): ...
	@overload
	def __init__(self, ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	def getNoEntryValue(self, ) -> Union[float, JFloat]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TFloatProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TShortCharHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[int, JShort], arg3: Union[string, JString], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[string, JString]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TShortProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[int, JShort]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class THash:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TLongDoubleHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[long, JLong], arg3: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[float, JDouble]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TLongProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[long, JLong]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TDoubleLongHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[float, JDouble], arg3: Union[long, JLong], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[long, JLong]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TDoubleProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[float, JDouble]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TCustomObjectHash:
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, arg1: Union[int, JInt], arg2: Union[float, JFloat], ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, ): ...
	@overload
	def __init__(self, arg0: javawrappers.gnu.trove.strategy.HashingStrategy, arg1: Union[int, JInt], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TObjectProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def setUp(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TLongFloatHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[long, JLong], arg3: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[float, JFloat]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TLongProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[long, JLong]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TShortIntHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[int, JShort], arg3: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[int, JInt]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TShortProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[int, JShort]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TDoubleByteHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[float, JDouble], arg3: JByte, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> JByte: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TDoubleProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[float, JDouble]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TCharByteHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[string, JString], arg3: JByte, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> JByte: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TCharProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[string, JString]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TObjectHash:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	@overload
	def __init__(self, ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TObjectProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def setUp(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TFloatIntHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[float, JFloat], arg3: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[int, JInt]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TFloatProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[float, JFloat]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TByteHash:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: JByte, ): ...
	@overload
	def __init__(self, ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	def getNoEntryValue(self, ) -> JByte: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TByteProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: JByte, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TLongShortHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[long, JLong], arg3: Union[int, JShort], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[int, JShort]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TLongProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[long, JLong]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TPrimitiveHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TFloatCharHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[float, JFloat], arg3: Union[string, JString], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[string, JString]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TFloatProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[float, JFloat]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TLongByteHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[long, JLong], arg3: JByte, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> JByte: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TLongProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[long, JLong]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TIntHash:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	def getNoEntryValue(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TIntProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TLongCharHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[long, JLong], arg3: Union[string, JString], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[string, JString]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TLongProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[long, JLong]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TFloatByteHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[float, JFloat], arg3: JByte, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> JByte: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TFloatProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[float, JFloat]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TCharCharHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[string, JString], arg3: Union[string, JString], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[string, JString]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TCharProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[string, JString]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class THashIterator:
	def next(self, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def notify(self, ) -> None: ...
	def remove(self, ) -> None: ...


class TByteLongHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: JByte, arg3: Union[long, JLong], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[long, JLong]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TByteProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> JByte: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: JByte, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TLongLongHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[long, JLong], arg3: Union[long, JLong], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[long, JLong]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TLongProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[long, JLong]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TDoubleHash:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[float, JDouble], ): ...
	@overload
	def __init__(self, ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	def getNoEntryValue(self, ) -> Union[float, JDouble]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TDoubleProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TIntDoubleHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[int, JInt], arg3: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[float, JDouble]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TIntProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[int, JInt]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TCharIntHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[string, JString], arg3: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[int, JInt]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TCharProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[string, JString]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TDoubleCharHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[float, JDouble], arg3: Union[string, JString], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[string, JString]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TDoubleProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[float, JDouble]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TIntFloatHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[int, JInt], arg3: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[float, JFloat]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TIntProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[int, JInt]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TIntByteHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[int, JInt], arg3: JByte, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> JByte: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TIntProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[int, JInt]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TIntIntHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[int, JInt], arg3: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[int, JInt]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TIntProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[int, JInt]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TCharShortHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[string, JString], arg3: Union[int, JShort], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[int, JShort]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TCharProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[string, JString]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TCharHash:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[string, JString], ): ...
	@overload
	def __init__(self, ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	def getNoEntryValue(self, ) -> Union[string, JString]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TCharProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class THashPrimitiveIterator:
	def __init__(self, arg0: javawrappers.gnu.trove.impl.hash.TPrimitiveHash, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def remove(self, ) -> None: ...


class TShortByteHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[int, JShort], arg3: JByte, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> JByte: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TShortProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[int, JShort]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TDoubleShortHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[float, JDouble], arg3: Union[int, JShort], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[int, JShort]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TDoubleProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[float, JDouble]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TDoubleIntHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[float, JDouble], arg3: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[int, JInt]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TDoubleProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[float, JDouble]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TShortLongHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[int, JShort], arg3: Union[long, JLong], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[long, JLong]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TShortProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[int, JShort]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TFloatDoubleHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[float, JFloat], arg3: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[float, JDouble]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TFloatProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[float, JFloat]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TFloatShortHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[float, JFloat], arg3: Union[int, JShort], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[int, JShort]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TFloatProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[float, JFloat]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TIntCharHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[int, JInt], arg3: Union[string, JString], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[string, JString]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TIntProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[int, JInt]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TCharDoubleHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[string, JString], arg3: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[float, JDouble]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TCharProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[string, JString]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TCharFloatHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[string, JString], arg3: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[float, JFloat]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TCharProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[string, JString]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TByteByteHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: JByte, arg3: JByte, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> JByte: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TByteProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> JByte: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: JByte, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TLongHash:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[long, JLong], ): ...
	@overload
	def __init__(self, ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	def getNoEntryValue(self, ) -> Union[long, JLong]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TLongProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TIntShortHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[int, JInt], arg3: Union[int, JShort], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[int, JShort]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TIntProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[int, JInt]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TFloatFloatHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[float, JFloat], arg3: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[float, JFloat]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TFloatProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[float, JFloat]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[float, JFloat], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TCharLongHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[string, JString], arg3: Union[long, JLong], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[long, JLong]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TCharProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[string, JString]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TDoubleDoubleHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[float, JDouble], arg3: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[float, JDouble]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TDoubleProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[float, JDouble]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TDoubleFloatHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[float, JDouble], arg3: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[float, JFloat]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TDoubleProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[float, JDouble]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[float, JDouble], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TShortFloatHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[int, JShort], arg3: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[float, JFloat]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TShortProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[int, JShort]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TByteIntHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: JByte, arg3: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[int, JInt]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TByteProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> JByte: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: JByte, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TByteDoubleHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: JByte, arg3: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[float, JDouble]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TByteProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> JByte: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: JByte, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


class TShortShortHash:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], arg2: Union[int, JShort], arg3: Union[int, JShort], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ): ...
	def setAutoCompactionFactor(self, arg0: Union[float, JFloat], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNoEntryValue(self, ) -> Union[int, JShort]: ...
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def trimToSize(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def forEach(self, arg0: javawrappers.gnu.trove.procedure.TShortProcedure, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getAutoCompactionFactor(self, ) -> Union[float, JFloat]: ...
	def reenableAutoCompaction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def getNoEntryKey(self, ) -> Union[int, JShort]: ...
	def capacity(self, ) -> Union[int, JInt]: ...
	def contains(self, arg0: Union[int, JShort], ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def tempDisableAutoCompaction(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ensureCapacity(self, arg0: Union[int, JInt], ) -> None: ...


