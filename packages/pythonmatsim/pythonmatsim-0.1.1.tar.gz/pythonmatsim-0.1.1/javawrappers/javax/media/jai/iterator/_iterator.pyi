################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.awt
import javawrappers.java.awt.image
import javawrappers.java.lang
import javawrappers.javax.media.jai.iterator

from jpype.types import *
from typing import Union

from typing import overload

class RookIterFactory:
	@overload
	@staticmethod
	def createWritable(arg0: javawrappers.java.awt.image.WritableRaster, arg1: javawrappers.java.awt.Rectangle, ) -> javawrappers.javax.media.jai.iterator.WritableRookIter: ...
	@overload
	@staticmethod
	def createWritable(arg0: javawrappers.java.awt.image.WritableRenderedImage, arg1: javawrappers.java.awt.Rectangle, ) -> javawrappers.javax.media.jai.iterator.WritableRookIter: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.awt.image.RenderedImage, arg1: javawrappers.java.awt.Rectangle, ) -> javawrappers.javax.media.jai.iterator.RookIter: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.awt.image.Raster, arg1: javawrappers.java.awt.Rectangle, ) -> javawrappers.javax.media.jai.iterator.RookIter: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class RectIterFactory:
	@overload
	@staticmethod
	def createWritable(arg0: javawrappers.java.awt.image.WritableRaster, arg1: javawrappers.java.awt.Rectangle, ) -> javawrappers.javax.media.jai.iterator.WritableRectIter: ...
	@overload
	@staticmethod
	def createWritable(arg0: javawrappers.java.awt.image.WritableRenderedImage, arg1: javawrappers.java.awt.Rectangle, ) -> javawrappers.javax.media.jai.iterator.WritableRectIter: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.awt.image.RenderedImage, arg1: javawrappers.java.awt.Rectangle, ) -> javawrappers.javax.media.jai.iterator.RectIter: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.awt.image.Raster, arg1: javawrappers.java.awt.Rectangle, ) -> javawrappers.javax.media.jai.iterator.RectIter: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class WritableRookIter:
	def prevLine(self, ) -> None: ...
	def nextLineDone(self, ) -> Union[int, JBoolean]: ...
	@overload
	def setPixel(self, arg0: JArray(Union[float, JDouble], 1), ) -> None: ...
	@overload
	def setPixel(self, arg0: JArray(Union[float, JFloat], 1), ) -> None: ...
	@overload
	def setPixel(self, arg0: JArray(Union[int, JInt], 1), ) -> None: ...
	def nextPixelDone(self, ) -> Union[int, JBoolean]: ...
	def startBands(self, ) -> None: ...
	@overload
	def getSampleFloat(self, ) -> Union[float, JFloat]: ...
	@overload
	def getSampleFloat(self, arg0: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def prevBand(self, ) -> None: ...
	def prevPixel(self, ) -> None: ...
	def nextBand(self, ) -> None: ...
	def startLines(self, ) -> None: ...
	def endPixels(self, ) -> None: ...
	@overload
	def getSampleDouble(self, ) -> Union[float, JDouble]: ...
	@overload
	def getSampleDouble(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def prevBandDone(self, ) -> Union[int, JBoolean]: ...
	def startPixels(self, ) -> None: ...
	def finishedLines(self, ) -> Union[int, JBoolean]: ...
	def nextLine(self, ) -> None: ...
	def nextPixel(self, ) -> None: ...
	def prevLineDone(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getPixel(self, arg0: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def getPixel(self, arg0: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def getPixel(self, arg0: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	def finishedPixels(self, ) -> Union[int, JBoolean]: ...
	def prevPixelDone(self, ) -> Union[int, JBoolean]: ...
	def endLines(self, ) -> None: ...
	def jumpLines(self, arg0: Union[int, JInt], ) -> None: ...
	def nextBandDone(self, ) -> Union[int, JBoolean]: ...
	def jumpPixels(self, arg0: Union[int, JInt], ) -> None: ...
	def finishedBands(self, ) -> Union[int, JBoolean]: ...
	def endBands(self, ) -> None: ...
	@overload
	def getSample(self, ) -> Union[int, JInt]: ...
	@overload
	def getSample(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[float, JFloat], ) -> None: ...


class RandomIterFactory:
	@overload
	@staticmethod
	def createWritable(arg0: javawrappers.java.awt.image.WritableRaster, arg1: javawrappers.java.awt.Rectangle, ) -> javawrappers.javax.media.jai.iterator.WritableRandomIter: ...
	@overload
	@staticmethod
	def createWritable(arg0: javawrappers.java.awt.image.WritableRenderedImage, arg1: javawrappers.java.awt.Rectangle, ) -> javawrappers.javax.media.jai.iterator.WritableRandomIter: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.awt.image.RenderedImage, arg1: javawrappers.java.awt.Rectangle, ) -> javawrappers.javax.media.jai.iterator.RandomIter: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.awt.image.Raster, arg1: javawrappers.java.awt.Rectangle, ) -> javawrappers.javax.media.jai.iterator.RandomIter: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class RandomIter:
	def getSampleFloat(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	def done(self, ) -> None: ...
	def getSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getSampleDouble(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JDouble]: ...


class WritableRectIter:
	def nextLineDone(self, ) -> Union[int, JBoolean]: ...
	def startPixels(self, ) -> None: ...
	@overload
	def setPixel(self, arg0: JArray(Union[float, JDouble], 1), ) -> None: ...
	@overload
	def setPixel(self, arg0: JArray(Union[float, JFloat], 1), ) -> None: ...
	@overload
	def setPixel(self, arg0: JArray(Union[int, JInt], 1), ) -> None: ...
	def finishedLines(self, ) -> Union[int, JBoolean]: ...
	def nextLine(self, ) -> None: ...
	def nextPixelDone(self, ) -> Union[int, JBoolean]: ...
	def startBands(self, ) -> None: ...
	def nextPixel(self, ) -> None: ...
	@overload
	def getSampleFloat(self, ) -> Union[float, JFloat]: ...
	@overload
	def getSampleFloat(self, arg0: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def getPixel(self, arg0: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def getPixel(self, arg0: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def getPixel(self, arg0: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	def finishedPixels(self, ) -> Union[int, JBoolean]: ...
	def jumpLines(self, arg0: Union[int, JInt], ) -> None: ...
	def nextBandDone(self, ) -> Union[int, JBoolean]: ...
	def nextBand(self, ) -> None: ...
	def jumpPixels(self, arg0: Union[int, JInt], ) -> None: ...
	def startLines(self, ) -> None: ...
	def finishedBands(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getSample(self, ) -> Union[int, JInt]: ...
	@overload
	def getSample(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getSampleDouble(self, ) -> Union[float, JDouble]: ...
	@overload
	def getSampleDouble(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[float, JFloat], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[float, JFloat], ) -> None: ...


class RookIter:
	def prevLine(self, ) -> None: ...
	def nextLineDone(self, ) -> Union[int, JBoolean]: ...
	def nextPixelDone(self, ) -> Union[int, JBoolean]: ...
	def startBands(self, ) -> None: ...
	@overload
	def getSampleFloat(self, ) -> Union[float, JFloat]: ...
	@overload
	def getSampleFloat(self, arg0: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def prevBand(self, ) -> None: ...
	def prevPixel(self, ) -> None: ...
	def nextBand(self, ) -> None: ...
	def startLines(self, ) -> None: ...
	def endPixels(self, ) -> None: ...
	@overload
	def getSampleDouble(self, ) -> Union[float, JDouble]: ...
	@overload
	def getSampleDouble(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def prevBandDone(self, ) -> Union[int, JBoolean]: ...
	def startPixels(self, ) -> None: ...
	def finishedLines(self, ) -> Union[int, JBoolean]: ...
	def nextLine(self, ) -> None: ...
	def nextPixel(self, ) -> None: ...
	def prevLineDone(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getPixel(self, arg0: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def getPixel(self, arg0: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def getPixel(self, arg0: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	def finishedPixels(self, ) -> Union[int, JBoolean]: ...
	def prevPixelDone(self, ) -> Union[int, JBoolean]: ...
	def endLines(self, ) -> None: ...
	def jumpLines(self, arg0: Union[int, JInt], ) -> None: ...
	def nextBandDone(self, ) -> Union[int, JBoolean]: ...
	def jumpPixels(self, arg0: Union[int, JInt], ) -> None: ...
	def finishedBands(self, ) -> Union[int, JBoolean]: ...
	def endBands(self, ) -> None: ...
	@overload
	def getSample(self, ) -> Union[int, JInt]: ...
	@overload
	def getSample(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...


class RectIter:
	def nextLineDone(self, ) -> Union[int, JBoolean]: ...
	def startPixels(self, ) -> None: ...
	def finishedLines(self, ) -> Union[int, JBoolean]: ...
	def nextLine(self, ) -> None: ...
	def nextPixelDone(self, ) -> Union[int, JBoolean]: ...
	def startBands(self, ) -> None: ...
	def nextPixel(self, ) -> None: ...
	@overload
	def getSampleFloat(self, ) -> Union[float, JFloat]: ...
	@overload
	def getSampleFloat(self, arg0: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def getPixel(self, arg0: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def getPixel(self, arg0: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def getPixel(self, arg0: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	def finishedPixels(self, ) -> Union[int, JBoolean]: ...
	def jumpLines(self, arg0: Union[int, JInt], ) -> None: ...
	def nextBandDone(self, ) -> Union[int, JBoolean]: ...
	def nextBand(self, ) -> None: ...
	def jumpPixels(self, arg0: Union[int, JInt], ) -> None: ...
	def startLines(self, ) -> None: ...
	def finishedBands(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getSample(self, ) -> Union[int, JInt]: ...
	@overload
	def getSample(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getSampleDouble(self, ) -> Union[float, JDouble]: ...
	@overload
	def getSampleDouble(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...


class WritableRandomIter:
	@overload
	def setPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), ) -> None: ...
	@overload
	def setPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), ) -> None: ...
	@overload
	def setPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> None: ...
	def getSampleFloat(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JFloat]: ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), ) -> JArray(Union[float, JDouble], 1): ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), ) -> JArray(Union[float, JFloat], 1): ...
	@overload
	def getPixel(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> JArray(Union[int, JInt], 1): ...
	def done(self, ) -> None: ...
	def getSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getSampleDouble(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[float, JDouble]: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[float, JDouble], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[float, JFloat], ) -> None: ...
	@overload
	def setSample(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...


