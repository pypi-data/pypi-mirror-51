################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.javax.media.jai.remote
import javawrappers.java.awt
import javawrappers.javax.media.jai
import javawrappers.javax.media.jai.util
import javawrappers.java.lang
import javawrappers.java.awt.image
import javawrappers.java.util
import javawrappers.java.net
import javawrappers.java.awt.geom
import javawrappers.java.io
import javawrappers.java.beans
import javawrappers.java.awt.image.renderable

from jpype.types import *
from typing import Union

from typing import overload

class RemoteRenderableOp:
	@overload
	def __init__(self, arg0: javawrappers.javax.media.jai.OperationRegistry, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.awt.image.renderable.ParameterBlock, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.awt.image.renderable.ParameterBlock, ): ...
	def getFloatParameter(self, arg0: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getRetryInterval(self, ) -> Union[int, JInt]: ...
	def getOperationName(self, ) -> javawrappers.java.lang.String: ...
	def getRegistry(self, ) -> javawrappers.javax.media.jai.OperationRegistry: ...
	def getShortParameter(self, arg0: Union[int, JInt], ) -> Union[int, JShort]: ...
	@overload
	def getNegotiatedValues(self, ) -> javawrappers.javax.media.jai.remote.NegotiableCapabilitySet: ...
	@overload
	def getNegotiatedValues(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.media.jai.remote.NegotiableCapability: ...
	def getServerName(self, ) -> javawrappers.java.lang.String: ...
	def setProtocolName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def copyPropertyFromSource(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	def getObjectParameter(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	def getPropertyNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	def getPropertyNames(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def setParameterBlock(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, ) -> None: ...
	def getRegistryModeName(self, ) -> javawrappers.java.lang.String: ...
	def addPropertyGenerator(self, arg0: javawrappers.javax.media.jai.PropertyGenerator, ) -> None: ...
	def createRendering(self, arg0: javawrappers.java.awt.image.renderable.RenderContext, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def isDynamic(self, ) -> Union[int, JBoolean]: ...
	def setProtocolAndServerNames(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def getDoubleParameter(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setNumRetries(self, arg0: Union[int, JInt], ) -> None: ...
	def removeSources(self, ) -> None: ...
	@overload
	def removePropertyChangeListener(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	@overload
	def removePropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def setNegotiationPreferences(self, arg0: javawrappers.javax.media.jai.remote.NegotiableCapabilitySet, ) -> None: ...
	def getProtocolName(self, ) -> javawrappers.java.lang.String: ...
	def getSource(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getLongParameter(self, arg0: Union[int, JInt], ) -> Union[long, JLong]: ...
	def getIntParameter(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def removeProperty(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getCharParameter(self, arg0: Union[int, JInt], ) -> Union[string, JString]: ...
	def getMinX(self, ) -> Union[float, JFloat]: ...
	def getMinY(self, ) -> Union[float, JFloat]: ...
	def getByteParameter(self, arg0: Union[int, JInt], ) -> JByte: ...
	def setSource(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def suppressProperty(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getRenderingHints(self, ) -> javawrappers.java.awt.RenderingHints: ...
	def getSources(self, ) -> javawrappers.java.util.Vector: ...
	def getWidth(self, ) -> Union[float, JFloat]: ...
	def notify(self, ) -> None: ...
	def setRegistry(self, arg0: javawrappers.javax.media.jai.OperationRegistry, ) -> None: ...
	def getParameterBlock(self, ) -> javawrappers.java.awt.image.renderable.ParameterBlock: ...
	def getHeight(self, ) -> Union[float, JFloat]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getDynamicProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	@overload
	def setParameter(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def setParameter(self, arg0: Union[int, JShort], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def setParameter(self, arg0: Union[string, JString], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def setParameter(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def setParameter(self, arg0: JByte, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def setParameter(self, arg0: Union[float, JDouble], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def setParameter(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def setParameter(self, arg0: Union[float, JFloat], arg1: Union[int, JInt], ) -> None: ...
	def createDefaultRendering(self, ) -> javawrappers.java.awt.image.RenderedImage: ...
	@overload
	def addPropertyChangeListener(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	@overload
	def addPropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getPropertyClass(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
	def setRetryInterval(self, arg0: Union[int, JInt], ) -> None: ...
	def getNumRetries(self, ) -> Union[int, JInt]: ...
	def createScaledRendering(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.awt.RenderingHints, ) -> javawrappers.java.awt.image.RenderedImage: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setRenderingHints(self, arg0: javawrappers.java.awt.RenderingHints, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setServerName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setOperationName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getNegotiationPreferences(self, ) -> javawrappers.javax.media.jai.remote.NegotiableCapabilitySet: ...


class SerializableState:
	def getObject(self, ) -> javawrappers.java.lang.Object: ...
	def getObjectClass(self, ) -> javawrappers.java.lang.Class: ...


class RemoteRenderedOp:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.awt.image.renderable.ParameterBlock, arg4: javawrappers.java.awt.RenderingHints, ): ...
	@overload
	def __init__(self, arg0: javawrappers.javax.media.jai.OperationRegistry, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.awt.image.renderable.ParameterBlock, arg5: javawrappers.java.awt.RenderingHints, ): ...
	def getMinTileX(self, ) -> Union[int, JInt]: ...
	def getMinTileY(self, ) -> Union[int, JInt]: ...
	def getOperationName(self, ) -> javawrappers.java.lang.String: ...
	def getRegistry(self, ) -> javawrappers.javax.media.jai.OperationRegistry: ...
	@overload
	@staticmethod
	def tileXToX(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def tileXToX(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getShortParameter(self, arg0: Union[int, JInt], ) -> Union[int, JShort]: ...
	@overload
	def getAsBufferedImage(self, ) -> javawrappers.java.awt.image.BufferedImage: ...
	@overload
	def getAsBufferedImage(self, arg0: javawrappers.java.awt.Rectangle, arg1: javawrappers.java.awt.image.ColorModel, ) -> javawrappers.java.awt.image.BufferedImage: ...
	@staticmethod
	def createColorModel(arg0: javawrappers.java.awt.image.SampleModel, ) -> javawrappers.java.awt.image.ColorModel: ...
	def getServerName(self, ) -> javawrappers.java.lang.String: ...
	def getBounds(self, ) -> javawrappers.java.awt.Rectangle: ...
	def copyExtendedData(self, arg0: javawrappers.java.awt.image.WritableRaster, arg1: javawrappers.javax.media.jai.BorderExtender, ) -> None: ...
	def addNodeSource(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getTileComputationListeners(self, ) -> JArray(javawrappers.javax.media.jai.TileComputationListener, 1): ...
	def setProtocolName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def createSnapshot(self, ) -> javawrappers.javax.media.jai.PlanarImage: ...
	@overload
	def YToTileY(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def YToTileY(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def copyPropertyFromSource(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def getPropertyNames(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	def getPropertyNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def setParameterBlock(self, arg0: javawrappers.java.awt.image.renderable.ParameterBlock, ) -> None: ...
	@overload
	@staticmethod
	def XToTileX(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def XToTileX(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def propertyChange(self, arg0: javawrappers.java.beans.PropertyChangeEvent, ) -> None: ...
	def getRegistryModeName(self, ) -> javawrappers.java.lang.String: ...
	def addPropertyGenerator(self, arg0: javawrappers.javax.media.jai.PropertyGenerator, ) -> None: ...
	def queueTiles(self, arg0: JArray(javawrappers.java.awt.Point, 1), ) -> javawrappers.javax.media.jai.TileRequest: ...
	def setRenderingHint(self, arg0: javawrappers.java.awt.RenderingHints.Key, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def setProtocolAndServerNames(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def getDoubleParameter(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def setNumRetries(self, arg0: Union[int, JInt], ) -> None: ...
	def getTileFactory(self, ) -> javawrappers.javax.media.jai.TileFactory: ...
	def removeSources(self, ) -> None: ...
	def setNegotiationPreferences(self, arg0: javawrappers.javax.media.jai.remote.NegotiableCapabilitySet, ) -> None: ...
	def getProtocolName(self, ) -> javawrappers.java.lang.String: ...
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getNegotiatedValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.media.jai.remote.NegotiableCapability: ...
	def getNumParameters(self, ) -> Union[int, JInt]: ...
	def getSplits(self, arg0: javawrappers.javax.media.jai.IntegerSequence, arg1: javawrappers.javax.media.jai.IntegerSequence, arg2: javawrappers.java.awt.Rectangle, ) -> None: ...
	def getMinX(self, ) -> Union[int, JInt]: ...
	def getMinY(self, ) -> Union[int, JInt]: ...
	def setServerNegotiatedValues(self, arg0: javawrappers.javax.media.jai.remote.NegotiableCapabilitySet, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTileWidth(self, ) -> Union[int, JInt]: ...
	def getImageID(self, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def getDefaultColorModel(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.ColorModel: ...
	def suppressProperty(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getWidth(self, ) -> Union[int, JInt]: ...
	def addTileComputationListener(self, arg0: javawrappers.javax.media.jai.TileComputationListener, ) -> None: ...
	@overload
	def removeSink(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def removeSink(self, arg0: javawrappers.javax.media.jai.PlanarImage, ) -> Union[int, JBoolean]: ...
	def getTileGridXOffset(self, ) -> Union[int, JInt]: ...
	def setSources(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def notify(self, ) -> None: ...
	def overlapsMultipleTiles(self, arg0: javawrappers.java.awt.Rectangle, ) -> Union[int, JBoolean]: ...
	def getMaxTileY(self, ) -> Union[int, JInt]: ...
	def setParameters(self, arg0: javawrappers.java.util.Vector, ) -> None: ...
	def getMaxTileX(self, ) -> Union[int, JInt]: ...
	def getHeight(self, ) -> Union[int, JInt]: ...
	@overload
	def setParameter(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def setParameter(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def setParameter(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def setParameter(self, arg0: Union[float, JFloat], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def setParameter(self, arg0: Union[float, JDouble], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def setParameter(self, arg0: JByte, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def setParameter(self, arg0: Union[int, JShort], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def setParameter(self, arg0: Union[string, JString], arg1: Union[int, JInt], ) -> None: ...
	def getSourceImage(self, arg0: Union[int, JInt], ) -> javawrappers.javax.media.jai.PlanarImage: ...
	@overload
	def addSink(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def addSink(self, arg0: javawrappers.javax.media.jai.PlanarImage, ) -> None: ...
	@overload
	def getData(self, arg0: javawrappers.java.awt.Rectangle, ) -> javawrappers.java.awt.image.Raster: ...
	@overload
	def getData(self, ) -> javawrappers.java.awt.image.Raster: ...
	def getTileHeight(self, ) -> Union[int, JInt]: ...
	def getColorModel(self, ) -> javawrappers.java.awt.image.ColorModel: ...
	@overload
	def removeSource(self, arg0: javawrappers.javax.media.jai.PlanarImage, ) -> Union[int, JBoolean]: ...
	@overload
	def removeSource(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setRetryInterval(self, arg0: Union[int, JInt], ) -> None: ...
	def getMaxX(self, ) -> Union[int, JInt]: ...
	def getMaxY(self, ) -> Union[int, JInt]: ...
	def mapSourcePoint(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: Union[int, JInt], ) -> javawrappers.java.awt.geom.Point2D: ...
	@staticmethod
	def wrapRenderedImage(arg0: javawrappers.java.awt.image.RenderedImage, ) -> javawrappers.javax.media.jai.PlanarImage: ...
	@overload
	def copyData(self, arg0: javawrappers.java.awt.image.WritableRaster, ) -> javawrappers.java.awt.image.WritableRaster: ...
	@overload
	def copyData(self, ) -> javawrappers.java.awt.image.WritableRaster: ...
	def getTileGridYOffset(self, ) -> Union[int, JInt]: ...
	def getNumRetries(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameters(self, ) -> javawrappers.java.util.Vector: ...
	def mapDestPoint(self, arg0: javawrappers.java.awt.geom.Point2D, arg1: Union[int, JInt], ) -> javawrappers.java.awt.geom.Point2D: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTileRect(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.Rectangle: ...
	def getNegotiationPreferences(self, ) -> javawrappers.javax.media.jai.remote.NegotiableCapabilitySet: ...
	def getFloatParameter(self, arg0: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getRetryInterval(self, ) -> Union[int, JInt]: ...
	def getRenderingHint(self, arg0: javawrappers.java.awt.RenderingHints.Key, ) -> javawrappers.java.lang.Object: ...
	def getNodeSource(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def prefetchTiles(self, arg0: JArray(javawrappers.java.awt.Point, 1), ) -> None: ...
	def getNumYTiles(self, ) -> Union[int, JInt]: ...
	def getNegotiatedValues(self, ) -> javawrappers.javax.media.jai.remote.NegotiableCapabilitySet: ...
	def getSampleModel(self, ) -> javawrappers.java.awt.image.SampleModel: ...
	def getObjectParameter(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def cancelTiles(self, arg0: javawrappers.javax.media.jai.TileRequest, arg1: JArray(javawrappers.java.awt.Point, 1), ) -> None: ...
	def getNumXTiles(self, ) -> Union[int, JInt]: ...
	def getTile(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.Raster: ...
	def createInstance(self, ) -> javawrappers.javax.media.jai.PlanarImage: ...
	@overload
	def tileYToY(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def tileYToY(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getSinks(self, ) -> javawrappers.java.util.Vector: ...
	@overload
	def removePropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	@overload
	def removePropertyChangeListener(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def getSource(self, arg0: Union[int, JInt], ) -> javawrappers.javax.media.jai.PlanarImage: ...
	def getLongParameter(self, arg0: Union[int, JInt], ) -> Union[long, JLong]: ...
	def getTileIndices(self, arg0: javawrappers.java.awt.Rectangle, ) -> JArray(javawrappers.java.awt.Point, 1): ...
	def dispose(self, ) -> None: ...
	def getIntParameter(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def removeProperty(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getCharParameter(self, arg0: Union[int, JInt], ) -> Union[string, JString]: ...
	def getByteParameter(self, arg0: Union[int, JInt], ) -> JByte: ...
	@overload
	def setSource(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def setSource(self, arg0: javawrappers.javax.media.jai.PlanarImage, arg1: Union[int, JInt], ) -> None: ...
	def getRendering(self, ) -> javawrappers.javax.media.jai.PlanarImage: ...
	def notifyAll(self, ) -> None: ...
	def getRenderingHints(self, ) -> javawrappers.java.awt.RenderingHints: ...
	def getNumBands(self, ) -> Union[int, JInt]: ...
	def getSources(self, ) -> javawrappers.java.util.Vector: ...
	def removeSinks(self, ) -> None: ...
	def removeTileComputationListener(self, arg0: javawrappers.javax.media.jai.TileComputationListener, ) -> None: ...
	def setRegistry(self, arg0: javawrappers.javax.media.jai.OperationRegistry, ) -> None: ...
	def getParameterBlock(self, ) -> javawrappers.java.awt.image.renderable.ParameterBlock: ...
	@overload
	def addSource(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def addSource(self, arg0: javawrappers.javax.media.jai.PlanarImage, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getExtendedData(self, arg0: javawrappers.java.awt.Rectangle, arg1: javawrappers.javax.media.jai.BorderExtender, ) -> javawrappers.java.awt.image.Raster: ...
	def getDynamicProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getGraphics(self, ) -> javawrappers.java.awt.Graphics: ...
	@overload
	def addPropertyChangeListener(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	@overload
	def addPropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def setNodeSource(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> None: ...
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getPropertyClass(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
	def getNumSources(self, ) -> Union[int, JInt]: ...
	def getCurrentRendering(self, ) -> javawrappers.javax.media.jai.PlanarImage: ...
	def getSourceObject(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def setRenderingHints(self, arg0: javawrappers.java.awt.RenderingHints, ) -> None: ...
	def getNewRendering(self, ) -> javawrappers.javax.media.jai.PlanarImage: ...
	def setServerName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setOperationName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def getTiles(self, arg0: JArray(javawrappers.java.awt.Point, 1), ) -> JArray(javawrappers.java.awt.image.Raster, 1): ...
	@overload
	def getTiles(self, ) -> JArray(javawrappers.java.awt.image.Raster, 1): ...


class RemoteCRIF:
	def mapRenderContext(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: javawrappers.java.awt.image.renderable.RenderContext, arg4: javawrappers.java.awt.image.renderable.ParameterBlock, arg5: javawrappers.java.awt.image.renderable.RenderableImage, ) -> javawrappers.java.awt.image.renderable.RenderContext: ...
	def getProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.awt.image.renderable.ParameterBlock, arg3: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def isDynamic(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getClientCapabilities(self, ) -> javawrappers.javax.media.jai.remote.NegotiableCapabilitySet: ...
	def getPropertyNames(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getBounds2D(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.awt.image.renderable.ParameterBlock, ) -> javawrappers.java.awt.geom.Rectangle2D: ...
	@overload
	def create(self, arg0: javawrappers.javax.media.jai.remote.PlanarImageServerProxy, arg1: javawrappers.javax.media.jai.OperationNode, arg2: javawrappers.javax.media.jai.PropertyChangeEventJAI, ) -> javawrappers.javax.media.jai.remote.RemoteRenderedImage: ...
	@overload
	def create(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.awt.image.renderable.ParameterBlock, arg3: javawrappers.java.awt.RenderingHints, ) -> javawrappers.javax.media.jai.remote.RemoteRenderedImage: ...
	@overload
	def create(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.awt.image.renderable.RenderContext, arg3: javawrappers.java.awt.image.renderable.ParameterBlock, ) -> javawrappers.javax.media.jai.remote.RemoteRenderedImage: ...


class Negotiable:
	def negotiate(self, arg0: javawrappers.javax.media.jai.remote.Negotiable, ) -> javawrappers.javax.media.jai.remote.Negotiable: ...
	def getNegotiatedValueClass(self, ) -> javawrappers.java.lang.Class: ...
	def getNegotiatedValue(self, ) -> javawrappers.java.lang.Object: ...


class RemoteImagingException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getRootCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class JAIRMIDescriptor:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isModeSupported(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getPropertyGenerators(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.javax.media.jai.PropertyGenerator, 1): ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getServerSupportedOperationList(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.javax.media.jai.OperationDescriptor, 1): ...
	def getInvalidRegion(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.awt.image.renderable.ParameterBlock, arg3: javawrappers.java.awt.RenderingHints, arg4: javawrappers.java.lang.String, arg5: javawrappers.java.awt.image.renderable.ParameterBlock, arg6: javawrappers.java.awt.RenderingHints, arg7: javawrappers.javax.media.jai.OperationNode, ) -> javawrappers.java.lang.Object: ...
	def getServerNameDocs(self, ) -> javawrappers.java.net.URL: ...
	def getServerCapabilities(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.media.jai.remote.NegotiableCapabilitySet: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def arePropertiesSupported(self, ) -> Union[int, JBoolean]: ...
	def getParameterListDescriptor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.media.jai.ParameterListDescriptor: ...
	def getSupportedModes(self, ) -> JArray(javawrappers.java.lang.String, 1): ...


class NegotiableCollection:
	@overload
	def __init__(self, arg0: JArray(javawrappers.java.lang.Object, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Collection, ): ...
	def negotiate(self, arg0: javawrappers.javax.media.jai.remote.Negotiable, ) -> javawrappers.javax.media.jai.remote.Negotiable: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNegotiatedValueClass(self, ) -> javawrappers.java.lang.Class: ...
	def getCollection(self, ) -> javawrappers.java.util.Collection: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNegotiatedValue(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class SerializerFactory:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getSerializers(arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.javax.media.jai.remote.Serializer, 1): ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def registerSerializer(arg0: javawrappers.javax.media.jai.remote.Serializer, ) -> None: ...
	@overload
	@staticmethod
	def getState(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.javax.media.jai.remote.SerializableState: ...
	@overload
	@staticmethod
	def getState(arg0: javawrappers.java.lang.Object, ) -> javawrappers.javax.media.jai.remote.SerializableState: ...
	@staticmethod
	def getSerializer(arg0: javawrappers.java.lang.Class, ) -> javawrappers.javax.media.jai.remote.Serializer: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isSupportedClass(arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getSupportedClasses() -> JArray(javawrappers.java.lang.Class, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def unregisterSerializer(arg0: javawrappers.javax.media.jai.remote.Serializer, ) -> None: ...
	@staticmethod
	def getDeserializedClass(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Class: ...


class Serializer:
	def getState(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.awt.RenderingHints, ) -> javawrappers.javax.media.jai.remote.SerializableState: ...
	def getSupportedClass(self, ) -> javawrappers.java.lang.Class: ...
	def permitsSubclasses(self, ) -> Union[int, JBoolean]: ...


class NegotiableCapabilitySet:
	def __init__(self, arg0: Union[int, JBoolean], ): ...
	class SequentialMap:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def add(self, arg0: javawrappers.javax.media.jai.remote.NegotiableCapability, ) -> None: ...
	def negotiate(self, arg0: javawrappers.javax.media.jai.remote.NegotiableCapabilitySet, ) -> javawrappers.javax.media.jai.remote.NegotiableCapabilitySet: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isPreference(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.javax.media.jai.remote.NegotiableCapability, ) -> None: ...
	def getCapabilityNames(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.List: ...
	def getCategories(self, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.util.List: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.List: ...
	@overload
	def getNegotiatedValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.media.jai.remote.NegotiableCapability: ...
	@overload
	def getNegotiatedValue(self, arg0: javawrappers.javax.media.jai.remote.NegotiableCapabilitySet, arg1: javawrappers.java.lang.String, ) -> javawrappers.javax.media.jai.remote.NegotiableCapability: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class RemoteRIF:
	def getClientCapabilities(self, ) -> javawrappers.javax.media.jai.remote.NegotiableCapabilitySet: ...
	@overload
	def create(self, arg0: javawrappers.javax.media.jai.remote.PlanarImageServerProxy, arg1: javawrappers.javax.media.jai.OperationNode, arg2: javawrappers.javax.media.jai.PropertyChangeEventJAI, ) -> javawrappers.javax.media.jai.remote.RemoteRenderedImage: ...
	@overload
	def create(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.awt.image.renderable.ParameterBlock, arg3: javawrappers.java.awt.RenderingHints, ) -> javawrappers.javax.media.jai.remote.RemoteRenderedImage: ...


class NegotiableNumericRange:
	def __init__(self, arg0: javawrappers.javax.media.jai.util.Range, ): ...
	def negotiate(self, arg0: javawrappers.javax.media.jai.remote.Negotiable, ) -> javawrappers.javax.media.jai.remote.Negotiable: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNegotiatedValueClass(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getRange(self, ) -> javawrappers.javax.media.jai.util.Range: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNegotiatedValue(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class NegotiableCapability:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.util.List, arg3: javawrappers.javax.media.jai.ParameterListDescriptor, arg4: Union[int, JBoolean], ): ...
	def getFloatParameter(self, arg0: javawrappers.java.lang.String, ) -> Union[float, JFloat]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getByteParameter(self, arg0: javawrappers.java.lang.String, ) -> JByte: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isPreference(self, ) -> Union[int, JBoolean]: ...
	def areParameterListDescriptorsCompatible(self, arg0: javawrappers.javax.media.jai.remote.NegotiableCapability, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getCapabilityName(self, ) -> javawrappers.java.lang.String: ...
	def getShortParameter(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JShort]: ...
	def notify(self, ) -> None: ...
	def getGenerators(self, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getBooleanParameter(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getObjectParameter(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	@overload
	def setParameter(self, arg0: javawrappers.java.lang.String, arg1: Union[string, JString], ) -> javawrappers.javax.media.jai.ParameterList: ...
	@overload
	def setParameter(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JShort], ) -> javawrappers.javax.media.jai.ParameterList: ...
	@overload
	def setParameter(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.javax.media.jai.ParameterList: ...
	@overload
	def setParameter(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.javax.media.jai.ParameterList: ...
	@overload
	def setParameter(self, arg0: javawrappers.java.lang.String, arg1: JByte, ) -> javawrappers.javax.media.jai.ParameterList: ...
	@overload
	def setParameter(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> javawrappers.javax.media.jai.ParameterList: ...
	@overload
	def setParameter(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JDouble], ) -> javawrappers.javax.media.jai.ParameterList: ...
	@overload
	def setParameter(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JFloat], ) -> javawrappers.javax.media.jai.ParameterList: ...
	@overload
	def setParameter(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> javawrappers.javax.media.jai.ParameterList: ...
	def getParameterListDescriptor(self, ) -> javawrappers.javax.media.jai.ParameterListDescriptor: ...
	def setGenerators(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def negotiate(self, arg0: javawrappers.javax.media.jai.remote.NegotiableCapability, ) -> javawrappers.javax.media.jai.remote.NegotiableCapability: ...
	def getDoubleParameter(self, arg0: javawrappers.java.lang.String, ) -> Union[float, JDouble]: ...
	def getCategory(self, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNegotiatedValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getLongParameter(self, arg0: javawrappers.java.lang.String, ) -> Union[long, JLong]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getIntParameter(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def getCharParameter(self, arg0: javawrappers.java.lang.String, ) -> Union[string, JString]: ...


class RemoteDescriptor:
	def getServerSupportedOperationList(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.javax.media.jai.OperationDescriptor, 1): ...
	def isModeSupported(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getInvalidRegion(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.awt.image.renderable.ParameterBlock, arg3: javawrappers.java.awt.RenderingHints, arg4: javawrappers.java.lang.String, arg5: javawrappers.java.awt.image.renderable.ParameterBlock, arg6: javawrappers.java.awt.RenderingHints, arg7: javawrappers.javax.media.jai.OperationNode, ) -> javawrappers.java.lang.Object: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getServerNameDocs(self, ) -> javawrappers.java.net.URL: ...
	def getServerCapabilities(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.media.jai.remote.NegotiableCapabilitySet: ...
	def getPropertyGenerators(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.javax.media.jai.PropertyGenerator, 1): ...
	def arePropertiesSupported(self, ) -> Union[int, JBoolean]: ...
	def getParameterListDescriptor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.media.jai.ParameterListDescriptor: ...
	def getSupportedModes(self, ) -> JArray(javawrappers.java.lang.String, 1): ...


class PlanarImageServerProxy:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.awt.image.renderable.ParameterBlock, arg4: javawrappers.java.awt.RenderingHints, ): ...
	def getMinTileX(self, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getMinTileY(self, ) -> Union[int, JInt]: ...
	def getRetryInterval(self, ) -> Union[int, JInt]: ...
	def getOperationName(self, ) -> javawrappers.java.lang.String: ...
	def prefetchTiles(self, arg0: JArray(javawrappers.java.awt.Point, 1), ) -> None: ...
	@overload
	@staticmethod
	def tileXToX(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def tileXToX(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getNumYTiles(self, ) -> Union[int, JInt]: ...
	def getNegotiatedValues(self, ) -> javawrappers.javax.media.jai.remote.NegotiableCapabilitySet: ...
	@overload
	def getAsBufferedImage(self, ) -> javawrappers.java.awt.image.BufferedImage: ...
	@overload
	def getAsBufferedImage(self, arg0: javawrappers.java.awt.Rectangle, arg1: javawrappers.java.awt.image.ColorModel, ) -> javawrappers.java.awt.image.BufferedImage: ...
	@staticmethod
	def createColorModel(arg0: javawrappers.java.awt.image.SampleModel, ) -> javawrappers.java.awt.image.ColorModel: ...
	def getServerName(self, ) -> javawrappers.java.lang.String: ...
	def getBounds(self, ) -> javawrappers.java.awt.Rectangle: ...
	def getSampleModel(self, ) -> javawrappers.java.awt.image.SampleModel: ...
	def copyExtendedData(self, arg0: javawrappers.java.awt.image.WritableRaster, arg1: javawrappers.javax.media.jai.BorderExtender, ) -> None: ...
	def getTileComputationListeners(self, ) -> JArray(javawrappers.javax.media.jai.TileComputationListener, 1): ...
	def getRemotePropertyNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def createSnapshot(self, ) -> javawrappers.javax.media.jai.PlanarImage: ...
	@overload
	def YToTileY(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def YToTileY(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def getPropertyNames(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	def getPropertyNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def cancelTiles(self, arg0: javawrappers.javax.media.jai.TileRequest, arg1: JArray(javawrappers.java.awt.Point, 1), ) -> None: ...
	@overload
	@staticmethod
	def XToTileX(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def XToTileX(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getNumXTiles(self, ) -> Union[int, JInt]: ...
	def getTileCache(self, ) -> javawrappers.javax.media.jai.TileCache: ...
	def queueTiles(self, arg0: JArray(javawrappers.java.awt.Point, 1), ) -> javawrappers.javax.media.jai.TileRequest: ...
	def getTile(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.Raster: ...
	def mapSourceRect(self, arg0: javawrappers.java.awt.Rectangle, arg1: Union[int, JInt], ) -> javawrappers.java.awt.Rectangle: ...
	@overload
	def tileYToY(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def tileYToY(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def setNumRetries(self, arg0: Union[int, JInt], ) -> None: ...
	def getTileFactory(self, ) -> javawrappers.javax.media.jai.TileFactory: ...
	def getSinks(self, ) -> javawrappers.java.util.Vector: ...
	def getImageLayout(self, ) -> javawrappers.javax.media.jai.ImageLayout: ...
	@overload
	def removePropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	@overload
	def removePropertyChangeListener(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def setNegotiationPreferences(self, arg0: javawrappers.javax.media.jai.remote.NegotiableCapabilitySet, ) -> None: ...
	def getProtocolName(self, ) -> javawrappers.java.lang.String: ...
	def mapDestRect(self, arg0: javawrappers.java.awt.Rectangle, arg1: Union[int, JInt], ) -> javawrappers.java.awt.Rectangle: ...
	def getSource(self, arg0: Union[int, JInt], ) -> javawrappers.javax.media.jai.PlanarImage: ...
	def setProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getNegotiatedValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.media.jai.remote.NegotiableCapability: ...
	def getTileIndices(self, arg0: javawrappers.java.awt.Rectangle, ) -> JArray(javawrappers.java.awt.Point, 1): ...
	def dispose(self, ) -> None: ...
	def removeProperty(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getSplits(self, arg0: javawrappers.javax.media.jai.IntegerSequence, arg1: javawrappers.javax.media.jai.IntegerSequence, arg2: javawrappers.java.awt.Rectangle, ) -> None: ...
	def getMinX(self, ) -> Union[int, JInt]: ...
	def getMinY(self, ) -> Union[int, JInt]: ...
	def setServerNegotiatedValues(self, arg0: javawrappers.javax.media.jai.remote.NegotiableCapabilitySet, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTileWidth(self, ) -> Union[int, JInt]: ...
	def getImageID(self, ) -> javawrappers.java.lang.Object: ...
	def setTileCache(self, arg0: javawrappers.javax.media.jai.TileCache, ) -> None: ...
	@staticmethod
	def getDefaultColorModel(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.ColorModel: ...
	def notifyAll(self, ) -> None: ...
	def getRenderingHints(self, ) -> javawrappers.java.awt.RenderingHints: ...
	def getNumBands(self, ) -> Union[int, JInt]: ...
	def getSources(self, ) -> javawrappers.java.util.Vector: ...
	def getWidth(self, ) -> Union[int, JInt]: ...
	def addTileComputationListener(self, arg0: javawrappers.javax.media.jai.TileComputationListener, ) -> None: ...
	def getTileCacheMetric(self, ) -> javawrappers.java.lang.Object: ...
	def removeSink(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getTileGridXOffset(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def removeSinks(self, ) -> None: ...
	def overlapsMultipleTiles(self, arg0: javawrappers.java.awt.Rectangle, ) -> Union[int, JBoolean]: ...
	def removeTileComputationListener(self, arg0: javawrappers.javax.media.jai.TileComputationListener, ) -> None: ...
	def getMaxTileY(self, ) -> Union[int, JInt]: ...
	def getMaxTileX(self, ) -> Union[int, JInt]: ...
	def getHeight(self, ) -> Union[int, JInt]: ...
	def getParameterBlock(self, ) -> javawrappers.java.awt.image.renderable.ParameterBlock: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getExtendedData(self, arg0: javawrappers.java.awt.Rectangle, arg1: javawrappers.javax.media.jai.BorderExtender, ) -> javawrappers.java.awt.image.Raster: ...
	def computeTile(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.Raster: ...
	def getGraphics(self, ) -> javawrappers.java.awt.Graphics: ...
	def getSourceImage(self, arg0: Union[int, JInt], ) -> javawrappers.javax.media.jai.PlanarImage: ...
	@overload
	def addPropertyChangeListener(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	@overload
	def addPropertyChangeListener(self, arg0: javawrappers.java.beans.PropertyChangeListener, ) -> None: ...
	def addSink(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getData(self, arg0: javawrappers.java.awt.Rectangle, ) -> javawrappers.java.awt.image.Raster: ...
	@overload
	def getData(self, ) -> javawrappers.java.awt.image.Raster: ...
	def getTileHeight(self, ) -> Union[int, JInt]: ...
	def getPropertyClass(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
	def getNumSources(self, ) -> Union[int, JInt]: ...
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getColorModel(self, ) -> javawrappers.java.awt.image.ColorModel: ...
	def setRetryInterval(self, arg0: Union[int, JInt], ) -> None: ...
	def getMaxX(self, ) -> Union[int, JInt]: ...
	def getMaxY(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def wrapRenderedImage(arg0: javawrappers.java.awt.image.RenderedImage, ) -> javawrappers.javax.media.jai.PlanarImage: ...
	@overload
	def copyData(self, arg0: javawrappers.java.awt.image.WritableRaster, ) -> javawrappers.java.awt.image.WritableRaster: ...
	@overload
	def copyData(self, ) -> javawrappers.java.awt.image.WritableRaster: ...
	def getNumRetries(self, ) -> Union[int, JInt]: ...
	def getTileGridYOffset(self, ) -> Union[int, JInt]: ...
	def getSourceObject(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getRemoteProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTileRect(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.Rectangle: ...
	@overload
	def getTiles(self, arg0: JArray(javawrappers.java.awt.Point, 1), ) -> JArray(javawrappers.java.awt.image.Raster, 1): ...
	@overload
	def getTiles(self, ) -> JArray(javawrappers.java.awt.image.Raster, 1): ...
	def getNegotiationPreferences(self, ) -> javawrappers.javax.media.jai.remote.NegotiableCapabilitySet: ...


class RemoteDescriptorImpl:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.net.URL, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isModeSupported(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getPropertyGenerators(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.javax.media.jai.PropertyGenerator, 1): ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getServerSupportedOperationList(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.javax.media.jai.OperationDescriptor, 1): ...
	def getInvalidRegion(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.awt.image.renderable.ParameterBlock, arg3: javawrappers.java.awt.RenderingHints, arg4: javawrappers.java.lang.String, arg5: javawrappers.java.awt.image.renderable.ParameterBlock, arg6: javawrappers.java.awt.RenderingHints, arg7: javawrappers.javax.media.jai.OperationNode, ) -> javawrappers.java.lang.Object: ...
	def getServerNameDocs(self, ) -> javawrappers.java.net.URL: ...
	def getServerCapabilities(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.media.jai.remote.NegotiableCapabilitySet: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def arePropertiesSupported(self, ) -> Union[int, JBoolean]: ...
	def getParameterListDescriptor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.media.jai.ParameterListDescriptor: ...
	def getSupportedModes(self, ) -> JArray(javawrappers.java.lang.String, 1): ...


class SerializableRenderedImage:
	@overload
	def __init__(self, arg0: javawrappers.java.awt.image.RenderedImage, arg1: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.awt.image.RenderedImage, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.awt.image.RenderedImage, arg1: Union[int, JBoolean], arg2: javawrappers.javax.media.jai.OperationRegistry, arg3: javawrappers.java.lang.String, arg4: javawrappers.javax.media.jai.tilecodec.TileCodecParameterList, arg5: javawrappers.javax.media.jai.tilecodec.TileCodecParameterList, ): ...
	class :
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class TileServer:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def run(self, ) -> None: ...
		def notify(self, ) -> None: ...


	def getMinTileX(self, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getMinTileY(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTileWidth(self, ) -> Union[int, JInt]: ...
	def getImageID(self, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def run(self, ) -> None: ...
	def getNumYTiles(self, ) -> Union[int, JInt]: ...
	def getWidth(self, ) -> Union[int, JInt]: ...
	def getSources(self, ) -> javawrappers.java.util.Vector: ...
	def getTileGridXOffset(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getSampleModel(self, ) -> javawrappers.java.awt.image.SampleModel: ...
	def getHeight(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getPropertyNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getNumXTiles(self, ) -> Union[int, JInt]: ...
	@overload
	def getData(self, ) -> javawrappers.java.awt.image.Raster: ...
	@overload
	def getData(self, arg0: javawrappers.java.awt.Rectangle, ) -> javawrappers.java.awt.image.Raster: ...
	def getTileHeight(self, ) -> Union[int, JInt]: ...
	def getTile(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.Raster: ...
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getColorModel(self, ) -> javawrappers.java.awt.image.ColorModel: ...
	def copyData(self, arg0: javawrappers.java.awt.image.WritableRaster, ) -> javawrappers.java.awt.image.WritableRaster: ...
	def getTileGridYOffset(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def dispose(self, ) -> None: ...
	def getMinX(self, ) -> Union[int, JInt]: ...
	def getMinY(self, ) -> Union[int, JInt]: ...


class RemoteRenderedImage:
	def getMinTileX(self, ) -> Union[int, JInt]: ...
	def getMinTileY(self, ) -> Union[int, JInt]: ...
	def getRetryInterval(self, ) -> Union[int, JInt]: ...
	def setServerNegotiatedValues(self, arg0: javawrappers.javax.media.jai.remote.NegotiableCapabilitySet, ) -> None: ...
	def getTileWidth(self, ) -> Union[int, JInt]: ...
	def getNumYTiles(self, ) -> Union[int, JInt]: ...
	def getWidth(self, ) -> Union[int, JInt]: ...
	def getSources(self, ) -> javawrappers.java.util.Vector: ...
	def getNegotiatedValues(self, ) -> javawrappers.javax.media.jai.remote.NegotiableCapabilitySet: ...
	def getServerName(self, ) -> javawrappers.java.lang.String: ...
	def getTileGridXOffset(self, ) -> Union[int, JInt]: ...
	def getSampleModel(self, ) -> javawrappers.java.awt.image.SampleModel: ...
	def getHeight(self, ) -> Union[int, JInt]: ...
	def getPropertyNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getNumXTiles(self, ) -> Union[int, JInt]: ...
	@overload
	def getData(self, arg0: javawrappers.java.awt.Rectangle, ) -> javawrappers.java.awt.image.Raster: ...
	@overload
	def getData(self, ) -> javawrappers.java.awt.image.Raster: ...
	def getTileHeight(self, ) -> Union[int, JInt]: ...
	def getTile(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.awt.image.Raster: ...
	def getProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getColorModel(self, ) -> javawrappers.java.awt.image.ColorModel: ...
	def setRetryInterval(self, arg0: Union[int, JInt], ) -> None: ...
	def setNumRetries(self, arg0: Union[int, JInt], ) -> None: ...
	def setNegotiationPreferences(self, arg0: javawrappers.javax.media.jai.remote.NegotiableCapabilitySet, ) -> None: ...
	def copyData(self, arg0: javawrappers.java.awt.image.WritableRaster, ) -> javawrappers.java.awt.image.WritableRaster: ...
	def getTileGridYOffset(self, ) -> Union[int, JInt]: ...
	def getNumRetries(self, ) -> Union[int, JInt]: ...
	def getProtocolName(self, ) -> javawrappers.java.lang.String: ...
	def getNegotiatedValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.media.jai.remote.NegotiableCapability: ...
	def getMinX(self, ) -> Union[int, JInt]: ...
	def getNegotiationPreferences(self, ) -> javawrappers.javax.media.jai.remote.NegotiableCapabilitySet: ...
	def getMinY(self, ) -> Union[int, JInt]: ...


class RemoteJAI:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.javax.media.jai.OperationRegistry, arg3: javawrappers.javax.media.jai.TileCache, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getRetryInterval(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setTileCache(self, arg0: javawrappers.javax.media.jai.TileCache, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getRenderingHint(self, arg0: javawrappers.java.awt.RenderingHints.Key, ) -> javawrappers.java.lang.Object: ...
	def getRenderingHints(self, ) -> javawrappers.java.awt.RenderingHints: ...
	@overload
	def getNegotiatedValues(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.media.jai.remote.NegotiableCapability: ...
	@overload
	def getNegotiatedValues(self, ) -> javawrappers.javax.media.jai.remote.NegotiableCapabilitySet: ...
	def getServerName(self, ) -> javawrappers.java.lang.String: ...
	def createRenderable(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.awt.image.renderable.ParameterBlock, ) -> javawrappers.javax.media.jai.remote.RemoteRenderableOp: ...
	def notify(self, ) -> None: ...
	def getServerSupportedOperationList(self, ) -> JArray(javawrappers.javax.media.jai.OperationDescriptor, 1): ...
	def removeRenderingHint(self, arg0: javawrappers.java.awt.RenderingHints.Key, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def create(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.awt.image.renderable.ParameterBlock, arg2: javawrappers.java.awt.RenderingHints, ) -> javawrappers.javax.media.jai.remote.RemoteRenderedOp: ...
	def getTileCache(self, ) -> javawrappers.javax.media.jai.TileCache: ...
	@overload
	@staticmethod
	def negotiate(arg0: javawrappers.javax.media.jai.remote.NegotiableCapabilitySet, arg1: javawrappers.javax.media.jai.remote.NegotiableCapabilitySet, arg2: javawrappers.javax.media.jai.remote.NegotiableCapabilitySet, ) -> javawrappers.javax.media.jai.remote.NegotiableCapabilitySet: ...
	@overload
	@staticmethod
	def negotiate(arg0: javawrappers.javax.media.jai.remote.NegotiableCapabilitySet, arg1: javawrappers.javax.media.jai.remote.NegotiableCapabilitySet, arg2: javawrappers.javax.media.jai.remote.NegotiableCapabilitySet, arg3: javawrappers.java.lang.String, ) -> javawrappers.javax.media.jai.remote.NegotiableCapability: ...
	def setRenderingHint(self, arg0: javawrappers.java.awt.RenderingHints.Key, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def setRetryInterval(self, arg0: Union[int, JInt], ) -> None: ...
	def getOperationRegistry(self, ) -> javawrappers.javax.media.jai.OperationRegistry: ...
	def setNumRetries(self, arg0: Union[int, JInt], ) -> None: ...
	def setNegotiationPreferences(self, arg0: javawrappers.javax.media.jai.remote.NegotiableCapabilitySet, ) -> None: ...
	def getNumRetries(self, ) -> Union[int, JInt]: ...
	def getProtocolName(self, ) -> javawrappers.java.lang.String: ...
	def clearRenderingHints(self, ) -> None: ...
	def getServerCapabilities(self, ) -> javawrappers.javax.media.jai.remote.NegotiableCapabilitySet: ...
	def getClientCapabilities(self, ) -> javawrappers.javax.media.jai.remote.NegotiableCapabilitySet: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setRenderingHints(self, arg0: javawrappers.java.awt.RenderingHints, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setOperationRegistry(self, arg0: javawrappers.javax.media.jai.OperationRegistry, ) -> None: ...


class NegotiableNumeric:
	@overload
	def __init__(self, arg0: JByte, ): ...
	@overload
	def __init__(self, arg0: Union[float, JFloat], ): ...
	@overload
	def __init__(self, arg0: Union[float, JDouble], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Number, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JShort], ): ...
	@overload
	def __init__(self, arg0: Union[long, JLong], ): ...
	def getNegotiatedValueAsInt(self, ) -> Union[int, JInt]: ...
	def negotiate(self, arg0: javawrappers.javax.media.jai.remote.Negotiable, ) -> javawrappers.javax.media.jai.remote.Negotiable: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getNegotiatedValueClass(self, ) -> javawrappers.java.lang.Class: ...
	def notifyAll(self, ) -> None: ...
	def getNegotiatedValueAsDouble(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def getNegotiatedValueAsShort(self, ) -> Union[int, JShort]: ...
	def getNumber(self, ) -> javawrappers.java.lang.Number: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNegotiatedValue(self, ) -> javawrappers.java.lang.Object: ...
	def getNegotiatedValueAsByte(self, ) -> JByte: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getNegotiatedValueAsFloat(self, ) -> Union[float, JFloat]: ...
	def getNegotiatedValueAsLong(self, ) -> Union[long, JLong]: ...


