################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.javax.crypto
import javawrappers.java.security
import javawrappers.java.lang
import javawrappers.java.io
import javawrappers.java.nio
import javawrappers.java.security.cert
import javawrappers.java.security.spec

from jpype.types import *
from typing import Union

from typing import overload

class BadPaddingException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class NullCipher:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def init(self, arg0: Union[int, JInt], arg1: javawrappers.java.security.Key, arg2: javawrappers.java.security.SecureRandom, ) -> None: ...
	@overload
	def init(self, arg0: Union[int, JInt], arg1: javawrappers.java.security.Key, ) -> None: ...
	@overload
	def init(self, arg0: Union[int, JInt], arg1: javawrappers.java.security.Key, arg2: javawrappers.java.security.AlgorithmParameters, arg3: javawrappers.java.security.SecureRandom, ) -> None: ...
	@overload
	def init(self, arg0: Union[int, JInt], arg1: javawrappers.java.security.cert.Certificate, arg2: javawrappers.java.security.SecureRandom, ) -> None: ...
	@overload
	def init(self, arg0: Union[int, JInt], arg1: javawrappers.java.security.cert.Certificate, ) -> None: ...
	@overload
	def init(self, arg0: Union[int, JInt], arg1: javawrappers.java.security.Key, arg2: javawrappers.java.security.AlgorithmParameters, ) -> None: ...
	@overload
	def init(self, arg0: Union[int, JInt], arg1: javawrappers.java.security.Key, arg2: javawrappers.java.security.spec.AlgorithmParameterSpec, ) -> None: ...
	@overload
	def init(self, arg0: Union[int, JInt], arg1: javawrappers.java.security.Key, arg2: javawrappers.java.security.spec.AlgorithmParameterSpec, arg3: javawrappers.java.security.SecureRandom, ) -> None: ...
	@staticmethod
	def getMaxAllowedParameterSpec(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.spec.AlgorithmParameterSpec: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def update(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	def update(self, arg0: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	@overload
	def update(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def update(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...
	@overload
	def update(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(JByte, 1), arg4: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def updateAAD(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> None: ...
	@overload
	def updateAAD(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def updateAAD(self, arg0: JArray(JByte, 1), ) -> None: ...
	def getOutputSize(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def unwrap(self, arg0: JArray(JByte, 1), arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], ) -> javawrappers.java.security.Key: ...
	@staticmethod
	def getMaxAllowedKeyLength(arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@overload
	def doFinal(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def doFinal(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	def doFinal(self, ) -> JArray(JByte, 1): ...
	@overload
	def doFinal(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(JByte, 1), arg4: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def doFinal(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...
	@overload
	def doFinal(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def doFinal(self, arg0: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	def getExemptionMechanism(self, ) -> javawrappers.javax.crypto.ExemptionMechanism: ...
	def getBlockSize(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameters(self, ) -> javawrappers.java.security.AlgorithmParameters: ...
	def getIV(self, ) -> JArray(JByte, 1): ...
	def getProvider(self, ) -> javawrappers.java.security.Provider: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Provider, ) -> javawrappers.javax.crypto.Cipher: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.crypto.Cipher: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.javax.crypto.Cipher: ...
	def wrap(self, arg0: javawrappers.java.security.Key, ) -> JArray(JByte, 1): ...


class IllegalBlockSizeException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class ExemptionMechanismSpi:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class SecretKeyFactorySpi:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class SecretKey:
	def getEncoded(self, ) -> JArray(JByte, 1): ...
	def isDestroyed(self, ) -> Union[int, JBoolean]: ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	def destroy(self, ) -> None: ...
	def getFormat(self, ) -> javawrappers.java.lang.String: ...


class KeyGenerator:
	def generateKey(self, ) -> javawrappers.javax.crypto.SecretKey: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def init(self, arg0: Union[int, JInt], arg1: javawrappers.java.security.SecureRandom, ) -> None: ...
	@overload
	def init(self, arg0: javawrappers.java.security.spec.AlgorithmParameterSpec, arg1: javawrappers.java.security.SecureRandom, ) -> None: ...
	@overload
	def init(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def init(self, arg0: javawrappers.java.security.spec.AlgorithmParameterSpec, ) -> None: ...
	@overload
	def init(self, arg0: javawrappers.java.security.SecureRandom, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	def getProvider(self, ) -> javawrappers.java.security.Provider: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Provider, ) -> javawrappers.javax.crypto.KeyGenerator: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.crypto.KeyGenerator: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.javax.crypto.KeyGenerator: ...
	def notify(self, ) -> None: ...


class Cipher:
	class Transform:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def init(self, arg0: Union[int, JInt], arg1: javawrappers.java.security.Key, arg2: javawrappers.java.security.SecureRandom, ) -> None: ...
	@overload
	def init(self, arg0: Union[int, JInt], arg1: javawrappers.java.security.Key, ) -> None: ...
	@overload
	def init(self, arg0: Union[int, JInt], arg1: javawrappers.java.security.Key, arg2: javawrappers.java.security.AlgorithmParameters, arg3: javawrappers.java.security.SecureRandom, ) -> None: ...
	@overload
	def init(self, arg0: Union[int, JInt], arg1: javawrappers.java.security.cert.Certificate, arg2: javawrappers.java.security.SecureRandom, ) -> None: ...
	@overload
	def init(self, arg0: Union[int, JInt], arg1: javawrappers.java.security.cert.Certificate, ) -> None: ...
	@overload
	def init(self, arg0: Union[int, JInt], arg1: javawrappers.java.security.Key, arg2: javawrappers.java.security.AlgorithmParameters, ) -> None: ...
	@overload
	def init(self, arg0: Union[int, JInt], arg1: javawrappers.java.security.Key, arg2: javawrappers.java.security.spec.AlgorithmParameterSpec, ) -> None: ...
	@overload
	def init(self, arg0: Union[int, JInt], arg1: javawrappers.java.security.Key, arg2: javawrappers.java.security.spec.AlgorithmParameterSpec, arg3: javawrappers.java.security.SecureRandom, ) -> None: ...
	@staticmethod
	def getMaxAllowedParameterSpec(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.spec.AlgorithmParameterSpec: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def update(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	def update(self, arg0: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	@overload
	def update(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def update(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...
	@overload
	def update(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(JByte, 1), arg4: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def updateAAD(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> None: ...
	@overload
	def updateAAD(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def updateAAD(self, arg0: JArray(JByte, 1), ) -> None: ...
	def getOutputSize(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def unwrap(self, arg0: JArray(JByte, 1), arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], ) -> javawrappers.java.security.Key: ...
	@staticmethod
	def getMaxAllowedKeyLength(arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@overload
	def doFinal(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def doFinal(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	def doFinal(self, ) -> JArray(JByte, 1): ...
	@overload
	def doFinal(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(JByte, 1), arg4: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def doFinal(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...
	@overload
	def doFinal(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def doFinal(self, arg0: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	def getExemptionMechanism(self, ) -> javawrappers.javax.crypto.ExemptionMechanism: ...
	def getBlockSize(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameters(self, ) -> javawrappers.java.security.AlgorithmParameters: ...
	def getIV(self, ) -> JArray(JByte, 1): ...
	def getProvider(self, ) -> javawrappers.java.security.Provider: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Provider, ) -> javawrappers.javax.crypto.Cipher: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.crypto.Cipher: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.javax.crypto.Cipher: ...
	def wrap(self, arg0: javawrappers.java.security.Key, ) -> JArray(JByte, 1): ...


class CipherSpi:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class SealedObject:
	def __init__(self, arg0: javawrappers.java.io.Serializable, arg1: javawrappers.javax.crypto.Cipher, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getObject(self, arg0: javawrappers.java.security.Key, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getObject(self, arg0: javawrappers.java.security.Key, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getObject(self, arg0: javawrappers.javax.crypto.Cipher, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ShortBufferException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class KeyAgreement:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def init(self, arg0: javawrappers.java.security.Key, ) -> None: ...
	@overload
	def init(self, arg0: javawrappers.java.security.Key, arg1: javawrappers.java.security.spec.AlgorithmParameterSpec, ) -> None: ...
	@overload
	def init(self, arg0: javawrappers.java.security.Key, arg1: javawrappers.java.security.spec.AlgorithmParameterSpec, arg2: javawrappers.java.security.SecureRandom, ) -> None: ...
	@overload
	def init(self, arg0: javawrappers.java.security.Key, arg1: javawrappers.java.security.SecureRandom, ) -> None: ...
	def doPhase(self, arg0: javawrappers.java.security.Key, arg1: Union[int, JBoolean], ) -> javawrappers.java.security.Key: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def generateSecret(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.crypto.SecretKey: ...
	@overload
	def generateSecret(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def generateSecret(self, ) -> JArray(JByte, 1): ...
	def getProvider(self, ) -> javawrappers.java.security.Provider: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.javax.crypto.KeyAgreement: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.crypto.KeyAgreement: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Provider, ) -> javawrappers.javax.crypto.KeyAgreement: ...
	def notify(self, ) -> None: ...


class KeyAgreementSpi:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class SecretKeyFactory:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def translateKey(self, arg0: javawrappers.javax.crypto.SecretKey, ) -> javawrappers.javax.crypto.SecretKey: ...
	def getKeySpec(self, arg0: javawrappers.javax.crypto.SecretKey, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.security.spec.KeySpec: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	def generateSecret(self, arg0: javawrappers.java.security.spec.KeySpec, ) -> javawrappers.javax.crypto.SecretKey: ...
	def getProvider(self, ) -> javawrappers.java.security.Provider: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Provider, ) -> javawrappers.javax.crypto.SecretKeyFactory: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.crypto.SecretKeyFactory: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.javax.crypto.SecretKeyFactory: ...
	def notify(self, ) -> None: ...


class KeyGeneratorSpi:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class MacSpi:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ExemptionMechanism:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def init(self, arg0: javawrappers.java.security.Key, arg1: javawrappers.java.security.AlgorithmParameters, ) -> None: ...
	@overload
	def init(self, arg0: javawrappers.java.security.Key, arg1: javawrappers.java.security.spec.AlgorithmParameterSpec, ) -> None: ...
	@overload
	def init(self, arg0: javawrappers.java.security.Key, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getOutputSize(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	def genExemptionBlob(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def genExemptionBlob(self, ) -> JArray(JByte, 1): ...
	@overload
	def genExemptionBlob(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isCryptoAllowed(self, arg0: javawrappers.java.security.Key, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getProvider(self, ) -> javawrappers.java.security.Provider: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Provider, ) -> javawrappers.javax.crypto.ExemptionMechanism: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.crypto.ExemptionMechanism: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.javax.crypto.ExemptionMechanism: ...


class CipherInputStream:
	def __init__(self, arg0: javawrappers.java.io.InputStream, arg1: javawrappers.javax.crypto.Cipher, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class CipherOutputStream:
	def __init__(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.javax.crypto.Cipher, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...


class ExemptionMechanismException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class Mac:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def init(self, arg0: javawrappers.java.security.Key, ) -> None: ...
	@overload
	def init(self, arg0: javawrappers.java.security.Key, arg1: javawrappers.java.security.spec.AlgorithmParameterSpec, ) -> None: ...
	def getMacLength(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def update(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> None: ...
	@overload
	def update(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def update(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def update(self, arg0: JByte, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def doFinal(self, arg0: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	@overload
	def doFinal(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> None: ...
	@overload
	def doFinal(self, ) -> JArray(JByte, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def reset(self, ) -> None: ...
	def getProvider(self, ) -> javawrappers.java.security.Provider: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.crypto.Mac: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Provider, ) -> javawrappers.javax.crypto.Mac: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.javax.crypto.Mac: ...


class NoSuchPaddingException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class AEADBadTagException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class EncryptedPrivateKeyInfo:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: JArray(JByte, 1), ): ...
	@overload
	def __init__(self, arg0: JArray(JByte, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.security.AlgorithmParameters, arg1: JArray(JByte, 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAlgParameters(self, ) -> javawrappers.java.security.AlgorithmParameters: ...
	def getAlgName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getKeySpec(self, arg0: javawrappers.java.security.Key, arg1: javawrappers.java.security.Provider, ) -> javawrappers.java.security.spec.PKCS8EncodedKeySpec: ...
	@overload
	def getKeySpec(self, arg0: javawrappers.java.security.Key, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.security.spec.PKCS8EncodedKeySpec: ...
	@overload
	def getKeySpec(self, arg0: javawrappers.java.security.Key, ) -> javawrappers.java.security.spec.PKCS8EncodedKeySpec: ...
	@overload
	def getKeySpec(self, arg0: javawrappers.javax.crypto.Cipher, ) -> javawrappers.java.security.spec.PKCS8EncodedKeySpec: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getEncoded(self, ) -> JArray(JByte, 1): ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEncryptedData(self, ) -> JArray(JByte, 1): ...
	def notify(self, ) -> None: ...


