################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang.reflect
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.javax.validation.executable

from jpype.types import *
from typing import Union

from typing import overload

class ExecutableType:
	IMPLICIT: ExecutableType = ...
	NONE: ExecutableType = ...
	CONSTRUCTORS: ExecutableType = ...
	NON_GETTER_METHODS: ExecutableType = ...
	GETTER_METHODS: ExecutableType = ...
	ALL: ExecutableType = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.validation.executable.ExecutableType: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.javax.validation.executable.ExecutableType, 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class ExecutableValidator:
	def validateReturnValue(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.reflect.Method, arg2: javawrappers.java.lang.Object, *arg3: javawrappers.java.lang.Class, ) -> javawrappers.java.util.Set: ...
	def validateConstructorReturnValue(self, arg0: javawrappers.java.lang.reflect.Constructor, arg1: javawrappers.java.lang.Object, *arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.util.Set: ...
	def validateConstructorParameters(self, arg0: javawrappers.java.lang.reflect.Constructor, arg1: JArray(javawrappers.java.lang.Object, 1), *arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.util.Set: ...
	def validateParameters(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.reflect.Method, arg2: JArray(javawrappers.java.lang.Object, 1), *arg3: javawrappers.java.lang.Class, ) -> javawrappers.java.util.Set: ...


class ValidateOnExecution:
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def type(self, ) -> JArray(javawrappers.javax.validation.executable.ExecutableType, 1): ...


