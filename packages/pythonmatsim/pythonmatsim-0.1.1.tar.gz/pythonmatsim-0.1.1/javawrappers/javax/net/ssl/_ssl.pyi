################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.security
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.java.nio
import javawrappers.javax.net
import javawrappers.javax.net.ssl
import javawrappers.java.util.function
import javawrappers.java.nio.channels
import javawrappers.java.security.cert
import javawrappers.javax.security.cert

from jpype.types import *
from typing import Union

from typing import overload

class SSLServerSocketFactory:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDefaultCipherSuites(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSupportedCipherSuites(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getDefault() -> javawrappers.javax.net.ServerSocketFactory: ...
	def notify(self, ) -> None: ...
	@overload
	def createServerSocket(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.net.ServerSocket: ...
	@overload
	def createServerSocket(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.net.InetAddress, ) -> javawrappers.java.net.ServerSocket: ...
	@overload
	def createServerSocket(self, ) -> javawrappers.java.net.ServerSocket: ...
	@overload
	def createServerSocket(self, arg0: Union[int, JInt], ) -> javawrappers.java.net.ServerSocket: ...


class SSLSocketFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDefaultCipherSuites(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	def createSocket(self, arg0: javawrappers.java.net.InetAddress, arg1: Union[int, JInt], ) -> javawrappers.java.net.Socket: ...
	@overload
	def createSocket(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.net.InetAddress, arg3: Union[int, JInt], ) -> javawrappers.java.net.Socket: ...
	@overload
	def createSocket(self, arg0: javawrappers.java.net.InetAddress, arg1: Union[int, JInt], arg2: javawrappers.java.net.InetAddress, arg3: Union[int, JInt], ) -> javawrappers.java.net.Socket: ...
	@overload
	def createSocket(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.java.net.Socket: ...
	@overload
	def createSocket(self, ) -> javawrappers.java.net.Socket: ...
	@overload
	def createSocket(self, arg0: javawrappers.java.net.Socket, arg1: javawrappers.java.io.InputStream, arg2: Union[int, JBoolean], ) -> javawrappers.java.net.Socket: ...
	@overload
	def createSocket(self, arg0: javawrappers.java.net.Socket, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: Union[int, JBoolean], ) -> javawrappers.java.net.Socket: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSupportedCipherSuites(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getDefault() -> javawrappers.javax.net.SocketFactory: ...
	def notify(self, ) -> None: ...


class ManagerFactoryParameters:


class SSLPeerUnverifiedException:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class SSLEngineResult:
	@overload
	def __init__(self, arg0: javawrappers.javax.net.ssl.SSLEngineResult.Status, arg1: javawrappers.javax.net.ssl.SSLEngineResult.HandshakeStatus, arg2: Union[int, JInt], arg3: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.javax.net.ssl.SSLEngineResult.Status, arg1: javawrappers.javax.net.ssl.SSLEngineResult.HandshakeStatus, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[long, JLong], ): ...
	class HandshakeStatus:
		NOT_HANDSHAKING: SSLEngineResult.HandshakeStatus = ...
		FINISHED: SSLEngineResult.HandshakeStatus = ...
		NEED_TASK: SSLEngineResult.HandshakeStatus = ...
		NEED_WRAP: SSLEngineResult.HandshakeStatus = ...
		NEED_UNWRAP: SSLEngineResult.HandshakeStatus = ...
		NEED_UNWRAP_AGAIN: SSLEngineResult.HandshakeStatus = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.net.ssl.SSLEngineResult.HandshakeStatus: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.javax.net.ssl.SSLEngineResult.HandshakeStatus, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class Status:
		BUFFER_UNDERFLOW: SSLEngineResult.Status = ...
		BUFFER_OVERFLOW: SSLEngineResult.Status = ...
		OK: SSLEngineResult.Status = ...
		CLOSED: SSLEngineResult.Status = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.net.ssl.SSLEngineResult.Status: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.javax.net.ssl.SSLEngineResult.Status, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def sequenceNumber(self, ) -> Union[long, JLong]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.net.ssl.SSLEngineResult.Status: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.net.ssl.SSLEngineResult.HandshakeStatus: ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.javax.net.ssl.SSLEngineResult.Status, 1): ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.javax.net.ssl.SSLEngineResult.HandshakeStatus, 1): ...
	def notifyAll(self, ) -> None: ...
	def bytesConsumed(self, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def getStatus(self, ) -> javawrappers.javax.net.ssl.SSLEngineResult.Status: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def bytesProduced(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getHandshakeStatus(self, ) -> javawrappers.javax.net.ssl.SSLEngineResult.HandshakeStatus: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class SSLContext:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def init(self, arg0: JArray(javawrappers.javax.net.ssl.KeyManager, 1), arg1: JArray(javawrappers.javax.net.ssl.TrustManager, 1), arg2: javawrappers.java.security.SecureRandom, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getSupportedSSLParameters(self, ) -> javawrappers.javax.net.ssl.SSLParameters: ...
	def getProtocol(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getDefault() -> javawrappers.javax.net.ssl.SSLContext: ...
	def getClientSessionContext(self, ) -> javawrappers.javax.net.ssl.SSLSessionContext: ...
	@staticmethod
	def setDefault(arg0: javawrappers.javax.net.ssl.SSLContext, ) -> None: ...
	def notify(self, ) -> None: ...
	def getServerSessionContext(self, ) -> javawrappers.javax.net.ssl.SSLSessionContext: ...
	def getServerSocketFactory(self, ) -> javawrappers.javax.net.ssl.SSLServerSocketFactory: ...
	def getSocketFactory(self, ) -> javawrappers.javax.net.ssl.SSLSocketFactory: ...
	@overload
	def createSSLEngine(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.javax.net.ssl.SSLEngine: ...
	@overload
	def createSSLEngine(self, ) -> javawrappers.javax.net.ssl.SSLEngine: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getProvider(self, ) -> javawrappers.java.security.Provider: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.javax.net.ssl.SSLContext: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.net.ssl.SSLContext: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Provider, ) -> javawrappers.javax.net.ssl.SSLContext: ...
	def getDefaultSSLParameters(self, ) -> javawrappers.javax.net.ssl.SSLParameters: ...


class SSLSessionContext:
	def setSessionTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def getSessionCacheSize(self, ) -> Union[int, JInt]: ...
	def getSessionTimeout(self, ) -> Union[int, JInt]: ...
	def getIds(self, ) -> javawrappers.java.util.Enumeration: ...
	def getSession(self, arg0: JArray(JByte, 1), ) -> javawrappers.javax.net.ssl.SSLSession: ...
	def setSessionCacheSize(self, arg0: Union[int, JInt], ) -> None: ...


class SSLKeyException:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class SSLProtocolException:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class SSLException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class SSLHandshakeException:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class StandardConstants:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class KeyStoreBuilderParameters:
	@overload
	def __init__(self, arg0: javawrappers.java.security.KeyStore.Builder, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.List, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameters(self, ) -> javawrappers.java.util.List: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class X509ExtendedTrustManager:
	def __init__(self, ): ...
	@overload
	def checkClientTrusted(self, arg0: JArray(javawrappers.java.security.cert.X509Certificate, 1), arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def checkClientTrusted(self, arg0: JArray(javawrappers.java.security.cert.X509Certificate, 1), arg1: javawrappers.java.lang.String, arg2: javawrappers.javax.net.ssl.SSLEngine, ) -> None: ...
	@overload
	def checkClientTrusted(self, arg0: JArray(javawrappers.java.security.cert.X509Certificate, 1), arg1: javawrappers.java.lang.String, arg2: javawrappers.java.net.Socket, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def checkServerTrusted(self, arg0: JArray(javawrappers.java.security.cert.X509Certificate, 1), arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def checkServerTrusted(self, arg0: JArray(javawrappers.java.security.cert.X509Certificate, 1), arg1: javawrappers.java.lang.String, arg2: javawrappers.javax.net.ssl.SSLEngine, ) -> None: ...
	@overload
	def checkServerTrusted(self, arg0: JArray(javawrappers.java.security.cert.X509Certificate, 1), arg1: javawrappers.java.lang.String, arg2: javawrappers.java.net.Socket, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAcceptedIssuers(self, ) -> JArray(javawrappers.java.security.cert.X509Certificate, 1): ...
	def notify(self, ) -> None: ...


class SSLContextSpi:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class SSLEngine:
	def getPeerPort(self, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSSLParameters(self, ) -> javawrappers.javax.net.ssl.SSLParameters: ...
	def setWantClientAuth(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isOutboundDone(self, ) -> Union[int, JBoolean]: ...
	def closeOutbound(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def unwrap(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: JArray(javawrappers.java.nio.ByteBuffer, 1), ) -> javawrappers.javax.net.ssl.SSLEngineResult: ...
	@overload
	def unwrap(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: JArray(javawrappers.java.nio.ByteBuffer, 1), arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.javax.net.ssl.SSLEngineResult: ...
	@overload
	def unwrap(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: javawrappers.java.nio.ByteBuffer, ) -> javawrappers.javax.net.ssl.SSLEngineResult: ...
	def getHandshakeApplicationProtocol(self, ) -> javawrappers.java.lang.String: ...
	def getApplicationProtocol(self, ) -> javawrappers.java.lang.String: ...
	def getPeerHost(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setUseClientMode(self, arg0: Union[int, JBoolean], ) -> None: ...
	def beginHandshake(self, ) -> None: ...
	def getEnabledProtocols(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def isInboundDone(self, ) -> Union[int, JBoolean]: ...
	def setEnableSessionCreation(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getDelegatedTask(self, ) -> javawrappers.java.lang.Runnable: ...
	def getHandshakeSession(self, ) -> javawrappers.javax.net.ssl.SSLSession: ...
	def setEnabledCipherSuites(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def setHandshakeApplicationProtocolSelector(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
	def setEnabledProtocols(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def setSSLParameters(self, arg0: javawrappers.javax.net.ssl.SSLParameters, ) -> None: ...
	def getUseClientMode(self, ) -> Union[int, JBoolean]: ...
	def closeInbound(self, ) -> None: ...
	def getWantClientAuth(self, ) -> Union[int, JBoolean]: ...
	def getHandshakeApplicationProtocolSelector(self, ) -> javawrappers.java.util.function.BiFunction: ...
	def getHandshakeStatus(self, ) -> javawrappers.javax.net.ssl.SSLEngineResult.HandshakeStatus: ...
	def getEnabledCipherSuites(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSupportedCipherSuites(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setNeedClientAuth(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def wrap(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), arg1: javawrappers.java.nio.ByteBuffer, ) -> javawrappers.javax.net.ssl.SSLEngineResult: ...
	@overload
	def wrap(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: javawrappers.java.nio.ByteBuffer, ) -> javawrappers.javax.net.ssl.SSLEngineResult: ...
	@overload
	def wrap(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.nio.ByteBuffer, ) -> javawrappers.javax.net.ssl.SSLEngineResult: ...
	def getSession(self, ) -> javawrappers.javax.net.ssl.SSLSession: ...
	def getEnableSessionCreation(self, ) -> Union[int, JBoolean]: ...
	def getNeedClientAuth(self, ) -> Union[int, JBoolean]: ...
	def getSupportedProtocols(self, ) -> JArray(javawrappers.java.lang.String, 1): ...


class X509KeyManager:
	def getClientAliases(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.security.Principal, 1), ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getCertificateChain(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.security.cert.X509Certificate, 1): ...
	def chooseClientAlias(self, arg0: JArray(javawrappers.java.lang.String, 1), arg1: JArray(javawrappers.java.security.Principal, 1), arg2: javawrappers.java.net.Socket, ) -> javawrappers.java.lang.String: ...
	def getServerAliases(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.security.Principal, 1), ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getPrivateKey(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.PrivateKey: ...
	def chooseServerAlias(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.security.Principal, 1), arg2: javawrappers.java.net.Socket, ) -> javawrappers.java.lang.String: ...


class CertPathTrustManagerParameters:
	def __init__(self, arg0: javawrappers.java.security.cert.CertPathParameters, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getParameters(self, ) -> javawrappers.java.security.cert.CertPathParameters: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class SSLServerSocket:
	def getInetAddress(self, ) -> javawrappers.java.net.InetAddress: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSSLParameters(self, ) -> javawrappers.javax.net.ssl.SSLParameters: ...
	def setReceiveBufferSize(self, arg0: Union[int, JInt], ) -> None: ...
	def getLocalPort(self, ) -> Union[int, JInt]: ...
	def setWantClientAuth(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getOption(self, arg0: javawrappers.java.net.SocketOption, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def supportedOptions(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def bind(self, arg0: javawrappers.java.net.SocketAddress, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def bind(self, arg0: javawrappers.java.net.SocketAddress, ) -> None: ...
	def getChannel(self, ) -> javawrappers.java.nio.channels.ServerSocketChannel: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setUseClientMode(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getSoTimeout(self, ) -> Union[int, JInt]: ...
	def close(self, ) -> None: ...
	def setOption(self, arg0: javawrappers.java.net.SocketOption, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.net.ServerSocket: ...
	def getEnabledProtocols(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def setReuseAddress(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getReceiveBufferSize(self, ) -> Union[int, JInt]: ...
	def getLocalSocketAddress(self, ) -> javawrappers.java.net.SocketAddress: ...
	def setEnableSessionCreation(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getReuseAddress(self, ) -> Union[int, JBoolean]: ...
	def setEnabledCipherSuites(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def setSoTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def setEnabledProtocols(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def setSSLParameters(self, arg0: javawrappers.javax.net.ssl.SSLParameters, ) -> None: ...
	def accept(self, ) -> javawrappers.java.net.Socket: ...
	def getUseClientMode(self, ) -> Union[int, JBoolean]: ...
	def setPerformancePreferences(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def getWantClientAuth(self, ) -> Union[int, JBoolean]: ...
	def isClosed(self, ) -> Union[int, JBoolean]: ...
	def isBound(self, ) -> Union[int, JBoolean]: ...
	def getEnabledCipherSuites(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSupportedCipherSuites(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setNeedClientAuth(self, arg0: Union[int, JBoolean], ) -> None: ...
	@staticmethod
	def setSocketFactory(arg0: javawrappers.java.net.SocketImplFactory, ) -> None: ...
	def getEnableSessionCreation(self, ) -> Union[int, JBoolean]: ...
	def getNeedClientAuth(self, ) -> Union[int, JBoolean]: ...
	def getSupportedProtocols(self, ) -> JArray(javawrappers.java.lang.String, 1): ...


class HandshakeCompletedListener:
	def handshakeCompleted(self, arg0: javawrappers.javax.net.ssl.HandshakeCompletedEvent, ) -> None: ...


class SSLSessionBindingEvent:
	def __init__(self, arg0: javawrappers.javax.net.ssl.SSLSession, arg1: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSession(self, ) -> javawrappers.javax.net.ssl.SSLSession: ...
	def notify(self, ) -> None: ...


class SNIServerName:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getType(self, ) -> Union[int, JInt]: ...
	def getEncoded(self, ) -> JArray(JByte, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class SSLSessionBindingListener:
	def valueBound(self, arg0: javawrappers.javax.net.ssl.SSLSessionBindingEvent, ) -> None: ...
	def valueUnbound(self, arg0: javawrappers.javax.net.ssl.SSLSessionBindingEvent, ) -> None: ...


class SSLPermission:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def checkGuard(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def newPermissionCollection(self, ) -> javawrappers.java.security.PermissionCollection: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getActions(self, ) -> javawrappers.java.lang.String: ...
	def implies(self, arg0: javawrappers.java.security.Permission, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class ExtendedSSLSession:
	def __init__(self, ): ...
	def getPeerPort(self, ) -> Union[int, JInt]: ...
	def getCipherSuite(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getPacketBufferSize(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLocalPrincipal(self, ) -> javawrappers.java.security.Principal: ...
	def notifyAll(self, ) -> None: ...
	def getId(self, ) -> JArray(JByte, 1): ...
	def getLocalCertificates(self, ) -> JArray(javawrappers.java.security.cert.Certificate, 1): ...
	def notify(self, ) -> None: ...
	def getLastAccessedTime(self, ) -> Union[long, JLong]: ...
	def getPeerHost(self, ) -> javawrappers.java.lang.String: ...
	def getLocalSupportedSignatureAlgorithms(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getPeerSupportedSignatureAlgorithms(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getPeerCertificates(self, ) -> JArray(javawrappers.java.security.cert.Certificate, 1): ...
	def getValueNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getSessionContext(self, ) -> javawrappers.javax.net.ssl.SSLSessionContext: ...
	def getPeerPrincipal(self, ) -> javawrappers.java.security.Principal: ...
	def isValid(self, ) -> Union[int, JBoolean]: ...
	def getRequestedServerNames(self, ) -> javawrappers.java.util.List: ...
	def getProtocol(self, ) -> javawrappers.java.lang.String: ...
	def invalidate(self, ) -> None: ...
	def getApplicationBufferSize(self, ) -> Union[int, JInt]: ...
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def removeValue(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getPeerCertificateChain(self, ) -> JArray(javawrappers.javax.security.cert.X509Certificate, 1): ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getCreationTime(self, ) -> Union[long, JLong]: ...
	def putValue(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getStatusResponses(self, ) -> javawrappers.java.util.List: ...


class KeyManagerFactory:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def init(self, arg0: javawrappers.javax.net.ssl.ManagerFactoryParameters, ) -> None: ...
	@overload
	def init(self, arg0: javawrappers.java.security.KeyStore, arg1: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getDefaultAlgorithm() -> javawrappers.java.lang.String: ...
	def getProvider(self, ) -> javawrappers.java.security.Provider: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Provider, ) -> javawrappers.javax.net.ssl.KeyManagerFactory: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.net.ssl.KeyManagerFactory: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.javax.net.ssl.KeyManagerFactory: ...
	def getKeyManagers(self, ) -> JArray(javawrappers.javax.net.ssl.KeyManager, 1): ...
	def notify(self, ) -> None: ...


class TrustManagerFactory:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def init(self, arg0: javawrappers.javax.net.ssl.ManagerFactoryParameters, ) -> None: ...
	@overload
	def init(self, arg0: javawrappers.java.security.KeyStore, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getDefaultAlgorithm() -> javawrappers.java.lang.String: ...
	def getProvider(self, ) -> javawrappers.java.security.Provider: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Provider, ) -> javawrappers.javax.net.ssl.TrustManagerFactory: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.net.ssl.TrustManagerFactory: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.javax.net.ssl.TrustManagerFactory: ...
	def getTrustManagers(self, ) -> JArray(javawrappers.javax.net.ssl.TrustManager, 1): ...
	def notify(self, ) -> None: ...


class X509ExtendedKeyManager:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getCertificateChain(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.security.cert.X509Certificate, 1): ...
	def notifyAll(self, ) -> None: ...
	def chooseServerAlias(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.security.Principal, 1), arg2: javawrappers.java.net.Socket, ) -> javawrappers.java.lang.String: ...
	def chooseEngineServerAlias(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.security.Principal, 1), arg2: javawrappers.javax.net.ssl.SSLEngine, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getClientAliases(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.security.Principal, 1), ) -> JArray(javawrappers.java.lang.String, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def chooseClientAlias(self, arg0: JArray(javawrappers.java.lang.String, 1), arg1: JArray(javawrappers.java.security.Principal, 1), arg2: javawrappers.java.net.Socket, ) -> javawrappers.java.lang.String: ...
	def getServerAliases(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.security.Principal, 1), ) -> JArray(javawrappers.java.lang.String, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def chooseEngineClientAlias(self, arg0: JArray(javawrappers.java.lang.String, 1), arg1: JArray(javawrappers.java.security.Principal, 1), arg2: javawrappers.javax.net.ssl.SSLEngine, ) -> javawrappers.java.lang.String: ...
	def getPrivateKey(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.PrivateKey: ...


class KeyManagerFactorySpi:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class SNIHostName:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: JArray(JByte, 1), ): ...
	class SNIHostNameMatcher:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getType(self, ) -> Union[int, JInt]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def matches(self, arg0: javawrappers.javax.net.ssl.SNIServerName, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAsciiName(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def createSNIMatcher(arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.net.ssl.SNIMatcher: ...
	@overload
	def getType(self, ) -> Union[int, JInt]: ...
	@overload
	def getType(self, ) -> Union[int, JInt]: ...
	def getEncoded(self, ) -> JArray(JByte, 1): ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def matches(self, arg0: javawrappers.javax.net.ssl.SNIServerName, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class TrustManagerFactorySpi:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class HostnameVerifier:
	def verify(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.javax.net.ssl.SSLSession, ) -> Union[int, JBoolean]: ...


class SSLParameters:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: JArray(javawrappers.java.lang.String, 1), ): ...
	@overload
	def __init__(self, arg0: JArray(javawrappers.java.lang.String, 1), arg1: JArray(javawrappers.java.lang.String, 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setMaximumPacketSize(self, arg0: Union[int, JInt], ) -> None: ...
	def setWantClientAuth(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getUseCipherSuitesOrder(self, ) -> Union[int, JBoolean]: ...
	def setUseCipherSuitesOrder(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def setServerNames(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getProtocols(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def setProtocols(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSNIMatchers(self, ) -> javawrappers.java.util.Collection: ...
	def getCipherSuites(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def setCipherSuites(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def setSNIMatchers(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getServerNames(self, ) -> javawrappers.java.util.List: ...
	def setAlgorithmConstraints(self, arg0: javawrappers.java.security.AlgorithmConstraints, ) -> None: ...
	def getApplicationProtocols(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def setEndpointIdentificationAlgorithm(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setApplicationProtocols(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def getEndpointIdentificationAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	def getWantClientAuth(self, ) -> Union[int, JBoolean]: ...
	def getAlgorithmConstraints(self, ) -> javawrappers.java.security.AlgorithmConstraints: ...
	def getEnableRetransmissions(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setNeedClientAuth(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getMaximumPacketSize(self, ) -> Union[int, JInt]: ...
	def getNeedClientAuth(self, ) -> Union[int, JBoolean]: ...
	def setEnableRetransmissions(self, arg0: Union[int, JBoolean], ) -> None: ...


class SNIMatcher:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getType(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def matches(self, arg0: javawrappers.javax.net.ssl.SNIServerName, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class SSLSession:
	def getPeerPort(self, ) -> Union[int, JInt]: ...
	def getCipherSuite(self, ) -> javawrappers.java.lang.String: ...
	def getPacketBufferSize(self, ) -> Union[int, JInt]: ...
	def getLocalPrincipal(self, ) -> javawrappers.java.security.Principal: ...
	def isValid(self, ) -> Union[int, JBoolean]: ...
	def getProtocol(self, ) -> javawrappers.java.lang.String: ...
	def getId(self, ) -> JArray(JByte, 1): ...
	def getLocalCertificates(self, ) -> JArray(javawrappers.java.security.cert.Certificate, 1): ...
	def invalidate(self, ) -> None: ...
	def getApplicationBufferSize(self, ) -> Union[int, JInt]: ...
	def getValue(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getLastAccessedTime(self, ) -> Union[long, JLong]: ...
	def removeValue(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getPeerHost(self, ) -> javawrappers.java.lang.String: ...
	def getPeerCertificateChain(self, ) -> JArray(javawrappers.javax.security.cert.X509Certificate, 1): ...
	def getCreationTime(self, ) -> Union[long, JLong]: ...
	def putValue(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getPeerCertificates(self, ) -> JArray(javawrappers.java.security.cert.Certificate, 1): ...
	def getValueNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getSessionContext(self, ) -> javawrappers.javax.net.ssl.SSLSessionContext: ...
	def getPeerPrincipal(self, ) -> javawrappers.java.security.Principal: ...


class TrustManager:


class HttpsURLConnection:
	class DefaultHostnameVerifier:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def verify(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.javax.net.ssl.SSLSession, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getCipherSuite(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def disconnect(self, ) -> None: ...
	def getInstanceFollowRedirects(self, ) -> Union[int, JBoolean]: ...
	def setConnectTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def getHeaderFieldLong(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def setUseCaches(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getLocalCertificates(self, ) -> JArray(javawrappers.java.security.cert.Certificate, 1): ...
	@staticmethod
	def setFollowRedirects(arg0: Union[int, JBoolean], ) -> None: ...
	def setRequestProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def getDoInput(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def setDefaultHostnameVerifier(arg0: javawrappers.javax.net.ssl.HostnameVerifier, ) -> None: ...
	@staticmethod
	def setDefaultSSLSocketFactory(arg0: javawrappers.javax.net.ssl.SSLSocketFactory, ) -> None: ...
	def getIfModifiedSince(self, ) -> Union[long, JLong]: ...
	def getPeerPrincipal(self, ) -> javawrappers.java.security.Principal: ...
	def getPermission(self, ) -> javawrappers.java.security.Permission: ...
	@staticmethod
	def getDefaultAllowUserInteraction() -> Union[int, JBoolean]: ...
	@overload
	def getDefaultUseCaches(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def getDefaultUseCaches(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getAllowUserInteraction(self, ) -> Union[int, JBoolean]: ...
	def getConnectTimeout(self, ) -> Union[int, JInt]: ...
	def getContentLength(self, ) -> Union[int, JInt]: ...
	def getInputStream(self, ) -> javawrappers.java.io.InputStream: ...
	def setAllowUserInteraction(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getRequestProperties(self, ) -> javawrappers.java.util.Map: ...
	def getURL(self, ) -> javawrappers.java.net.URL: ...
	@overload
	def getHeaderField(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getHeaderField(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getHeaderFields(self, ) -> javawrappers.java.util.Map: ...
	def getContentLengthLong(self, ) -> Union[long, JLong]: ...
	@staticmethod
	def setDefaultAllowUserInteraction(arg0: Union[int, JBoolean], ) -> None: ...
	def getContentType(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def setFixedLengthStreamingMode(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def setFixedLengthStreamingMode(self, arg0: Union[int, JInt], ) -> None: ...
	def getServerCertificates(self, ) -> JArray(javawrappers.java.security.cert.Certificate, 1): ...
	def usingProxy(self, ) -> Union[int, JBoolean]: ...
	@overload
	def setDefaultUseCaches(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	@staticmethod
	def setDefaultUseCaches(arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	def setDoOutput(self, arg0: Union[int, JBoolean], ) -> None: ...
	@staticmethod
	def guessContentTypeFromName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLastModified(self, ) -> Union[long, JLong]: ...
	def setRequestMethod(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setIfModifiedSince(self, arg0: Union[long, JLong], ) -> None: ...
	def setSSLSocketFactory(self, arg0: javawrappers.javax.net.ssl.SSLSocketFactory, ) -> None: ...
	def getLocalPrincipal(self, ) -> javawrappers.java.security.Principal: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getContent(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getContent(self, arg0: JArray(javawrappers.java.lang.Class, 1), ) -> javawrappers.java.lang.Object: ...
	def getReadTimeout(self, ) -> Union[int, JInt]: ...
	def setInstanceFollowRedirects(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getSSLSocketFactory(self, ) -> javawrappers.javax.net.ssl.SSLSocketFactory: ...
	def getResponseMessage(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getHeaderFieldInt(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getRequestProperty(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def guessContentTypeFromStream(arg0: javawrappers.java.io.InputStream, ) -> javawrappers.java.lang.String: ...
	def getErrorStream(self, ) -> javawrappers.java.io.InputStream: ...
	def setAuthenticator(self, arg0: javawrappers.java.net.Authenticator, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def setDefaultRequestProperty(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def getHeaderFieldDate(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	def verify(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.javax.net.ssl.SSLSession, ) -> Union[int, JBoolean]: ...
	def getDate(self, ) -> Union[long, JLong]: ...
	@staticmethod
	def getFileNameMap() -> javawrappers.java.net.FileNameMap: ...
	def setHostnameVerifier(self, arg0: javawrappers.javax.net.ssl.HostnameVerifier, ) -> None: ...
	def connect(self, ) -> None: ...
	def getHeaderFieldKey(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def setContentHandlerFactory(arg0: javawrappers.java.net.ContentHandlerFactory, ) -> None: ...
	def getContentEncoding(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getFollowRedirects() -> Union[int, JBoolean]: ...
	def getHostnameVerifier(self, ) -> javawrappers.javax.net.ssl.HostnameVerifier: ...
	def getUseCaches(self, ) -> Union[int, JBoolean]: ...
	def setDoInput(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getRequestMethod(self, ) -> javawrappers.java.lang.String: ...
	def addRequestProperty(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def setReadTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def getExpiration(self, ) -> Union[long, JLong]: ...
	def setChunkedStreamingMode(self, arg0: Union[int, JInt], ) -> None: ...
	@staticmethod
	def getDefaultRequestProperty(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getDefaultSSLSocketFactory() -> javawrappers.javax.net.ssl.SSLSocketFactory: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getResponseCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def setFileNameMap(arg0: javawrappers.java.net.FileNameMap, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOutputStream(self, ) -> javawrappers.java.io.OutputStream: ...
	def getDoOutput(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getDefaultHostnameVerifier() -> javawrappers.javax.net.ssl.HostnameVerifier: ...


class HandshakeCompletedEvent:
	def __init__(self, arg0: javawrappers.javax.net.ssl.SSLSocket, arg1: javawrappers.javax.net.ssl.SSLSession, ): ...
	def getCipherSuite(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLocalPrincipal(self, ) -> javawrappers.java.security.Principal: ...
	def notifyAll(self, ) -> None: ...
	def getLocalCertificates(self, ) -> JArray(javawrappers.java.security.cert.Certificate, 1): ...
	def notify(self, ) -> None: ...
	def getPeerCertificateChain(self, ) -> JArray(javawrappers.javax.security.cert.X509Certificate, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSource(self, ) -> javawrappers.java.lang.Object: ...
	def getSocket(self, ) -> javawrappers.javax.net.ssl.SSLSocket: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getPeerCertificates(self, ) -> JArray(javawrappers.java.security.cert.Certificate, 1): ...
	def getSession(self, ) -> javawrappers.javax.net.ssl.SSLSession: ...
	def getPeerPrincipal(self, ) -> javawrappers.java.security.Principal: ...


class X509TrustManager:
	def checkClientTrusted(self, arg0: JArray(javawrappers.java.security.cert.X509Certificate, 1), arg1: javawrappers.java.lang.String, ) -> None: ...
	def checkServerTrusted(self, arg0: JArray(javawrappers.java.security.cert.X509Certificate, 1), arg1: javawrappers.java.lang.String, ) -> None: ...
	def getAcceptedIssuers(self, ) -> JArray(javawrappers.java.security.cert.X509Certificate, 1): ...


class SSLSocket:
	def getInetAddress(self, ) -> javawrappers.java.net.InetAddress: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getSSLParameters(self, ) -> javawrappers.javax.net.ssl.SSLParameters: ...
	def isInputShutdown(self, ) -> Union[int, JBoolean]: ...
	def setWantClientAuth(self, arg0: Union[int, JBoolean], ) -> None: ...
	def removeHandshakeCompletedListener(self, arg0: javawrappers.javax.net.ssl.HandshakeCompletedListener, ) -> None: ...
	def setTcpNoDelay(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getOption(self, arg0: javawrappers.java.net.SocketOption, ) -> javawrappers.java.lang.Object: ...
	def getKeepAlive(self, ) -> Union[int, JBoolean]: ...
	def supportedOptions(self, ) -> javawrappers.java.util.Set: ...
	def bind(self, arg0: javawrappers.java.net.SocketAddress, ) -> None: ...
	def getApplicationProtocol(self, ) -> javawrappers.java.lang.String: ...
	def getChannel(self, ) -> javawrappers.java.nio.channels.SocketChannel: ...
	def getSoLinger(self, ) -> Union[int, JInt]: ...
	def getTcpNoDelay(self, ) -> Union[int, JBoolean]: ...
	def setUseClientMode(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setSoLinger(self, arg0: Union[int, JBoolean], arg1: Union[int, JInt], ) -> None: ...
	def getSoTimeout(self, ) -> Union[int, JInt]: ...
	def startHandshake(self, ) -> None: ...
	def setEnableSessionCreation(self, arg0: Union[int, JBoolean], ) -> None: ...
	def addHandshakeCompletedListener(self, arg0: javawrappers.javax.net.ssl.HandshakeCompletedListener, ) -> None: ...
	def getTrafficClass(self, ) -> Union[int, JInt]: ...
	def getHandshakeSession(self, ) -> javawrappers.javax.net.ssl.SSLSession: ...
	def setEnabledCipherSuites(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def setSoTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def setHandshakeApplicationProtocolSelector(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
	def getInputStream(self, ) -> javawrappers.java.io.InputStream: ...
	def shutdownInput(self, ) -> None: ...
	@staticmethod
	def setSocketImplFactory(arg0: javawrappers.java.net.SocketImplFactory, ) -> None: ...
	def setPerformancePreferences(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def sendUrgentData(self, arg0: Union[int, JInt], ) -> None: ...
	def getHandshakeApplicationProtocolSelector(self, ) -> javawrappers.java.util.function.BiFunction: ...
	def getSupportedCipherSuites(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def setNeedClientAuth(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getEnableSessionCreation(self, ) -> Union[int, JBoolean]: ...
	def getNeedClientAuth(self, ) -> Union[int, JBoolean]: ...
	def getSupportedProtocols(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getRemoteSocketAddress(self, ) -> javawrappers.java.net.SocketAddress: ...
	def getOOBInline(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setReceiveBufferSize(self, arg0: Union[int, JInt], ) -> None: ...
	def getLocalPort(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def isConnected(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getLocalAddress(self, ) -> javawrappers.java.net.InetAddress: ...
	def getHandshakeApplicationProtocol(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isOutputShutdown(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...
	@overload
	def connect(self, arg0: javawrappers.java.net.SocketAddress, ) -> None: ...
	@overload
	def connect(self, arg0: javawrappers.java.net.SocketAddress, arg1: Union[int, JInt], ) -> None: ...
	def setTrafficClass(self, arg0: Union[int, JInt], ) -> None: ...
	def setOOBInline(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setOption(self, arg0: javawrappers.java.net.SocketOption, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.net.Socket: ...
	def getEnabledProtocols(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def setReuseAddress(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getReceiveBufferSize(self, ) -> Union[int, JInt]: ...
	def getLocalSocketAddress(self, ) -> javawrappers.java.net.SocketAddress: ...
	def getReuseAddress(self, ) -> Union[int, JBoolean]: ...
	def setKeepAlive(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setEnabledProtocols(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def setSSLParameters(self, arg0: javawrappers.javax.net.ssl.SSLParameters, ) -> None: ...
	def shutdownOutput(self, ) -> None: ...
	def getUseClientMode(self, ) -> Union[int, JBoolean]: ...
	def getWantClientAuth(self, ) -> Union[int, JBoolean]: ...
	def getPort(self, ) -> Union[int, JInt]: ...
	def isClosed(self, ) -> Union[int, JBoolean]: ...
	def isBound(self, ) -> Union[int, JBoolean]: ...
	def getEnabledCipherSuites(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setSendBufferSize(self, arg0: Union[int, JInt], ) -> None: ...
	def getSendBufferSize(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOutputStream(self, ) -> javawrappers.java.io.OutputStream: ...
	def getSession(self, ) -> javawrappers.javax.net.ssl.SSLSession: ...


class KeyManager:


