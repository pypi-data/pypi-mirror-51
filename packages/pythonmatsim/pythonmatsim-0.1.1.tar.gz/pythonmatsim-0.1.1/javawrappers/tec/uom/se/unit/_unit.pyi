################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.javax.measure
import javawrappers.javax.measure.spi
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.tec.uom.se
import javawrappers.tec.uom.se.unit

from jpype.types import *
from typing import Union

from typing import overload

class BaseUnit:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.javax.measure.Dimension, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getSystemConverter(self, ) -> javawrappers.javax.measure.UnitConverter: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getConverterTo(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.UnitConverter: ...
	def notifyAll(self, ) -> None: ...
	def shift(self, arg0: Union[float, JDouble], ) -> javawrappers.javax.measure.Unit: ...
	def annotate(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.tec.uom.se.unit.AnnotatedUnit: ...
	@overload
	def compareTo(self, arg0: javawrappers.javax.measure.Unit, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	def asType(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.tec.uom.se.AbstractUnit: ...
	@overload
	def asType(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.javax.measure.Unit: ...
	def transform(self, arg0: javawrappers.javax.measure.UnitConverter, ) -> javawrappers.javax.measure.Unit: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def root(self, arg0: Union[int, JInt], ) -> javawrappers.javax.measure.Unit: ...
	def getDimension(self, ) -> javawrappers.javax.measure.Dimension: ...
	def pow(self, arg0: Union[int, JInt], ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def divide(self, arg0: Union[float, JDouble], ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def divide(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	def getSystemUnit(self, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def multiply(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def multiply(self, arg0: Union[float, JDouble], ) -> javawrappers.javax.measure.Unit: ...
	def isSystemUnit(self, ) -> Union[int, JBoolean]: ...
	def inverse(self, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def toSystemUnit(self, ) -> javawrappers.tec.uom.se.AbstractUnit: ...
	@overload
	def toSystemUnit(self, ) -> javawrappers.javax.measure.Unit: ...
	def alternate(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.measure.Unit: ...
	@staticmethod
	def parse(arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.javax.measure.Unit: ...
	def isCompatible(self, arg0: javawrappers.javax.measure.Unit, ) -> Union[int, JBoolean]: ...
	def getBaseUnits(self, ) -> javawrappers.java.util.Map: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSymbol(self, ) -> javawrappers.java.lang.String: ...
	def getConverterToAny(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.UnitConverter: ...


class AnnotatedUnit:
	def __init__(self, arg0: javawrappers.tec.uom.se.AbstractUnit, arg1: javawrappers.java.lang.String, ): ...
	def getSystemConverter(self, ) -> javawrappers.javax.measure.UnitConverter: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getConverterTo(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.UnitConverter: ...
	def getActualUnit(self, ) -> javawrappers.tec.uom.se.AbstractUnit: ...
	def notifyAll(self, ) -> None: ...
	def shift(self, arg0: Union[float, JDouble], ) -> javawrappers.javax.measure.Unit: ...
	def annotate(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.tec.uom.se.unit.AnnotatedUnit: ...
	@overload
	def compareTo(self, arg0: javawrappers.javax.measure.Unit, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	def asType(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.tec.uom.se.AbstractUnit: ...
	@overload
	def asType(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.javax.measure.Unit: ...
	def transform(self, arg0: javawrappers.javax.measure.UnitConverter, ) -> javawrappers.javax.measure.Unit: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def root(self, arg0: Union[int, JInt], ) -> javawrappers.javax.measure.Unit: ...
	def getDimension(self, ) -> javawrappers.javax.measure.Dimension: ...
	def pow(self, arg0: Union[int, JInt], ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def divide(self, arg0: Union[float, JDouble], ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def divide(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	def getSystemUnit(self, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def multiply(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def multiply(self, arg0: Union[float, JDouble], ) -> javawrappers.javax.measure.Unit: ...
	def isSystemUnit(self, ) -> Union[int, JBoolean]: ...
	def inverse(self, ) -> javawrappers.javax.measure.Unit: ...
	def toSystemUnit(self, ) -> javawrappers.javax.measure.Unit: ...
	def alternate(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.measure.Unit: ...
	@staticmethod
	def parse(arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.javax.measure.Unit: ...
	def isCompatible(self, arg0: javawrappers.javax.measure.Unit, ) -> Union[int, JBoolean]: ...
	def getBaseUnits(self, ) -> javawrappers.java.util.Map: ...
	def getAnnotation(self, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSymbol(self, ) -> javawrappers.java.lang.String: ...
	def getConverterToAny(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.UnitConverter: ...


class ProductUnit:
	@overload
	def __init__(self, arg0: javawrappers.javax.measure.Unit, ): ...
	@overload
	def __init__(self, ): ...
	class Element:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getPow(self, ) -> Union[int, JInt]: ...
		def getRoot(self, ) -> Union[int, JInt]: ...
		def getUnit(self, ) -> javawrappers.javax.measure.Unit: ...
		def notify(self, ) -> None: ...


	def getSystemConverter(self, ) -> javawrappers.javax.measure.UnitConverter: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getConverterTo(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.UnitConverter: ...
	def getUnitPow(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def shift(self, arg0: Union[float, JDouble], ) -> javawrappers.javax.measure.Unit: ...
	def annotate(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.tec.uom.se.unit.AnnotatedUnit: ...
	@overload
	def compareTo(self, arg0: javawrappers.javax.measure.Unit, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	def asType(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.tec.uom.se.AbstractUnit: ...
	@overload
	def asType(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.javax.measure.Unit: ...
	@staticmethod
	def getRootInstance(arg0: javawrappers.javax.measure.Unit, arg1: Union[int, JInt], ) -> javawrappers.javax.measure.Unit: ...
	def getUnitCount(self, ) -> Union[int, JInt]: ...
	def transform(self, arg0: javawrappers.javax.measure.UnitConverter, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getProductInstance(arg0: javawrappers.javax.measure.Unit, arg1: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	def root(self, arg0: Union[int, JInt], ) -> javawrappers.javax.measure.Unit: ...
	def getDimension(self, ) -> javawrappers.javax.measure.Dimension: ...
	def pow(self, arg0: Union[int, JInt], ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def divide(self, arg0: Union[float, JDouble], ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def divide(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	def getSystemUnit(self, ) -> javawrappers.javax.measure.Unit: ...
	def getUnitRoot(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getRoot(self, ) -> Union[int, JInt]: ...
	@overload
	def multiply(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def multiply(self, arg0: Union[float, JDouble], ) -> javawrappers.javax.measure.Unit: ...
	def isSystemUnit(self, ) -> Union[int, JBoolean]: ...
	def inverse(self, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def toSystemUnit(self, ) -> javawrappers.tec.uom.se.AbstractUnit: ...
	@overload
	def toSystemUnit(self, ) -> javawrappers.javax.measure.Unit: ...
	def alternate(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.measure.Unit: ...
	def getPow(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def parse(arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.javax.measure.Unit: ...
	def isCompatible(self, arg0: javawrappers.javax.measure.Unit, ) -> Union[int, JBoolean]: ...
	def getBaseUnits(self, ) -> javawrappers.java.util.Map: ...
	@staticmethod
	def getQuotientInstance(arg0: javawrappers.javax.measure.Unit, arg1: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getUnit(self, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def getUnit(self, arg0: Union[int, JInt], ) -> javawrappers.javax.measure.Unit: ...
	def getSymbol(self, ) -> javawrappers.java.lang.String: ...
	def getConverterToAny(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.UnitConverter: ...


class TransformedUnit:
	@overload
	def __init__(self, arg0: javawrappers.javax.measure.Unit, arg1: javawrappers.javax.measure.UnitConverter, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.javax.measure.Unit, arg2: javawrappers.javax.measure.Unit, arg3: javawrappers.javax.measure.UnitConverter, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.javax.measure.Unit, arg2: javawrappers.javax.measure.UnitConverter, ): ...
	def getSystemConverter(self, ) -> javawrappers.javax.measure.UnitConverter: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getConverterTo(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.UnitConverter: ...
	def notifyAll(self, ) -> None: ...
	def shift(self, arg0: Union[float, JDouble], ) -> javawrappers.javax.measure.Unit: ...
	def annotate(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.tec.uom.se.unit.AnnotatedUnit: ...
	@overload
	def compareTo(self, arg0: javawrappers.javax.measure.Unit, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	def asType(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.tec.uom.se.AbstractUnit: ...
	@overload
	def asType(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.javax.measure.Unit: ...
	def transform(self, arg0: javawrappers.javax.measure.UnitConverter, ) -> javawrappers.javax.measure.Unit: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def root(self, arg0: Union[int, JInt], ) -> javawrappers.javax.measure.Unit: ...
	def getDimension(self, ) -> javawrappers.javax.measure.Dimension: ...
	def pow(self, arg0: Union[int, JInt], ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def divide(self, arg0: Union[float, JDouble], ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def divide(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	def getSystemUnit(self, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def multiply(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def multiply(self, arg0: Union[float, JDouble], ) -> javawrappers.javax.measure.Unit: ...
	def isSystemUnit(self, ) -> Union[int, JBoolean]: ...
	def inverse(self, ) -> javawrappers.javax.measure.Unit: ...
	def alternate(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.measure.Unit: ...
	@staticmethod
	def parse(arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.javax.measure.Unit: ...
	def isCompatible(self, arg0: javawrappers.javax.measure.Unit, ) -> Union[int, JBoolean]: ...
	def getParentUnit(self, ) -> javawrappers.javax.measure.Unit: ...
	def getBaseUnits(self, ) -> javawrappers.java.util.Map: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSymbol(self, ) -> javawrappers.java.lang.String: ...
	def getConverter(self, ) -> javawrappers.javax.measure.UnitConverter: ...
	def getConverterToAny(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.UnitConverter: ...


class Units:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getUnits(self, arg0: javawrappers.javax.measure.Dimension, ) -> javawrappers.java.util.Set: ...
	@overload
	def getUnits(self, ) -> javawrappers.java.util.Set: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getInstance() -> javawrappers.javax.measure.spi.SystemOfUnits: ...
	def getUnit(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.javax.measure.Unit: ...
	def notify(self, ) -> None: ...


class MetricPrefix:
	YOTTA: MetricPrefix = ...
	ZETTA: MetricPrefix = ...
	EXA: MetricPrefix = ...
	PETA: MetricPrefix = ...
	TERA: MetricPrefix = ...
	GIGA: MetricPrefix = ...
	MEGA: MetricPrefix = ...
	KILO: MetricPrefix = ...
	HECTO: MetricPrefix = ...
	DEKA: MetricPrefix = ...
	DECI: MetricPrefix = ...
	CENTI: MetricPrefix = ...
	MILLI: MetricPrefix = ...
	MICRO: MetricPrefix = ...
	NANO: MetricPrefix = ...
	PICO: MetricPrefix = ...
	FEMTO: MetricPrefix = ...
	ATTO: MetricPrefix = ...
	ZEPTO: MetricPrefix = ...
	YOCTO: MetricPrefix = ...
	@staticmethod
	def PICO(arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def KILO(arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.tec.uom.se.unit.MetricPrefix, 1): ...
	@staticmethod
	def TERA(arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	@staticmethod
	def PETA(arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	@staticmethod
	def DEKA(arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def NANO(arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def FEMTO(arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	@staticmethod
	def ZEPTO(arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def MEGA(arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	@staticmethod
	def GIGA(arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	@staticmethod
	def YOTTA(arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	@staticmethod
	def ZETTA(arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	@staticmethod
	def YOCTO(arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.tec.uom.se.unit.MetricPrefix: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@staticmethod
	def EXA(arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	@staticmethod
	def ATTO(arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	@staticmethod
	def CENTI(arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	@staticmethod
	def MILLI(arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def HECTO(arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def DECI(arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def MICRO(arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	def getSymbol(self, ) -> javawrappers.java.lang.String: ...
	def getConverter(self, ) -> javawrappers.javax.measure.UnitConverter: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class AlternateUnit:
	def __init__(self, arg0: javawrappers.javax.measure.Unit, arg1: javawrappers.java.lang.String, ): ...
	def getSystemConverter(self, ) -> javawrappers.javax.measure.UnitConverter: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getConverterTo(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.UnitConverter: ...
	def notifyAll(self, ) -> None: ...
	def shift(self, arg0: Union[float, JDouble], ) -> javawrappers.javax.measure.Unit: ...
	def annotate(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.tec.uom.se.unit.AnnotatedUnit: ...
	@overload
	def compareTo(self, arg0: javawrappers.javax.measure.Unit, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	def asType(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.tec.uom.se.AbstractUnit: ...
	@overload
	def asType(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.javax.measure.Unit: ...
	def transform(self, arg0: javawrappers.javax.measure.UnitConverter, ) -> javawrappers.javax.measure.Unit: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def root(self, arg0: Union[int, JInt], ) -> javawrappers.javax.measure.Unit: ...
	def getDimension(self, ) -> javawrappers.javax.measure.Dimension: ...
	def pow(self, arg0: Union[int, JInt], ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def divide(self, arg0: Union[float, JDouble], ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def divide(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	def getSystemUnit(self, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def multiply(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def multiply(self, arg0: Union[float, JDouble], ) -> javawrappers.javax.measure.Unit: ...
	def isSystemUnit(self, ) -> Union[int, JBoolean]: ...
	def inverse(self, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def toSystemUnit(self, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def toSystemUnit(self, ) -> javawrappers.tec.uom.se.AbstractUnit: ...
	def alternate(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.measure.Unit: ...
	@staticmethod
	def parse(arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.javax.measure.Unit: ...
	def isCompatible(self, arg0: javawrappers.javax.measure.Unit, ) -> Union[int, JBoolean]: ...
	def getParentUnit(self, ) -> javawrappers.javax.measure.Unit: ...
	def getBaseUnits(self, ) -> javawrappers.java.util.Map: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSymbol(self, ) -> javawrappers.java.lang.String: ...
	def getConverterToAny(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.UnitConverter: ...


