################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.javax.measure
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.text
import javawrappers.tec.uom.se
import javawrappers.tec.uom.se.unit
import javawrappers.javax.measure.format
import javawrappers.tec.uom.se.format

from jpype.types import *
from typing import Union

from typing import overload

class UnitStyle:
	NAME: UnitStyle = ...
	SYMBOL: UnitStyle = ...
	LABEL: UnitStyle = ...
	SYMBOL_AND_LABEL: UnitStyle = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.tec.uom.se.format.UnitStyle: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.tec.uom.se.format.UnitStyle, 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class FormatBehavior:
	LOCALE_NEUTRAL: FormatBehavior = ...
	LOCALE_SENSITIVE: FormatBehavior = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.tec.uom.se.format.FormatBehavior: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.tec.uom.se.format.FormatBehavior, 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class SymbolMap:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getPrefix(self, arg0: javawrappers.javax.measure.UnitConverter, ) -> javawrappers.tec.uom.se.unit.MetricPrefix: ...
	@overload
	def getPrefix(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.tec.uom.se.unit.MetricPrefix: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def of(arg0: javawrappers.java.util.ResourceBundle, ) -> javawrappers.tec.uom.se.format.SymbolMap: ...
	def alias(self, arg0: javawrappers.javax.measure.Unit, arg1: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def label(self, arg0: javawrappers.tec.uom.se.unit.MetricPrefix, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def label(self, arg0: javawrappers.javax.measure.Unit, arg1: javawrappers.java.lang.String, ) -> None: ...
	def getUnit(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.measure.Unit: ...
	def notify(self, ) -> None: ...
	@overload
	def getSymbol(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.java.lang.String: ...
	@overload
	def getSymbol(self, arg0: javawrappers.tec.uom.se.unit.MetricPrefix, ) -> javawrappers.java.lang.String: ...


class SimpleUnitFormat:
	class ASCIIFormat:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		@overload
		def format(self, arg0: javawrappers.javax.measure.Unit, arg1: javawrappers.java.lang.Appendable, ) -> javawrappers.java.lang.Appendable: ...
		@overload
		def format(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
		@overload
		def format(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.java.lang.String: ...
		def parse(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.javax.measure.Unit: ...
		def label(self, arg0: javawrappers.javax.measure.Unit, arg1: javawrappers.java.lang.String, ) -> None: ...
		def parseProductUnit(self, arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.javax.measure.Unit: ...
		def notify(self, ) -> None: ...
		def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.javax.measure.Unit: ...
		def parseSingleUnit(self, arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.javax.measure.Unit: ...
		def isLocaleSensitive(self, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def alias(self, arg0: javawrappers.javax.measure.Unit, arg1: javawrappers.java.lang.String, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		@staticmethod
		def getInstance() -> javawrappers.tec.uom.se.format.SimpleUnitFormat: ...
		@overload
		@staticmethod
		def getInstance(arg0: javawrappers.tec.uom.se.format.SimpleUnitFormat.Flavor, ) -> javawrappers.tec.uom.se.format.SimpleUnitFormat: ...
		def isValidIdentifier(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...


	class DefaultFormat:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		@overload
		def format(self, arg0: javawrappers.javax.measure.Unit, arg1: javawrappers.java.lang.Appendable, ) -> javawrappers.java.lang.Appendable: ...
		@overload
		def format(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
		@overload
		def format(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.java.lang.String: ...
		def parse(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.javax.measure.Unit: ...
		def label(self, arg0: javawrappers.javax.measure.Unit, arg1: javawrappers.java.lang.String, ) -> None: ...
		def parseProductUnit(self, arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.javax.measure.Unit: ...
		def notify(self, ) -> None: ...
		def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.javax.measure.Unit: ...
		def parseSingleUnit(self, arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.javax.measure.Unit: ...
		def isLocaleSensitive(self, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def alias(self, arg0: javawrappers.javax.measure.Unit, arg1: javawrappers.java.lang.String, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		@staticmethod
		def getInstance() -> javawrappers.tec.uom.se.format.SimpleUnitFormat: ...
		@overload
		@staticmethod
		def getInstance(arg0: javawrappers.tec.uom.se.format.SimpleUnitFormat.Flavor, ) -> javawrappers.tec.uom.se.format.SimpleUnitFormat: ...
		def isValidIdentifier(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...


	class Exponent:
		def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Flavor:
		Default: SimpleUnitFormat.Flavor = ...
		ASCII: SimpleUnitFormat.Flavor = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.tec.uom.se.format.SimpleUnitFormat.Flavor: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.tec.uom.se.format.SimpleUnitFormat.Flavor, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.tec.uom.se.format.SimpleUnitFormat.Flavor: ...
	@staticmethod
	def values() -> JArray(javawrappers.tec.uom.se.format.SimpleUnitFormat.Flavor, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def format(self, arg0: javawrappers.javax.measure.Unit, arg1: javawrappers.java.lang.Appendable, ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def format(self, arg0: javawrappers.javax.measure.Unit, arg1: javawrappers.java.lang.Appendable, ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def format(self, arg0: javawrappers.javax.measure.Unit, arg1: javawrappers.java.lang.Appendable, ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def label(self, arg0: javawrappers.javax.measure.Unit, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def label(self, arg0: javawrappers.javax.measure.Unit, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def parseProductUnit(self, arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def parseProductUnit(self, arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.javax.measure.Unit: ...
	def notify(self, ) -> None: ...
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def parseSingleUnit(self, arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def parseSingleUnit(self, arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.javax.measure.Unit: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def isLocaleSensitive(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def alias(self, arg0: javawrappers.javax.measure.Unit, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def alias(self, arg0: javawrappers.javax.measure.Unit, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance() -> javawrappers.tec.uom.se.format.SimpleUnitFormat: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.tec.uom.se.format.SimpleUnitFormat.Flavor, ) -> javawrappers.tec.uom.se.format.SimpleUnitFormat: ...
	@overload
	def isValidIdentifier(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def isValidIdentifier(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def isValidIdentifier(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class AbstractUnitFormat:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isLocaleSensitive(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def format(self, arg0: javawrappers.javax.measure.Unit, arg1: javawrappers.java.lang.Appendable, ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def format(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def parse(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.javax.measure.Unit: ...
	def label(self, arg0: javawrappers.javax.measure.Unit, arg1: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...


class EBNFUnitFormat:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isLocaleSensitive(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def format(self, arg0: javawrappers.javax.measure.Unit, arg1: javawrappers.java.lang.Appendable, ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def format(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def label(self, arg0: javawrappers.javax.measure.Unit, arg1: javawrappers.java.lang.String, ) -> None: ...
	def parse(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	@staticmethod
	def getInstance() -> javawrappers.tec.uom.se.format.EBNFUnitFormat: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.tec.uom.se.format.SymbolMap, ) -> javawrappers.tec.uom.se.format.EBNFUnitFormat: ...
	def notify(self, ) -> None: ...


class QuantityFormat:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def formatToCharacterIterator(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.text.AttributedCharacterIterator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: javawrappers.tec.uom.se.AbstractQuantity, arg1: javawrappers.java.lang.StringBuilder, ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	def format(self, arg0: javawrappers.javax.measure.Quantity, arg1: javawrappers.java.lang.Appendable, ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.tec.uom.se.ComparableQuantity: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.tec.uom.se.ComparableQuantity: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.text.NumberFormat, arg1: javawrappers.javax.measure.format.UnitFormat, ) -> javawrappers.tec.uom.se.format.QuantityFormat: ...
	@overload
	@staticmethod
	def getInstance() -> javawrappers.tec.uom.se.format.QuantityFormat: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.tec.uom.se.format.FormatBehavior, ) -> javawrappers.tec.uom.se.format.QuantityFormat: ...
	def notify(self, ) -> None: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.javax.measure.Quantity: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Object: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...


class LocalUnitFormat:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isLocaleSensitive(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def format(self, arg0: javawrappers.javax.measure.Unit, arg1: javawrappers.java.lang.Appendable, ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def format(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def label(self, arg0: javawrappers.javax.measure.Unit, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.tec.uom.se.format.LocalUnitFormat: ...
	@overload
	@staticmethod
	def getInstance() -> javawrappers.tec.uom.se.format.LocalUnitFormat: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.tec.uom.se.format.SymbolMap, ) -> javawrappers.tec.uom.se.format.LocalUnitFormat: ...
	def notify(self, ) -> None: ...


