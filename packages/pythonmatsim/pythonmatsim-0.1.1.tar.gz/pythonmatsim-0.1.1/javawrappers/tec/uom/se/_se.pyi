################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.javax.measure
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.tec.uom.se
import javawrappers.tec.uom.se.unit
import javawrappers.tec.uom.se.format
import javawrappers.java.math

from jpype.types import *
from typing import Union

from typing import overload

class AbstractSystemOfUnits:
	def __init__(self, ): ...
	class Helper:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		@overload
		@staticmethod
		def addUnit(arg0: javawrappers.java.util.Set, arg1: javawrappers.javax.measure.Unit, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.tec.uom.se.format.UnitStyle, ) -> javawrappers.javax.measure.Unit: ...
		@overload
		@staticmethod
		def addUnit(arg0: javawrappers.java.util.Set, arg1: javawrappers.javax.measure.Unit, arg2: javawrappers.java.lang.String, ) -> javawrappers.javax.measure.Unit: ...
		@overload
		@staticmethod
		def addUnit(arg0: javawrappers.java.util.Set, arg1: javawrappers.javax.measure.Unit, arg2: javawrappers.java.lang.String, arg3: javawrappers.tec.uom.se.format.UnitStyle, ) -> javawrappers.javax.measure.Unit: ...
		@overload
		@staticmethod
		def addUnit(arg0: javawrappers.java.util.Set, arg1: javawrappers.javax.measure.Unit, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> javawrappers.javax.measure.Unit: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getUnits(self, arg0: javawrappers.javax.measure.Dimension, ) -> javawrappers.java.util.Set: ...
	@overload
	def getUnits(self, ) -> javawrappers.java.util.Set: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getUnit(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.javax.measure.Unit: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def addUnit(arg0: javawrappers.java.util.Set, arg1: javawrappers.javax.measure.Unit, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.tec.uom.se.format.UnitStyle, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	@staticmethod
	def addUnit(arg0: javawrappers.java.util.Set, arg1: javawrappers.javax.measure.Unit, arg2: javawrappers.java.lang.String, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	@staticmethod
	def addUnit(arg0: javawrappers.java.util.Set, arg1: javawrappers.javax.measure.Unit, arg2: javawrappers.java.lang.String, arg3: javawrappers.tec.uom.se.format.UnitStyle, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	@staticmethod
	def addUnit(arg0: javawrappers.java.util.Set, arg1: javawrappers.javax.measure.Unit, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> javawrappers.javax.measure.Unit: ...


class ComparableQuantity:
	@overload
	def add(self, arg0: javawrappers.javax.measure.Quantity, ) -> javawrappers.javax.measure.Quantity: ...
	@overload
	def add(self, arg0: javawrappers.javax.measure.Quantity, ) -> javawrappers.tec.uom.se.ComparableQuantity: ...
	def isLessThan(self, arg0: javawrappers.javax.measure.Quantity, ) -> Union[int, JBoolean]: ...
	@overload
	def inverse(self, ) -> javawrappers.javax.measure.Quantity: ...
	@overload
	def inverse(self, ) -> javawrappers.tec.uom.se.ComparableQuantity: ...
	@overload
	def inverse(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.tec.uom.se.ComparableQuantity: ...
	@overload
	def subtract(self, arg0: javawrappers.javax.measure.Quantity, ) -> javawrappers.javax.measure.Quantity: ...
	@overload
	def subtract(self, arg0: javawrappers.javax.measure.Quantity, ) -> javawrappers.tec.uom.se.ComparableQuantity: ...
	def isGreaterThan(self, arg0: javawrappers.javax.measure.Quantity, ) -> Union[int, JBoolean]: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def asType(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.javax.measure.Quantity: ...
	@overload
	def asType(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.tec.uom.se.ComparableQuantity: ...
	def isEquivalentTo(self, arg0: javawrappers.javax.measure.Quantity, ) -> Union[int, JBoolean]: ...
	def getValue(self, ) -> javawrappers.java.lang.Number: ...
	def isLessThanOrEqualTo(self, arg0: javawrappers.javax.measure.Quantity, ) -> Union[int, JBoolean]: ...
	def isGreaterThanOrEqualTo(self, arg0: javawrappers.javax.measure.Quantity, ) -> Union[int, JBoolean]: ...
	@overload
	def divide(self, arg0: javawrappers.javax.measure.Quantity, ) -> javawrappers.tec.uom.se.ComparableQuantity: ...
	@overload
	def divide(self, arg0: javawrappers.javax.measure.Quantity, ) -> javawrappers.javax.measure.Quantity: ...
	@overload
	def divide(self, arg0: javawrappers.java.lang.Number, ) -> javawrappers.javax.measure.Quantity: ...
	@overload
	def divide(self, arg0: javawrappers.java.lang.Number, ) -> javawrappers.tec.uom.se.ComparableQuantity: ...
	@overload
	def divide(self, arg0: javawrappers.javax.measure.Quantity, arg1: javawrappers.java.lang.Class, ) -> javawrappers.tec.uom.se.ComparableQuantity: ...
	@overload
	def to(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Quantity: ...
	@overload
	def to(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.tec.uom.se.ComparableQuantity: ...
	def getUnit(self, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def multiply(self, arg0: javawrappers.java.lang.Number, ) -> javawrappers.javax.measure.Quantity: ...
	@overload
	def multiply(self, arg0: javawrappers.java.lang.Number, ) -> javawrappers.tec.uom.se.ComparableQuantity: ...
	@overload
	def multiply(self, arg0: javawrappers.javax.measure.Quantity, ) -> javawrappers.tec.uom.se.ComparableQuantity: ...
	@overload
	def multiply(self, arg0: javawrappers.javax.measure.Quantity, ) -> javawrappers.javax.measure.Quantity: ...
	@overload
	def multiply(self, arg0: javawrappers.javax.measure.Quantity, arg1: javawrappers.java.lang.Class, ) -> javawrappers.tec.uom.se.ComparableQuantity: ...


class AbstractQuantity:
	class Equalizer:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def hasEquality(arg0: javawrappers.java.lang.Number, arg1: javawrappers.java.lang.Number, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def toBigDecimal(arg0: javawrappers.java.lang.Number, ) -> javawrappers.java.math.BigDecimal: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def hasEquality(arg0: javawrappers.java.lang.Number, arg1: javawrappers.java.lang.Number, ) -> Union[int, JBoolean]: ...
	def decimalValue(self, arg0: javawrappers.javax.measure.Unit, arg1: javawrappers.java.math.MathContext, ) -> javawrappers.java.math.BigDecimal: ...
	def isBig(self, ) -> Union[int, JBoolean]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.javax.measure.Quantity, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	def asType(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.javax.measure.Quantity: ...
	@overload
	def asType(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.tec.uom.se.ComparableQuantity: ...
	def isEquivalentTo(self, arg0: javawrappers.javax.measure.Quantity, ) -> Union[int, JBoolean]: ...
	def isGreaterThanOrEqualTo(self, arg0: javawrappers.javax.measure.Quantity, ) -> Union[int, JBoolean]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def divide(self, arg0: javawrappers.javax.measure.Quantity, ) -> javawrappers.tec.uom.se.ComparableQuantity: ...
	@overload
	def divide(self, arg0: javawrappers.javax.measure.Quantity, ) -> javawrappers.javax.measure.Quantity: ...
	@overload
	def divide(self, arg0: javawrappers.java.lang.Number, ) -> javawrappers.javax.measure.Quantity: ...
	@overload
	def divide(self, arg0: javawrappers.java.lang.Number, ) -> javawrappers.tec.uom.se.ComparableQuantity: ...
	@overload
	def divide(self, arg0: javawrappers.javax.measure.Quantity, arg1: javawrappers.java.lang.Class, ) -> javawrappers.tec.uom.se.ComparableQuantity: ...
	@overload
	def multiply(self, arg0: javawrappers.java.lang.Number, ) -> javawrappers.javax.measure.Quantity: ...
	@overload
	def multiply(self, arg0: javawrappers.java.lang.Number, ) -> javawrappers.tec.uom.se.ComparableQuantity: ...
	@overload
	def multiply(self, arg0: javawrappers.javax.measure.Quantity, ) -> javawrappers.tec.uom.se.ComparableQuantity: ...
	@overload
	def multiply(self, arg0: javawrappers.javax.measure.Quantity, ) -> javawrappers.javax.measure.Quantity: ...
	@overload
	def multiply(self, arg0: javawrappers.javax.measure.Quantity, arg1: javawrappers.java.lang.Class, ) -> javawrappers.tec.uom.se.ComparableQuantity: ...
	@overload
	def add(self, arg0: javawrappers.javax.measure.Quantity, ) -> javawrappers.javax.measure.Quantity: ...
	@overload
	def add(self, arg0: javawrappers.javax.measure.Quantity, ) -> javawrappers.tec.uom.se.ComparableQuantity: ...
	def isLessThan(self, arg0: javawrappers.javax.measure.Quantity, ) -> Union[int, JBoolean]: ...
	@overload
	def inverse(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.tec.uom.se.ComparableQuantity: ...
	@overload
	def inverse(self, ) -> javawrappers.javax.measure.Quantity: ...
	@overload
	def inverse(self, ) -> javawrappers.tec.uom.se.ComparableQuantity: ...
	def intValue(self, arg0: javawrappers.javax.measure.Unit, ) -> Union[int, JInt]: ...
	@overload
	def subtract(self, arg0: javawrappers.javax.measure.Quantity, ) -> javawrappers.javax.measure.Quantity: ...
	@overload
	def subtract(self, arg0: javawrappers.javax.measure.Quantity, ) -> javawrappers.tec.uom.se.ComparableQuantity: ...
	def toSI(self, ) -> javawrappers.javax.measure.Quantity: ...
	def isGreaterThan(self, arg0: javawrappers.javax.measure.Quantity, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def toBigDecimal(arg0: javawrappers.java.lang.Number, ) -> javawrappers.java.math.BigDecimal: ...
	@staticmethod
	def parse(arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.javax.measure.Quantity: ...
	def doubleValue(self, arg0: javawrappers.javax.measure.Unit, ) -> Union[float, JDouble]: ...
	@overload
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getValue(self, ) -> javawrappers.java.lang.Number: ...
	def isLessThanOrEqualTo(self, arg0: javawrappers.javax.measure.Quantity, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.tec.uom.se.AbstractQuantity, arg1: Union[float, JDouble], arg2: javawrappers.javax.measure.Unit, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def to(self, arg0: javawrappers.javax.measure.Unit, arg1: javawrappers.java.math.MathContext, ) -> javawrappers.javax.measure.Quantity: ...
	@overload
	def to(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Quantity: ...
	@overload
	def to(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.tec.uom.se.ComparableQuantity: ...
	def getUnit(self, ) -> javawrappers.javax.measure.Unit: ...


class AbstractUnit:
	def getSystemConverter(self, ) -> javawrappers.javax.measure.UnitConverter: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getConverterTo(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.UnitConverter: ...
	def notifyAll(self, ) -> None: ...
	def shift(self, arg0: Union[float, JDouble], ) -> javawrappers.javax.measure.Unit: ...
	def annotate(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.tec.uom.se.unit.AnnotatedUnit: ...
	@overload
	def compareTo(self, arg0: javawrappers.javax.measure.Unit, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	def asType(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.tec.uom.se.AbstractUnit: ...
	@overload
	def asType(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.javax.measure.Unit: ...
	def transform(self, arg0: javawrappers.javax.measure.UnitConverter, ) -> javawrappers.javax.measure.Unit: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def root(self, arg0: Union[int, JInt], ) -> javawrappers.javax.measure.Unit: ...
	def getDimension(self, ) -> javawrappers.javax.measure.Dimension: ...
	def pow(self, arg0: Union[int, JInt], ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def divide(self, arg0: Union[float, JDouble], ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def divide(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	def getSystemUnit(self, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def multiply(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Unit: ...
	@overload
	def multiply(self, arg0: Union[float, JDouble], ) -> javawrappers.javax.measure.Unit: ...
	def isSystemUnit(self, ) -> Union[int, JBoolean]: ...
	def inverse(self, ) -> javawrappers.javax.measure.Unit: ...
	def alternate(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.javax.measure.Unit: ...
	@staticmethod
	def parse(arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.javax.measure.Unit: ...
	def isCompatible(self, arg0: javawrappers.javax.measure.Unit, ) -> Union[int, JBoolean]: ...
	def getBaseUnits(self, ) -> javawrappers.java.util.Map: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSymbol(self, ) -> javawrappers.java.lang.String: ...
	def getConverterToAny(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.UnitConverter: ...


class AbstractConverter:
	class Pair:
		def __init__(self, arg0: javawrappers.javax.measure.UnitConverter, arg1: javawrappers.javax.measure.UnitConverter, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def inverse(self, ) -> javawrappers.tec.uom.se.AbstractConverter: ...
		@overload
		def inverse(self, ) -> javawrappers.javax.measure.UnitConverter: ...
		@overload
		def inverse(self, ) -> javawrappers.tec.uom.se.AbstractConverter.Pair: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def concatenate(self, arg0: javawrappers.javax.measure.UnitConverter, ) -> javawrappers.javax.measure.UnitConverter: ...
		@overload
		def concatenate(self, arg0: javawrappers.tec.uom.se.AbstractConverter, ) -> javawrappers.tec.uom.se.AbstractConverter: ...
		def notifyAll(self, ) -> None: ...
		def isIdentity(self, ) -> Union[int, JBoolean]: ...
		@overload
		def convert(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def convert(self, arg0: javawrappers.java.math.BigDecimal, arg1: javawrappers.java.math.MathContext, ) -> javawrappers.java.math.BigDecimal: ...
		@overload
		def convert(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
		@overload
		def convert(self, arg0: javawrappers.java.lang.Number, ) -> javawrappers.java.lang.Number: ...
		def notify(self, ) -> None: ...
		def getRight(self, ) -> javawrappers.javax.measure.UnitConverter: ...
		def getConversionSteps(self, ) -> javawrappers.java.util.List: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def isLinear(self, ) -> Union[int, JBoolean]: ...
		def getLeft(self, ) -> javawrappers.javax.measure.UnitConverter: ...


	class Identity:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def inverse(self, ) -> javawrappers.tec.uom.se.AbstractConverter: ...
		@overload
		def inverse(self, ) -> javawrappers.javax.measure.UnitConverter: ...
		@overload
		def inverse(self, ) -> javawrappers.tec.uom.se.AbstractConverter.Identity: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def concatenate(self, arg0: javawrappers.javax.measure.UnitConverter, ) -> javawrappers.javax.measure.UnitConverter: ...
		@overload
		def concatenate(self, arg0: javawrappers.tec.uom.se.AbstractConverter, ) -> javawrappers.tec.uom.se.AbstractConverter: ...
		def getConversionSteps(self, ) -> javawrappers.java.util.List: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def isIdentity(self, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def convert(self, arg0: javawrappers.java.lang.Number, ) -> javawrappers.java.lang.Number: ...
		@overload
		def convert(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def convert(self, arg0: javawrappers.java.math.BigDecimal, arg1: javawrappers.java.math.MathContext, ) -> javawrappers.java.math.BigDecimal: ...
		@overload
		def convert(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
		def isLinear(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def inverse(self, ) -> javawrappers.tec.uom.se.AbstractConverter: ...
	@overload
	def inverse(self, ) -> javawrappers.javax.measure.UnitConverter: ...
	@overload
	def inverse(self, ) -> javawrappers.tec.uom.se.AbstractConverter.Identity: ...
	@overload
	def inverse(self, ) -> javawrappers.tec.uom.se.AbstractConverter: ...
	@overload
	def inverse(self, ) -> javawrappers.javax.measure.UnitConverter: ...
	@overload
	def inverse(self, ) -> javawrappers.tec.uom.se.AbstractConverter.Pair: ...
	@overload
	def inverse(self, ) -> javawrappers.javax.measure.UnitConverter: ...
	@overload
	def inverse(self, ) -> javawrappers.tec.uom.se.AbstractConverter: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def concatenate(self, arg0: javawrappers.javax.measure.UnitConverter, ) -> javawrappers.javax.measure.UnitConverter: ...
	@overload
	def concatenate(self, arg0: javawrappers.javax.measure.UnitConverter, ) -> javawrappers.javax.measure.UnitConverter: ...
	@overload
	def concatenate(self, arg0: javawrappers.tec.uom.se.AbstractConverter, ) -> javawrappers.tec.uom.se.AbstractConverter: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	@overload
	def convert(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def convert(self, arg0: javawrappers.java.math.BigDecimal, arg1: javawrappers.java.math.MathContext, ) -> javawrappers.java.math.BigDecimal: ...
	@overload
	def convert(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def convert(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def convert(self, arg0: javawrappers.java.lang.Number, ) -> javawrappers.java.lang.Number: ...
	@overload
	def convert(self, arg0: javawrappers.java.math.BigDecimal, arg1: javawrappers.java.math.MathContext, ) -> javawrappers.java.math.BigDecimal: ...
	@overload
	def convert(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def convert(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def convert(self, arg0: javawrappers.java.math.BigDecimal, arg1: javawrappers.java.math.MathContext, ) -> javawrappers.java.math.BigDecimal: ...
	@overload
	def convert(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def getRight(self, ) -> javawrappers.javax.measure.UnitConverter: ...
	@overload
	def getConversionSteps(self, ) -> javawrappers.java.util.List: ...
	@overload
	def getConversionSteps(self, ) -> javawrappers.java.util.List: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def isLinear(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isLinear(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isLinear(self, ) -> Union[int, JBoolean]: ...
	def getLeft(self, ) -> javawrappers.javax.measure.UnitConverter: ...


