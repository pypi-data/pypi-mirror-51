################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.javax.measure
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.tec.uom.se
import javawrappers.java.util.stream
import javawrappers.java.util.function
import javawrappers.java.math
import javawrappers.tec.uom.se.function

from jpype.types import *
from typing import Union

from typing import overload

class PiMultiplierConverter:
	def __init__(self, ): ...
	class Pi:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def pi(arg0: Union[int, JInt], ) -> javawrappers.java.math.BigDecimal: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def inverse(self, ) -> javawrappers.javax.measure.UnitConverter: ...
	@overload
	def inverse(self, ) -> javawrappers.tec.uom.se.AbstractConverter: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def concatenate(self, arg0: javawrappers.javax.measure.UnitConverter, ) -> javawrappers.javax.measure.UnitConverter: ...
	@overload
	def concatenate(self, arg0: javawrappers.tec.uom.se.AbstractConverter, ) -> javawrappers.tec.uom.se.AbstractConverter: ...
	def notifyAll(self, ) -> None: ...
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	@overload
	def convert(self, arg0: javawrappers.java.lang.Number, ) -> javawrappers.java.lang.Number: ...
	@overload
	def convert(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def convert(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def convert(self, arg0: javawrappers.java.math.BigDecimal, arg1: javawrappers.java.math.MathContext, ) -> javawrappers.java.math.BigDecimal: ...
	def notify(self, ) -> None: ...
	@overload
	def getValue(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	def getConversionSteps(self, ) -> javawrappers.java.util.List: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def pi(arg0: Union[int, JInt], ) -> javawrappers.java.math.BigDecimal: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isLinear(self, ) -> Union[int, JBoolean]: ...


class AddConverter:
	def __init__(self, arg0: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def inverse(self, ) -> javawrappers.tec.uom.se.AbstractConverter: ...
	@overload
	def inverse(self, ) -> javawrappers.javax.measure.UnitConverter: ...
	@overload
	def inverse(self, ) -> javawrappers.tec.uom.se.function.AddConverter: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def concatenate(self, arg0: javawrappers.javax.measure.UnitConverter, ) -> javawrappers.javax.measure.UnitConverter: ...
	@overload
	def concatenate(self, arg0: javawrappers.tec.uom.se.AbstractConverter, ) -> javawrappers.tec.uom.se.AbstractConverter: ...
	def notifyAll(self, ) -> None: ...
	def getOffset(self, ) -> Union[float, JDouble]: ...
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	@overload
	def convert(self, arg0: javawrappers.java.lang.Number, ) -> javawrappers.java.lang.Number: ...
	@overload
	def convert(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def convert(self, arg0: javawrappers.java.math.BigDecimal, arg1: javawrappers.java.math.MathContext, ) -> javawrappers.java.math.BigDecimal: ...
	@overload
	def convert(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	@overload
	def getValue(self, ) -> javawrappers.java.lang.Double: ...
	@overload
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	def getConversionSteps(self, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isLinear(self, ) -> Union[int, JBoolean]: ...


class QuantityFunctions:
	@staticmethod
	def sortNumberDesc() -> javawrappers.java.util.Comparator: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def groupByUnit() -> javawrappers.java.util.function.Function: ...
	@staticmethod
	def sortNaturalDesc() -> javawrappers.java.util.Comparator: ...
	@staticmethod
	def max() -> javawrappers.java.util.function.BinaryOperator: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def sortNumber() -> javawrappers.java.util.Comparator: ...
	@overload
	@staticmethod
	def isGreaterThan(arg0: javawrappers.javax.measure.Quantity, ) -> javawrappers.java.util.function.Predicate: ...
	@overload
	@staticmethod
	def isGreaterThan(arg0: javawrappers.java.lang.Number, ) -> javawrappers.java.util.function.Predicate: ...
	@staticmethod
	def summarizeQuantity(arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.java.util.stream.Collector: ...
	@overload
	@staticmethod
	def sum(arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.java.util.function.BinaryOperator: ...
	@overload
	@staticmethod
	def sum() -> javawrappers.java.util.function.BinaryOperator: ...
	@staticmethod
	def fiterByExcludingUnit(*arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.java.util.function.Predicate: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def isLesserThan(arg0: javawrappers.javax.measure.Quantity, ) -> javawrappers.java.util.function.Predicate: ...
	@overload
	@staticmethod
	def isLesserThan(arg0: javawrappers.java.lang.Number, ) -> javawrappers.java.util.function.Predicate: ...
	@staticmethod
	def sortNatural() -> javawrappers.java.util.Comparator: ...
	@staticmethod
	def sortSymbolDesc() -> javawrappers.java.util.Comparator: ...
	@staticmethod
	def min() -> javawrappers.java.util.function.BinaryOperator: ...
	@overload
	@staticmethod
	def isGreaterThanOrEqualTo(arg0: javawrappers.java.lang.Number, ) -> javawrappers.java.util.function.Predicate: ...
	@overload
	@staticmethod
	def isGreaterThanOrEqualTo(arg0: javawrappers.javax.measure.Quantity, ) -> javawrappers.java.util.function.Predicate: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def fiterByUnit(*arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.java.util.function.Predicate: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def sortSymbol() -> javawrappers.java.util.Comparator: ...
	@overload
	@staticmethod
	def isBetween(arg0: javawrappers.javax.measure.Quantity, arg1: javawrappers.javax.measure.Quantity, ) -> javawrappers.java.util.function.Predicate: ...
	@overload
	@staticmethod
	def isBetween(arg0: javawrappers.java.lang.Number, arg1: javawrappers.java.lang.Number, ) -> javawrappers.java.util.function.Predicate: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def isLesserThanOrEqualTo(arg0: javawrappers.java.lang.Number, ) -> javawrappers.java.util.function.Predicate: ...
	@overload
	@staticmethod
	def isLesserThanOrEqualTo(arg0: javawrappers.javax.measure.Quantity, ) -> javawrappers.java.util.function.Predicate: ...


class NaturalOrder:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def compare(self, arg0: javawrappers.javax.measure.Quantity, arg1: javawrappers.javax.measure.Quantity, ) -> Union[int, JInt]: ...
	@overload
	def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
	def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def reversed(self, ) -> javawrappers.java.util.Comparator: ...
	def notify(self, ) -> None: ...


class MultiplyConverter:
	def __init__(self, arg0: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def inverse(self, ) -> javawrappers.tec.uom.se.AbstractConverter: ...
	@overload
	def inverse(self, ) -> javawrappers.javax.measure.UnitConverter: ...
	@overload
	def inverse(self, ) -> javawrappers.tec.uom.se.function.MultiplyConverter: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def concatenate(self, arg0: javawrappers.javax.measure.UnitConverter, ) -> javawrappers.javax.measure.UnitConverter: ...
	@overload
	def concatenate(self, arg0: javawrappers.tec.uom.se.AbstractConverter, ) -> javawrappers.tec.uom.se.AbstractConverter: ...
	def notifyAll(self, ) -> None: ...
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	@overload
	def convert(self, arg0: javawrappers.java.lang.Number, ) -> javawrappers.java.lang.Number: ...
	@overload
	def convert(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def convert(self, arg0: javawrappers.java.math.BigDecimal, arg1: javawrappers.java.math.MathContext, ) -> javawrappers.java.math.BigDecimal: ...
	@overload
	def convert(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	def getFactor(self, ) -> Union[float, JDouble]: ...
	@overload
	def getValue(self, ) -> javawrappers.java.lang.Double: ...
	@overload
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	def getConversionSteps(self, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isLinear(self, ) -> Union[int, JBoolean]: ...


class RationalConverter:
	@overload
	def __init__(self, arg0: javawrappers.java.math.BigInteger, arg1: javawrappers.java.math.BigInteger, ): ...
	@overload
	def __init__(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def inverse(self, ) -> javawrappers.tec.uom.se.AbstractConverter: ...
	@overload
	def inverse(self, ) -> javawrappers.javax.measure.UnitConverter: ...
	@overload
	def inverse(self, ) -> javawrappers.tec.uom.se.function.RationalConverter: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def concatenate(self, arg0: javawrappers.javax.measure.UnitConverter, ) -> javawrappers.javax.measure.UnitConverter: ...
	@overload
	def concatenate(self, arg0: javawrappers.tec.uom.se.AbstractConverter, ) -> javawrappers.tec.uom.se.AbstractConverter: ...
	def notifyAll(self, ) -> None: ...
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	@overload
	def convert(self, arg0: javawrappers.java.math.BigDecimal, arg1: javawrappers.java.math.MathContext, ) -> javawrappers.java.math.BigDecimal: ...
	@overload
	def convert(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def convert(self, arg0: javawrappers.java.lang.Number, ) -> javawrappers.java.lang.Number: ...
	@overload
	def convert(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getAsDouble(self, ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	@overload
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getValue(self, ) -> javawrappers.java.lang.Double: ...
	def getDivisor(self, ) -> javawrappers.java.math.BigInteger: ...
	def getConversionSteps(self, ) -> javawrappers.java.util.List: ...
	def getDividend(self, ) -> javawrappers.java.math.BigInteger: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def of(arg0: javawrappers.java.math.BigInteger, arg1: javawrappers.java.math.BigInteger, ) -> javawrappers.tec.uom.se.function.RationalConverter: ...
	@overload
	@staticmethod
	def of(arg0: Union[float, JDouble], arg1: Union[float, JDouble], ) -> javawrappers.tec.uom.se.function.RationalConverter: ...
	@overload
	@staticmethod
	def of(arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.tec.uom.se.function.RationalConverter: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Double: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isLinear(self, ) -> Union[int, JBoolean]: ...


class Converter:
	def convert(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class ExpConverter:
	def __init__(self, arg0: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def inverse(self, ) -> javawrappers.tec.uom.se.AbstractConverter: ...
	@overload
	def inverse(self, ) -> javawrappers.javax.measure.UnitConverter: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def concatenate(self, arg0: javawrappers.javax.measure.UnitConverter, ) -> javawrappers.javax.measure.UnitConverter: ...
	@overload
	def concatenate(self, arg0: javawrappers.tec.uom.se.AbstractConverter, ) -> javawrappers.tec.uom.se.AbstractConverter: ...
	def notifyAll(self, ) -> None: ...
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	@overload
	def convert(self, arg0: javawrappers.java.lang.Number, ) -> javawrappers.java.lang.Number: ...
	@overload
	def convert(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def convert(self, arg0: javawrappers.java.math.BigDecimal, arg1: javawrappers.java.math.MathContext, ) -> javawrappers.java.math.BigDecimal: ...
	@overload
	def convert(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def notify(self, ) -> None: ...
	@overload
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getValue(self, ) -> javawrappers.java.lang.String: ...
	def getConversionSteps(self, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getBase(self, ) -> Union[float, JDouble]: ...
	def isLinear(self, ) -> Union[int, JBoolean]: ...


class LogConverter:
	def __init__(self, arg0: Union[float, JDouble], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def inverse(self, ) -> javawrappers.tec.uom.se.AbstractConverter: ...
	@overload
	def inverse(self, ) -> javawrappers.javax.measure.UnitConverter: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def concatenate(self, arg0: javawrappers.javax.measure.UnitConverter, ) -> javawrappers.javax.measure.UnitConverter: ...
	@overload
	def concatenate(self, arg0: javawrappers.tec.uom.se.AbstractConverter, ) -> javawrappers.tec.uom.se.AbstractConverter: ...
	def notifyAll(self, ) -> None: ...
	def isIdentity(self, ) -> Union[int, JBoolean]: ...
	@overload
	def convert(self, arg0: javawrappers.java.math.BigDecimal, arg1: javawrappers.java.math.MathContext, ) -> javawrappers.java.math.BigDecimal: ...
	@overload
	def convert(self, arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def convert(self, arg0: javawrappers.java.lang.Number, ) -> javawrappers.java.lang.Number: ...
	@overload
	def convert(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	@overload
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getValue(self, ) -> javawrappers.java.lang.String: ...
	def getConversionSteps(self, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getBase(self, ) -> Union[float, JDouble]: ...
	def isLinear(self, ) -> Union[int, JBoolean]: ...


class QuantityConverter:
	def to(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Quantity: ...


class QuantitySummaryStatistics:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getMax(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Quantity: ...
	@overload
	def getMax(self, ) -> javawrappers.javax.measure.Quantity: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getAverage(self, ) -> javawrappers.javax.measure.Quantity: ...
	@overload
	def getAverage(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Quantity: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.javax.measure.Quantity, ) -> None: ...
	@overload
	def getMin(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Quantity: ...
	@overload
	def getMin(self, ) -> javawrappers.javax.measure.Quantity: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def to(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.tec.uom.se.function.QuantitySummaryStatistics: ...
	def getCount(self, ) -> Union[long, JLong]: ...
	@overload
	def getSum(self, ) -> javawrappers.javax.measure.Quantity: ...
	@overload
	def getSum(self, arg0: javawrappers.javax.measure.Unit, ) -> javawrappers.javax.measure.Quantity: ...
	def combine(self, arg0: javawrappers.tec.uom.se.function.QuantitySummaryStatistics, ) -> javawrappers.tec.uom.se.function.QuantitySummaryStatistics: ...


