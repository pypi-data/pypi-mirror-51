################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.sun.invoke.util
import javawrappers.java.lang.invoke

from jpype.types import *
from typing import Union

from typing import overload

class BytecodeDescriptor:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def unparseMethod(arg0: javawrappers.java.lang.Class, arg1: JArray(javawrappers.java.lang.Class, 1), ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def unparseMethod(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.List, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def parseMethod(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.List: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def unparse(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def unparse(arg0: javawrappers.java.lang.invoke.MethodType, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def unparse(arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Wrapper:
	BOOLEAN: Wrapper = ...
	BYTE: Wrapper = ...
	SHORT: Wrapper = ...
	CHAR: Wrapper = ...
	INT: Wrapper = ...
	LONG: Wrapper = ...
	FLOAT: Wrapper = ...
	DOUBLE: Wrapper = ...
	OBJECT: Wrapper = ...
	VOID: Wrapper = ...
	class Format:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def wrapperSimpleName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isSigned(self, ) -> Union[int, JBoolean]: ...
	def isIntegral(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.sun.invoke.util.Wrapper, 1): ...
	@staticmethod
	def isWrapperType(arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def asWrapperType(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Class: ...
	def detailString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def convert(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def forWrapperType(arg0: javawrappers.java.lang.Class, ) -> javawrappers.sun.invoke.util.Wrapper: ...
	@overload
	def zero(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def zero(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def cast(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...
	def isDoubleWord(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isSubwordOrInt(self, ) -> Union[int, JBoolean]: ...
	def isFloating(self, ) -> Union[int, JBoolean]: ...
	def makeArray(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	def wrapperType(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wrapperType(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Class: ...
	def primitiveType(self, ) -> javawrappers.java.lang.Class: ...
	def isSingleWord(self, ) -> Union[int, JBoolean]: ...
	def copyArrayBoxing(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], arg2: JArray(javawrappers.java.lang.Object, 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	def isConvertibleFrom(self, arg0: javawrappers.sun.invoke.util.Wrapper, ) -> Union[int, JBoolean]: ...
	def arrayType(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.invoke.util.Wrapper: ...
	@staticmethod
	def isPrimitiveType(arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def forBasicType(arg0: javawrappers.java.lang.Class, ) -> javawrappers.sun.invoke.util.Wrapper: ...
	@overload
	@staticmethod
	def forBasicType(arg0: Union[string, JString], ) -> javawrappers.sun.invoke.util.Wrapper: ...
	@staticmethod
	def asPrimitiveType(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def basicTypeChar(arg0: javawrappers.java.lang.Class, ) -> Union[string, JString]: ...
	@overload
	def basicTypeChar(self, ) -> Union[string, JString]: ...
	def copyArrayUnboxing(self, arg0: JArray(javawrappers.java.lang.Object, 1), arg1: Union[int, JInt], arg2: javawrappers.java.lang.Object, arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	def isNumeric(self, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def bitWidth(self, ) -> Union[int, JInt]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def forPrimitiveType(arg0: Union[string, JString], ) -> javawrappers.sun.invoke.util.Wrapper: ...
	@overload
	@staticmethod
	def forPrimitiveType(arg0: javawrappers.java.lang.Class, ) -> javawrappers.sun.invoke.util.Wrapper: ...
	def stackSlots(self, ) -> Union[int, JInt]: ...
	def primitiveSimpleName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isUnsigned(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wrap(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Object: ...
	@overload
	def wrap(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def isOther(self, ) -> Union[int, JBoolean]: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class ValueConversions:
	def __init__(self, ): ...
	class Handles:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class WrapperCache:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, arg0: javawrappers.sun.invoke.util.Wrapper, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def put(self, arg0: javawrappers.sun.invoke.util.Wrapper, arg1: javawrappers.java.lang.invoke.MethodHandle, ) -> javawrappers.java.lang.invoke.MethodHandle: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def primitiveConversion(arg0: javawrappers.sun.invoke.util.Wrapper, arg1: javawrappers.java.lang.Object, arg2: Union[int, JBoolean], ) -> javawrappers.java.lang.Number: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def boxExact(arg0: javawrappers.sun.invoke.util.Wrapper, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@overload
	@staticmethod
	def unboxExact(arg0: javawrappers.sun.invoke.util.Wrapper, arg1: Union[int, JBoolean], ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@overload
	@staticmethod
	def unboxExact(arg0: javawrappers.sun.invoke.util.Wrapper, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def unboxWiden(arg0: javawrappers.sun.invoke.util.Wrapper, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def put(self, arg0: javawrappers.sun.invoke.util.Wrapper, arg1: javawrappers.java.lang.invoke.MethodHandle, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def cast() -> javawrappers.java.lang.invoke.MethodHandle: ...
	@overload
	@staticmethod
	def convertPrimitive(arg0: javawrappers.sun.invoke.util.Wrapper, arg1: javawrappers.sun.invoke.util.Wrapper, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@overload
	@staticmethod
	def convertPrimitive(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@staticmethod
	def zeroConstantFunction(arg0: javawrappers.sun.invoke.util.Wrapper, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	@staticmethod
	def widenSubword(arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: javawrappers.sun.invoke.util.Wrapper, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def ignore() -> javawrappers.java.lang.invoke.MethodHandle: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def unboxCast(arg0: javawrappers.sun.invoke.util.Wrapper, ) -> javawrappers.java.lang.invoke.MethodHandle: ...


class BytecodeName:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def unparseBytecodeName(arg0: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def toBytecodeName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def isSafeBytecodeChar(arg0: Union[string, JString], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def toDisplayName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isSafeBytecodeName(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def parseBytecodeName(arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@staticmethod
	def toSourceName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class VerifyAccess:
	@staticmethod
	def classLoaderIsAncestor(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isSameModule(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def isSamePackageMember(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isSamePackage(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isClassAccessible(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def isTypeVisible(arg0: javawrappers.java.lang.invoke.MethodType, arg1: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isTypeVisible(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isMemberAccessible(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, arg2: Union[int, JInt], arg3: javawrappers.java.lang.Class, arg4: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class VerifyType:
	@staticmethod
	def canPassUnchecked(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def isNullReferenceConversion(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isNullConversion(arg0: javawrappers.java.lang.invoke.MethodType, arg1: javawrappers.java.lang.invoke.MethodType, arg2: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isNullConversion(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, arg2: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def spreadArgElementType(arg0: javawrappers.java.lang.Class, arg1: Union[int, JInt], ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def isSpreadArgType(arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isNullType(arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


