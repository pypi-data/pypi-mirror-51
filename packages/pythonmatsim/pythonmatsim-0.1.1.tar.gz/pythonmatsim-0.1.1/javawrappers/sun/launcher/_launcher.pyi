################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.util.function
import javawrappers.sun.launcher
import javawrappers.java.lang.module

from jpype.types import *
from typing import Union

from typing import overload

class LauncherHelper:
	class JrtFirstComparator:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def compare(self, arg0: javawrappers.java.lang.module.ModuleReference, arg1: javawrappers.java.lang.module.ModuleReference, ) -> Union[int, JInt]: ...
		@overload
		def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
		def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
		def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def reversed(self, ) -> javawrappers.java.util.Comparator: ...
		def notify(self, ) -> None: ...


	class FXHelper:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def main(*arg0: javawrappers.java.lang.String, ) -> None: ...
		def notify(self, ) -> None: ...


	class StdArg:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class SizePrefix:
		KILO: LauncherHelper.SizePrefix = ...
		MEGA: LauncherHelper.SizePrefix = ...
		GIGA: LauncherHelper.SizePrefix = ...
		TERA: LauncherHelper.SizePrefix = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.launcher.LauncherHelper.SizePrefix: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.sun.launcher.LauncherHelper.SizePrefix, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class ResourceBundleHolder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def compare(self, arg0: javawrappers.java.lang.module.ModuleReference, arg1: javawrappers.java.lang.module.ModuleReference, ) -> Union[int, JInt]: ...
	@overload
	def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def checkAndLoadMain(arg0: Union[int, JBoolean], arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
	def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
	def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.launcher.LauncherHelper.SizePrefix: ...
	@staticmethod
	def values() -> JArray(javawrappers.sun.launcher.LauncherHelper.SizePrefix, 1): ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def main(*arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	@staticmethod
	def getApplicationClass() -> javawrappers.java.lang.Class: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def reversed(self, ) -> javawrappers.java.util.Comparator: ...
	@staticmethod
	def printSystemMetrics() -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


