################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.text
import javawrappers.java.util
import javawrappers.java.lang
import javawrappers.sun.text.normalizer

from jpype.types import *
from typing import Union

from typing import overload

class DictionaryBasedBreakIterator:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: JArray(JByte, 1), arg2: javawrappers.java.lang.String, arg3: JArray(JByte, 1), ): ...
	@overload
	@staticmethod
	def getSentenceInstance() -> javawrappers.java.text.BreakIterator: ...
	@overload
	@staticmethod
	def getSentenceInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.BreakIterator: ...
	@overload
	def next(self, ) -> Union[int, JInt]: ...
	@overload
	def next(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def getCharacterInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.BreakIterator: ...
	@overload
	@staticmethod
	def getCharacterInstance() -> javawrappers.java.text.BreakIterator: ...
	def previous(self, ) -> Union[int, JInt]: ...
	def last(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def getWordInstance() -> javawrappers.java.text.BreakIterator: ...
	@overload
	@staticmethod
	def getWordInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.BreakIterator: ...
	def getText(self, ) -> javawrappers.java.text.CharacterIterator: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getLineInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.BreakIterator: ...
	@overload
	@staticmethod
	def getLineInstance() -> javawrappers.java.text.BreakIterator: ...
	def current(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isBoundary(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def following(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def preceding(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getAvailableLocales() -> JArray(javawrappers.java.util.Locale, 1): ...
	def first(self, ) -> Union[int, JInt]: ...
	@overload
	def setText(self, arg0: javawrappers.java.text.CharacterIterator, ) -> None: ...
	@overload
	def setText(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class CollatorUtilities:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def toNormalizerMode(arg0: Union[int, JInt], ) -> javawrappers.sun.text.normalizer.NormalizerBase.Mode: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def toLegacyMode(arg0: javawrappers.sun.text.normalizer.NormalizerBase.Mode, ) -> Union[int, JInt]: ...


class IntHashtable:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def setDefaultValue(self, arg0: Union[int, JInt], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def put(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def remove(self, arg0: Union[int, JInt], ) -> None: ...
	def getDefaultValue(self, ) -> Union[int, JInt]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def putInternal(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class RuleBasedBreakIterator:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: JArray(JByte, 1), ): ...
	class SafeCharIterator:
		def next(self, ) -> Union[string, JString]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def previous(self, ) -> Union[string, JString]: ...
		def getIndex(self, ) -> Union[int, JInt]: ...
		def last(self, ) -> Union[string, JString]: ...
		def notifyAll(self, ) -> None: ...
		def getBeginIndex(self, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def current(self, ) -> Union[string, JString]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getEndIndex(self, ) -> Union[int, JInt]: ...
		def setIndex(self, arg0: Union[int, JInt], ) -> Union[string, JString]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def first(self, ) -> Union[string, JString]: ...


	@overload
	@staticmethod
	def getSentenceInstance() -> javawrappers.java.text.BreakIterator: ...
	@overload
	@staticmethod
	def getSentenceInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.BreakIterator: ...
	@overload
	def next(self, ) -> Union[string, JString]: ...
	@overload
	def next(self, ) -> Union[int, JInt]: ...
	@overload
	def next(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getIndex(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def getCharacterInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.BreakIterator: ...
	@overload
	@staticmethod
	def getCharacterInstance() -> javawrappers.java.text.BreakIterator: ...
	def notifyAll(self, ) -> None: ...
	def getBeginIndex(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	def current(self, ) -> Union[string, JString]: ...
	@overload
	def current(self, ) -> Union[int, JInt]: ...
	def getEndIndex(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isBoundary(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getAvailableLocales() -> JArray(javawrappers.java.util.Locale, 1): ...
	@overload
	def previous(self, ) -> Union[string, JString]: ...
	@overload
	def previous(self, ) -> Union[int, JInt]: ...
	@overload
	def last(self, ) -> Union[string, JString]: ...
	@overload
	def last(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def getWordInstance() -> javawrappers.java.text.BreakIterator: ...
	@overload
	@staticmethod
	def getWordInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.BreakIterator: ...
	def getText(self, ) -> javawrappers.java.text.CharacterIterator: ...
	@overload
	@staticmethod
	def getLineInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.BreakIterator: ...
	@overload
	@staticmethod
	def getLineInstance() -> javawrappers.java.text.BreakIterator: ...
	def setIndex(self, arg0: Union[int, JInt], ) -> Union[string, JString]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def following(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def preceding(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def first(self, ) -> Union[int, JInt]: ...
	@overload
	def first(self, ) -> Union[string, JString]: ...
	@overload
	def setText(self, arg0: javawrappers.java.text.CharacterIterator, ) -> None: ...
	@overload
	def setText(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class CompactByteArray:
	@overload
	def __init__(self, arg0: JByte, ): ...
	@overload
	def __init__(self, arg0: JArray(Union[int, JShort], 1), arg1: JArray(JByte, 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def compact(self, ) -> None: ...
	@overload
	def setElementAt(self, arg0: Union[string, JString], arg1: Union[string, JString], arg2: JByte, ) -> None: ...
	@overload
	def setElementAt(self, arg0: Union[string, JString], arg1: JByte, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def elementAt(self, arg0: Union[string, JString], ) -> JByte: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getStringArray(self, ) -> JArray(JByte, 1): ...
	def getIndexArray(self, ) -> JArray(Union[int, JShort], 1): ...
	def notify(self, ) -> None: ...


class Normalizer:
	@staticmethod
	def getCombiningClass(arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def normalize(arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.text.Normalizer.Form, arg2: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def isNormalized(arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.text.Normalizer.Form, arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class ComposedCharIter:
	def __init__(self, ): ...
	def next(self, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def decomposition(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class SupplementaryCharacterData:
	def __init__(self, arg0: JArray(Union[int, JInt], 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getValue(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getArray(self, ) -> JArray(Union[int, JInt], 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class UCompactIntArray:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def compact(self, ) -> None: ...
	def setElementAt(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def elementAt(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getKSize(self, ) -> Union[int, JInt]: ...


