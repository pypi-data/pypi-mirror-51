################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang.reflect
import javawrappers.java.lang
import javawrappers.sun.reflect.generics.reflectiveObjects
import javawrappers.sun.reflect.generics.tree
import javawrappers.java.io
import javawrappers.java.lang.annotation
import javawrappers.sun.reflect.generics.factory

from jpype.types import *
from typing import Union

from typing import overload

class TypeVariableImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAnnotatedBounds(self, ) -> JArray(javawrappers.java.lang.reflect.AnnotatedType, 1): ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def isAnnotationPresent(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def notify(self, ) -> None: ...
	def getBounds(self, ) -> JArray(javawrappers.java.lang.reflect.Type, 1): ...
	def getDeclaredAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getDeclaredAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDeclaredAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTypeName(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def make(arg0: javawrappers.java.lang.reflect.GenericDeclaration, arg1: javawrappers.java.lang.String, arg2: JArray(javawrappers.sun.reflect.generics.tree.FieldTypeSignature, 1), arg3: javawrappers.sun.reflect.generics.factory.GenericsFactory, ) -> javawrappers.sun.reflect.generics.reflectiveObjects.TypeVariableImpl: ...
	def getGenericDeclaration(self, ) -> javawrappers.java.lang.reflect.GenericDeclaration: ...


class WildcardTypeImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getLowerBounds(self, ) -> JArray(javawrappers.java.lang.reflect.Type, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTypeName(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def make(arg0: JArray(javawrappers.sun.reflect.generics.tree.FieldTypeSignature, 1), arg1: JArray(javawrappers.sun.reflect.generics.tree.FieldTypeSignature, 1), arg2: javawrappers.sun.reflect.generics.factory.GenericsFactory, ) -> javawrappers.sun.reflect.generics.reflectiveObjects.WildcardTypeImpl: ...
	def notify(self, ) -> None: ...
	def getUpperBounds(self, ) -> JArray(javawrappers.java.lang.reflect.Type, 1): ...


class LazyReflectiveObjectGenerator:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ParameterizedTypeImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getRawType(self, ) -> javawrappers.java.lang.reflect.Type: ...
	@overload
	def getRawType(self, ) -> javawrappers.java.lang.Class: ...
	def getActualTypeArguments(self, ) -> JArray(javawrappers.java.lang.reflect.Type, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTypeName(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def make(arg0: javawrappers.java.lang.Class, arg1: JArray(javawrappers.java.lang.reflect.Type, 1), arg2: javawrappers.java.lang.reflect.Type, ) -> javawrappers.sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl: ...
	def getOwnerType(self, ) -> javawrappers.java.lang.reflect.Type: ...
	def notify(self, ) -> None: ...


class NotImplementedException:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class GenericArrayTypeImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getGenericComponentType(self, ) -> javawrappers.java.lang.reflect.Type: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTypeName(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def make(arg0: javawrappers.java.lang.reflect.Type, ) -> javawrappers.sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl: ...
	def notify(self, ) -> None: ...


