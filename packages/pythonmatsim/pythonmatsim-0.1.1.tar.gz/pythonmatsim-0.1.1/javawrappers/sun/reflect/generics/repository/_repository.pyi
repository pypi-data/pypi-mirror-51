################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang.reflect
import javawrappers.java.lang
import javawrappers.sun.reflect.generics.factory
import javawrappers.sun.reflect.generics.repository

from jpype.types import *
from typing import Union

from typing import overload

class ClassRepository:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSuperInterfaces(self, ) -> JArray(javawrappers.java.lang.reflect.Type, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTypeParameters(self, ) -> JArray(javawrappers.java.lang.reflect.TypeVariable, 1): ...
	@staticmethod
	def make(arg0: javawrappers.java.lang.String, arg1: javawrappers.sun.reflect.generics.factory.GenericsFactory, ) -> javawrappers.sun.reflect.generics.repository.ClassRepository: ...
	def notify(self, ) -> None: ...
	def getSuperclass(self, ) -> javawrappers.java.lang.reflect.Type: ...


class AbstractRepository:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class FieldRepository:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getGenericType(self, ) -> javawrappers.java.lang.reflect.Type: ...
	@staticmethod
	def make(arg0: javawrappers.java.lang.String, arg1: javawrappers.sun.reflect.generics.factory.GenericsFactory, ) -> javawrappers.sun.reflect.generics.repository.FieldRepository: ...
	def notify(self, ) -> None: ...


class GenericDeclRepository:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTypeParameters(self, ) -> JArray(javawrappers.java.lang.reflect.TypeVariable, 1): ...
	def notify(self, ) -> None: ...


class MethodRepository:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getExceptionTypes(self, ) -> JArray(javawrappers.java.lang.reflect.Type, 1): ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getReturnType(self, ) -> javawrappers.java.lang.reflect.Type: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getParameterTypes(self, ) -> JArray(javawrappers.java.lang.reflect.Type, 1): ...
	def getTypeParameters(self, ) -> JArray(javawrappers.java.lang.reflect.TypeVariable, 1): ...
	@overload
	@staticmethod
	def make(arg0: javawrappers.java.lang.String, arg1: javawrappers.sun.reflect.generics.factory.GenericsFactory, ) -> javawrappers.sun.reflect.generics.repository.ConstructorRepository: ...
	@overload
	@staticmethod
	def make(arg0: javawrappers.java.lang.String, arg1: javawrappers.sun.reflect.generics.factory.GenericsFactory, ) -> javawrappers.sun.reflect.generics.repository.MethodRepository: ...
	def notify(self, ) -> None: ...


class ConstructorRepository:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getExceptionTypes(self, ) -> JArray(javawrappers.java.lang.reflect.Type, 1): ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getParameterTypes(self, ) -> JArray(javawrappers.java.lang.reflect.Type, 1): ...
	def getTypeParameters(self, ) -> JArray(javawrappers.java.lang.reflect.TypeVariable, 1): ...
	@staticmethod
	def make(arg0: javawrappers.java.lang.String, arg1: javawrappers.sun.reflect.generics.factory.GenericsFactory, ) -> javawrappers.sun.reflect.generics.repository.ConstructorRepository: ...
	def notify(self, ) -> None: ...


