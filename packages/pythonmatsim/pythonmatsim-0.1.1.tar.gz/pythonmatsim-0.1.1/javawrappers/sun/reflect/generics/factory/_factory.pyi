################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang.reflect
import javawrappers.java.lang
import javawrappers.sun.reflect.generics.tree
import javawrappers.sun.reflect.generics.scope
import javawrappers.sun.reflect.generics.factory

from jpype.types import *
from typing import Union

from typing import overload

class CoreReflectionFactory:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def makeInt(self, ) -> javawrappers.java.lang.reflect.Type: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def makeShort(self, ) -> javawrappers.java.lang.reflect.Type: ...
	def makeTypeVariable(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.sun.reflect.generics.tree.FieldTypeSignature, 1), ) -> javawrappers.java.lang.reflect.TypeVariable: ...
	def makeWildcard(self, arg0: JArray(javawrappers.sun.reflect.generics.tree.FieldTypeSignature, 1), arg1: JArray(javawrappers.sun.reflect.generics.tree.FieldTypeSignature, 1), ) -> javawrappers.java.lang.reflect.WildcardType: ...
	def makeChar(self, ) -> javawrappers.java.lang.reflect.Type: ...
	def notifyAll(self, ) -> None: ...
	def makeArrayType(self, arg0: javawrappers.java.lang.reflect.Type, ) -> javawrappers.java.lang.reflect.Type: ...
	def makeVoid(self, ) -> javawrappers.java.lang.reflect.Type: ...
	def makeLong(self, ) -> javawrappers.java.lang.reflect.Type: ...
	def notify(self, ) -> None: ...
	def makeByte(self, ) -> javawrappers.java.lang.reflect.Type: ...
	def findTypeVariable(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.reflect.TypeVariable: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def makeFloat(self, ) -> javawrappers.java.lang.reflect.Type: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def makeBool(self, ) -> javawrappers.java.lang.reflect.Type: ...
	def makeNamedType(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.reflect.Type: ...
	@staticmethod
	def make(arg0: javawrappers.java.lang.reflect.GenericDeclaration, arg1: javawrappers.sun.reflect.generics.scope.Scope, ) -> javawrappers.sun.reflect.generics.factory.CoreReflectionFactory: ...
	def makeDouble(self, ) -> javawrappers.java.lang.reflect.Type: ...
	def makeParameterizedType(self, arg0: javawrappers.java.lang.reflect.Type, arg1: JArray(javawrappers.java.lang.reflect.Type, 1), arg2: javawrappers.java.lang.reflect.Type, ) -> javawrappers.java.lang.reflect.ParameterizedType: ...


class GenericsFactory:
	def makeInt(self, ) -> javawrappers.java.lang.reflect.Type: ...
	def makeShort(self, ) -> javawrappers.java.lang.reflect.Type: ...
	def makeTypeVariable(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.sun.reflect.generics.tree.FieldTypeSignature, 1), ) -> javawrappers.java.lang.reflect.TypeVariable: ...
	def makeWildcard(self, arg0: JArray(javawrappers.sun.reflect.generics.tree.FieldTypeSignature, 1), arg1: JArray(javawrappers.sun.reflect.generics.tree.FieldTypeSignature, 1), ) -> javawrappers.java.lang.reflect.WildcardType: ...
	def makeChar(self, ) -> javawrappers.java.lang.reflect.Type: ...
	def makeArrayType(self, arg0: javawrappers.java.lang.reflect.Type, ) -> javawrappers.java.lang.reflect.Type: ...
	def makeVoid(self, ) -> javawrappers.java.lang.reflect.Type: ...
	def makeLong(self, ) -> javawrappers.java.lang.reflect.Type: ...
	def makeByte(self, ) -> javawrappers.java.lang.reflect.Type: ...
	def findTypeVariable(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.reflect.TypeVariable: ...
	def makeFloat(self, ) -> javawrappers.java.lang.reflect.Type: ...
	def makeBool(self, ) -> javawrappers.java.lang.reflect.Type: ...
	def makeNamedType(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.reflect.Type: ...
	def makeDouble(self, ) -> javawrappers.java.lang.reflect.Type: ...
	def makeParameterizedType(self, arg0: javawrappers.java.lang.reflect.Type, arg1: JArray(javawrappers.java.lang.reflect.Type, 1), arg2: javawrappers.java.lang.reflect.Type, ) -> javawrappers.java.lang.reflect.ParameterizedType: ...


