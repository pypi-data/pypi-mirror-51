################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang.reflect
import javawrappers.java.lang
import javawrappers.sun.reflect.annotation
import javawrappers.java.util
import javawrappers.java.lang.annotation
import javawrappers.java.nio
import javawrappers.jdk.internal.reflect

from jpype.types import *
from typing import Union

from typing import overload

class TypeAnnotation:
	def __init__(self, arg0: javawrappers.sun.reflect.annotation.TypeAnnotation.TypeAnnotationTargetInfo, arg1: javawrappers.sun.reflect.annotation.TypeAnnotation.LocationInfo, arg2: javawrappers.java.lang.annotation.Annotation, arg3: javawrappers.java.lang.reflect.AnnotatedElement, ): ...
	class LocationInfo:
		class Location:
			def __init__(self, arg0: JByte, arg1: Union[int, JShort], ): ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def notify(self, ) -> None: ...


		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def popAllLocations(self, arg0: JByte, ) -> javawrappers.sun.reflect.annotation.TypeAnnotation.LocationInfo: ...
		def pushInner(self, ) -> javawrappers.sun.reflect.annotation.TypeAnnotation.LocationInfo: ...
		def pushWildcard(self, ) -> javawrappers.sun.reflect.annotation.TypeAnnotation.LocationInfo: ...
		def notify(self, ) -> None: ...
		def filter(self, arg0: JArray(javawrappers.sun.reflect.annotation.TypeAnnotation, 1), ) -> JArray(javawrappers.sun.reflect.annotation.TypeAnnotation, 1): ...
		def pushTypeArg(self, arg0: Union[int, JShort], ) -> javawrappers.sun.reflect.annotation.TypeAnnotation.LocationInfo: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def pushArray(self, ) -> javawrappers.sun.reflect.annotation.TypeAnnotation.LocationInfo: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def pushLocation(self, arg0: JByte, arg1: Union[int, JShort], ) -> javawrappers.sun.reflect.annotation.TypeAnnotation.LocationInfo: ...
		@staticmethod
		def parseLocationInfo(arg0: javawrappers.java.nio.ByteBuffer, ) -> javawrappers.sun.reflect.annotation.TypeAnnotation.LocationInfo: ...


	class TypeAnnotationTargetInfo:
		@overload
		def __init__(self, arg0: javawrappers.sun.reflect.annotation.TypeAnnotation.TypeAnnotationTarget, ): ...
		@overload
		def __init__(self, arg0: javawrappers.sun.reflect.annotation.TypeAnnotation.TypeAnnotationTarget, arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
		@overload
		def __init__(self, arg0: javawrappers.sun.reflect.annotation.TypeAnnotation.TypeAnnotationTarget, arg1: Union[int, JInt], ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getTarget(self, ) -> javawrappers.sun.reflect.annotation.TypeAnnotation.TypeAnnotationTarget: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getSecondaryIndex(self, ) -> Union[int, JInt]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getCount(self, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...


	class TypeAnnotationTarget:
		CLASS_TYPE_PARAMETER: TypeAnnotation.TypeAnnotationTarget = ...
		METHOD_TYPE_PARAMETER: TypeAnnotation.TypeAnnotationTarget = ...
		CLASS_EXTENDS: TypeAnnotation.TypeAnnotationTarget = ...
		CLASS_IMPLEMENTS: TypeAnnotation.TypeAnnotationTarget = ...
		CLASS_TYPE_PARAMETER_BOUND: TypeAnnotation.TypeAnnotationTarget = ...
		METHOD_TYPE_PARAMETER_BOUND: TypeAnnotation.TypeAnnotationTarget = ...
		FIELD: TypeAnnotation.TypeAnnotationTarget = ...
		METHOD_RETURN: TypeAnnotation.TypeAnnotationTarget = ...
		METHOD_RECEIVER: TypeAnnotation.TypeAnnotationTarget = ...
		METHOD_FORMAL_PARAMETER: TypeAnnotation.TypeAnnotationTarget = ...
		THROWS: TypeAnnotation.TypeAnnotationTarget = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.reflect.annotation.TypeAnnotation.TypeAnnotationTarget: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.sun.reflect.annotation.TypeAnnotation.TypeAnnotationTarget, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.sun.reflect.annotation.TypeAnnotation.TypeAnnotationTarget, 1): ...
	def notifyAll(self, ) -> None: ...
	def popAllLocations(self, arg0: JByte, ) -> javawrappers.sun.reflect.annotation.TypeAnnotation.LocationInfo: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def getLocationInfo(self, ) -> javawrappers.sun.reflect.annotation.TypeAnnotation.LocationInfo: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def getTarget(self, ) -> javawrappers.sun.reflect.annotation.TypeAnnotation.TypeAnnotationTarget: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def pushArray(self, ) -> javawrappers.sun.reflect.annotation.TypeAnnotation.LocationInfo: ...
	def pushLocation(self, arg0: JByte, arg1: Union[int, JShort], ) -> javawrappers.sun.reflect.annotation.TypeAnnotation.LocationInfo: ...
	def getCount(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.reflect.annotation.TypeAnnotation.TypeAnnotationTarget: ...
	def getSecondaryIndex(self, ) -> Union[int, JInt]: ...
	def getTargetInfo(self, ) -> javawrappers.sun.reflect.annotation.TypeAnnotation.TypeAnnotationTargetInfo: ...
	def pushInner(self, ) -> javawrappers.sun.reflect.annotation.TypeAnnotation.LocationInfo: ...
	def pushWildcard(self, ) -> javawrappers.sun.reflect.annotation.TypeAnnotation.LocationInfo: ...
	def getBaseDeclaration(self, ) -> javawrappers.java.lang.reflect.AnnotatedElement: ...
	@overload
	def filter(self, arg0: JArray(javawrappers.sun.reflect.annotation.TypeAnnotation, 1), ) -> JArray(javawrappers.sun.reflect.annotation.TypeAnnotation, 1): ...
	@overload
	@staticmethod
	def filter(arg0: JArray(javawrappers.sun.reflect.annotation.TypeAnnotation, 1), arg1: javawrappers.sun.reflect.annotation.TypeAnnotation.TypeAnnotationTarget, ) -> javawrappers.java.util.List: ...
	def pushTypeArg(self, arg0: Union[int, JShort], ) -> javawrappers.sun.reflect.annotation.TypeAnnotation.LocationInfo: ...
	def getAnnotation(self, ) -> javawrappers.java.lang.annotation.Annotation: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def parseLocationInfo(arg0: javawrappers.java.nio.ByteBuffer, ) -> javawrappers.sun.reflect.annotation.TypeAnnotation.LocationInfo: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class AnnotatedTypeFactory:
	def __init__(self, ): ...
	class AnnotatedWildcardTypeImpl:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def isAnnotationPresent(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def getAnnotatedLowerBounds(self, ) -> JArray(javawrappers.java.lang.reflect.AnnotatedType, 1): ...
		def getAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
		def notify(self, ) -> None: ...
		def getDeclaredAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
		def getAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
		def getType(self, ) -> javawrappers.java.lang.reflect.Type: ...
		def getDeclaredAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
		def getAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
		def getAnnotatedOwnerType(self, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getDeclaredAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
		def getAnnotatedUpperBounds(self, ) -> JArray(javawrappers.java.lang.reflect.AnnotatedType, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	class AnnotatedParameterizedTypeImpl:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def isAnnotationPresent(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def getAnnotatedActualTypeArguments(self, ) -> JArray(javawrappers.java.lang.reflect.AnnotatedType, 1): ...
		def getAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
		def notify(self, ) -> None: ...
		def getDeclaredAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
		def getAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
		def getType(self, ) -> javawrappers.java.lang.reflect.Type: ...
		def getDeclaredAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
		def getAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
		def getAnnotatedOwnerType(self, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getDeclaredAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	class AnnotatedTypeVariableImpl:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getAnnotatedBounds(self, ) -> JArray(javawrappers.java.lang.reflect.AnnotatedType, 1): ...
		def isAnnotationPresent(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def getAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
		def notify(self, ) -> None: ...
		def getDeclaredAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
		def getAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
		def getType(self, ) -> javawrappers.java.lang.reflect.Type: ...
		def getDeclaredAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
		def getAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
		def getAnnotatedOwnerType(self, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getDeclaredAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	class AnnotatedArrayTypeImpl:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def isAnnotationPresent(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def getAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
		def notify(self, ) -> None: ...
		def getDeclaredAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
		def getAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
		def getType(self, ) -> javawrappers.java.lang.reflect.Type: ...
		def getDeclaredAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
		def getAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
		def getAnnotatedOwnerType(self, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getDeclaredAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
		def getAnnotatedGenericComponentType(self, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	class AnnotatedTypeBaseImpl:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def isAnnotationPresent(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def getAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
		def notify(self, ) -> None: ...
		def getDeclaredAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
		def getAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
		def getType(self, ) -> javawrappers.java.lang.reflect.Type: ...
		def getDeclaredAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
		def getAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
		def getAnnotatedOwnerType(self, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getDeclaredAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	@staticmethod
	def nestingForType(arg0: javawrappers.java.lang.reflect.Type, arg1: javawrappers.sun.reflect.annotation.TypeAnnotation.LocationInfo, ) -> javawrappers.sun.reflect.annotation.TypeAnnotation.LocationInfo: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getAnnotatedBounds(self, ) -> JArray(javawrappers.java.lang.reflect.AnnotatedType, 1): ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isAnnotationPresent(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def buildAnnotatedType(arg0: javawrappers.java.lang.reflect.Type, arg1: javawrappers.sun.reflect.annotation.TypeAnnotation.LocationInfo, arg2: JArray(javawrappers.sun.reflect.annotation.TypeAnnotation, 1), arg3: JArray(javawrappers.sun.reflect.annotation.TypeAnnotation, 1), arg4: javawrappers.java.lang.reflect.AnnotatedElement, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...
	def notifyAll(self, ) -> None: ...
	def getAnnotatedLowerBounds(self, ) -> JArray(javawrappers.java.lang.reflect.AnnotatedType, 1): ...
	def getAnnotatedActualTypeArguments(self, ) -> JArray(javawrappers.java.lang.reflect.AnnotatedType, 1): ...
	def getAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def notify(self, ) -> None: ...
	def getDeclaredAnnotations(self, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getType(self, ) -> javawrappers.java.lang.reflect.Type: ...
	def getDeclaredAnnotationsByType(self, arg0: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def getAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	@overload
	def getAnnotatedOwnerType(self, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...
	@overload
	def getAnnotatedOwnerType(self, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...
	@overload
	def getAnnotatedOwnerType(self, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...
	@overload
	def getAnnotatedOwnerType(self, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...
	@overload
	def getAnnotatedOwnerType(self, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getAnnotatedUpperBounds(self, ) -> JArray(javawrappers.java.lang.reflect.AnnotatedType, 1): ...
	def getDeclaredAnnotation(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.annotation.Annotation: ...
	def getAnnotatedGenericComponentType(self, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class AnnotationSupport:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getAssociatedAnnotations(arg0: javawrappers.java.util.Map, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def notify(self, ) -> None: ...
	@staticmethod
	def getDirectlyAndIndirectlyPresent(arg0: javawrappers.java.util.Map, arg1: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...


class ExceptionProxy:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class TypeAnnotationParser:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def buildAnnotatedInterfaces(arg0: JArray(JByte, 1), arg1: javawrappers.jdk.internal.reflect.ConstantPool, arg2: javawrappers.java.lang.Class, ) -> JArray(javawrappers.java.lang.reflect.AnnotatedType, 1): ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def buildAnnotatedTypes(arg0: JArray(JByte, 1), arg1: javawrappers.jdk.internal.reflect.ConstantPool, arg2: javawrappers.java.lang.reflect.AnnotatedElement, arg3: javawrappers.java.lang.Class, arg4: JArray(javawrappers.java.lang.reflect.Type, 1), arg5: javawrappers.sun.reflect.annotation.TypeAnnotation.TypeAnnotationTarget, ) -> JArray(javawrappers.java.lang.reflect.AnnotatedType, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def buildAnnotatedType(arg0: JArray(JByte, 1), arg1: javawrappers.jdk.internal.reflect.ConstantPool, arg2: javawrappers.java.lang.reflect.AnnotatedElement, arg3: javawrappers.java.lang.Class, arg4: javawrappers.java.lang.reflect.Type, arg5: javawrappers.sun.reflect.annotation.TypeAnnotation.TypeAnnotationTarget, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def parseTypeVariableAnnotations(arg0: javawrappers.java.lang.reflect.GenericDeclaration, arg1: Union[int, JInt], ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def buildAnnotatedSuperclass(arg0: JArray(JByte, 1), arg1: javawrappers.jdk.internal.reflect.ConstantPool, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.reflect.AnnotatedType: ...
	@staticmethod
	def parseAnnotatedBounds(arg0: JArray(javawrappers.java.lang.reflect.Type, 1), arg1: javawrappers.java.lang.reflect.GenericDeclaration, arg2: Union[int, JInt], ) -> JArray(javawrappers.java.lang.reflect.AnnotatedType, 1): ...


class TypeNotPresentExceptionProxy:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def typeName(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...


class AnnotationParser:
	def __init__(self, ): ...
	@staticmethod
	def parseAnnotations(arg0: JArray(JByte, 1), arg1: javawrappers.jdk.internal.reflect.ConstantPool, arg2: javawrappers.java.lang.Class, ) -> javawrappers.java.util.Map: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def toArray(arg0: javawrappers.java.util.Map, ) -> JArray(javawrappers.java.lang.annotation.Annotation, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def parseParameterAnnotations(arg0: JArray(JByte, 1), arg1: javawrappers.jdk.internal.reflect.ConstantPool, arg2: javawrappers.java.lang.Class, ) -> JArray(JArray(javawrappers.java.lang.annotation.Annotation, 1), 1): ...
	@staticmethod
	def annotationForMap(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.Map, ) -> javawrappers.java.lang.annotation.Annotation: ...
	@staticmethod
	def parseMemberValue(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.nio.ByteBuffer, arg2: javawrappers.jdk.internal.reflect.ConstantPool, arg3: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Object: ...


class AnnotationType:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def memberDefaults(self, ) -> javawrappers.java.util.Map: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def members(self, ) -> javawrappers.java.util.Map: ...
	@staticmethod
	def invocationHandlerReturnType(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Class: ...
	def isInherited(self, ) -> Union[int, JBoolean]: ...
	def memberTypes(self, ) -> javawrappers.java.util.Map: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.Class, ) -> javawrappers.sun.reflect.annotation.AnnotationType: ...
	def retention(self, ) -> javawrappers.java.lang.annotation.RetentionPolicy: ...


class EnumConstantNotPresentExceptionProxy:
	def __init__(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


