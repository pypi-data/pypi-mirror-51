################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.sun.net.ext

from jpype.types import *
from typing import Union

from typing import overload

class ExtendedSocketOptions:
	class NoExtendedSocketOptions:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def setOption(self, arg0: javawrappers.java.io.FileDescriptor, arg1: javawrappers.java.net.SocketOption, arg2: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def isOptionSupported(self, arg0: javawrappers.java.net.SocketOption, ) -> Union[int, JBoolean]: ...
		@overload
		def options(self, ) -> javawrappers.java.util.Set: ...
		@overload
		@staticmethod
		def options(arg0: Union[int, JShort], ) -> javawrappers.java.util.Set: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getOption(self, arg0: javawrappers.java.io.FileDescriptor, arg1: javawrappers.java.net.SocketOption, ) -> javawrappers.java.lang.Object: ...
		@staticmethod
		def getInstance() -> javawrappers.sun.net.ext.ExtendedSocketOptions: ...
		def notify(self, ) -> None: ...
		@staticmethod
		def register(arg0: javawrappers.sun.net.ext.ExtendedSocketOptions, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def setOption(self, arg0: javawrappers.java.io.FileDescriptor, arg1: javawrappers.java.net.SocketOption, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def setOption(self, arg0: javawrappers.java.io.FileDescriptor, arg1: javawrappers.java.net.SocketOption, arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isOptionSupported(self, arg0: javawrappers.java.net.SocketOption, ) -> Union[int, JBoolean]: ...
	@overload
	def getOption(self, arg0: javawrappers.java.io.FileDescriptor, arg1: javawrappers.java.net.SocketOption, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getOption(self, arg0: javawrappers.java.io.FileDescriptor, arg1: javawrappers.java.net.SocketOption, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def options(self, ) -> javawrappers.java.util.Set: ...
	@overload
	@staticmethod
	def options(arg0: Union[int, JShort], ) -> javawrappers.java.util.Set: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getInstance() -> javawrappers.sun.net.ext.ExtendedSocketOptions: ...
	@staticmethod
	def register(arg0: javawrappers.sun.net.ext.ExtendedSocketOptions, ) -> None: ...


