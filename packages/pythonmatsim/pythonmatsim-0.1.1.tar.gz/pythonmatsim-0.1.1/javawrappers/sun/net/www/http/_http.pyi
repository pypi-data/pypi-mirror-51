################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.net
import javawrappers.sun.net
import javawrappers.java.io
import javawrappers.sun.net.www.http
import javawrappers.sun.net.www.protocol.http
import javawrappers.java.util.function
import javawrappers.java.nio.charset
import javawrappers.sun.net.www

from jpype.types import *
from typing import Union

from typing import overload

class HttpCaptureOutputStream:
	def __init__(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.sun.net.www.http.HttpCapture, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...


class PosterOutputStream:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def writeTo(self, arg0: javawrappers.java.io.OutputStream, ) -> None: ...
	def writeBytes(self, arg0: JArray(JByte, 1), ) -> None: ...
	def flush(self, ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toByteArray(self, ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	@overload
	def toString(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...


class KeepAliveStream:
	def __init__(self, arg0: javawrappers.java.io.InputStream, arg1: javawrappers.sun.net.ProgressSource, arg2: Union[long, JLong], arg3: javawrappers.sun.net.www.http.HttpClient, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hurry(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class Hurryable:
	def hurry(self, ) -> Union[int, JBoolean]: ...


class HttpCaptureInputStream:
	def __init__(self, arg0: javawrappers.java.io.InputStream, arg1: javawrappers.sun.net.www.http.HttpCapture, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class HttpCapture:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def received(self, arg0: Union[int, JInt], ) -> None: ...
	@staticmethod
	def getCapture(arg0: javawrappers.java.net.URL, ) -> javawrappers.sun.net.www.http.HttpCapture: ...
	def sent(self, arg0: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...


class ChunkedOutputStream:
	@overload
	def __init__(self, arg0: javawrappers.java.io.PrintStream, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.PrintStream, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def format(self, arg0: javawrappers.java.util.Locale, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.io.PrintStream: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.io.PrintStream: ...
	def checkError(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@overload
	def printf(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.io.PrintStream: ...
	@overload
	def printf(self, arg0: javawrappers.java.util.Locale, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.io.PrintStream: ...
	@overload
	def print_(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def print_(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def print_(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def print_(self, arg0: Union[float, JFloat], ) -> None: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def print_(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def print_(self, arg0: Union[string, JString], ) -> None: ...
	@overload
	def print_(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def println(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def println(self, arg0: Union[float, JFloat], ) -> None: ...
	@overload
	def println(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def println(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def println(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def println(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def println(self, ) -> None: ...
	@overload
	def println(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def println(self, arg0: Union[string, JString], ) -> None: ...
	@overload
	def println(self, arg0: Union[int, JInt], ) -> None: ...
	def flush(self, ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.io.PrintStream: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.io.PrintStream: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.io.PrintStream: ...


class ChunkedInputStream:
	def __init__(self, arg0: javawrappers.java.io.InputStream, arg1: javawrappers.sun.net.www.http.HttpClient, arg2: javawrappers.sun.net.www.MessageHeader, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hurry(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class HttpClient:
	@overload
	def __init__(self, arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: Union[int, JBoolean], arg4: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	@staticmethod
	def New(arg0: javawrappers.java.net.URL, arg1: Union[int, JBoolean], ) -> javawrappers.sun.net.www.http.HttpClient: ...
	@overload
	@staticmethod
	def New(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.net.Proxy, arg2: Union[int, JInt], arg3: Union[int, JBoolean], arg4: javawrappers.sun.net.www.protocol.http.HttpURLConnection, ) -> javawrappers.sun.net.www.http.HttpClient: ...
	@overload
	@staticmethod
	def New(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: Union[int, JBoolean], arg4: Union[int, JInt], arg5: javawrappers.sun.net.www.protocol.http.HttpURLConnection, ) -> javawrappers.sun.net.www.http.HttpClient: ...
	@overload
	@staticmethod
	def New(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: Union[int, JBoolean], ) -> javawrappers.sun.net.www.http.HttpClient: ...
	@overload
	@staticmethod
	def New(arg0: javawrappers.java.net.URL, ) -> javawrappers.sun.net.www.http.HttpClient: ...
	@overload
	@staticmethod
	def New(arg0: javawrappers.java.net.URL, arg1: javawrappers.java.net.Proxy, arg2: Union[int, JInt], arg3: javawrappers.sun.net.www.protocol.http.HttpURLConnection, ) -> javawrappers.sun.net.www.http.HttpClient: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def writeRequests(self, arg0: javawrappers.sun.net.www.MessageHeader, ) -> None: ...
	@overload
	def writeRequests(self, arg0: javawrappers.sun.net.www.MessageHeader, arg1: javawrappers.sun.net.www.http.PosterOutputStream, arg2: Union[int, JBoolean], ) -> None: ...
	@overload
	def writeRequests(self, arg0: javawrappers.sun.net.www.MessageHeader, arg1: javawrappers.sun.net.www.http.PosterOutputStream, ) -> None: ...
	def setConnectTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def getAuthenticatorKey(self, ) -> javawrappers.java.lang.String: ...
	def afterConnect(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def serverIsOpen(self, ) -> Union[int, JBoolean]: ...
	def getReadTimeout(self, ) -> Union[int, JInt]: ...
	def setCacheRequest(self, arg0: javawrappers.java.net.CacheRequest, ) -> None: ...
	@staticmethod
	def resetProperties() -> None: ...
	def isKeepingAlive(self, ) -> Union[int, JBoolean]: ...
	def parseHTTP(self, arg0: javawrappers.sun.net.www.MessageHeader, arg1: javawrappers.sun.net.ProgressSource, arg2: javawrappers.sun.net.www.protocol.http.HttpURLConnection, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getURLFile(self, ) -> javawrappers.java.lang.String: ...
	def setDoNotRetry(self, arg0: Union[int, JBoolean], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isCachedConnection(self, ) -> Union[int, JBoolean]: ...
	def openServer(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	def setIgnoreContinue(self, arg0: Union[int, JBoolean], ) -> None: ...
	def closeServer(self, ) -> None: ...
	def getHttpKeepAliveSet(self, ) -> Union[int, JBoolean]: ...
	def getConnectTimeout(self, ) -> Union[int, JInt]: ...
	def finished(self, ) -> None: ...
	def getInputStream(self, ) -> javawrappers.java.io.InputStream: ...
	def getProxyHostUsed(self, ) -> javawrappers.java.lang.String: ...
	def setReadTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def getProxyPortUsed(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def closeIdleConnection(self, ) -> None: ...
	def needsTunneling(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOutputStream(self, ) -> javawrappers.java.io.OutputStream: ...


class KeepAliveCache:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
	def values(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def run(self, ) -> None: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
	def notify(self, ) -> None: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def put(self, arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.Object, arg2: javawrappers.sun.net.www.http.HttpClient, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.sun.net.www.http.HttpClient, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, arg0: javawrappers.java.net.URL, arg1: javawrappers.java.lang.Object, ) -> javawrappers.sun.net.www.http.HttpClient: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def entrySet(self, ) -> javawrappers.java.util.Set: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def size(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


