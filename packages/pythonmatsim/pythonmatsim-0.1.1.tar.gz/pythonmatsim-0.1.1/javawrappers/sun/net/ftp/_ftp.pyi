################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.sun.net.ftp

from jpype.types import *
from typing import Union

from typing import overload

class FtpReplyCode:
	RESTART_MARKER: FtpReplyCode = ...
	SERVICE_READY_IN: FtpReplyCode = ...
	DATA_CONNECTION_ALREADY_OPEN: FtpReplyCode = ...
	FILE_STATUS_OK: FtpReplyCode = ...
	COMMAND_OK: FtpReplyCode = ...
	NOT_IMPLEMENTED: FtpReplyCode = ...
	SYSTEM_STATUS: FtpReplyCode = ...
	DIRECTORY_STATUS: FtpReplyCode = ...
	FILE_STATUS: FtpReplyCode = ...
	HELP_MESSAGE: FtpReplyCode = ...
	NAME_SYSTEM_TYPE: FtpReplyCode = ...
	SERVICE_READY: FtpReplyCode = ...
	SERVICE_CLOSING: FtpReplyCode = ...
	DATA_CONNECTION_OPEN: FtpReplyCode = ...
	CLOSING_DATA_CONNECTION: FtpReplyCode = ...
	ENTERING_PASSIVE_MODE: FtpReplyCode = ...
	ENTERING_EXT_PASSIVE_MODE: FtpReplyCode = ...
	LOGGED_IN: FtpReplyCode = ...
	SECURELY_LOGGED_IN: FtpReplyCode = ...
	SECURITY_EXCHANGE_OK: FtpReplyCode = ...
	SECURITY_EXCHANGE_COMPLETE: FtpReplyCode = ...
	FILE_ACTION_OK: FtpReplyCode = ...
	PATHNAME_CREATED: FtpReplyCode = ...
	NEED_PASSWORD: FtpReplyCode = ...
	NEED_ACCOUNT: FtpReplyCode = ...
	NEED_ADAT: FtpReplyCode = ...
	NEED_MORE_ADAT: FtpReplyCode = ...
	FILE_ACTION_PENDING: FtpReplyCode = ...
	SERVICE_NOT_AVAILABLE: FtpReplyCode = ...
	CANT_OPEN_DATA_CONNECTION: FtpReplyCode = ...
	CONNECTION_CLOSED: FtpReplyCode = ...
	NEED_SECURITY_RESOURCE: FtpReplyCode = ...
	FILE_ACTION_NOT_TAKEN: FtpReplyCode = ...
	ACTION_ABORTED: FtpReplyCode = ...
	INSUFFICIENT_STORAGE: FtpReplyCode = ...
	COMMAND_UNRECOGNIZED: FtpReplyCode = ...
	INVALID_PARAMETER: FtpReplyCode = ...
	BAD_SEQUENCE: FtpReplyCode = ...
	NOT_IMPLEMENTED_FOR_PARAMETER: FtpReplyCode = ...
	NOT_LOGGED_IN: FtpReplyCode = ...
	NEED_ACCOUNT_FOR_STORING: FtpReplyCode = ...
	PROT_LEVEL_DENIED: FtpReplyCode = ...
	REQUEST_DENIED: FtpReplyCode = ...
	FAILED_SECURITY_CHECK: FtpReplyCode = ...
	UNSUPPORTED_PROT_LEVEL: FtpReplyCode = ...
	PROT_LEVEL_NOT_SUPPORTED_BY_SECURITY: FtpReplyCode = ...
	FILE_UNAVAILABLE: FtpReplyCode = ...
	PAGE_TYPE_UNKNOWN: FtpReplyCode = ...
	EXCEEDED_STORAGE: FtpReplyCode = ...
	FILE_NAME_NOT_ALLOWED: FtpReplyCode = ...
	PROTECTED_REPLY: FtpReplyCode = ...
	UNKNOWN_ERROR: FtpReplyCode = ...
	def isFileSystem(self, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isPermanentNegative(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isTransientNegative(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.sun.net.ftp.FtpReplyCode, 1): ...
	def isConnection(self, ) -> Union[int, JBoolean]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def isAuthentication(self, ) -> Union[int, JBoolean]: ...
	def isPositiveIntermediate(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def find(arg0: Union[int, JInt], ) -> javawrappers.sun.net.ftp.FtpReplyCode: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.ftp.FtpReplyCode: ...
	def isPositiveCompletion(self, ) -> Union[int, JBoolean]: ...
	def isInformation(self, ) -> Union[int, JBoolean]: ...
	def isUnspecified(self, ) -> Union[int, JBoolean]: ...
	def isSyntax(self, ) -> Union[int, JBoolean]: ...
	def getValue(self, ) -> Union[int, JInt]: ...
	def isPositivePreliminary(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isProtectedReply(self, ) -> Union[int, JBoolean]: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class FtpLoginException:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class FtpClientProvider:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def provider() -> javawrappers.sun.net.ftp.FtpClientProvider: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createFtpClient(self, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def notify(self, ) -> None: ...


class FtpDirEntry:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	class Permission:
		USER: FtpDirEntry.Permission = ...
		GROUP: FtpDirEntry.Permission = ...
		OTHERS: FtpDirEntry.Permission = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.ftp.FtpDirEntry.Permission: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.sun.net.ftp.FtpDirEntry.Permission, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class Type:
		FILE: FtpDirEntry.Type = ...
		DIR: FtpDirEntry.Type = ...
		PDIR: FtpDirEntry.Type = ...
		CDIR: FtpDirEntry.Type = ...
		LINK: FtpDirEntry.Type = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.ftp.FtpDirEntry.Type: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.sun.net.ftp.FtpDirEntry.Type, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getLastModified(self, ) -> javawrappers.java.util.Date: ...
	def canRead(self, arg0: javawrappers.sun.net.ftp.FtpDirEntry.Permission, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.sun.net.ftp.FtpDirEntry.Type, 1): ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.sun.net.ftp.FtpDirEntry.Permission, 1): ...
	def notifyAll(self, ) -> None: ...
	def getUser(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def setPermissions(self, arg0: JArray(JArray(Union[int, JBoolean], 1), 1), ) -> javawrappers.sun.net.ftp.FtpDirEntry: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def setSize(self, arg0: Union[long, JLong], ) -> javawrappers.sun.net.ftp.FtpDirEntry: ...
	def canExexcute(self, arg0: javawrappers.sun.net.ftp.FtpDirEntry.Permission, ) -> Union[int, JBoolean]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setUser(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.ftp.FtpDirEntry: ...
	def getFact(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.ftp.FtpDirEntry.Type: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.ftp.FtpDirEntry.Permission: ...
	def getCreated(self, ) -> javawrappers.java.util.Date: ...
	def canWrite(self, arg0: javawrappers.sun.net.ftp.FtpDirEntry.Permission, ) -> Union[int, JBoolean]: ...
	def setCreated(self, arg0: javawrappers.java.util.Date, ) -> javawrappers.sun.net.ftp.FtpDirEntry: ...
	def setType(self, arg0: javawrappers.sun.net.ftp.FtpDirEntry.Type, ) -> javawrappers.sun.net.ftp.FtpDirEntry: ...
	def addFact(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.sun.net.ftp.FtpDirEntry: ...
	def setGroup(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.ftp.FtpDirEntry: ...
	def getSize(self, ) -> Union[long, JLong]: ...
	def getType(self, ) -> javawrappers.sun.net.ftp.FtpDirEntry.Type: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getGroup(self, ) -> javawrappers.java.lang.String: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setLastModified(self, arg0: javawrappers.java.util.Date, ) -> javawrappers.sun.net.ftp.FtpDirEntry: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class FtpProtocolException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.sun.net.ftp.FtpReplyCode, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def getReplyCode(self, ) -> javawrappers.sun.net.ftp.FtpReplyCode: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class FtpClient:
	class TransferType:
		ASCII: FtpClient.TransferType = ...
		BINARY: FtpClient.TransferType = ...
		EBCDIC: FtpClient.TransferType = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.ftp.FtpClient.TransferType: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.sun.net.ftp.FtpClient.TransferType, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setConnectTimeout(self, arg0: Union[int, JInt], ) -> javawrappers.sun.net.ftp.FtpClient: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def setRestartOffset(self, arg0: Union[long, JLong], ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def getStatus(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getFile(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.OutputStream, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	@staticmethod
	def defaultPort() -> Union[int, JInt]: ...
	def setAsciiType(self, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def getSystem(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def create() -> javawrappers.sun.net.ftp.FtpClient: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	@overload
	@staticmethod
	def create(arg0: javawrappers.java.net.InetSocketAddress, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def getLastResponseString(self, ) -> javawrappers.java.lang.String: ...
	def structureMount(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def getWorkingDirectory(self, ) -> javawrappers.java.lang.String: ...
	def makeDirectory(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def setDirParser(self, arg0: javawrappers.sun.net.ftp.FtpDirParser, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def isPassiveModeEnabled(self, ) -> Union[int, JBoolean]: ...
	def setProxy(self, arg0: javawrappers.java.net.Proxy, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def getConnectTimeout(self, ) -> Union[int, JInt]: ...
	def list(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
	def enablePassiveMode(self, arg0: Union[int, JBoolean], ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def getWelcomeMsg(self, ) -> javawrappers.java.lang.String: ...
	def getFileStream(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
	def allocate(self, arg0: Union[long, JLong], ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def getFeatures(self, ) -> javawrappers.java.util.List: ...
	def getLastTransferSize(self, ) -> Union[long, JLong]: ...
	def removeDirectory(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def abort(self, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def setBinaryType(self, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def getHelp(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def isLoggedIn(self, ) -> Union[int, JBoolean]: ...
	def startSecureSession(self, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def getLastReplyCode(self, ) -> javawrappers.sun.net.ftp.FtpReplyCode: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def completePending(self, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def appendFile(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.InputStream, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def getLastModified(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Date: ...
	def getProxy(self, ) -> javawrappers.java.net.Proxy: ...
	@staticmethod
	def values() -> JArray(javawrappers.sun.net.ftp.FtpClient.TransferType, 1): ...
	def notifyAll(self, ) -> None: ...
	def getReadTimeout(self, ) -> Union[int, JInt]: ...
	def isConnected(self, ) -> Union[int, JBoolean]: ...
	@overload
	def login(self, arg0: javawrappers.java.lang.String, arg1: JArray(Union[string, JString], 1), arg2: javawrappers.java.lang.String, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	@overload
	def login(self, arg0: javawrappers.java.lang.String, arg1: JArray(Union[string, JString], 1), ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def notify(self, ) -> None: ...
	@overload
	def putFile(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.InputStream, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	@overload
	def putFile(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.InputStream, arg2: Union[int, JBoolean], ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def noop(self, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	@overload
	def putFileStream(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.java.io.OutputStream: ...
	@overload
	def putFileStream(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.OutputStream: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def siteCmd(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def changeToParentDirectory(self, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def reInit(self, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def close(self, ) -> None: ...
	def listFiles(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def connect(self, arg0: javawrappers.java.net.SocketAddress, arg1: Union[int, JInt], ) -> javawrappers.sun.net.ftp.FtpClient: ...
	@overload
	def connect(self, arg0: javawrappers.java.net.SocketAddress, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def getLastFileName(self, ) -> javawrappers.java.lang.String: ...
	def deleteFile(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def getServerAddress(self, ) -> javawrappers.java.net.SocketAddress: ...
	def changeDirectory(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.ftp.FtpClient.TransferType: ...
	def endSecureSession(self, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def setType(self, arg0: javawrappers.sun.net.ftp.FtpClient.TransferType, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def useKerberos(self, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def setReadTimeout(self, arg0: Union[int, JInt], ) -> javawrappers.sun.net.ftp.FtpClient: ...
	def getSize(self, arg0: javawrappers.java.lang.String, ) -> Union[long, JLong]: ...
	def rename(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.sun.net.ftp.FtpClient: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def nameList(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class FtpDirParser:
	def parseLine(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.net.ftp.FtpDirEntry: ...


