################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.sun.security.util.math
import javawrappers.java.nio
import javawrappers.java.math

from jpype.types import *
from typing import Union

from typing import overload

class IntegerFieldModuloP:
	def getSize(self, ) -> javawrappers.java.math.BigInteger: ...
	@overload
	def getElement(self, arg0: JArray(JByte, 1), ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	@overload
	def getElement(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JByte, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	@overload
	def getElement(self, arg0: javawrappers.java.math.BigInteger, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	def getSmallValue(self, arg0: Union[int, JInt], ) -> javawrappers.sun.security.util.math.SmallValue: ...
	def get0(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	def get1(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...


class IntegerModuloP:
	def add(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	def square(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	@overload
	def asByteArray(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	def asByteArray(self, arg0: JArray(JByte, 1), ) -> None: ...
	def asBigInteger(self, ) -> javawrappers.java.math.BigInteger: ...
	def subtract(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	def getField(self, ) -> javawrappers.sun.security.util.math.IntegerFieldModuloP: ...
	@overload
	def addModPowerTwo(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, arg1: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	def addModPowerTwo(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, arg1: JArray(JByte, 1), ) -> None: ...
	def mutable(self, ) -> javawrappers.sun.security.util.math.MutableIntegerModuloP: ...
	def pow(self, arg0: javawrappers.java.math.BigInteger, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	def fixed(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	def multiplicativeInverse(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	def additiveInverse(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	def multiply(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...


class MutableIntegerModuloP:
	def add(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	@overload
	def setProduct(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.MutableIntegerModuloP: ...
	@overload
	def setProduct(self, arg0: javawrappers.sun.security.util.math.SmallValue, ) -> javawrappers.sun.security.util.math.MutableIntegerModuloP: ...
	def asBigInteger(self, ) -> javawrappers.java.math.BigInteger: ...
	def subtract(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	def setSquare(self, ) -> javawrappers.sun.security.util.math.MutableIntegerModuloP: ...
	def getField(self, ) -> javawrappers.sun.security.util.math.IntegerFieldModuloP: ...
	@overload
	def addModPowerTwo(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, arg1: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	def addModPowerTwo(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, arg1: JArray(JByte, 1), ) -> None: ...
	def conditionalSwapWith(self, arg0: javawrappers.sun.security.util.math.MutableIntegerModuloP, arg1: Union[int, JInt], ) -> None: ...
	def setSum(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.MutableIntegerModuloP: ...
	def square(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	@overload
	def asByteArray(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	def asByteArray(self, arg0: JArray(JByte, 1), ) -> None: ...
	def setDifference(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.MutableIntegerModuloP: ...
	@overload
	def setValue(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.MutableIntegerModuloP: ...
	@overload
	def setValue(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JInt], arg2: JByte, ) -> javawrappers.sun.security.util.math.MutableIntegerModuloP: ...
	@overload
	def setValue(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JByte, ) -> javawrappers.sun.security.util.math.MutableIntegerModuloP: ...
	def mutable(self, ) -> javawrappers.sun.security.util.math.MutableIntegerModuloP: ...
	def pow(self, arg0: javawrappers.java.math.BigInteger, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	def fixed(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	def multiplicativeInverse(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	def additiveInverse(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	def multiply(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...


class ImmutableIntegerModuloP:
	def add(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	def square(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	@overload
	def asByteArray(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	def asByteArray(self, arg0: JArray(JByte, 1), ) -> None: ...
	def asBigInteger(self, ) -> javawrappers.java.math.BigInteger: ...
	def subtract(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	def getField(self, ) -> javawrappers.sun.security.util.math.IntegerFieldModuloP: ...
	@overload
	def addModPowerTwo(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, arg1: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	def addModPowerTwo(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, arg1: JArray(JByte, 1), ) -> None: ...
	def mutable(self, ) -> javawrappers.sun.security.util.math.MutableIntegerModuloP: ...
	def pow(self, arg0: javawrappers.java.math.BigInteger, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	def fixed(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	def multiplicativeInverse(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	def additiveInverse(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	def multiply(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...


class SmallValue:


