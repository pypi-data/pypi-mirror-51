################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.sun.security.util.math
import javawrappers.java.nio
import javawrappers.sun.security.util.math.intpoly
import javawrappers.java.math

from jpype.types import *
from typing import Union

from typing import overload

class IntegerPolynomial:
	class Limb:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class ImmutableElement:
		@overload
		def add(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
		@overload
		def add(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def asBigInteger(self, ) -> javawrappers.java.math.BigInteger: ...
		def subtract(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
		def notifyAll(self, ) -> None: ...
		def getField(self, ) -> javawrappers.sun.security.util.math.IntegerFieldModuloP: ...
		@overload
		def addModPowerTwo(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, arg1: JArray(JByte, 1), ) -> None: ...
		@overload
		def addModPowerTwo(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, arg1: Union[int, JInt], ) -> JArray(JByte, 1): ...
		def notify(self, ) -> None: ...
		@overload
		def square(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
		@overload
		def square(self, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
		@overload
		def asByteArray(self, arg0: JArray(JByte, 1), ) -> None: ...
		@overload
		def asByteArray(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def mutable(self, ) -> javawrappers.sun.security.util.math.MutableIntegerModuloP: ...
		@overload
		def mutable(self, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.MutableElement: ...
		def pow(self, arg0: javawrappers.java.math.BigInteger, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
		def multiplicativeInverse(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def additiveInverse(self, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
		@overload
		def additiveInverse(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
		@overload
		def fixed(self, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
		@overload
		def fixed(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
		@overload
		def multiply(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
		@overload
		def multiply(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...


	class MutableElement:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		@overload
		def addModPowerTwo(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, arg1: JArray(JByte, 1), ) -> None: ...
		@overload
		def addModPowerTwo(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, arg1: Union[int, JInt], ) -> JArray(JByte, 1): ...
		@overload
		def setSum(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.MutableIntegerModuloP: ...
		@overload
		def setSum(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.MutableElement: ...
		def notify(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def setDifference(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.MutableElement: ...
		@overload
		def setDifference(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.MutableIntegerModuloP: ...
		@overload
		def mutable(self, ) -> javawrappers.sun.security.util.math.MutableIntegerModuloP: ...
		@overload
		def mutable(self, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.MutableElement: ...
		def pow(self, arg0: javawrappers.java.math.BigInteger, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
		@overload
		def multiply(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
		@overload
		def multiply(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
		@overload
		def add(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
		@overload
		def add(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
		@overload
		def setProduct(self, arg0: javawrappers.sun.security.util.math.SmallValue, ) -> javawrappers.sun.security.util.math.MutableIntegerModuloP: ...
		@overload
		def setProduct(self, arg0: javawrappers.sun.security.util.math.SmallValue, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.MutableElement: ...
		@overload
		def setProduct(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.MutableElement: ...
		@overload
		def setProduct(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.MutableIntegerModuloP: ...
		def asBigInteger(self, ) -> javawrappers.java.math.BigInteger: ...
		def subtract(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
		@overload
		def setSquare(self, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.MutableElement: ...
		@overload
		def setSquare(self, ) -> javawrappers.sun.security.util.math.MutableIntegerModuloP: ...
		def getField(self, ) -> javawrappers.sun.security.util.math.IntegerFieldModuloP: ...
		def conditionalSwapWith(self, arg0: javawrappers.sun.security.util.math.MutableIntegerModuloP, arg1: Union[int, JInt], ) -> None: ...
		@overload
		def square(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
		@overload
		def square(self, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
		@overload
		def asByteArray(self, arg0: JArray(JByte, 1), ) -> None: ...
		@overload
		def asByteArray(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def setValue(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.MutableIntegerModuloP: ...
		@overload
		def setValue(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.MutableElement: ...
		@overload
		def setValue(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JInt], arg2: JByte, ) -> javawrappers.sun.security.util.math.MutableIntegerModuloP: ...
		@overload
		def setValue(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JInt], arg2: JByte, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.MutableElement: ...
		@overload
		def setValue(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JByte, ) -> javawrappers.sun.security.util.math.MutableIntegerModuloP: ...
		@overload
		def setValue(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JByte, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.MutableElement: ...
		def multiplicativeInverse(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def additiveInverse(self, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
		@overload
		def additiveInverse(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
		@overload
		def fixed(self, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
		@overload
		def fixed(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...


	class Element:
		@overload
		def __init__(self, arg0: javawrappers.sun.security.util.math.intpoly.IntegerPolynomial, arg1: Union[int, JBoolean], ): ...
		@overload
		def __init__(self, arg0: javawrappers.sun.security.util.math.intpoly.IntegerPolynomial, arg1: javawrappers.java.math.BigInteger, ): ...
		@overload
		def add(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
		@overload
		def add(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def asBigInteger(self, ) -> javawrappers.java.math.BigInteger: ...
		def subtract(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
		def notifyAll(self, ) -> None: ...
		def getField(self, ) -> javawrappers.sun.security.util.math.IntegerFieldModuloP: ...
		@overload
		def addModPowerTwo(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, arg1: JArray(JByte, 1), ) -> None: ...
		@overload
		def addModPowerTwo(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, arg1: Union[int, JInt], ) -> JArray(JByte, 1): ...
		def notify(self, ) -> None: ...
		@overload
		def square(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
		@overload
		def square(self, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
		@overload
		def asByteArray(self, arg0: JArray(JByte, 1), ) -> None: ...
		@overload
		def asByteArray(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def mutable(self, ) -> javawrappers.sun.security.util.math.MutableIntegerModuloP: ...
		@overload
		def mutable(self, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.MutableElement: ...
		def pow(self, arg0: javawrappers.java.math.BigInteger, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
		def fixed(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
		def multiplicativeInverse(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def additiveInverse(self, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
		@overload
		def additiveInverse(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
		@overload
		def multiply(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
		@overload
		def multiply(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def addModPowerTwo(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, arg1: JArray(JByte, 1), ) -> None: ...
	@overload
	def addModPowerTwo(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, arg1: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	def setSum(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.MutableIntegerModuloP: ...
	@overload
	def setSum(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.MutableElement: ...
	def notify(self, ) -> None: ...
	@overload
	def setDifference(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.MutableElement: ...
	@overload
	def setDifference(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.MutableIntegerModuloP: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def mutable(self, ) -> javawrappers.sun.security.util.math.MutableIntegerModuloP: ...
	@overload
	def mutable(self, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.MutableElement: ...
	def pow(self, arg0: javawrappers.java.math.BigInteger, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	@overload
	def multiply(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
	@overload
	def multiply(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	@overload
	def add(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	@overload
	def add(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
	@overload
	def setProduct(self, arg0: javawrappers.sun.security.util.math.SmallValue, ) -> javawrappers.sun.security.util.math.MutableIntegerModuloP: ...
	@overload
	def setProduct(self, arg0: javawrappers.sun.security.util.math.SmallValue, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.MutableElement: ...
	@overload
	def setProduct(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.MutableElement: ...
	@overload
	def setProduct(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.MutableIntegerModuloP: ...
	def asBigInteger(self, ) -> javawrappers.java.math.BigInteger: ...
	@overload
	def setSquare(self, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.MutableElement: ...
	@overload
	def setSquare(self, ) -> javawrappers.sun.security.util.math.MutableIntegerModuloP: ...
	def subtract(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	def conditionalSwapWith(self, arg0: javawrappers.sun.security.util.math.MutableIntegerModuloP, arg1: Union[int, JInt], ) -> None: ...
	def getField(self, ) -> javawrappers.sun.security.util.math.IntegerFieldModuloP: ...
	def getSmallValue(self, arg0: Union[int, JInt], ) -> javawrappers.sun.security.util.math.SmallValue: ...
	@overload
	def get0(self, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
	@overload
	def get0(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	@overload
	def get1(self, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
	@overload
	def get1(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	@overload
	def square(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	@overload
	def square(self, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
	@overload
	def asByteArray(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def asByteArray(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def getSize(self, ) -> javawrappers.java.math.BigInteger: ...
	@overload
	def getElement(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JByte, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	@overload
	def getElement(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JByte, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
	@overload
	def getElement(self, arg0: javawrappers.java.math.BigInteger, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
	@overload
	def getElement(self, arg0: javawrappers.java.math.BigInteger, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	@overload
	def getElement(self, arg0: JArray(JByte, 1), ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	@overload
	def setValue(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.MutableIntegerModuloP: ...
	@overload
	def setValue(self, arg0: javawrappers.sun.security.util.math.IntegerModuloP, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.MutableElement: ...
	@overload
	def setValue(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JInt], arg2: JByte, ) -> javawrappers.sun.security.util.math.MutableIntegerModuloP: ...
	@overload
	def setValue(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[int, JInt], arg2: JByte, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.MutableElement: ...
	@overload
	def setValue(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JByte, ) -> javawrappers.sun.security.util.math.MutableIntegerModuloP: ...
	@overload
	def setValue(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JByte, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.MutableElement: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def fixed(self, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
	@overload
	def fixed(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	@overload
	def fixed(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	@overload
	def fixed(self, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
	@overload
	def fixed(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	def multiplicativeInverse(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	@overload
	def additiveInverse(self, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
	@overload
	def additiveInverse(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class IntegerPolynomial448:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSize(self, ) -> javawrappers.java.math.BigInteger: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def getElement(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JByte, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	@overload
	def getElement(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JByte, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
	@overload
	def getElement(self, arg0: javawrappers.java.math.BigInteger, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
	@overload
	def getElement(self, arg0: javawrappers.java.math.BigInteger, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	@overload
	def getElement(self, arg0: JArray(JByte, 1), ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSmallValue(self, arg0: Union[int, JInt], ) -> javawrappers.sun.security.util.math.SmallValue: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def get0(self, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
	@overload
	def get0(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	@overload
	def get1(self, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
	@overload
	def get1(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	def notify(self, ) -> None: ...


class IntegerPolynomial1305:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSize(self, ) -> javawrappers.java.math.BigInteger: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def getElement(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JByte, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	@overload
	def getElement(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JByte, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
	@overload
	def getElement(self, arg0: javawrappers.java.math.BigInteger, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
	@overload
	def getElement(self, arg0: javawrappers.java.math.BigInteger, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	@overload
	def getElement(self, arg0: JArray(JByte, 1), ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSmallValue(self, arg0: Union[int, JInt], ) -> javawrappers.sun.security.util.math.SmallValue: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def get0(self, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
	@overload
	def get0(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	@overload
	def get1(self, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
	@overload
	def get1(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	def notify(self, ) -> None: ...


class IntegerPolynomial25519:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSize(self, ) -> javawrappers.java.math.BigInteger: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def getElement(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JByte, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	@overload
	def getElement(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JByte, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
	@overload
	def getElement(self, arg0: javawrappers.java.math.BigInteger, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
	@overload
	def getElement(self, arg0: javawrappers.java.math.BigInteger, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	@overload
	def getElement(self, arg0: JArray(JByte, 1), ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSmallValue(self, arg0: Union[int, JInt], ) -> javawrappers.sun.security.util.math.SmallValue: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def get0(self, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
	@overload
	def get0(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	@overload
	def get1(self, ) -> javawrappers.sun.security.util.math.intpoly.IntegerPolynomial.ImmutableElement: ...
	@overload
	def get1(self, ) -> javawrappers.sun.security.util.math.ImmutableIntegerModuloP: ...
	def notify(self, ) -> None: ...


