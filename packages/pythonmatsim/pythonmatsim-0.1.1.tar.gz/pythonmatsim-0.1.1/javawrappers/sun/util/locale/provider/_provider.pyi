################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.text.spi
import javawrappers.java.util.spi
import javawrappers.java.util
import javawrappers.java.lang
import javawrappers.java.text
import javawrappers.sun.util.resources
import javawrappers.sun.util.locale.provider
import javawrappers.sun.text.spi
import javawrappers.java.util.function
import javawrappers.sun.util.spi

from jpype.types import *
from typing import Union

from typing import overload

class AvailableLanguageTags:
	def getAvailableLanguageTags(self, ) -> javawrappers.java.util.Set: ...


class SPILocaleProviderAdapter:
	def __init__(self, ): ...
	class TimeZoneNameProviderDelegate:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def addImpl(self, arg0: javawrappers.java.util.spi.TimeZoneNameProvider, ) -> None: ...
		@overload
		def addImpl(self, arg0: javawrappers.java.util.spi.LocaleServiceProvider, ) -> None: ...
		def getDisplayName(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], arg2: Union[int, JInt], arg3: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.spi.TimeZoneNameProvider: ...
		@overload
		def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.spi.LocaleServiceProvider: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getGenericDisplayName(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...


	class LocaleNameProviderDelegate:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDisplayScript(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
		def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def addImpl(self, arg0: javawrappers.java.util.spi.LocaleServiceProvider, ) -> None: ...
		@overload
		def addImpl(self, arg0: javawrappers.java.util.spi.LocaleNameProvider, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def getDisplayUnicodeExtensionType(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
		def getDisplayUnicodeExtensionKey(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def getDisplayCountry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.spi.LocaleNameProvider: ...
		@overload
		def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.spi.LocaleServiceProvider: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getDisplayVariant(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getDisplayLanguage(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
		def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...


	class CurrencyNameProviderDelegate:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def addImpl(self, arg0: javawrappers.java.util.spi.LocaleServiceProvider, ) -> None: ...
		@overload
		def addImpl(self, arg0: javawrappers.java.util.spi.CurrencyNameProvider, ) -> None: ...
		def getDisplayName(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.spi.CurrencyNameProvider: ...
		@overload
		def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.spi.LocaleServiceProvider: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...
		def getSymbol(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...


	class CalendarNameProviderDelegate:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def addImpl(self, arg0: javawrappers.java.util.spi.LocaleServiceProvider, ) -> None: ...
		@overload
		def addImpl(self, arg0: javawrappers.java.util.spi.CalendarNameProvider, ) -> None: ...
		def getDisplayName(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.spi.CalendarNameProvider: ...
		@overload
		def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.spi.LocaleServiceProvider: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getDisplayNames(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.util.Locale, ) -> javawrappers.java.util.Map: ...
		def notify(self, ) -> None: ...
		def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...


	class CalendarDataProviderDelegate:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getMinimalDaysInFirstWeek(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JInt]: ...
		@overload
		def addImpl(self, arg0: javawrappers.java.util.spi.CalendarDataProvider, ) -> None: ...
		@overload
		def addImpl(self, arg0: javawrappers.java.util.spi.LocaleServiceProvider, ) -> None: ...
		def getFirstDayOfWeek(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JInt]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.spi.LocaleServiceProvider: ...
		@overload
		def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.spi.CalendarDataProvider: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...


	class NumberFormatProviderDelegate:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def addImpl(self, arg0: javawrappers.java.util.spi.LocaleServiceProvider, ) -> None: ...
		@overload
		def addImpl(self, arg0: javawrappers.java.text.spi.NumberFormatProvider, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def getCurrencyInstance(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
		def getPercentInstance(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
		def notify(self, ) -> None: ...
		def getNumberInstance(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.spi.NumberFormatProvider: ...
		@overload
		def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.spi.LocaleServiceProvider: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getIntegerInstance(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...


	class DecimalFormatSymbolsProviderDelegate:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def addImpl(self, arg0: javawrappers.java.util.spi.LocaleServiceProvider, ) -> None: ...
		@overload
		def addImpl(self, arg0: javawrappers.java.text.spi.DecimalFormatSymbolsProvider, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.spi.DecimalFormatSymbolsProvider: ...
		@overload
		def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.spi.LocaleServiceProvider: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getInstance(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DecimalFormatSymbols: ...
		def notify(self, ) -> None: ...
		def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...


	class DateFormatSymbolsProviderDelegate:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def addImpl(self, arg0: javawrappers.java.util.spi.LocaleServiceProvider, ) -> None: ...
		@overload
		def addImpl(self, arg0: javawrappers.java.text.spi.DateFormatSymbolsProvider, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.spi.DateFormatSymbolsProvider: ...
		@overload
		def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.spi.LocaleServiceProvider: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getInstance(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormatSymbols: ...
		def notify(self, ) -> None: ...
		def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...


	class DateFormatProviderDelegate:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def addImpl(self, arg0: javawrappers.java.util.spi.LocaleServiceProvider, ) -> None: ...
		@overload
		def addImpl(self, arg0: javawrappers.java.text.spi.DateFormatProvider, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def getTimeInstance(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
		def notify(self, ) -> None: ...
		def getDateInstance(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
		def getDateTimeInstance(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.spi.DateFormatProvider: ...
		@overload
		def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.spi.LocaleServiceProvider: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...


	class CollatorProviderDelegate:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def addImpl(self, arg0: javawrappers.java.util.spi.LocaleServiceProvider, ) -> None: ...
		@overload
		def addImpl(self, arg0: javawrappers.java.text.spi.CollatorProvider, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.spi.CollatorProvider: ...
		@overload
		def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.spi.LocaleServiceProvider: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getInstance(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.Collator: ...
		def notify(self, ) -> None: ...
		def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...


	class BreakIteratorProviderDelegate:
		def getSentenceInstance(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.BreakIterator: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def addImpl(self, arg0: javawrappers.java.util.spi.LocaleServiceProvider, ) -> None: ...
		@overload
		def addImpl(self, arg0: javawrappers.java.text.spi.BreakIteratorProvider, ) -> None: ...
		def getCharacterInstance(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.BreakIterator: ...
		def getWordInstance(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.BreakIterator: ...
		def notifyAll(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def getLineInstance(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.BreakIterator: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.spi.BreakIteratorProvider: ...
		@overload
		def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.spi.LocaleServiceProvider: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...


	class Delegate:
		def addImpl(self, arg0: javawrappers.java.util.spi.LocaleServiceProvider, ) -> None: ...
		def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.spi.LocaleServiceProvider: ...


	def getBreakIteratorProvider(self, ) -> javawrappers.java.text.spi.BreakIteratorProvider: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def getAdapterPreference() -> javawrappers.java.util.List: ...
	def getLocaleServiceProvider(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.spi.LocaleServiceProvider: ...
	def getDisplayUnicodeExtensionType(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getResourceBundleBased() -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter: ...
	def getDisplayUnicodeExtensionKey(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def toLocaleArray(arg0: javawrappers.java.util.Set, ) -> JArray(javawrappers.java.util.Locale, 1): ...
	def getCurrencyInstance(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	def getTimeInstance(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
	def getDisplayCountry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	@overload
	def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.spi.LocaleServiceProvider: ...
	@overload
	def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.spi.DateFormatProvider: ...
	@overload
	def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.spi.LocaleServiceProvider: ...
	@overload
	def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.spi.TimeZoneNameProvider: ...
	@overload
	def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.spi.LocaleServiceProvider: ...
	@overload
	def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.spi.CollatorProvider: ...
	@overload
	def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.spi.LocaleServiceProvider: ...
	@overload
	def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.spi.CurrencyNameProvider: ...
	@overload
	def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.spi.LocaleServiceProvider: ...
	@overload
	def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.spi.LocaleNameProvider: ...
	@overload
	def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.spi.LocaleServiceProvider: ...
	@overload
	def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.spi.NumberFormatProvider: ...
	@overload
	def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.spi.LocaleServiceProvider: ...
	@overload
	def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.spi.LocaleServiceProvider: ...
	@overload
	def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.spi.CalendarDataProvider: ...
	@overload
	def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.spi.BreakIteratorProvider: ...
	@overload
	def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.spi.LocaleServiceProvider: ...
	@overload
	def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.spi.CalendarNameProvider: ...
	@overload
	def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.spi.LocaleServiceProvider: ...
	@overload
	def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.spi.DecimalFormatSymbolsProvider: ...
	@overload
	def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.spi.LocaleServiceProvider: ...
	@overload
	def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.spi.DateFormatSymbolsProvider: ...
	@overload
	def getImpl(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.spi.LocaleServiceProvider: ...
	def getJavaTimeDateTimePatternProvider(self, ) -> javawrappers.sun.text.spi.JavaTimeDateTimePatternProvider: ...
	def getGenericDisplayName(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	@overload
	def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...
	@overload
	def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...
	@overload
	def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...
	@overload
	def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...
	@overload
	def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...
	@overload
	def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...
	@overload
	def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...
	@overload
	def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...
	@overload
	def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...
	@overload
	def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...
	@overload
	def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...
	@overload
	def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...
	@staticmethod
	def getAdapter(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.Locale, ) -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter: ...
	def getCalendarNameProvider(self, ) -> javawrappers.java.util.spi.CalendarNameProvider: ...
	def isSupportedProviderLocale(self, arg0: javawrappers.java.util.Locale, arg1: javawrappers.java.util.Set, ) -> Union[int, JBoolean]: ...
	def getWordInstance(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.BreakIterator: ...
	def getCurrencyNameProvider(self, ) -> javawrappers.java.util.spi.CurrencyNameProvider: ...
	def getNumberInstance(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	def getLineInstance(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.BreakIterator: ...
	def getDateTimeInstance(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
	@overload
	def getDisplayName(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], arg2: Union[int, JInt], arg3: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	@overload
	def getDisplayName(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	@overload
	def getDisplayName(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def getCollatorProvider(self, ) -> javawrappers.java.text.spi.CollatorProvider: ...
	def getIntegerInstance(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	@staticmethod
	def forType(arg0: javawrappers.sun.util.locale.provider.LocaleProviderAdapter.Type, ) -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter: ...
	def getSymbol(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def getSentenceInstance(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.BreakIterator: ...
	@overload
	def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
	@overload
	def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
	@overload
	def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
	@overload
	def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
	@overload
	def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
	@overload
	def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
	@overload
	def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
	@overload
	def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
	@overload
	def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
	@overload
	def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
	@overload
	def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
	def getMinimalDaysInFirstWeek(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getCharacterInstance(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.BreakIterator: ...
	def notifyAll(self, ) -> None: ...
	def getAdapterType(self, ) -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter.Type: ...
	@staticmethod
	def forJRE() -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter: ...
	def notify(self, ) -> None: ...
	def getTimeZoneNameProvider(self, ) -> javawrappers.java.util.spi.TimeZoneNameProvider: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getDecimalFormatSymbolsProvider(self, ) -> javawrappers.java.text.spi.DecimalFormatSymbolsProvider: ...
	def getDisplayVariant(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def getCalendarProvider(self, ) -> javawrappers.sun.util.spi.CalendarProvider: ...
	def getDisplayNames(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.util.Locale, ) -> javawrappers.java.util.Map: ...
	def getCalendarDataProvider(self, ) -> javawrappers.java.util.spi.CalendarDataProvider: ...
	def getDisplayScript(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	@overload
	def addImpl(self, arg0: javawrappers.java.util.spi.LocaleServiceProvider, ) -> None: ...
	@overload
	def addImpl(self, arg0: javawrappers.java.util.spi.LocaleNameProvider, ) -> None: ...
	@overload
	def addImpl(self, arg0: javawrappers.java.util.spi.LocaleServiceProvider, ) -> None: ...
	@overload
	def addImpl(self, arg0: javawrappers.java.text.spi.NumberFormatProvider, ) -> None: ...
	@overload
	def addImpl(self, arg0: javawrappers.java.util.spi.LocaleServiceProvider, ) -> None: ...
	@overload
	def addImpl(self, arg0: javawrappers.java.text.spi.BreakIteratorProvider, ) -> None: ...
	@overload
	def addImpl(self, arg0: javawrappers.java.util.spi.LocaleServiceProvider, ) -> None: ...
	@overload
	def addImpl(self, arg0: javawrappers.java.util.spi.CalendarNameProvider, ) -> None: ...
	@overload
	def addImpl(self, arg0: javawrappers.java.util.spi.CalendarDataProvider, ) -> None: ...
	@overload
	def addImpl(self, arg0: javawrappers.java.util.spi.LocaleServiceProvider, ) -> None: ...
	@overload
	def addImpl(self, arg0: javawrappers.java.util.spi.LocaleServiceProvider, ) -> None: ...
	@overload
	def addImpl(self, arg0: javawrappers.java.text.spi.DecimalFormatSymbolsProvider, ) -> None: ...
	@overload
	def addImpl(self, arg0: javawrappers.java.util.spi.LocaleServiceProvider, ) -> None: ...
	@overload
	def addImpl(self, arg0: javawrappers.java.text.spi.DateFormatSymbolsProvider, ) -> None: ...
	@overload
	def addImpl(self, arg0: javawrappers.java.util.spi.LocaleServiceProvider, ) -> None: ...
	@overload
	def addImpl(self, arg0: javawrappers.java.text.spi.DateFormatProvider, ) -> None: ...
	@overload
	def addImpl(self, arg0: javawrappers.java.util.spi.LocaleServiceProvider, ) -> None: ...
	@overload
	def addImpl(self, arg0: javawrappers.java.util.spi.TimeZoneNameProvider, ) -> None: ...
	@overload
	def addImpl(self, arg0: javawrappers.java.util.spi.LocaleServiceProvider, ) -> None: ...
	@overload
	def addImpl(self, arg0: javawrappers.java.util.spi.LocaleServiceProvider, ) -> None: ...
	@overload
	def addImpl(self, arg0: javawrappers.java.util.spi.CurrencyNameProvider, ) -> None: ...
	@overload
	def addImpl(self, arg0: javawrappers.java.util.spi.LocaleServiceProvider, ) -> None: ...
	@overload
	def addImpl(self, arg0: javawrappers.java.text.spi.CollatorProvider, ) -> None: ...
	def getLocaleNameProvider(self, ) -> javawrappers.java.util.spi.LocaleNameProvider: ...
	def getDateFormatProvider(self, ) -> javawrappers.java.text.spi.DateFormatProvider: ...
	def getPercentInstance(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	def getDateInstance(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
	def getFirstDayOfWeek(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getNumberFormatProvider(self, ) -> javawrappers.java.text.spi.NumberFormatProvider: ...
	def getLocaleResources(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.sun.util.locale.provider.LocaleResources: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getInstance(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.Collator: ...
	@overload
	def getInstance(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormatSymbols: ...
	@overload
	def getInstance(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DecimalFormatSymbols: ...
	def getDisplayLanguage(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def getDateFormatSymbolsProvider(self, ) -> javawrappers.java.text.spi.DateFormatSymbolsProvider: ...


class CalendarDataUtility:
	class CalendarWeekParameterGetter:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def getObject(self, arg0: javawrappers.java.util.spi.CalendarDataProvider, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Integer: ...
		@overload
		def getObject(self, arg0: javawrappers.java.util.spi.LocaleServiceProvider, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.String, arg3: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class CalendarFieldValueNamesMapGetter:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def getObject(self, arg0: javawrappers.java.util.spi.CalendarNameProvider, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Map: ...
		@overload
		def getObject(self, arg0: javawrappers.java.util.spi.LocaleServiceProvider, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.String, arg3: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class CalendarFieldValueNameGetter:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def getObject(self, arg0: javawrappers.java.util.spi.CalendarNameProvider, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
		@overload
		def getObject(self, arg0: javawrappers.java.util.spi.LocaleServiceProvider, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.String, arg3: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def getObject(self, arg0: javawrappers.java.util.spi.CalendarNameProvider, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.util.Map: ...
	@overload
	def getObject(self, arg0: javawrappers.java.util.spi.LocaleServiceProvider, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.String, arg3: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
	@overload
	def getObject(self, arg0: javawrappers.java.util.spi.CalendarDataProvider, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Integer: ...
	@overload
	def getObject(self, arg0: javawrappers.java.util.spi.LocaleServiceProvider, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.String, arg3: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
	@overload
	def getObject(self, arg0: javawrappers.java.util.spi.CalendarNameProvider, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getObject(self, arg0: javawrappers.java.util.spi.LocaleServiceProvider, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.String, arg3: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def retrieveFieldValueNames(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.util.Locale, ) -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def retrieveFieldValueName(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def retrieveMinimalDaysInFirstWeek(arg0: javawrappers.java.util.Locale, ) -> Union[int, JInt]: ...
	@staticmethod
	def retrieveJavaTimeFieldValueName(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def retrieveJavaTimeFieldValueNames(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.util.Locale, ) -> javawrappers.java.util.Map: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def retrieveFirstDayOfWeek(arg0: javawrappers.java.util.Locale, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def findRegionOverride(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.Locale: ...


class JavaTimeDateTimePatternImpl:
	def __init__(self, arg0: javawrappers.sun.util.locale.provider.LocaleProviderAdapter.Type, arg1: javawrappers.java.util.Set, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getJavaTimeDateTimePattern(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...
	def getAvailableLanguageTags(self, ) -> javawrappers.java.util.Set: ...


class JRELocaleProviderAdapter:
	def __init__(self, ): ...
	class AvailableJRELocales:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getBreakIteratorProvider(self, ) -> javawrappers.java.text.spi.BreakIteratorProvider: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def getAdapterPreference() -> javawrappers.java.util.List: ...
	def getLocaleServiceProvider(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.spi.LocaleServiceProvider: ...
	def getAdapterType(self, ) -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter.Type: ...
	@staticmethod
	def getResourceBundleBased() -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter: ...
	@staticmethod
	def toLocaleArray(arg0: javawrappers.java.util.Set, ) -> JArray(javawrappers.java.util.Locale, 1): ...
	@staticmethod
	def forJRE() -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter: ...
	def notify(self, ) -> None: ...
	def getTimeZoneNameProvider(self, ) -> javawrappers.java.util.spi.TimeZoneNameProvider: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getJavaTimeDateTimePatternProvider(self, ) -> javawrappers.sun.text.spi.JavaTimeDateTimePatternProvider: ...
	def getDecimalFormatSymbolsProvider(self, ) -> javawrappers.java.text.spi.DecimalFormatSymbolsProvider: ...
	def getCalendarProvider(self, ) -> javawrappers.sun.util.spi.CalendarProvider: ...
	def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...
	def getCalendarDataProvider(self, ) -> javawrappers.java.util.spi.CalendarDataProvider: ...
	@staticmethod
	def getAdapter(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.Locale, ) -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter: ...
	def getCalendarNameProvider(self, ) -> javawrappers.java.util.spi.CalendarNameProvider: ...
	def isSupportedProviderLocale(self, arg0: javawrappers.java.util.Locale, arg1: javawrappers.java.util.Set, ) -> Union[int, JBoolean]: ...
	def getLanguageTagSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Set: ...
	def getLocaleNameProvider(self, ) -> javawrappers.java.util.spi.LocaleNameProvider: ...
	def getDateFormatProvider(self, ) -> javawrappers.java.text.spi.DateFormatProvider: ...
	def getCurrencyNameProvider(self, ) -> javawrappers.java.util.spi.CurrencyNameProvider: ...
	def getLocaleData(self, ) -> javawrappers.sun.util.resources.LocaleData: ...
	def getCandidateLocales(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.List: ...
	def getCollatorProvider(self, ) -> javawrappers.java.text.spi.CollatorProvider: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def forType(arg0: javawrappers.sun.util.locale.provider.LocaleProviderAdapter.Type, ) -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter: ...
	def getNumberFormatProvider(self, ) -> javawrappers.java.text.spi.NumberFormatProvider: ...
	def getLocaleResources(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.sun.util.locale.provider.LocaleResources: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDateFormatSymbolsProvider(self, ) -> javawrappers.java.text.spi.DateFormatSymbolsProvider: ...


class BreakIteratorProviderImpl:
	def __init__(self, arg0: javawrappers.sun.util.locale.provider.LocaleProviderAdapter.Type, arg1: javawrappers.java.util.Set, ): ...
	def getSentenceInstance(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.BreakIterator: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getCharacterInstance(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.BreakIterator: ...
	def getWordInstance(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.BreakIterator: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getAvailableLanguageTags(self, ) -> javawrappers.java.util.Set: ...
	def getLineInstance(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.BreakIterator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...


class TimeZoneNameUtility:
	class TimeZoneNameGetter:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def getObject(self, arg0: javawrappers.java.util.spi.TimeZoneNameProvider, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
		@overload
		def getObject(self, arg0: javawrappers.java.util.spi.LocaleServiceProvider, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.String, arg3: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def getObject(self, arg0: javawrappers.java.util.spi.TimeZoneNameProvider, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def getObject(self, arg0: javawrappers.java.util.spi.LocaleServiceProvider, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.String, arg3: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def convertLDMLShortID(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...
	@staticmethod
	def retrieveGenericDisplayName(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def canonicalTZID(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def retrieveDisplayNames(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@staticmethod
	def getZoneStrings(arg0: javawrappers.java.util.Locale, ) -> JArray(JArray(javawrappers.java.lang.String, 1), 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def retrieveDisplayName(arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], arg2: Union[int, JInt], arg3: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...


class CurrencyNameProviderImpl:
	def __init__(self, arg0: javawrappers.sun.util.locale.provider.LocaleProviderAdapter.Type, arg1: javawrappers.java.util.Set, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDisplayName(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...
	def getSymbol(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def getAvailableLanguageTags(self, ) -> javawrappers.java.util.Set: ...


class HostLocaleProviderAdapterImpl:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class DateFormatProviderImpl:
	def __init__(self, arg0: javawrappers.sun.util.locale.provider.LocaleProviderAdapter.Type, arg1: javawrappers.java.util.Set, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDateTimeInstance(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getTimeInstance(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
	def notify(self, ) -> None: ...
	def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...
	def getAvailableLanguageTags(self, ) -> javawrappers.java.util.Set: ...
	def getDateInstance(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...


class CollatorProviderImpl:
	def __init__(self, arg0: javawrappers.sun.util.locale.provider.LocaleProviderAdapter.Type, arg1: javawrappers.java.util.Set, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getInstance(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.Collator: ...
	def notify(self, ) -> None: ...
	def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...
	def getAvailableLanguageTags(self, ) -> javawrappers.java.util.Set: ...


class TimeZoneNameProviderImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDisplayName(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], arg2: Union[int, JInt], arg3: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getGenericDisplayName(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...


class LocaleProviderAdapter:
	def __init__(self, ): ...
	class NonExistentAdapter:
		def getBreakIteratorProvider(self, ) -> javawrappers.java.text.spi.BreakIteratorProvider: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def getAdapterPreference() -> javawrappers.java.util.List: ...
		def getLocaleServiceProvider(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.spi.LocaleServiceProvider: ...
		def getAdapterType(self, ) -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter.Type: ...
		@staticmethod
		def getResourceBundleBased() -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter: ...
		@staticmethod
		def toLocaleArray(arg0: javawrappers.java.util.Set, ) -> JArray(javawrappers.java.util.Locale, 1): ...
		@staticmethod
		def forJRE() -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter: ...
		def notify(self, ) -> None: ...
		def getTimeZoneNameProvider(self, ) -> javawrappers.java.util.spi.TimeZoneNameProvider: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getJavaTimeDateTimePatternProvider(self, ) -> javawrappers.sun.text.spi.JavaTimeDateTimePatternProvider: ...
		def getDecimalFormatSymbolsProvider(self, ) -> javawrappers.java.text.spi.DecimalFormatSymbolsProvider: ...
		def getCalendarProvider(self, ) -> javawrappers.sun.util.spi.CalendarProvider: ...
		def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...
		def getCalendarDataProvider(self, ) -> javawrappers.java.util.spi.CalendarDataProvider: ...
		@staticmethod
		def getAdapter(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.Locale, ) -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter: ...
		def getCalendarNameProvider(self, ) -> javawrappers.java.util.spi.CalendarNameProvider: ...
		def isSupportedProviderLocale(self, arg0: javawrappers.java.util.Locale, arg1: javawrappers.java.util.Set, ) -> Union[int, JBoolean]: ...
		def getLanguageTagSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Set: ...
		def getLocaleNameProvider(self, ) -> javawrappers.java.util.spi.LocaleNameProvider: ...
		def getDateFormatProvider(self, ) -> javawrappers.java.text.spi.DateFormatProvider: ...
		def getCurrencyNameProvider(self, ) -> javawrappers.java.util.spi.CurrencyNameProvider: ...
		def getLocaleData(self, ) -> javawrappers.sun.util.resources.LocaleData: ...
		def getCandidateLocales(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.List: ...
		def getCollatorProvider(self, ) -> javawrappers.java.text.spi.CollatorProvider: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def forType(arg0: javawrappers.sun.util.locale.provider.LocaleProviderAdapter.Type, ) -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter: ...
		def getNumberFormatProvider(self, ) -> javawrappers.java.text.spi.NumberFormatProvider: ...
		def getLocaleResources(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.sun.util.locale.provider.LocaleResources: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getDateFormatSymbolsProvider(self, ) -> javawrappers.java.text.spi.DateFormatSymbolsProvider: ...


	class Type:
		JRE: LocaleProviderAdapter.Type = ...
		CLDR: LocaleProviderAdapter.Type = ...
		SPI: LocaleProviderAdapter.Type = ...
		HOST: LocaleProviderAdapter.Type = ...
		FALLBACK: LocaleProviderAdapter.Type = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter.Type: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def values() -> JArray(javawrappers.sun.util.locale.provider.LocaleProviderAdapter.Type, 1): ...
		def getTextResourcesPackage(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		def getAdapterClassName(self, ) -> javawrappers.java.lang.String: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getUtilResourcesPackage(self, ) -> javawrappers.java.lang.String: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	@overload
	def getBreakIteratorProvider(self, ) -> javawrappers.java.text.spi.BreakIteratorProvider: ...
	@overload
	def getBreakIteratorProvider(self, ) -> javawrappers.java.text.spi.BreakIteratorProvider: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.sun.util.locale.provider.LocaleProviderAdapter.Type, 1): ...
	def getTextResourcesPackage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getLocaleServiceProvider(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.spi.LocaleServiceProvider: ...
	@overload
	def getLocaleServiceProvider(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.spi.LocaleServiceProvider: ...
	@staticmethod
	def getAdapterPreference() -> javawrappers.java.util.List: ...
	@overload
	def getAdapterType(self, ) -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter.Type: ...
	@overload
	def getAdapterType(self, ) -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter.Type: ...
	@staticmethod
	def getResourceBundleBased() -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	@staticmethod
	def toLocaleArray(arg0: javawrappers.java.util.Set, ) -> JArray(javawrappers.java.util.Locale, 1): ...
	@staticmethod
	def forJRE() -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def getTimeZoneNameProvider(self, ) -> javawrappers.java.util.spi.TimeZoneNameProvider: ...
	@overload
	def getTimeZoneNameProvider(self, ) -> javawrappers.java.util.spi.TimeZoneNameProvider: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def getJavaTimeDateTimePatternProvider(self, ) -> javawrappers.sun.text.spi.JavaTimeDateTimePatternProvider: ...
	@overload
	def getJavaTimeDateTimePatternProvider(self, ) -> javawrappers.sun.text.spi.JavaTimeDateTimePatternProvider: ...
	@overload
	def getDecimalFormatSymbolsProvider(self, ) -> javawrappers.java.text.spi.DecimalFormatSymbolsProvider: ...
	@overload
	def getDecimalFormatSymbolsProvider(self, ) -> javawrappers.java.text.spi.DecimalFormatSymbolsProvider: ...
	@overload
	def getCalendarProvider(self, ) -> javawrappers.sun.util.spi.CalendarProvider: ...
	@overload
	def getCalendarProvider(self, ) -> javawrappers.sun.util.spi.CalendarProvider: ...
	def getUtilResourcesPackage(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...
	@overload
	def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...
	@overload
	def getCalendarDataProvider(self, ) -> javawrappers.java.util.spi.CalendarDataProvider: ...
	@overload
	def getCalendarDataProvider(self, ) -> javawrappers.java.util.spi.CalendarDataProvider: ...
	@staticmethod
	def getAdapter(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.Locale, ) -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter: ...
	@overload
	def getCalendarNameProvider(self, ) -> javawrappers.java.util.spi.CalendarNameProvider: ...
	@overload
	def getCalendarNameProvider(self, ) -> javawrappers.java.util.spi.CalendarNameProvider: ...
	@overload
	def isSupportedProviderLocale(self, arg0: javawrappers.java.util.Locale, arg1: javawrappers.java.util.Set, ) -> Union[int, JBoolean]: ...
	@overload
	def isSupportedProviderLocale(self, arg0: javawrappers.java.util.Locale, arg1: javawrappers.java.util.Set, ) -> Union[int, JBoolean]: ...
	def getLanguageTagSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Set: ...
	@overload
	def getLocaleNameProvider(self, ) -> javawrappers.java.util.spi.LocaleNameProvider: ...
	@overload
	def getLocaleNameProvider(self, ) -> javawrappers.java.util.spi.LocaleNameProvider: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter.Type: ...
	@overload
	def getDateFormatProvider(self, ) -> javawrappers.java.text.spi.DateFormatProvider: ...
	@overload
	def getDateFormatProvider(self, ) -> javawrappers.java.text.spi.DateFormatProvider: ...
	@overload
	def getCurrencyNameProvider(self, ) -> javawrappers.java.util.spi.CurrencyNameProvider: ...
	@overload
	def getCurrencyNameProvider(self, ) -> javawrappers.java.util.spi.CurrencyNameProvider: ...
	def getLocaleData(self, ) -> javawrappers.sun.util.resources.LocaleData: ...
	def getCandidateLocales(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.List: ...
	def getAdapterClassName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getCollatorProvider(self, ) -> javawrappers.java.text.spi.CollatorProvider: ...
	@overload
	def getCollatorProvider(self, ) -> javawrappers.java.text.spi.CollatorProvider: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def forType(arg0: javawrappers.sun.util.locale.provider.LocaleProviderAdapter.Type, ) -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getNumberFormatProvider(self, ) -> javawrappers.java.text.spi.NumberFormatProvider: ...
	@overload
	def getNumberFormatProvider(self, ) -> javawrappers.java.text.spi.NumberFormatProvider: ...
	@overload
	def getLocaleResources(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.sun.util.locale.provider.LocaleResources: ...
	@overload
	def getLocaleResources(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.sun.util.locale.provider.LocaleResources: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getDateFormatSymbolsProvider(self, ) -> javawrappers.java.text.spi.DateFormatSymbolsProvider: ...
	@overload
	def getDateFormatSymbolsProvider(self, ) -> javawrappers.java.text.spi.DateFormatSymbolsProvider: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class HostLocaleProviderAdapter:
	def __init__(self, ): ...
	def getBreakIteratorProvider(self, ) -> javawrappers.java.text.spi.BreakIteratorProvider: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def getAdapterPreference() -> javawrappers.java.util.List: ...
	def getLocaleServiceProvider(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.spi.LocaleServiceProvider: ...
	def getAdapterType(self, ) -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter.Type: ...
	@staticmethod
	def getResourceBundleBased() -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter: ...
	@staticmethod
	def toLocaleArray(arg0: javawrappers.java.util.Set, ) -> JArray(javawrappers.java.util.Locale, 1): ...
	@staticmethod
	def forJRE() -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter: ...
	def notify(self, ) -> None: ...
	def getTimeZoneNameProvider(self, ) -> javawrappers.java.util.spi.TimeZoneNameProvider: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getJavaTimeDateTimePatternProvider(self, ) -> javawrappers.sun.text.spi.JavaTimeDateTimePatternProvider: ...
	def getDecimalFormatSymbolsProvider(self, ) -> javawrappers.java.text.spi.DecimalFormatSymbolsProvider: ...
	def getCalendarProvider(self, ) -> javawrappers.sun.util.spi.CalendarProvider: ...
	def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...
	def getCalendarDataProvider(self, ) -> javawrappers.java.util.spi.CalendarDataProvider: ...
	@staticmethod
	def getAdapter(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.Locale, ) -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter: ...
	def getCalendarNameProvider(self, ) -> javawrappers.java.util.spi.CalendarNameProvider: ...
	def isSupportedProviderLocale(self, arg0: javawrappers.java.util.Locale, arg1: javawrappers.java.util.Set, ) -> Union[int, JBoolean]: ...
	def getLocaleNameProvider(self, ) -> javawrappers.java.util.spi.LocaleNameProvider: ...
	def getDateFormatProvider(self, ) -> javawrappers.java.text.spi.DateFormatProvider: ...
	def getCurrencyNameProvider(self, ) -> javawrappers.java.util.spi.CurrencyNameProvider: ...
	def getCollatorProvider(self, ) -> javawrappers.java.text.spi.CollatorProvider: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def forType(arg0: javawrappers.sun.util.locale.provider.LocaleProviderAdapter.Type, ) -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter: ...
	def getNumberFormatProvider(self, ) -> javawrappers.java.text.spi.NumberFormatProvider: ...
	def getLocaleResources(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.sun.util.locale.provider.LocaleResources: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDateFormatSymbolsProvider(self, ) -> javawrappers.java.text.spi.DateFormatSymbolsProvider: ...


class JRELocaleConstants:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class BaseLocaleDataMetaInfo:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def tzCanonicalIDs(self, ) -> javawrappers.java.util.Map: ...
	def availableLanguageTags(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getType(self, ) -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter.Type: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getSupportedLocaleString(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getLanguageAliasMap(self, ) -> javawrappers.java.util.Map: ...
	def notify(self, ) -> None: ...


class CalendarDataProviderImpl:
	def __init__(self, arg0: javawrappers.sun.util.locale.provider.LocaleProviderAdapter.Type, arg1: javawrappers.java.util.Set, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getMinimalDaysInFirstWeek(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JInt]: ...
	def getFirstDayOfWeek(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...
	def getAvailableLanguageTags(self, ) -> javawrappers.java.util.Set: ...


class CalendarProviderImpl:
	def __init__(self, arg0: javawrappers.sun.util.locale.provider.LocaleProviderAdapter.Type, arg1: javawrappers.java.util.Set, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getInstance(self, arg0: javawrappers.java.util.TimeZone, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.Calendar: ...
	def notify(self, ) -> None: ...
	def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...
	def getAvailableLanguageTags(self, ) -> javawrappers.java.util.Set: ...


class LocaleServiceProviderPool:
	class LocalizedObjectGetter:
		def getObject(self, arg0: javawrappers.java.util.spi.LocaleServiceProvider, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


	class AllAvailableLocales:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getObject(self, arg0: javawrappers.java.util.spi.LocaleServiceProvider, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getPool(arg0: javawrappers.java.lang.Class, ) -> javawrappers.sun.util.locale.provider.LocaleServiceProviderPool: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getAllAvailableLocales() -> JArray(javawrappers.java.util.Locale, 1): ...
	def notify(self, ) -> None: ...
	def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...
	@overload
	def getLocalizedObject(self, arg0: javawrappers.sun.util.locale.provider.LocaleServiceProviderPool.LocalizedObjectGetter, arg1: javawrappers.java.util.Locale, *arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getLocalizedObject(self, arg0: javawrappers.sun.util.locale.provider.LocaleServiceProviderPool.LocalizedObjectGetter, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getLocalizedObject(self, arg0: javawrappers.sun.util.locale.provider.LocaleServiceProviderPool.LocalizedObjectGetter, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Boolean, arg3: javawrappers.java.lang.String, *arg4: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class ResourceBundleBasedAdapter:
	def getLocaleData(self, ) -> javawrappers.sun.util.resources.LocaleData: ...
	def getCandidateLocales(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.List: ...


class CalendarNameProviderImpl:
	def __init__(self, arg0: javawrappers.sun.util.locale.provider.LocaleProviderAdapter.Type, arg1: javawrappers.java.util.Set, ): ...
	class LengthBasedComparator:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def compare(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
		@overload
		def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
		def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
		@overload
		def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
		def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def reversed(self, ) -> javawrappers.java.util.Comparator: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
	@overload
	def compare(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@overload
	def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDisplayNameImpl(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: javawrappers.java.util.Locale, arg5: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
	def getJavaTimeDisplayNames(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.util.Locale, ) -> javawrappers.java.util.Map: ...
	def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
	def notifyAll(self, ) -> None: ...
	def getJavaTimeDisplayName(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getAvailableLanguageTags(self, ) -> javawrappers.java.util.Set: ...
	def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	def getDisplayName(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDisplayNames(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.util.Locale, ) -> javawrappers.java.util.Map: ...
	def reversed(self, ) -> javawrappers.java.util.Comparator: ...
	def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...


class NumberFormatProviderImpl:
	def __init__(self, arg0: javawrappers.sun.util.locale.provider.LocaleProviderAdapter.Type, arg1: javawrappers.java.util.Set, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getCurrencyInstance(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	def getPercentInstance(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	def notify(self, ) -> None: ...
	def getAvailableLanguageTags(self, ) -> javawrappers.java.util.Set: ...
	def getNumberInstance(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getIntegerInstance(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...


class AuxLocaleProviderAdapter:
	def __init__(self, ): ...
	class NullProvider:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...


	def getBreakIteratorProvider(self, ) -> javawrappers.java.text.spi.BreakIteratorProvider: ...
	def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def getAdapterPreference() -> javawrappers.java.util.List: ...
	def getLocaleServiceProvider(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.spi.LocaleServiceProvider: ...
	def getAdapterType(self, ) -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter.Type: ...
	@staticmethod
	def getResourceBundleBased() -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter: ...
	@staticmethod
	def toLocaleArray(arg0: javawrappers.java.util.Set, ) -> JArray(javawrappers.java.util.Locale, 1): ...
	@staticmethod
	def forJRE() -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter: ...
	def notify(self, ) -> None: ...
	def getTimeZoneNameProvider(self, ) -> javawrappers.java.util.spi.TimeZoneNameProvider: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getJavaTimeDateTimePatternProvider(self, ) -> javawrappers.sun.text.spi.JavaTimeDateTimePatternProvider: ...
	def getDecimalFormatSymbolsProvider(self, ) -> javawrappers.java.text.spi.DecimalFormatSymbolsProvider: ...
	def getCalendarProvider(self, ) -> javawrappers.sun.util.spi.CalendarProvider: ...
	@overload
	def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...
	@overload
	def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...
	def getCalendarDataProvider(self, ) -> javawrappers.java.util.spi.CalendarDataProvider: ...
	@staticmethod
	def getAdapter(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.Locale, ) -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter: ...
	def getCalendarNameProvider(self, ) -> javawrappers.java.util.spi.CalendarNameProvider: ...
	def isSupportedProviderLocale(self, arg0: javawrappers.java.util.Locale, arg1: javawrappers.java.util.Set, ) -> Union[int, JBoolean]: ...
	def getLocaleNameProvider(self, ) -> javawrappers.java.util.spi.LocaleNameProvider: ...
	def getDateFormatProvider(self, ) -> javawrappers.java.text.spi.DateFormatProvider: ...
	def getCurrencyNameProvider(self, ) -> javawrappers.java.util.spi.CurrencyNameProvider: ...
	def getCollatorProvider(self, ) -> javawrappers.java.text.spi.CollatorProvider: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def forType(arg0: javawrappers.sun.util.locale.provider.LocaleProviderAdapter.Type, ) -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter: ...
	def getNumberFormatProvider(self, ) -> javawrappers.java.text.spi.NumberFormatProvider: ...
	def getLocaleResources(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.sun.util.locale.provider.LocaleResources: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDateFormatSymbolsProvider(self, ) -> javawrappers.java.text.spi.DateFormatSymbolsProvider: ...


class LocaleNameProviderImpl:
	def __init__(self, arg0: javawrappers.sun.util.locale.provider.LocaleProviderAdapter.Type, arg1: javawrappers.java.util.Set, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDisplayScript(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getDisplayUnicodeExtensionType(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def getDisplayUnicodeExtensionKey(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getAvailableLanguageTags(self, ) -> javawrappers.java.util.Set: ...
	def getDisplayCountry(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDisplayVariant(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDisplayLanguage(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...


class DateFormatSymbolsProviderImpl:
	def __init__(self, arg0: javawrappers.sun.util.locale.provider.LocaleProviderAdapter.Type, arg1: javawrappers.java.util.Set, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getInstance(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormatSymbols: ...
	def notify(self, ) -> None: ...
	def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...
	def getAvailableLanguageTags(self, ) -> javawrappers.java.util.Set: ...


class FallbackLocaleProviderAdapter:
	def __init__(self, ): ...
	def getBreakIteratorProvider(self, ) -> javawrappers.java.text.spi.BreakIteratorProvider: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def getAdapterPreference() -> javawrappers.java.util.List: ...
	def getLocaleServiceProvider(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.util.spi.LocaleServiceProvider: ...
	def getAdapterType(self, ) -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter.Type: ...
	@staticmethod
	def getResourceBundleBased() -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter: ...
	@staticmethod
	def toLocaleArray(arg0: javawrappers.java.util.Set, ) -> JArray(javawrappers.java.util.Locale, 1): ...
	@staticmethod
	def forJRE() -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter: ...
	def notify(self, ) -> None: ...
	def getTimeZoneNameProvider(self, ) -> javawrappers.java.util.spi.TimeZoneNameProvider: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getJavaTimeDateTimePatternProvider(self, ) -> javawrappers.sun.text.spi.JavaTimeDateTimePatternProvider: ...
	def getDecimalFormatSymbolsProvider(self, ) -> javawrappers.java.text.spi.DecimalFormatSymbolsProvider: ...
	def getCalendarProvider(self, ) -> javawrappers.sun.util.spi.CalendarProvider: ...
	def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...
	def getCalendarDataProvider(self, ) -> javawrappers.java.util.spi.CalendarDataProvider: ...
	@staticmethod
	def getAdapter(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.util.Locale, ) -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter: ...
	def getCalendarNameProvider(self, ) -> javawrappers.java.util.spi.CalendarNameProvider: ...
	def isSupportedProviderLocale(self, arg0: javawrappers.java.util.Locale, arg1: javawrappers.java.util.Set, ) -> Union[int, JBoolean]: ...
	def getLanguageTagSet(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Set: ...
	def getLocaleNameProvider(self, ) -> javawrappers.java.util.spi.LocaleNameProvider: ...
	def getDateFormatProvider(self, ) -> javawrappers.java.text.spi.DateFormatProvider: ...
	def getCurrencyNameProvider(self, ) -> javawrappers.java.util.spi.CurrencyNameProvider: ...
	def getLocaleData(self, ) -> javawrappers.sun.util.resources.LocaleData: ...
	def getCandidateLocales(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.List: ...
	def getCollatorProvider(self, ) -> javawrappers.java.text.spi.CollatorProvider: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def forType(arg0: javawrappers.sun.util.locale.provider.LocaleProviderAdapter.Type, ) -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter: ...
	def getNumberFormatProvider(self, ) -> javawrappers.java.text.spi.NumberFormatProvider: ...
	def getLocaleResources(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.sun.util.locale.provider.LocaleResources: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDateFormatSymbolsProvider(self, ) -> javawrappers.java.text.spi.DateFormatSymbolsProvider: ...


class DecimalFormatSymbolsProviderImpl:
	def __init__(self, arg0: javawrappers.sun.util.locale.provider.LocaleProviderAdapter.Type, arg1: javawrappers.java.util.Set, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def isSupportedLocale(self, arg0: javawrappers.java.util.Locale, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getInstance(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DecimalFormatSymbols: ...
	def notify(self, ) -> None: ...
	def getAvailableLocales(self, ) -> JArray(javawrappers.java.util.Locale, 1): ...
	def getAvailableLanguageTags(self, ) -> javawrappers.java.util.Set: ...


class LocaleDataMetaInfo:
	def tzCanonicalIDs(self, ) -> javawrappers.java.util.Map: ...
	def availableLanguageTags(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getType(self, ) -> javawrappers.sun.util.locale.provider.LocaleProviderAdapter.Type: ...
	def getLanguageAliasMap(self, ) -> javawrappers.java.util.Map: ...


class LocaleResources:
	class ResourceReference:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def enqueue(self, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, ) -> javawrappers.java.lang.Object: ...
		def clear(self, ) -> None: ...
		def isEnqueued(self, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getDecimalFormatSymbolsData(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def getLocaleName(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def clear(self, ) -> None: ...
	def isEnqueued(self, ) -> Union[int, JBoolean]: ...
	def getCurrencyName(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getNumberPatterns(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def notify(self, ) -> None: ...
	def enqueue(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def trace(arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getJavaTimeDateTimePattern(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getDateTimePattern(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.util.Calendar, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, ) -> javawrappers.java.lang.Object: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getCalendarData(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...
	def getCollationData(self, ) -> javawrappers.java.lang.String: ...
	def getJavaTimeFormatData(self, ) -> javawrappers.java.util.ResourceBundle: ...
	def getTimeZoneNames(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...


