################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util
import javawrappers.java.lang
import javawrappers.sun.util.resources
import javawrappers.java.util.stream
import javawrappers.java.util.function

from jpype.types import *
from typing import Union

from typing import overload

class CurrencyNamesProvider:
	def getBundle(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...


class CalendarDataProvider:
	def getBundle(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...


class CurrencyNames_en_US:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...


class Bundles:
	class CacheKey:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class BundleReference:
		def getCacheKey(self, ) -> javawrappers.sun.util.resources.Bundles.CacheKey: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def enqueue(self, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, ) -> javawrappers.java.lang.Object: ...
		def clear(self, ) -> None: ...
		def isEnqueued(self, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...
		def notify(self, ) -> None: ...


	class CacheKeyReference:
		def getCacheKey(self, ) -> javawrappers.sun.util.resources.Bundles.CacheKey: ...


	class Strategy:
		def getResourceBundleProviderType(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.Class: ...
		def toBundleName(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
		def getCandidateLocales(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.List: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getResourceBundleProviderType(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.Class: ...
	def toBundleName(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def clear(self, ) -> None: ...
	def isEnqueued(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getCandidateLocales(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.List: ...
	@overload
	def getCacheKey(self, ) -> javawrappers.sun.util.resources.Bundles.CacheKey: ...
	@overload
	def getCacheKey(self, ) -> javawrappers.sun.util.resources.Bundles.CacheKey: ...
	def enqueue(self, ) -> Union[int, JBoolean]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def of(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.sun.util.resources.Bundles.Strategy, ) -> javawrappers.java.util.ResourceBundle: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...


class CalendarData:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...


class CurrencyNames:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...


class LocaleNames_en:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...


class ParallelListResourceBundle:
	class KeySet:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
		def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
		def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def iterator(self, ) -> javawrappers.java.util.Iterator: ...
		def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def size(self, ) -> Union[int, JInt]: ...
		def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		@overload
		def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
		def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setParallelContents(self, arg0: javawrappers.sun.util.resources.OpenListResourceBundle, ) -> None: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	def removeAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def toArray(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def parallelStream(self, ) -> javawrappers.java.util.stream.Stream: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def add(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def containsAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	def removeIf(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
	def contains(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def addAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...
	def retainAll(self, arg0: javawrappers.java.util.Collection, ) -> Union[int, JBoolean]: ...


class TimeZoneNamesBundle:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	def handleGetObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...


class TimeZoneNamesProvider:
	def getBundle(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...


class CalendarData_en:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...


class TimeZoneNames_en:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	def handleGetObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...


class LocaleData:
	def __init__(self, arg0: javawrappers.sun.util.locale.provider.LocaleProviderAdapter.Type, ): ...
	class SupplementaryStrategy:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def toBundleName(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
		def getResourceBundleProviderType(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.Class: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def getCandidateLocales(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.List: ...


	class LocaleDataStrategy:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getResourceBundleProviderType(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.Class: ...
		def toBundleName(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def getCandidateLocales(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.List: ...


	class SupplementaryResourceBundleProvider:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getBundle(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
		def notify(self, ) -> None: ...


	class CommonResourceBundleProvider:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getBundle(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
		def notify(self, ) -> None: ...


	class LocaleDataResourceBundleProvider:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getBundle(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setSupplementary(self, arg0: javawrappers.sun.util.resources.ParallelListResourceBundle, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getCurrencyNames(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.sun.util.resources.OpenListResourceBundle: ...
	@overload
	def getResourceBundleProviderType(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.Class: ...
	@overload
	def getResourceBundleProviderType(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.Class: ...
	def toBundleName(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getBreakIteratorInfo(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	def getNumberFormatData(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	def getBundle(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	def getCandidateLocales(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.List: ...
	@overload
	def getCandidateLocales(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.List: ...
	def getBreakIteratorResources(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	def getDateFormatData(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getCalendarData(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getCollationData(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	def getLocaleNames(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.sun.util.resources.OpenListResourceBundle: ...
	def getTimeZoneNames(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.sun.util.resources.TimeZoneNamesBundle: ...


class LocaleNamesProvider:
	def getBundle(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...


class TimeZoneNames:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	def handleGetObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...


class BreakIteratorResourceBundle:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...


class OpenListResourceBundle:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...


class LocaleDataProvider:
	def getBundle(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...


class LocaleNames:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...


class LocaleNamesBundle:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def containsKey(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def getBaseBundleName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def clearCache() -> None: ...
	@overload
	@staticmethod
	def clearCache(arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	def getString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	def getKeys(self, ) -> javawrappers.java.util.Enumeration: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, arg3: javawrappers.java.util.ResourceBundle.Control, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, arg2: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	@staticmethod
	def getBundle(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.ResourceBundle: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getStringArray(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...


