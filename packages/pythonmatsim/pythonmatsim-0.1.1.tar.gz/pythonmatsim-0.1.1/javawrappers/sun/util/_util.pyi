################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.time
import javawrappers.java.nio
import javawrappers.java.util.function
import javawrappers.java.nio.charset

from jpype.types import *
from typing import Union

from typing import overload

class PropertyResourceBundleCharset:
	@overload
	def __init__(self, arg0: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: JArray(javawrappers.java.lang.String, 1), ): ...
	class PropertiesFileDecoder:
		def averageCharsPerByte(self, ) -> Union[float, JFloat]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def charset(self, ) -> javawrappers.java.nio.charset.Charset: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def maxCharsPerByte(self, ) -> Union[float, JFloat]: ...
		def onUnmappableCharacter(self, arg0: javawrappers.java.nio.charset.CodingErrorAction, ) -> javawrappers.java.nio.charset.CharsetDecoder: ...
		def notifyAll(self, ) -> None: ...
		@overload
		def decode(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> javawrappers.java.nio.CharBuffer: ...
		@overload
		def decode(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: javawrappers.java.nio.CharBuffer, arg2: Union[int, JBoolean], ) -> javawrappers.java.nio.charset.CoderResult: ...
		def isCharsetDetected(self, ) -> Union[int, JBoolean]: ...
		def notify(self, ) -> None: ...
		def isAutoDetecting(self, ) -> Union[int, JBoolean]: ...
		def unmappableCharacterAction(self, ) -> javawrappers.java.nio.charset.CodingErrorAction: ...
		def malformedInputAction(self, ) -> javawrappers.java.nio.charset.CodingErrorAction: ...
		def flush(self, arg0: javawrappers.java.nio.CharBuffer, ) -> javawrappers.java.nio.charset.CoderResult: ...
		def detectedCharset(self, ) -> javawrappers.java.nio.charset.Charset: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def onMalformedInput(self, arg0: javawrappers.java.nio.charset.CodingErrorAction, ) -> javawrappers.java.nio.charset.CharsetDecoder: ...
		def reset(self, ) -> javawrappers.java.nio.charset.CharsetDecoder: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def replacement(self, ) -> javawrappers.java.lang.String: ...
		def replaceWith(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.nio.charset.CharsetDecoder: ...


	def averageCharsPerByte(self, ) -> Union[float, JFloat]: ...
	@overload
	def encode(self, arg0: javawrappers.java.nio.CharBuffer, ) -> javawrappers.java.nio.ByteBuffer: ...
	@overload
	def encode(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.nio.ByteBuffer: ...
	def charset(self, ) -> javawrappers.java.nio.charset.Charset: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def maxCharsPerByte(self, ) -> Union[float, JFloat]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def aliases(self, ) -> javawrappers.java.util.Set: ...
	def onUnmappableCharacter(self, arg0: javawrappers.java.nio.charset.CodingErrorAction, ) -> javawrappers.java.nio.charset.CharsetDecoder: ...
	@overload
	def displayName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def displayName(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def defaultCharset() -> javawrappers.java.nio.charset.Charset: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.nio.charset.Charset, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def decode(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> javawrappers.java.nio.CharBuffer: ...
	@overload
	def decode(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: javawrappers.java.nio.CharBuffer, arg2: Union[int, JBoolean], ) -> javawrappers.java.nio.charset.CoderResult: ...
	@overload
	def decode(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> javawrappers.java.nio.CharBuffer: ...
	def isAutoDetecting(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def unmappableCharacterAction(self, ) -> javawrappers.java.nio.charset.CodingErrorAction: ...
	def malformedInputAction(self, ) -> javawrappers.java.nio.charset.CodingErrorAction: ...
	def flush(self, arg0: javawrappers.java.nio.CharBuffer, ) -> javawrappers.java.nio.charset.CoderResult: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def onMalformedInput(self, arg0: javawrappers.java.nio.charset.CodingErrorAction, ) -> javawrappers.java.nio.charset.CharsetDecoder: ...
	@staticmethod
	def availableCharsets() -> javawrappers.java.util.SortedMap: ...
	@staticmethod
	def forName(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.nio.charset.Charset: ...
	def newDecoder(self, ) -> javawrappers.java.nio.charset.CharsetDecoder: ...
	@staticmethod
	def isSupported(arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def isCharsetDetected(self, ) -> Union[int, JBoolean]: ...
	def contains(self, arg0: javawrappers.java.nio.charset.Charset, ) -> Union[int, JBoolean]: ...
	def detectedCharset(self, ) -> javawrappers.java.nio.charset.Charset: ...
	def canEncode(self, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def newEncoder(self, ) -> javawrappers.java.nio.charset.CharsetEncoder: ...
	def reset(self, ) -> javawrappers.java.nio.charset.CharsetDecoder: ...
	def isRegistered(self, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def replacement(self, ) -> javawrappers.java.lang.String: ...
	def replaceWith(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.nio.charset.CharsetDecoder: ...


class ResourceBundleEnumeration:
	def __init__(self, arg0: javawrappers.java.util.Set, arg1: javawrappers.java.util.Enumeration, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def hasMoreElements(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def asIterator(self, ) -> javawrappers.java.util.Iterator: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@overload
	def nextElement(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def nextElement(self, ) -> javawrappers.java.lang.String: ...


class PreHashedMap:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
	def notifyAll(self, ) -> None: ...
	def values(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
	def notify(self, ) -> None: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def entrySet(self, ) -> javawrappers.java.util.Set: ...
	def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def size(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


class BuddhistCalendar:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Locale, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.TimeZone, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.TimeZone, arg1: javawrappers.java.util.Locale, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def getAvailableCalendarTypes() -> javawrappers.java.util.Set: ...
	def getGregorianChange(self, ) -> javawrappers.java.util.Date: ...
	def before(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getTimeZone(self, ) -> javawrappers.java.util.TimeZone: ...
	def getWeekYear(self, ) -> Union[int, JInt]: ...
	def setMinimalDaysInFirstWeek(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.util.Calendar, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def getWeeksInWeekYear(self, ) -> Union[int, JInt]: ...
	def getActualMaximum(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getMinimum(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def from_(arg0: javawrappers.java.time.ZonedDateTime, ) -> javawrappers.java.util.GregorianCalendar: ...
	@staticmethod
	def getAvailableLocales() -> JArray(javawrappers.java.util.Locale, 1): ...
	def setTime(self, arg0: javawrappers.java.util.Date, ) -> None: ...
	def add(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def isSet(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getLeastMaximum(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getTimeInMillis(self, ) -> Union[long, JLong]: ...
	def setGregorianChange(self, arg0: javawrappers.java.util.Date, ) -> None: ...
	def setWeekDate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def getDisplayName(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getMinimalDaysInFirstWeek(self, ) -> Union[int, JInt]: ...
	def getGreatestMinimum(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getTime(self, ) -> javawrappers.java.util.Date: ...
	def isLenient(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def roll(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def roll(self, arg0: Union[int, JInt], arg1: Union[int, JBoolean], ) -> None: ...
	def getMaximum(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def setLenient(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def setTimeZone(self, arg0: javawrappers.java.util.TimeZone, ) -> None: ...
	def after(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getDisplayNames(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.util.Locale, ) -> javawrappers.java.util.Map: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	@overload
	def set(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def getCalendarType(self, ) -> javawrappers.java.lang.String: ...
	def toZonedDateTime(self, ) -> javawrappers.java.time.ZonedDateTime: ...
	@overload
	def clear(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def clear(self, ) -> None: ...
	def getActualMinimum(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def setFirstDayOfWeek(self, arg0: Union[int, JInt], ) -> None: ...
	def isLeapYear(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def toInstant(self, ) -> javawrappers.java.time.Instant: ...
	def isWeekDateSupported(self, ) -> Union[int, JBoolean]: ...
	def getFirstDayOfWeek(self, ) -> Union[int, JInt]: ...
	def setTimeInMillis(self, arg0: Union[long, JLong], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.util.Calendar: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.util.TimeZone, ) -> javawrappers.java.util.Calendar: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.util.TimeZone, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.util.Calendar: ...
	@overload
	@staticmethod
	def getInstance() -> javawrappers.java.util.Calendar: ...


