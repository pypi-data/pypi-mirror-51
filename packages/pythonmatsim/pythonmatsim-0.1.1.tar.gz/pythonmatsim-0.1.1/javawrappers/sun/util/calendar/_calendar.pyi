################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.time
import javawrappers.java.io
import javawrappers.sun.util.calendar
import javawrappers.java.nio

from jpype.types import *
from typing import Union

from typing import overload

class LocalGregorianCalendar:
	class Date:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def addMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def setMillis(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		@overload
		def setEra(self, arg0: javawrappers.sun.util.calendar.Era, ) -> javawrappers.sun.util.calendar.LocalGregorianCalendar.Date: ...
		@overload
		def setEra(self, arg0: javawrappers.sun.util.calendar.Era, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def getDayOfWeek(self, ) -> Union[int, JInt]: ...
		def setSeconds(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def getEra(self, ) -> javawrappers.sun.util.calendar.Era: ...
		def getMonth(self, ) -> Union[int, JInt]: ...
		def setNormalizedDate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.sun.util.calendar.BaseCalendar.Date: ...
		def setNormalizedYear(self, arg0: Union[int, JInt], ) -> None: ...
		def getZone(self, ) -> javawrappers.java.util.TimeZone: ...
		def setMinutes(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def getMillis(self, ) -> Union[int, JInt]: ...
		def getNormalizedYear(self, ) -> Union[int, JInt]: ...
		def getYear(self, ) -> Union[int, JInt]: ...
		def addSeconds(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def isSameDate(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JBoolean]: ...
		def setTimeOfDay(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def addMinutes(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def getZoneOffset(self, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def setDayOfMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def getHours(self, ) -> Union[int, JInt]: ...
		def setHours(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def isStandardTime(self, ) -> Union[int, JBoolean]: ...
		def addTimeOfDay(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def isNormalized(self, ) -> Union[int, JBoolean]: ...
		def setMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def setStandardTime(self, arg0: Union[int, JBoolean], ) -> None: ...
		def addDayOfMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def isLeapYear(self, ) -> Union[int, JBoolean]: ...
		def addDate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		@overload
		def setYear(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		@overload
		def setYear(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.LocalGregorianCalendar.Date: ...
		def getMinutes(self, ) -> Union[int, JInt]: ...
		def isDaylightTime(self, ) -> Union[int, JBoolean]: ...
		def getDaylightSaving(self, ) -> Union[int, JInt]: ...
		@overload
		def addYear(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.LocalGregorianCalendar.Date: ...
		@overload
		def addYear(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def getSeconds(self, ) -> Union[int, JInt]: ...
		def addMillis(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def getTimeOfDay(self, ) -> Union[long, JLong]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		def setDate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getDayOfMonth(self, ) -> Union[int, JInt]: ...
		def setZone(self, arg0: javawrappers.java.util.TimeZone, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def addHours(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def addMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getYearFromFixedDate(self, arg0: Union[long, JLong], ) -> Union[int, JInt]: ...
	def setMillis(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getYearLengthInMonths(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JInt]: ...
	@overload
	def setEra(self, arg0: javawrappers.sun.util.calendar.CalendarDate, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setEra(self, arg0: javawrappers.sun.util.calendar.Era, ) -> javawrappers.sun.util.calendar.LocalGregorianCalendar.Date: ...
	@overload
	def setEra(self, arg0: javawrappers.sun.util.calendar.Era, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def getDayOfWeek(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JInt]: ...
	@overload
	def getDayOfWeek(self, ) -> Union[int, JInt]: ...
	def setSeconds(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def getEra(self, ) -> javawrappers.sun.util.calendar.Era: ...
	@overload
	def getEra(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.util.calendar.Era: ...
	def normalize(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JBoolean]: ...
	def getWeekLength(self, ) -> Union[int, JInt]: ...
	def getMonth(self, ) -> Union[int, JInt]: ...
	def setNormalizedDate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.sun.util.calendar.BaseCalendar.Date: ...
	@staticmethod
	def getDayOfWeekDateOnOrBefore(arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> Union[long, JLong]: ...
	@overload
	def newCalendarDate(self, arg0: javawrappers.java.util.TimeZone, ) -> javawrappers.sun.util.calendar.LocalGregorianCalendar.Date: ...
	@overload
	def newCalendarDate(self, arg0: javawrappers.java.util.TimeZone, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def newCalendarDate(self, ) -> javawrappers.sun.util.calendar.LocalGregorianCalendar.Date: ...
	@overload
	def newCalendarDate(self, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def setNormalizedYear(self, arg0: Union[int, JInt], ) -> None: ...
	def getMonthLength(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JInt]: ...
	def getZone(self, ) -> javawrappers.java.util.TimeZone: ...
	def setMinutes(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getMillis(self, ) -> Union[int, JInt]: ...
	def getNormalizedYear(self, ) -> Union[int, JInt]: ...
	def getYear(self, ) -> Union[int, JInt]: ...
	def addSeconds(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def isSameDate(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JBoolean]: ...
	def getYearLength(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JInt]: ...
	@overload
	def setTimeOfDay(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def setTimeOfDay(self, arg0: javawrappers.sun.util.calendar.CalendarDate, arg1: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTime(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[long, JLong]: ...
	def notifyAll(self, ) -> None: ...
	def addMinutes(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getZoneOffset(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getCalendarDateFromFixedDate(self, arg0: javawrappers.sun.util.calendar.CalendarDate, arg1: Union[long, JLong], ) -> None: ...
	def setDayOfMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getHours(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getDayOfWeekFromFixedDate(arg0: Union[long, JLong], ) -> Union[int, JInt]: ...
	def setHours(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isStandardTime(self, ) -> Union[int, JBoolean]: ...
	def addTimeOfDay(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getDayOfYear(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[long, JLong]: ...
	def isNormalized(self, ) -> Union[int, JBoolean]: ...
	def getTimeOfDayValue(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[long, JLong]: ...
	def validate(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JBoolean]: ...
	def setMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def setStandardTime(self, arg0: Union[int, JBoolean], ) -> None: ...
	@staticmethod
	def forName(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.util.calendar.CalendarSystem: ...
	@overload
	def getCalendarDate(self, arg0: Union[long, JLong], arg1: javawrappers.sun.util.calendar.CalendarDate, ) -> javawrappers.sun.util.calendar.LocalGregorianCalendar.Date: ...
	@overload
	def getCalendarDate(self, arg0: Union[long, JLong], arg1: javawrappers.sun.util.calendar.CalendarDate, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def getCalendarDate(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.TimeZone, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def getCalendarDate(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.TimeZone, ) -> javawrappers.sun.util.calendar.LocalGregorianCalendar.Date: ...
	@overload
	def getCalendarDate(self, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def getCalendarDate(self, ) -> javawrappers.sun.util.calendar.LocalGregorianCalendar.Date: ...
	@overload
	def getCalendarDate(self, arg0: Union[long, JLong], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def getCalendarDate(self, arg0: Union[long, JLong], ) -> javawrappers.sun.util.calendar.LocalGregorianCalendar.Date: ...
	def addDayOfMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def isLeapYear(self, arg0: javawrappers.sun.util.calendar.Era, arg1: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def isLeapYear(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def isLeapYear(self, ) -> Union[int, JBoolean]: ...
	def getEras(self, ) -> JArray(javawrappers.sun.util.calendar.Era, 1): ...
	def addDate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def setYear(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def setYear(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.LocalGregorianCalendar.Date: ...
	def getMinutes(self, ) -> Union[int, JInt]: ...
	def isDaylightTime(self, ) -> Union[int, JBoolean]: ...
	def validateTime(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JBoolean]: ...
	def getDaylightSaving(self, ) -> Union[int, JInt]: ...
	@overload
	def addYear(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.LocalGregorianCalendar.Date: ...
	@overload
	def addYear(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@staticmethod
	def getGregorianCalendar() -> javawrappers.sun.util.calendar.Gregorian: ...
	def getSeconds(self, ) -> Union[int, JInt]: ...
	def addMillis(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getTimeOfDay(self, ) -> Union[long, JLong]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setDate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDayOfMonth(self, ) -> Union[int, JInt]: ...
	def setZone(self, arg0: javawrappers.java.util.TimeZone, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def addHours(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getNthDayOfWeek(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.sun.util.calendar.CalendarDate, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def getFixedDate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.sun.util.calendar.BaseCalendar.Date, ) -> Union[long, JLong]: ...
	@overload
	def getFixedDate(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[long, JLong]: ...


class CalendarDate:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def addMinutes(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def addMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getZoneOffset(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def setMillis(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def setEra(self, arg0: javawrappers.sun.util.calendar.Era, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def setDayOfMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getHours(self, ) -> Union[int, JInt]: ...
	def getDayOfWeek(self, ) -> Union[int, JInt]: ...
	def setHours(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setSeconds(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getEra(self, ) -> javawrappers.sun.util.calendar.Era: ...
	def isStandardTime(self, ) -> Union[int, JBoolean]: ...
	def addTimeOfDay(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getMonth(self, ) -> Union[int, JInt]: ...
	def isNormalized(self, ) -> Union[int, JBoolean]: ...
	def setMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def setStandardTime(self, arg0: Union[int, JBoolean], ) -> None: ...
	def addDayOfMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def isLeapYear(self, ) -> Union[int, JBoolean]: ...
	def getZone(self, ) -> javawrappers.java.util.TimeZone: ...
	def setMinutes(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def addDate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def setYear(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getMillis(self, ) -> Union[int, JInt]: ...
	def getMinutes(self, ) -> Union[int, JInt]: ...
	def isDaylightTime(self, ) -> Union[int, JBoolean]: ...
	def addYear(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getDaylightSaving(self, ) -> Union[int, JInt]: ...
	def getSeconds(self, ) -> Union[int, JInt]: ...
	def getYear(self, ) -> Union[int, JInt]: ...
	def addSeconds(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def isSameDate(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JBoolean]: ...
	def addMillis(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getTimeOfDay(self, ) -> Union[long, JLong]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setDate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDayOfMonth(self, ) -> Union[int, JInt]: ...
	def setZone(self, arg0: javawrappers.java.util.TimeZone, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def setTimeOfDay(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def addHours(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...


class JulianCalendar:
	class Date:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def addMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def setMillis(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		@overload
		def setEra(self, arg0: javawrappers.sun.util.calendar.Era, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		@overload
		def setEra(self, arg0: javawrappers.sun.util.calendar.Era, ) -> javawrappers.sun.util.calendar.JulianCalendar.Date: ...
		def getDayOfWeek(self, ) -> Union[int, JInt]: ...
		def setSeconds(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def getEra(self, ) -> javawrappers.sun.util.calendar.Era: ...
		def getMonth(self, ) -> Union[int, JInt]: ...
		def setNormalizedDate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.sun.util.calendar.BaseCalendar.Date: ...
		def setNormalizedYear(self, arg0: Union[int, JInt], ) -> None: ...
		def getZone(self, ) -> javawrappers.java.util.TimeZone: ...
		def setMinutes(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def getMillis(self, ) -> Union[int, JInt]: ...
		def getNormalizedYear(self, ) -> Union[int, JInt]: ...
		def getYear(self, ) -> Union[int, JInt]: ...
		def addSeconds(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def isSameDate(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JBoolean]: ...
		def setTimeOfDay(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def addMinutes(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def getZoneOffset(self, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def setDayOfMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def getHours(self, ) -> Union[int, JInt]: ...
		def setHours(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def isStandardTime(self, ) -> Union[int, JBoolean]: ...
		def addTimeOfDay(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def isNormalized(self, ) -> Union[int, JBoolean]: ...
		def setMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def setStandardTime(self, arg0: Union[int, JBoolean], ) -> None: ...
		def addDayOfMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def isLeapYear(self, ) -> Union[int, JBoolean]: ...
		def addDate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def setYear(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def getMinutes(self, ) -> Union[int, JInt]: ...
		def isDaylightTime(self, ) -> Union[int, JBoolean]: ...
		def addYear(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def getDaylightSaving(self, ) -> Union[int, JInt]: ...
		def getSeconds(self, ) -> Union[int, JInt]: ...
		def addMillis(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def getTimeOfDay(self, ) -> Union[long, JLong]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		def setDate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getDayOfMonth(self, ) -> Union[int, JInt]: ...
		def setZone(self, arg0: javawrappers.java.util.TimeZone, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def addHours(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def addMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getYearFromFixedDate(self, arg0: Union[long, JLong], ) -> Union[int, JInt]: ...
	def setMillis(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getYearLengthInMonths(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JInt]: ...
	@overload
	def setEra(self, arg0: javawrappers.sun.util.calendar.CalendarDate, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setEra(self, arg0: javawrappers.sun.util.calendar.Era, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def setEra(self, arg0: javawrappers.sun.util.calendar.Era, ) -> javawrappers.sun.util.calendar.JulianCalendar.Date: ...
	@overload
	def getDayOfWeek(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JInt]: ...
	@overload
	def getDayOfWeek(self, ) -> Union[int, JInt]: ...
	def setSeconds(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def getEra(self, ) -> javawrappers.sun.util.calendar.Era: ...
	@overload
	def getEra(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.util.calendar.Era: ...
	def normalize(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JBoolean]: ...
	def getWeekLength(self, ) -> Union[int, JInt]: ...
	def getMonth(self, ) -> Union[int, JInt]: ...
	def setNormalizedDate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.sun.util.calendar.BaseCalendar.Date: ...
	@staticmethod
	def getDayOfWeekDateOnOrBefore(arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> Union[long, JLong]: ...
	@overload
	def newCalendarDate(self, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def newCalendarDate(self, ) -> javawrappers.sun.util.calendar.JulianCalendar.Date: ...
	@overload
	def newCalendarDate(self, arg0: javawrappers.java.util.TimeZone, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def newCalendarDate(self, arg0: javawrappers.java.util.TimeZone, ) -> javawrappers.sun.util.calendar.JulianCalendar.Date: ...
	def setNormalizedYear(self, arg0: Union[int, JInt], ) -> None: ...
	def getMonthLength(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JInt]: ...
	def getZone(self, ) -> javawrappers.java.util.TimeZone: ...
	def setMinutes(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getMillis(self, ) -> Union[int, JInt]: ...
	def getNormalizedYear(self, ) -> Union[int, JInt]: ...
	def getYear(self, ) -> Union[int, JInt]: ...
	def addSeconds(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def isSameDate(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JBoolean]: ...
	def getYearLength(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JInt]: ...
	@overload
	def setTimeOfDay(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def setTimeOfDay(self, arg0: javawrappers.sun.util.calendar.CalendarDate, arg1: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTime(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[long, JLong]: ...
	def notifyAll(self, ) -> None: ...
	def addMinutes(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getZoneOffset(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getCalendarDateFromFixedDate(self, arg0: javawrappers.sun.util.calendar.CalendarDate, arg1: Union[long, JLong], ) -> None: ...
	def setDayOfMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getHours(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getDayOfWeekFromFixedDate(arg0: Union[long, JLong], ) -> Union[int, JInt]: ...
	def setHours(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isStandardTime(self, ) -> Union[int, JBoolean]: ...
	def addTimeOfDay(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getDayOfYear(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[long, JLong]: ...
	def isNormalized(self, ) -> Union[int, JBoolean]: ...
	def getTimeOfDayValue(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[long, JLong]: ...
	def validate(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JBoolean]: ...
	def setMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def setStandardTime(self, arg0: Union[int, JBoolean], ) -> None: ...
	@staticmethod
	def forName(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.util.calendar.CalendarSystem: ...
	@overload
	def getCalendarDate(self, arg0: Union[long, JLong], arg1: javawrappers.sun.util.calendar.CalendarDate, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def getCalendarDate(self, arg0: Union[long, JLong], arg1: javawrappers.sun.util.calendar.CalendarDate, ) -> javawrappers.sun.util.calendar.JulianCalendar.Date: ...
	@overload
	def getCalendarDate(self, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def getCalendarDate(self, ) -> javawrappers.sun.util.calendar.JulianCalendar.Date: ...
	@overload
	def getCalendarDate(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.TimeZone, ) -> javawrappers.sun.util.calendar.JulianCalendar.Date: ...
	@overload
	def getCalendarDate(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.TimeZone, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def getCalendarDate(self, arg0: Union[long, JLong], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def getCalendarDate(self, arg0: Union[long, JLong], ) -> javawrappers.sun.util.calendar.JulianCalendar.Date: ...
	def addDayOfMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def isLeapYear(self, ) -> Union[int, JBoolean]: ...
	def getEras(self, ) -> JArray(javawrappers.sun.util.calendar.Era, 1): ...
	def addDate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def setYear(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getMinutes(self, ) -> Union[int, JInt]: ...
	def isDaylightTime(self, ) -> Union[int, JBoolean]: ...
	def validateTime(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JBoolean]: ...
	def addYear(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getDaylightSaving(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getGregorianCalendar() -> javawrappers.sun.util.calendar.Gregorian: ...
	def getSeconds(self, ) -> Union[int, JInt]: ...
	def addMillis(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getTimeOfDay(self, ) -> Union[long, JLong]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setDate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDayOfMonth(self, ) -> Union[int, JInt]: ...
	def setZone(self, arg0: javawrappers.java.util.TimeZone, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def addHours(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getNthDayOfWeek(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.sun.util.calendar.CalendarDate, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def getFixedDate(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[long, JLong]: ...
	@overload
	def getFixedDate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.sun.util.calendar.BaseCalendar.Date, ) -> Union[long, JLong]: ...


class BaseCalendar:
	def __init__(self, ): ...
	class Date:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def addMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def setMillis(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def setEra(self, arg0: javawrappers.sun.util.calendar.Era, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def getDayOfWeek(self, ) -> Union[int, JInt]: ...
		def setSeconds(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def getEra(self, ) -> javawrappers.sun.util.calendar.Era: ...
		def getMonth(self, ) -> Union[int, JInt]: ...
		def setNormalizedDate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.sun.util.calendar.BaseCalendar.Date: ...
		def setNormalizedYear(self, arg0: Union[int, JInt], ) -> None: ...
		def getZone(self, ) -> javawrappers.java.util.TimeZone: ...
		def setMinutes(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def getMillis(self, ) -> Union[int, JInt]: ...
		def getNormalizedYear(self, ) -> Union[int, JInt]: ...
		def getYear(self, ) -> Union[int, JInt]: ...
		def addSeconds(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def isSameDate(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JBoolean]: ...
		def setTimeOfDay(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def addMinutes(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def getZoneOffset(self, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def setDayOfMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def getHours(self, ) -> Union[int, JInt]: ...
		def setHours(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def isStandardTime(self, ) -> Union[int, JBoolean]: ...
		def addTimeOfDay(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def isNormalized(self, ) -> Union[int, JBoolean]: ...
		def setMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def setStandardTime(self, arg0: Union[int, JBoolean], ) -> None: ...
		def addDayOfMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def isLeapYear(self, ) -> Union[int, JBoolean]: ...
		def addDate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def setYear(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def getMinutes(self, ) -> Union[int, JInt]: ...
		def isDaylightTime(self, ) -> Union[int, JBoolean]: ...
		def addYear(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def getDaylightSaving(self, ) -> Union[int, JInt]: ...
		def getSeconds(self, ) -> Union[int, JInt]: ...
		def addMillis(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def getTimeOfDay(self, ) -> Union[long, JLong]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		def setDate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getDayOfMonth(self, ) -> Union[int, JInt]: ...
		def setZone(self, arg0: javawrappers.java.util.TimeZone, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def addHours(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def addMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getYearFromFixedDate(self, arg0: Union[long, JLong], ) -> Union[int, JInt]: ...
	def setMillis(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getYearLengthInMonths(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JInt]: ...
	@overload
	def setEra(self, arg0: javawrappers.sun.util.calendar.CalendarDate, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setEra(self, arg0: javawrappers.sun.util.calendar.Era, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def getDayOfWeek(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JInt]: ...
	@overload
	def getDayOfWeek(self, ) -> Union[int, JInt]: ...
	def setSeconds(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def getEra(self, ) -> javawrappers.sun.util.calendar.Era: ...
	@overload
	def getEra(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.util.calendar.Era: ...
	def normalize(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JBoolean]: ...
	def getWeekLength(self, ) -> Union[int, JInt]: ...
	def getMonth(self, ) -> Union[int, JInt]: ...
	def setNormalizedDate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.sun.util.calendar.BaseCalendar.Date: ...
	@staticmethod
	def getDayOfWeekDateOnOrBefore(arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> Union[long, JLong]: ...
	@overload
	def newCalendarDate(self, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def newCalendarDate(self, arg0: javawrappers.java.util.TimeZone, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def setNormalizedYear(self, arg0: Union[int, JInt], ) -> None: ...
	def getMonthLength(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JInt]: ...
	def getZone(self, ) -> javawrappers.java.util.TimeZone: ...
	def setMinutes(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getMillis(self, ) -> Union[int, JInt]: ...
	def getNormalizedYear(self, ) -> Union[int, JInt]: ...
	def getYear(self, ) -> Union[int, JInt]: ...
	def addSeconds(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def isSameDate(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JBoolean]: ...
	def getYearLength(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JInt]: ...
	@overload
	def setTimeOfDay(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def setTimeOfDay(self, arg0: javawrappers.sun.util.calendar.CalendarDate, arg1: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTime(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[long, JLong]: ...
	def notifyAll(self, ) -> None: ...
	def addMinutes(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getZoneOffset(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getCalendarDateFromFixedDate(self, arg0: javawrappers.sun.util.calendar.CalendarDate, arg1: Union[long, JLong], ) -> None: ...
	def setDayOfMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getHours(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getDayOfWeekFromFixedDate(arg0: Union[long, JLong], ) -> Union[int, JInt]: ...
	def setHours(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isStandardTime(self, ) -> Union[int, JBoolean]: ...
	def addTimeOfDay(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getDayOfYear(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[long, JLong]: ...
	def isNormalized(self, ) -> Union[int, JBoolean]: ...
	def getTimeOfDayValue(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[long, JLong]: ...
	def validate(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JBoolean]: ...
	def setMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def setStandardTime(self, arg0: Union[int, JBoolean], ) -> None: ...
	@staticmethod
	def forName(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.util.calendar.CalendarSystem: ...
	@overload
	def getCalendarDate(self, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def getCalendarDate(self, arg0: Union[long, JLong], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def getCalendarDate(self, arg0: Union[long, JLong], arg1: javawrappers.sun.util.calendar.CalendarDate, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def getCalendarDate(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.TimeZone, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def addDayOfMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def isLeapYear(self, ) -> Union[int, JBoolean]: ...
	def getEras(self, ) -> JArray(javawrappers.sun.util.calendar.Era, 1): ...
	def addDate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def setYear(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getMinutes(self, ) -> Union[int, JInt]: ...
	def isDaylightTime(self, ) -> Union[int, JBoolean]: ...
	def validateTime(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JBoolean]: ...
	def addYear(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getDaylightSaving(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getGregorianCalendar() -> javawrappers.sun.util.calendar.Gregorian: ...
	def getSeconds(self, ) -> Union[int, JInt]: ...
	def addMillis(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getTimeOfDay(self, ) -> Union[long, JLong]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setDate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDayOfMonth(self, ) -> Union[int, JInt]: ...
	def setZone(self, arg0: javawrappers.java.util.TimeZone, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def addHours(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getNthDayOfWeek(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.sun.util.calendar.CalendarDate, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def getFixedDate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.sun.util.calendar.BaseCalendar.Date, ) -> Union[long, JLong]: ...
	@overload
	def getFixedDate(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[long, JLong]: ...


class Era:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: Union[long, JLong], arg3: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getSinceDate(self, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getSince(self, arg0: javawrappers.java.util.TimeZone, ) -> Union[long, JLong]: ...
	def isLocalTime(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getDiaplayAbbreviation(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def getAbbreviation(self, ) -> javawrappers.java.lang.String: ...
	def getDisplayName(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class Gregorian:
	class Date:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def addMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def setMillis(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def setEra(self, arg0: javawrappers.sun.util.calendar.Era, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def getDayOfWeek(self, ) -> Union[int, JInt]: ...
		def setSeconds(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def getEra(self, ) -> javawrappers.sun.util.calendar.Era: ...
		def getMonth(self, ) -> Union[int, JInt]: ...
		def setNormalizedDate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.sun.util.calendar.BaseCalendar.Date: ...
		def setNormalizedYear(self, arg0: Union[int, JInt], ) -> None: ...
		def getZone(self, ) -> javawrappers.java.util.TimeZone: ...
		def setMinutes(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def getMillis(self, ) -> Union[int, JInt]: ...
		def getNormalizedYear(self, ) -> Union[int, JInt]: ...
		def getYear(self, ) -> Union[int, JInt]: ...
		def addSeconds(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def isSameDate(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JBoolean]: ...
		def setTimeOfDay(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def addMinutes(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def getZoneOffset(self, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def setDayOfMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def getHours(self, ) -> Union[int, JInt]: ...
		def setHours(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def isStandardTime(self, ) -> Union[int, JBoolean]: ...
		def addTimeOfDay(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def isNormalized(self, ) -> Union[int, JBoolean]: ...
		def setMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def setStandardTime(self, arg0: Union[int, JBoolean], ) -> None: ...
		def addDayOfMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def isLeapYear(self, ) -> Union[int, JBoolean]: ...
		def addDate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def setYear(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def getMinutes(self, ) -> Union[int, JInt]: ...
		def isDaylightTime(self, ) -> Union[int, JBoolean]: ...
		def addYear(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def getDaylightSaving(self, ) -> Union[int, JInt]: ...
		def getSeconds(self, ) -> Union[int, JInt]: ...
		def addMillis(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def getTimeOfDay(self, ) -> Union[long, JLong]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		def setDate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getDayOfMonth(self, ) -> Union[int, JInt]: ...
		def setZone(self, arg0: javawrappers.java.util.TimeZone, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
		def addHours(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def addMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getYearFromFixedDate(self, arg0: Union[long, JLong], ) -> Union[int, JInt]: ...
	def setMillis(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getYearLengthInMonths(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JInt]: ...
	@overload
	def setEra(self, arg0: javawrappers.sun.util.calendar.CalendarDate, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setEra(self, arg0: javawrappers.sun.util.calendar.Era, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def getDayOfWeek(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JInt]: ...
	@overload
	def getDayOfWeek(self, ) -> Union[int, JInt]: ...
	def setSeconds(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def getEra(self, ) -> javawrappers.sun.util.calendar.Era: ...
	@overload
	def getEra(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.util.calendar.Era: ...
	def normalize(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JBoolean]: ...
	def getWeekLength(self, ) -> Union[int, JInt]: ...
	def getMonth(self, ) -> Union[int, JInt]: ...
	def setNormalizedDate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.sun.util.calendar.BaseCalendar.Date: ...
	@staticmethod
	def getDayOfWeekDateOnOrBefore(arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> Union[long, JLong]: ...
	@overload
	def newCalendarDate(self, arg0: javawrappers.java.util.TimeZone, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def newCalendarDate(self, arg0: javawrappers.java.util.TimeZone, ) -> javawrappers.sun.util.calendar.Gregorian.Date: ...
	@overload
	def newCalendarDate(self, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def newCalendarDate(self, ) -> javawrappers.sun.util.calendar.Gregorian.Date: ...
	def setNormalizedYear(self, arg0: Union[int, JInt], ) -> None: ...
	def getMonthLength(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JInt]: ...
	def getZone(self, ) -> javawrappers.java.util.TimeZone: ...
	def setMinutes(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getMillis(self, ) -> Union[int, JInt]: ...
	def getNormalizedYear(self, ) -> Union[int, JInt]: ...
	def getYear(self, ) -> Union[int, JInt]: ...
	def addSeconds(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def isSameDate(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JBoolean]: ...
	def getYearLength(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JInt]: ...
	@overload
	def setTimeOfDay(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def setTimeOfDay(self, arg0: javawrappers.sun.util.calendar.CalendarDate, arg1: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTime(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[long, JLong]: ...
	def notifyAll(self, ) -> None: ...
	def addMinutes(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getZoneOffset(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getCalendarDateFromFixedDate(self, arg0: javawrappers.sun.util.calendar.CalendarDate, arg1: Union[long, JLong], ) -> None: ...
	def setDayOfMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getHours(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getDayOfWeekFromFixedDate(arg0: Union[long, JLong], ) -> Union[int, JInt]: ...
	def setHours(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isStandardTime(self, ) -> Union[int, JBoolean]: ...
	def addTimeOfDay(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getDayOfYear(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[long, JLong]: ...
	def isNormalized(self, ) -> Union[int, JBoolean]: ...
	def getTimeOfDayValue(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[long, JLong]: ...
	def validate(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JBoolean]: ...
	def setMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def setStandardTime(self, arg0: Union[int, JBoolean], ) -> None: ...
	@staticmethod
	def forName(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.util.calendar.CalendarSystem: ...
	@overload
	def getCalendarDate(self, arg0: Union[long, JLong], arg1: javawrappers.sun.util.calendar.CalendarDate, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def getCalendarDate(self, arg0: Union[long, JLong], arg1: javawrappers.sun.util.calendar.CalendarDate, ) -> javawrappers.sun.util.calendar.Gregorian.Date: ...
	@overload
	def getCalendarDate(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.TimeZone, ) -> javawrappers.sun.util.calendar.Gregorian.Date: ...
	@overload
	def getCalendarDate(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.TimeZone, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def getCalendarDate(self, arg0: Union[long, JLong], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def getCalendarDate(self, arg0: Union[long, JLong], ) -> javawrappers.sun.util.calendar.Gregorian.Date: ...
	@overload
	def getCalendarDate(self, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def getCalendarDate(self, ) -> javawrappers.sun.util.calendar.Gregorian.Date: ...
	def addDayOfMonth(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def isLeapYear(self, ) -> Union[int, JBoolean]: ...
	def getEras(self, ) -> JArray(javawrappers.sun.util.calendar.Era, 1): ...
	def addDate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def setYear(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getMinutes(self, ) -> Union[int, JInt]: ...
	def isDaylightTime(self, ) -> Union[int, JBoolean]: ...
	def validateTime(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JBoolean]: ...
	def addYear(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getDaylightSaving(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getGregorianCalendar() -> javawrappers.sun.util.calendar.Gregorian: ...
	def getSeconds(self, ) -> Union[int, JInt]: ...
	def addMillis(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getTimeOfDay(self, ) -> Union[long, JLong]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setDate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDayOfMonth(self, ) -> Union[int, JInt]: ...
	def setZone(self, arg0: javawrappers.java.util.TimeZone, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def addHours(self, arg0: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getNthDayOfWeek(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.sun.util.calendar.CalendarDate, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def getFixedDate(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.sun.util.calendar.BaseCalendar.Date, ) -> Union[long, JLong]: ...
	@overload
	def getFixedDate(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[long, JLong]: ...


class CalendarUtils:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def isJulianLeapYear(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def mod(arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	@staticmethod
	def mod(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isGregorianLeapYear(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def sprintf0d(arg0: javawrappers.java.lang.StringBuilder, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.StringBuilder: ...
	@overload
	@staticmethod
	def sprintf0d(arg0: javawrappers.java.lang.StringBuffer, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.StringBuffer: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def amod(arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	@staticmethod
	def amod(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def floorDivide(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def floorDivide(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def floorDivide(arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	@staticmethod
	def floorDivide(arg0: Union[long, JLong], arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class CalendarSystem:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def newCalendarDate(self, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def newCalendarDate(self, arg0: javawrappers.java.util.TimeZone, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@staticmethod
	def forName(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.util.calendar.CalendarSystem: ...
	@overload
	def getCalendarDate(self, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def getCalendarDate(self, arg0: Union[long, JLong], arg1: javawrappers.sun.util.calendar.CalendarDate, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def getCalendarDate(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.TimeZone, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def getCalendarDate(self, arg0: Union[long, JLong], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getTime(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[long, JLong]: ...
	def notifyAll(self, ) -> None: ...
	def getMonthLength(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JInt]: ...
	def getEras(self, ) -> JArray(javawrappers.sun.util.calendar.Era, 1): ...
	def notify(self, ) -> None: ...
	def getYearLengthInMonths(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JInt]: ...
	def setEra(self, arg0: javawrappers.sun.util.calendar.CalendarDate, arg1: javawrappers.java.lang.String, ) -> None: ...
	@staticmethod
	def getGregorianCalendar() -> javawrappers.sun.util.calendar.Gregorian: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getEra(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.util.calendar.Era: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def normalize(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JBoolean]: ...
	def getWeekLength(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getYearLength(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JInt]: ...
	def setTimeOfDay(self, arg0: javawrappers.sun.util.calendar.CalendarDate, arg1: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getNthDayOfWeek(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.sun.util.calendar.CalendarDate, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def validate(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JBoolean]: ...


class AbstractCalendar:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getTime(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[long, JLong]: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getYearLengthInMonths(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JInt]: ...
	def setEra(self, arg0: javawrappers.sun.util.calendar.CalendarDate, arg1: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getEra(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.util.calendar.Era: ...
	def normalize(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JBoolean]: ...
	def getWeekLength(self, ) -> Union[int, JInt]: ...
	def getTimeOfDayValue(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[long, JLong]: ...
	def validate(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getDayOfWeekDateOnOrBefore(arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> Union[long, JLong]: ...
	@overload
	def newCalendarDate(self, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def newCalendarDate(self, arg0: javawrappers.java.util.TimeZone, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@staticmethod
	def forName(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.util.calendar.CalendarSystem: ...
	@overload
	def getCalendarDate(self, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def getCalendarDate(self, arg0: Union[long, JLong], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def getCalendarDate(self, arg0: Union[long, JLong], arg1: javawrappers.sun.util.calendar.CalendarDate, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	@overload
	def getCalendarDate(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.TimeZone, ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getMonthLength(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JInt]: ...
	def getEras(self, ) -> JArray(javawrappers.sun.util.calendar.Era, 1): ...
	def validateTime(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getGregorianCalendar() -> javawrappers.sun.util.calendar.Gregorian: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getYearLength(self, arg0: javawrappers.sun.util.calendar.CalendarDate, ) -> Union[int, JInt]: ...
	def setTimeOfDay(self, arg0: javawrappers.sun.util.calendar.CalendarDate, arg1: Union[int, JInt], ) -> javawrappers.sun.util.calendar.CalendarDate: ...
	def getNthDayOfWeek(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.sun.util.calendar.CalendarDate, ) -> javawrappers.sun.util.calendar.CalendarDate: ...


class ZoneInfo:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def getAliasTable() -> javawrappers.java.util.Map: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLastRuleInstance(self, ) -> javawrappers.java.util.SimpleTimeZone: ...
	@overload
	@staticmethod
	def getTimeZone(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.TimeZone: ...
	@overload
	@staticmethod
	def getTimeZone(arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.util.TimeZone: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getOffset(self, arg0: Union[long, JLong], ) -> Union[int, JInt]: ...
	@overload
	def getOffset(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getOffsets(self, arg0: Union[long, JLong], arg1: JArray(Union[int, JInt], 1), ) -> Union[int, JInt]: ...
	def useDaylightTime(self, ) -> Union[int, JBoolean]: ...
	def getOffsetsByStandard(self, arg0: Union[long, JLong], arg1: JArray(Union[int, JInt], 1), ) -> Union[int, JInt]: ...
	def observesDaylightTime(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getOffsetsByWall(self, arg0: Union[long, JLong], arg1: JArray(Union[int, JInt], 1), ) -> Union[int, JInt]: ...
	def isDirty(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def hasSameRules(self, arg0: javawrappers.java.util.TimeZone, ) -> Union[int, JBoolean]: ...
	def inDaylightTime(self, arg0: javawrappers.java.util.Date, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getDefault() -> javawrappers.java.util.TimeZone: ...
	def getID(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getAvailableIDs() -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	@staticmethod
	def getAvailableIDs(arg0: Union[int, JInt], ) -> JArray(javawrappers.java.lang.String, 1): ...
	@staticmethod
	def setDefault(arg0: javawrappers.java.util.TimeZone, ) -> None: ...
	@overload
	def getDisplayName(self, arg0: Union[int, JBoolean], arg1: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getDisplayName(self, arg0: Union[int, JBoolean], arg1: Union[int, JInt], arg2: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	@overload
	def getDisplayName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getDisplayName(self, arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def getDSTSavings(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setRawOffset(self, arg0: Union[int, JInt], ) -> None: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setID(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def toZoneId(self, ) -> javawrappers.java.time.ZoneId: ...
	def getRawOffset(self, ) -> Union[int, JInt]: ...


class ZoneInfoFile:
	class ZoneOffsetTransitionRule:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Checksum:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getValue(self, ) -> Union[long, JLong]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def reset(self, ) -> None: ...
		@overload
		def update(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> None: ...
		@overload
		def update(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		@overload
		def update(self, arg0: Union[int, JInt], ) -> None: ...
		@overload
		def update(self, arg0: JArray(JByte, 1), ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	@staticmethod
	def getVersion() -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def useOldMapping() -> Union[int, JBoolean]: ...
	@staticmethod
	def getAliasMap() -> javawrappers.java.util.Map: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def toCustomID(arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def update(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> None: ...
	@overload
	def update(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def update(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def update(self, arg0: JArray(JByte, 1), ) -> None: ...
	def notify(self, ) -> None: ...
	def getValue(self, ) -> Union[long, JLong]: ...
	@staticmethod
	def getCustomTimeZone(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> javawrappers.sun.util.calendar.ZoneInfo: ...
	@overload
	@staticmethod
	def getZoneInfo(arg0: javawrappers.java.io.DataInput, arg1: javawrappers.java.lang.String, ) -> javawrappers.sun.util.calendar.ZoneInfo: ...
	@overload
	@staticmethod
	def getZoneInfo(arg0: javawrappers.java.lang.String, ) -> javawrappers.sun.util.calendar.ZoneInfo: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def readOffset(arg0: javawrappers.java.io.DataInput, ) -> Union[int, JInt]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getZoneIds() -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	@staticmethod
	def getZoneIds(arg0: Union[int, JInt], ) -> JArray(javawrappers.java.lang.String, 1): ...


