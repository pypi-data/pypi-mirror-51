################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util
import javawrappers.java.util.concurrent
import javawrappers.java.nio
import javawrappers.java.nio.channels
import javawrappers.jdk.internal.misc
import javawrappers.java.nio.file
import javawrappers.java.lang
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.sun.nio.ch
import javawrappers.java.nio.channels.spi
import javawrappers.jdk.internal.ref
import javawrappers.java.nio.file.attribute

from jpype.types import *
from typing import Union

from typing import overload

class FileKey:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def create(arg0: javawrappers.java.io.FileDescriptor, ) -> javawrappers.sun.nio.ch.FileKey: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class IOStatus:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def checkAll(arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def normalize(arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def normalize(arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def check(arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def check(arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class Secrets:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def newServerSocketChannel(arg0: javawrappers.java.io.FileDescriptor, ) -> javawrappers.java.nio.channels.ServerSocketChannel: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def newSocketChannel(arg0: javawrappers.java.io.FileDescriptor, ) -> javawrappers.java.nio.channels.SocketChannel: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class DirectBuffer:
	def address(self, ) -> Union[long, JLong]: ...
	def attachment(self, ) -> javawrappers.java.lang.Object: ...
	def cleaner(self, ) -> javawrappers.jdk.internal.ref.Cleaner: ...


class EPollSelectorProvider:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def openSocketChannel(self, ) -> javawrappers.java.nio.channels.SocketChannel: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def openDatagramChannel(self, arg0: javawrappers.java.net.ProtocolFamily, ) -> javawrappers.java.nio.channels.DatagramChannel: ...
	@overload
	def openDatagramChannel(self, ) -> javawrappers.java.nio.channels.DatagramChannel: ...
	def notify(self, ) -> None: ...
	def openPipe(self, ) -> javawrappers.java.nio.channels.Pipe: ...
	@staticmethod
	def provider() -> javawrappers.java.nio.channels.spi.SelectorProvider: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def inheritedChannel(self, ) -> javawrappers.java.nio.channels.Channel: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def openServerSocketChannel(self, ) -> javawrappers.java.nio.channels.ServerSocketChannel: ...
	def openSelector(self, ) -> javawrappers.java.nio.channels.spi.AbstractSelector: ...


class SelectionKeyImpl:
	def cancel(self, ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def interestOpsOr(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isAcceptable(self, ) -> Union[int, JBoolean]: ...
	def isConnectable(self, ) -> Union[int, JBoolean]: ...
	@overload
	def nioReadyOps(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def nioReadyOps(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def isValid(self, ) -> Union[int, JBoolean]: ...
	def channel(self, ) -> javawrappers.java.nio.channels.SelectableChannel: ...
	def isWritable(self, ) -> Union[int, JBoolean]: ...
	@overload
	def nioInterestOps(self, arg0: Union[int, JInt], ) -> javawrappers.java.nio.channels.SelectionKey: ...
	@overload
	def nioInterestOps(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def attachment(self, ) -> javawrappers.java.lang.Object: ...
	def readyOps(self, ) -> Union[int, JInt]: ...
	def interestOpsAnd(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def interestOps(self, arg0: Union[int, JInt], ) -> javawrappers.java.nio.channels.SelectionKey: ...
	@overload
	def interestOps(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def selector(self, ) -> javawrappers.java.nio.channels.Selector: ...
	def attach(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def isReadable(self, ) -> Union[int, JBoolean]: ...


class NativeThread:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def current() -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def signal(arg0: Union[long, JLong], ) -> None: ...
	def notify(self, ) -> None: ...


class PollSelectorProvider:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def openSocketChannel(self, ) -> javawrappers.java.nio.channels.SocketChannel: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def openDatagramChannel(self, arg0: javawrappers.java.net.ProtocolFamily, ) -> javawrappers.java.nio.channels.DatagramChannel: ...
	@overload
	def openDatagramChannel(self, ) -> javawrappers.java.nio.channels.DatagramChannel: ...
	def notify(self, ) -> None: ...
	def openPipe(self, ) -> javawrappers.java.nio.channels.Pipe: ...
	@staticmethod
	def provider() -> javawrappers.java.nio.channels.spi.SelectorProvider: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def inheritedChannel(self, ) -> javawrappers.java.nio.channels.Channel: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def openServerSocketChannel(self, ) -> javawrappers.java.nio.channels.ServerSocketChannel: ...
	def openSelector(self, ) -> javawrappers.java.nio.channels.spi.AbstractSelector: ...


class Util:
	def __init__(self, ): ...
	class BufferCache:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def releaseTemporaryDirectBuffer(arg0: javawrappers.java.nio.ByteBuffer, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def getTemporaryDirectBuffer(arg0: Union[int, JInt], ) -> javawrappers.java.nio.ByteBuffer: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def getTemporaryAlignedDirectBuffer(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.nio.ByteBuffer: ...


class ChannelInputStream:
	def __init__(self, arg0: javawrappers.java.nio.channels.ReadableByteChannel, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def read(arg0: javawrappers.java.nio.channels.ReadableByteChannel, arg1: javawrappers.java.nio.ByteBuffer, arg2: Union[int, JBoolean], ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class SimpleAsynchronousFileChannelImpl:
	class DefaultExecutorHolder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[long, JLong], ) -> javawrappers.java.util.concurrent.Future: ...
	@overload
	def read(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.nio.channels.CompletionHandler, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def tryLock(self, ) -> javawrappers.java.nio.channels.FileLock: ...
	@overload
	def tryLock(self, arg0: Union[long, JLong], arg1: Union[long, JLong], arg2: Union[int, JBoolean], ) -> javawrappers.java.nio.channels.FileLock: ...
	def isOpen(self, ) -> Union[int, JBoolean]: ...
	def truncate(self, arg0: Union[long, JLong], ) -> javawrappers.java.nio.channels.AsynchronousFileChannel: ...
	def size(self, ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def lock(self, arg0: Union[long, JLong], arg1: Union[long, JLong], arg2: Union[int, JBoolean], arg3: javawrappers.java.lang.Object, arg4: javawrappers.java.nio.channels.CompletionHandler, ) -> None: ...
	@overload
	def lock(self, arg0: Union[long, JLong], arg1: Union[long, JLong], arg2: Union[int, JBoolean], ) -> javawrappers.java.util.concurrent.Future: ...
	@overload
	def lock(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.nio.channels.CompletionHandler, ) -> None: ...
	@overload
	def lock(self, ) -> javawrappers.java.util.concurrent.Future: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def force(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[long, JLong], ) -> javawrappers.java.util.concurrent.Future: ...
	@overload
	def write(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Object, arg3: javawrappers.java.nio.channels.CompletionHandler, ) -> None: ...
	def close(self, ) -> None: ...
	@overload
	@staticmethod
	def open(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.util.Set, arg2: javawrappers.java.util.concurrent.ExecutorService, *arg3: javawrappers.java.nio.file.attribute.FileAttribute, ) -> javawrappers.java.nio.channels.AsynchronousFileChannel: ...
	@overload
	@staticmethod
	def open(arg0: javawrappers.java.nio.file.Path, *arg1: javawrappers.java.nio.file.OpenOption, ) -> javawrappers.java.nio.channels.AsynchronousFileChannel: ...
	@overload
	@staticmethod
	def open(arg0: javawrappers.java.io.FileDescriptor, arg1: Union[int, JBoolean], arg2: Union[int, JBoolean], arg3: javawrappers.sun.nio.ch.ThreadPool, ) -> javawrappers.java.nio.channels.AsynchronousFileChannel: ...


class DefaultAsynchronousChannelProvider:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def create() -> javawrappers.java.nio.channels.spi.AsynchronousChannelProvider: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class SelectorProviderImpl:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def openSocketChannel(self, ) -> javawrappers.java.nio.channels.SocketChannel: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def openDatagramChannel(self, arg0: javawrappers.java.net.ProtocolFamily, ) -> javawrappers.java.nio.channels.DatagramChannel: ...
	@overload
	def openDatagramChannel(self, ) -> javawrappers.java.nio.channels.DatagramChannel: ...
	def notify(self, ) -> None: ...
	def openPipe(self, ) -> javawrappers.java.nio.channels.Pipe: ...
	@staticmethod
	def provider() -> javawrappers.java.nio.channels.spi.SelectorProvider: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def inheritedChannel(self, ) -> javawrappers.java.nio.channels.Channel: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def openServerSocketChannel(self, ) -> javawrappers.java.nio.channels.ServerSocketChannel: ...
	def openSelector(self, ) -> javawrappers.java.nio.channels.spi.AbstractSelector: ...


class SelChImpl:
	def translateAndSetReadyOps(self, arg0: Union[int, JInt], arg1: javawrappers.sun.nio.ch.SelectionKeyImpl, ) -> Union[int, JBoolean]: ...
	def isOpen(self, ) -> Union[int, JBoolean]: ...
	def translateAndUpdateReadyOps(self, arg0: Union[int, JInt], arg1: javawrappers.sun.nio.ch.SelectionKeyImpl, ) -> Union[int, JBoolean]: ...
	def getFDVal(self, ) -> Union[int, JInt]: ...
	def kill(self, ) -> None: ...
	def close(self, ) -> None: ...
	def translateInterestOps(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getFD(self, ) -> javawrappers.java.io.FileDescriptor: ...


class FileLockImpl:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def release(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isValid(self, ) -> Union[int, JBoolean]: ...
	def channel(self, ) -> javawrappers.java.nio.channels.FileChannel: ...
	def notify(self, ) -> None: ...
	def acquiredBy(self, ) -> javawrappers.java.nio.channels.Channel: ...
	def size(self, ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def overlaps(self, arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def position(self, ) -> Union[long, JLong]: ...
	def close(self, ) -> None: ...
	def isShared(self, ) -> Union[int, JBoolean]: ...


class ThreadPool:
	class DefaultThreadPoolHolder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def wrap(arg0: javawrappers.java.util.concurrent.ExecutorService, arg1: Union[int, JInt], ) -> javawrappers.sun.nio.ch.ThreadPool: ...
	def notify(self, ) -> None: ...


class FileChannelImpl:
	class Unmapper:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def run(self, ) -> None: ...
		def notify(self, ) -> None: ...


	class Closer:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def run(self, ) -> None: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), ) -> Union[long, JLong]: ...
	@overload
	def read(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[long, JLong]: ...
	@overload
	def read(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[long, JLong], ) -> Union[int, JInt]: ...
	def transferFrom(self, arg0: javawrappers.java.nio.channels.ReadableByteChannel, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> Union[long, JLong]: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def getMappedBufferPool() -> javawrappers.jdk.internal.misc.JavaNioAccess.BufferPool: ...
	@overload
	def run(self, ) -> None: ...
	@overload
	def run(self, ) -> None: ...
	def transferTo(self, arg0: Union[long, JLong], arg1: Union[long, JLong], arg2: javawrappers.java.nio.channels.WritableByteChannel, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	@overload
	def tryLock(self, arg0: Union[long, JLong], arg1: Union[long, JLong], arg2: Union[int, JBoolean], ) -> javawrappers.java.nio.channels.FileLock: ...
	@overload
	def tryLock(self, ) -> javawrappers.java.nio.channels.FileLock: ...
	def isOpen(self, ) -> Union[int, JBoolean]: ...
	@overload
	def truncate(self, arg0: Union[long, JLong], ) -> javawrappers.java.nio.channels.SeekableByteChannel: ...
	@overload
	def truncate(self, arg0: Union[long, JLong], ) -> javawrappers.java.nio.channels.FileChannel: ...
	def size(self, ) -> Union[long, JLong]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def lock(self, ) -> javawrappers.java.nio.channels.FileLock: ...
	@overload
	def lock(self, arg0: Union[long, JLong], arg1: Union[long, JLong], arg2: Union[int, JBoolean], ) -> javawrappers.java.nio.channels.FileLock: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def force(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def position(self, arg0: Union[long, JLong], ) -> javawrappers.java.nio.channels.SeekableByteChannel: ...
	@overload
	def position(self, arg0: Union[long, JLong], ) -> javawrappers.java.nio.channels.FileChannel: ...
	@overload
	def position(self, ) -> Union[long, JLong]: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), ) -> Union[long, JLong]: ...
	@overload
	def write(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...
	@overload
	def write(self, arg0: javawrappers.java.nio.ByteBuffer, arg1: Union[long, JLong], ) -> Union[int, JInt]: ...
	@overload
	def write(self, arg0: JArray(javawrappers.java.nio.ByteBuffer, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[long, JLong]: ...
	def map(self, arg0: javawrappers.java.nio.channels.FileChannel.MapMode, arg1: Union[long, JLong], arg2: Union[long, JLong], ) -> javawrappers.java.nio.MappedByteBuffer: ...
	@overload
	@staticmethod
	def open(arg0: javawrappers.java.io.FileDescriptor, arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], arg3: Union[int, JBoolean], arg4: Union[int, JBoolean], arg5: javawrappers.java.lang.Object, ) -> javawrappers.java.nio.channels.FileChannel: ...
	@overload
	@staticmethod
	def open(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.util.Set, *arg2: javawrappers.java.nio.file.attribute.FileAttribute, ) -> javawrappers.java.nio.channels.FileChannel: ...
	@overload
	@staticmethod
	def open(arg0: javawrappers.java.nio.file.Path, *arg1: javawrappers.java.nio.file.OpenOption, ) -> javawrappers.java.nio.channels.FileChannel: ...
	def setUninterruptible(self, ) -> None: ...


class LinuxAsynchronousChannelProvider:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def provider() -> javawrappers.java.nio.channels.spi.AsynchronousChannelProvider: ...
	@overload
	def openAsynchronousChannelGroup(self, arg0: javawrappers.java.util.concurrent.ExecutorService, arg1: Union[int, JInt], ) -> javawrappers.java.nio.channels.AsynchronousChannelGroup: ...
	@overload
	def openAsynchronousChannelGroup(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.concurrent.ThreadFactory, ) -> javawrappers.java.nio.channels.AsynchronousChannelGroup: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def openAsynchronousServerSocketChannel(self, arg0: javawrappers.java.nio.channels.AsynchronousChannelGroup, ) -> javawrappers.java.nio.channels.AsynchronousServerSocketChannel: ...
	def notify(self, ) -> None: ...
	def openAsynchronousSocketChannel(self, arg0: javawrappers.java.nio.channels.AsynchronousChannelGroup, ) -> javawrappers.java.nio.channels.AsynchronousSocketChannel: ...


class Interruptible:
	def interrupt(self, arg0: javawrappers.java.lang.Thread, ) -> None: ...


class Net:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def bind(arg0: javawrappers.java.io.FileDescriptor, arg1: javawrappers.java.net.InetAddress, arg2: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def checkAddress(arg0: javawrappers.java.net.SocketAddress, ) -> javawrappers.java.net.InetSocketAddress: ...
	@staticmethod
	def localAddress(arg0: javawrappers.java.io.FileDescriptor, ) -> javawrappers.java.net.InetSocketAddress: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def isFastTcpLoopbackRequested() -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class IOUtil:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def newFD(arg0: Union[int, JInt], ) -> javawrappers.java.io.FileDescriptor: ...
	@staticmethod
	def load() -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def fdVal(arg0: javawrappers.java.io.FileDescriptor, ) -> Union[int, JInt]: ...
	@staticmethod
	def configureBlocking(arg0: javawrappers.java.io.FileDescriptor, arg1: Union[int, JBoolean], ) -> None: ...


class DefaultSelectorProvider:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def create() -> javawrappers.java.nio.channels.spi.SelectorProvider: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class DatagramSocketAdaptor:
	@staticmethod
	def setDatagramSocketImplFactory(arg0: javawrappers.java.net.DatagramSocketImplFactory, ) -> None: ...
	def getInetAddress(self, ) -> javawrappers.java.net.InetAddress: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def disconnect(self, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setReceiveBufferSize(self, arg0: Union[int, JInt], ) -> None: ...
	def getLocalPort(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def isConnected(self, ) -> Union[int, JBoolean]: ...
	def getOption(self, arg0: javawrappers.java.net.SocketOption, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def getLocalAddress(self, ) -> javawrappers.java.net.InetAddress: ...
	def supportedOptions(self, ) -> javawrappers.java.util.Set: ...
	def bind(self, arg0: javawrappers.java.net.SocketAddress, ) -> None: ...
	def getChannel(self, ) -> javawrappers.java.nio.channels.DatagramChannel: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def create(arg0: javawrappers.sun.nio.ch.DatagramChannelImpl, ) -> javawrappers.java.net.DatagramSocket: ...
	def getSoTimeout(self, ) -> Union[int, JInt]: ...
	def close(self, ) -> None: ...
	@overload
	def connect(self, arg0: javawrappers.java.net.SocketAddress, ) -> None: ...
	@overload
	def connect(self, arg0: javawrappers.java.net.InetAddress, arg1: Union[int, JInt], ) -> None: ...
	def setTrafficClass(self, arg0: Union[int, JInt], ) -> None: ...
	def setOption(self, arg0: javawrappers.java.net.SocketOption, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.net.DatagramSocket: ...
	def receive(self, arg0: javawrappers.java.net.DatagramPacket, ) -> None: ...
	def getBroadcast(self, ) -> Union[int, JBoolean]: ...
	def getLocalSocketAddress(self, ) -> javawrappers.java.net.SocketAddress: ...
	def setReuseAddress(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getReceiveBufferSize(self, ) -> Union[int, JInt]: ...
	def getTrafficClass(self, ) -> Union[int, JInt]: ...
	def getReuseAddress(self, ) -> Union[int, JBoolean]: ...
	def setSoTimeout(self, arg0: Union[int, JInt], ) -> None: ...
	def getPort(self, ) -> Union[int, JInt]: ...
	def isClosed(self, ) -> Union[int, JBoolean]: ...
	def isBound(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setSendBufferSize(self, arg0: Union[int, JInt], ) -> None: ...
	def getSendBufferSize(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setBroadcast(self, arg0: Union[int, JBoolean], ) -> None: ...
	def send(self, arg0: javawrappers.java.net.DatagramPacket, ) -> None: ...
	def getRemoteSocketAddress(self, ) -> javawrappers.java.net.SocketAddress: ...


