################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.text
import javawrappers.java.util
import javawrappers.java.io
import javawrappers.java.util.function
import javawrappers.java.math

from jpype.types import *
from typing import Union

from typing import overload

class CollationElementIterator:
	def next(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def secondaryOrder(arg0: Union[int, JInt], ) -> Union[int, JShort]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def previous(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def getOffset(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setOffset(self, arg0: Union[int, JInt], ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def tertiaryOrder(arg0: Union[int, JInt], ) -> Union[int, JShort]: ...
	def getMaxExpansion(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def primaryOrder(arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def setText(self, arg0: javawrappers.java.text.CharacterIterator, ) -> None: ...
	@overload
	def setText(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class NumberFormat:
	class Field:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def formatToCharacterIterator(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.text.AttributedCharacterIterator: ...
	def setGroupingUsed(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def getCurrencyInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getCurrencyInstance() -> javawrappers.java.text.NumberFormat: ...
	def getMinimumFractionDigits(self, ) -> Union[int, JInt]: ...
	def setCurrency(self, arg0: javawrappers.java.util.Currency, ) -> None: ...
	def notify(self, ) -> None: ...
	def setMinimumIntegerDigits(self, arg0: Union[int, JInt], ) -> None: ...
	def getRoundingMode(self, ) -> javawrappers.java.math.RoundingMode: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setParseIntegerOnly(self, arg0: Union[int, JBoolean], ) -> None: ...
	@staticmethod
	def getAvailableLocales() -> JArray(javawrappers.java.util.Locale, 1): ...
	def getCurrency(self, ) -> javawrappers.java.util.Currency: ...
	def isGroupingUsed(self, ) -> Union[int, JBoolean]: ...
	@overload
	def format(self, arg0: Union[long, JLong], arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: Union[float, JDouble], arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: Union[long, JLong], ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: Union[float, JDouble], ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Number: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Number: ...
	def setMinimumFractionDigits(self, arg0: Union[int, JInt], ) -> None: ...
	def getMaximumIntegerDigits(self, ) -> Union[int, JInt]: ...
	def setMaximumIntegerDigits(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def getPercentInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getPercentInstance() -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getNumberInstance() -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getNumberInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Object: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def getIntegerInstance() -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getIntegerInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	def getMaximumFractionDigits(self, ) -> Union[int, JInt]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def isParseIntegerOnly(self, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getInstance() -> javawrappers.java.text.NumberFormat: ...
	def setRoundingMode(self, arg0: javawrappers.java.math.RoundingMode, ) -> None: ...
	def getMinimumIntegerDigits(self, ) -> Union[int, JInt]: ...
	def setMaximumFractionDigits(self, arg0: Union[int, JInt], ) -> None: ...


class DecimalFormatSymbols:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Locale, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setPercent(self, arg0: Union[string, JString], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getCurrencySymbol(self, ) -> javawrappers.java.lang.String: ...
	def getPatternSeparator(self, ) -> Union[string, JString]: ...
	def getNaN(self, ) -> javawrappers.java.lang.String: ...
	def setCurrency(self, arg0: javawrappers.java.util.Currency, ) -> None: ...
	def notify(self, ) -> None: ...
	def setMonetaryDecimalSeparator(self, arg0: Union[string, JString], ) -> None: ...
	def setInfinity(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getGroupingSeparator(self, ) -> Union[string, JString]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getPercent(self, ) -> Union[string, JString]: ...
	def setMinusSign(self, arg0: Union[string, JString], ) -> None: ...
	@staticmethod
	def getAvailableLocales() -> JArray(javawrappers.java.util.Locale, 1): ...
	def getCurrency(self, ) -> javawrappers.java.util.Currency: ...
	def getDecimalSeparator(self, ) -> Union[string, JString]: ...
	def setCurrencySymbol(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getDigit(self, ) -> Union[string, JString]: ...
	def setPatternSeparator(self, arg0: Union[string, JString], ) -> None: ...
	def getPerMill(self, ) -> Union[string, JString]: ...
	def getInternationalCurrencySymbol(self, ) -> javawrappers.java.lang.String: ...
	def setPerMill(self, arg0: Union[string, JString], ) -> None: ...
	def getMinusSign(self, ) -> Union[string, JString]: ...
	def getExponentSeparator(self, ) -> javawrappers.java.lang.String: ...
	def getZeroDigit(self, ) -> Union[string, JString]: ...
	def getInfinity(self, ) -> javawrappers.java.lang.String: ...
	def setGroupingSeparator(self, arg0: Union[string, JString], ) -> None: ...
	def setDecimalSeparator(self, arg0: Union[string, JString], ) -> None: ...
	def setInternationalCurrencySymbol(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setDigit(self, arg0: Union[string, JString], ) -> None: ...
	def setExponentSeparator(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setZeroDigit(self, arg0: Union[string, JString], ) -> None: ...
	def getMonetaryDecimalSeparator(self, ) -> Union[string, JString]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance() -> javawrappers.java.text.DecimalFormatSymbols: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DecimalFormatSymbols: ...
	def setNaN(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class DecimalFormat:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.DecimalFormatSymbols, ): ...
	@overload
	def __init__(self, ): ...
	class DigitArrays:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class FastPathData:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def setNegativeSuffix(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setGroupingSize(self, arg0: Union[int, JInt], ) -> None: ...
	def setNegativePrefix(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	@staticmethod
	def getCurrencyInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getCurrencyInstance() -> javawrappers.java.text.NumberFormat: ...
	def setMultiplier(self, arg0: Union[int, JInt], ) -> None: ...
	def setPositiveSuffix(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setMinimumIntegerDigits(self, arg0: Union[int, JInt], ) -> None: ...
	def getPositivePrefix(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getAvailableLocales() -> JArray(javawrappers.java.util.Locale, 1): ...
	def setPositivePrefix(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getMultiplier(self, ) -> Union[int, JInt]: ...
	def applyPattern(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getCurrency(self, ) -> javawrappers.java.util.Currency: ...
	def isGroupingUsed(self, ) -> Union[int, JBoolean]: ...
	def toPattern(self, ) -> javawrappers.java.lang.String: ...
	def setDecimalFormatSymbols(self, arg0: javawrappers.java.text.DecimalFormatSymbols, ) -> None: ...
	@overload
	def format(self, arg0: Union[float, JDouble], arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: Union[long, JLong], arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: Union[long, JLong], ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: Union[float, JDouble], ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def setMinimumFractionDigits(self, arg0: Union[int, JInt], ) -> None: ...
	def getMaximumIntegerDigits(self, ) -> Union[int, JInt]: ...
	def setMaximumIntegerDigits(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def getNumberInstance() -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getNumberInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	def getNegativeSuffix(self, ) -> javawrappers.java.lang.String: ...
	def getNegativePrefix(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getIntegerInstance() -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getIntegerInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	def isParseIntegerOnly(self, ) -> Union[int, JBoolean]: ...
	def setRoundingMode(self, arg0: javawrappers.java.math.RoundingMode, ) -> None: ...
	def getMinimumIntegerDigits(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def formatToCharacterIterator(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.text.AttributedCharacterIterator: ...
	def setGroupingUsed(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getGroupingSize(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def getMinimumFractionDigits(self, ) -> Union[int, JInt]: ...
	def setCurrency(self, arg0: javawrappers.java.util.Currency, ) -> None: ...
	def notify(self, ) -> None: ...
	def toLocalizedPattern(self, ) -> javawrappers.java.lang.String: ...
	def getRoundingMode(self, ) -> javawrappers.java.math.RoundingMode: ...
	def getDecimalFormatSymbols(self, ) -> javawrappers.java.text.DecimalFormatSymbols: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isParseBigDecimal(self, ) -> Union[int, JBoolean]: ...
	def setDecimalSeparatorAlwaysShown(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setParseIntegerOnly(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setParseBigDecimal(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getPositiveSuffix(self, ) -> javawrappers.java.lang.String: ...
	def applyLocalizedPattern(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Number: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Number: ...
	@overload
	@staticmethod
	def getPercentInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getPercentInstance() -> javawrappers.java.text.NumberFormat: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Object: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getMaximumFractionDigits(self, ) -> Union[int, JInt]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getInstance() -> javawrappers.java.text.NumberFormat: ...
	def isDecimalSeparatorAlwaysShown(self, ) -> Union[int, JBoolean]: ...
	def setMaximumFractionDigits(self, arg0: Union[int, JInt], ) -> None: ...


class ChoiceFormat:
	@overload
	def __init__(self, arg0: JArray(Union[float, JDouble], 1), arg1: JArray(javawrappers.java.lang.String, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def formatToCharacterIterator(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.text.AttributedCharacterIterator: ...
	def setGroupingUsed(self, arg0: Union[int, JBoolean], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getFormats(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	@staticmethod
	def getCurrencyInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getCurrencyInstance() -> javawrappers.java.text.NumberFormat: ...
	def getMinimumFractionDigits(self, ) -> Union[int, JInt]: ...
	def setCurrency(self, arg0: javawrappers.java.util.Currency, ) -> None: ...
	def notify(self, ) -> None: ...
	def setMinimumIntegerDigits(self, arg0: Union[int, JInt], ) -> None: ...
	def getLimits(self, ) -> JArray(Union[float, JDouble], 1): ...
	def getRoundingMode(self, ) -> javawrappers.java.math.RoundingMode: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setParseIntegerOnly(self, arg0: Union[int, JBoolean], ) -> None: ...
	@staticmethod
	def getAvailableLocales() -> JArray(javawrappers.java.util.Locale, 1): ...
	def applyPattern(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getCurrency(self, ) -> javawrappers.java.util.Currency: ...
	def isGroupingUsed(self, ) -> Union[int, JBoolean]: ...
	def toPattern(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: Union[long, JLong], ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: Union[float, JDouble], ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: Union[float, JDouble], arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: Union[long, JLong], arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	def setMinimumFractionDigits(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Number: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Number: ...
	def getMaximumIntegerDigits(self, ) -> Union[int, JInt]: ...
	def setMaximumIntegerDigits(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	@staticmethod
	def getPercentInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getPercentInstance() -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getNumberInstance() -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getNumberInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def nextDouble(arg0: Union[float, JDouble], arg1: Union[int, JBoolean], ) -> Union[float, JDouble]: ...
	@overload
	@staticmethod
	def nextDouble(arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Object: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def getIntegerInstance() -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getIntegerInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	def getMaximumFractionDigits(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def previousDouble(arg0: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def isParseIntegerOnly(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.NumberFormat: ...
	@overload
	@staticmethod
	def getInstance() -> javawrappers.java.text.NumberFormat: ...
	def setRoundingMode(self, arg0: javawrappers.java.math.RoundingMode, ) -> None: ...
	def getMinimumIntegerDigits(self, ) -> Union[int, JInt]: ...
	def setChoices(self, arg0: JArray(Union[float, JDouble], 1), arg1: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def setMaximumFractionDigits(self, arg0: Union[int, JInt], ) -> None: ...


class Normalizer:
	class Form:
		NFD: Normalizer.Form = ...
		NFC: Normalizer.Form = ...
		NFKD: Normalizer.Form = ...
		NFKC: Normalizer.Form = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.text.Normalizer.Form: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.java.text.Normalizer.Form, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.text.Normalizer.Form: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.text.Normalizer.Form, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def normalize(arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.text.Normalizer.Form, ) -> javawrappers.java.lang.String: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def isNormalized(arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.text.Normalizer.Form, ) -> Union[int, JBoolean]: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class FieldPosition:
	@overload
	def __init__(self, arg0: javawrappers.java.text.Format.Field, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.text.Format.Field, arg1: Union[int, JInt], ): ...
	class Delegate:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def formatted(self, arg0: javawrappers.java.text.Format.Field, arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: javawrappers.java.lang.StringBuffer, ) -> None: ...
		@overload
		def formatted(self, arg0: Union[int, JInt], arg1: javawrappers.java.text.Format.Field, arg2: javawrappers.java.lang.Object, arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: javawrappers.java.lang.StringBuffer, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def formatted(self, arg0: javawrappers.java.text.Format.Field, arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: javawrappers.java.lang.StringBuffer, ) -> None: ...
	@overload
	def formatted(self, arg0: Union[int, JInt], arg1: javawrappers.java.text.Format.Field, arg2: javawrappers.java.lang.Object, arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: javawrappers.java.lang.StringBuffer, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getField(self, ) -> Union[int, JInt]: ...
	def setEndIndex(self, arg0: Union[int, JInt], ) -> None: ...
	def getBeginIndex(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getEndIndex(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getFieldAttribute(self, ) -> javawrappers.java.text.Format.Field: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setBeginIndex(self, arg0: Union[int, JInt], ) -> None: ...


class BreakIterator:
	class BreakIteratorCache:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	@overload
	def next(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def next(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def getSentenceInstance() -> javawrappers.java.text.BreakIterator: ...
	@overload
	@staticmethod
	def getSentenceInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.BreakIterator: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def previous(self, ) -> Union[int, JInt]: ...
	def last(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def getCharacterInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.BreakIterator: ...
	@overload
	@staticmethod
	def getCharacterInstance() -> javawrappers.java.text.BreakIterator: ...
	@overload
	@staticmethod
	def getWordInstance() -> javawrappers.java.text.BreakIterator: ...
	@overload
	@staticmethod
	def getWordInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.BreakIterator: ...
	def getText(self, ) -> javawrappers.java.text.CharacterIterator: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def getLineInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.BreakIterator: ...
	@overload
	@staticmethod
	def getLineInstance() -> javawrappers.java.text.BreakIterator: ...
	def current(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isBoundary(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def following(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def preceding(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def first(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getAvailableLocales() -> JArray(javawrappers.java.util.Locale, 1): ...
	@overload
	def setText(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setText(self, arg0: javawrappers.java.text.CharacterIterator, ) -> None: ...


class ParsePosition:
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getIndex(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setIndex(self, arg0: Union[int, JInt], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getErrorIndex(self, ) -> Union[int, JInt]: ...
	def setErrorIndex(self, arg0: Union[int, JInt], ) -> None: ...


class CollationKey:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSourceString(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toByteArray(self, ) -> JArray(JByte, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.text.CollationKey, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class MessageFormat:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ): ...
	class Field:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getFormatsByArgumentIndex(self, ) -> JArray(javawrappers.java.text.Format, 1): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def toPattern(self, ) -> javawrappers.java.lang.String: ...
	def formatToCharacterIterator(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.text.AttributedCharacterIterator: ...
	def notifyAll(self, ) -> None: ...
	def setFormats(self, arg0: JArray(javawrappers.java.text.Format, 1), ) -> None: ...
	@overload
	def format(self, arg0: JArray(javawrappers.java.lang.Object, 1), arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	@staticmethod
	def format(arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def getFormats(self, ) -> JArray(javawrappers.java.text.Format, 1): ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def notify(self, ) -> None: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Object: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def setFormat(self, arg0: Union[int, JInt], arg1: javawrappers.java.text.Format, ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setFormatsByArgumentIndex(self, arg0: JArray(javawrappers.java.text.Format, 1), ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getLocale(self, ) -> javawrappers.java.util.Locale: ...
	def setLocale(self, arg0: javawrappers.java.util.Locale, ) -> None: ...
	def setFormatByArgumentIndex(self, arg0: Union[int, JInt], arg1: javawrappers.java.text.Format, ) -> None: ...
	def applyPattern(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class StringCharacterIterator:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ): ...
	def next(self, ) -> Union[string, JString]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def previous(self, ) -> Union[string, JString]: ...
	def getIndex(self, ) -> Union[int, JInt]: ...
	def last(self, ) -> Union[string, JString]: ...
	def notifyAll(self, ) -> None: ...
	def getBeginIndex(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def current(self, ) -> Union[string, JString]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getEndIndex(self, ) -> Union[int, JInt]: ...
	def setIndex(self, arg0: Union[int, JInt], ) -> Union[string, JString]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def first(self, ) -> Union[string, JString]: ...
	def setText(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class Format:
	class FieldDelegate:
		@overload
		def formatted(self, arg0: javawrappers.java.text.Format.Field, arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: javawrappers.java.lang.StringBuffer, ) -> None: ...
		@overload
		def formatted(self, arg0: Union[int, JInt], arg1: javawrappers.java.text.Format.Field, arg2: javawrappers.java.lang.Object, arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: javawrappers.java.lang.StringBuffer, ) -> None: ...


	class Field:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def formatToCharacterIterator(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.text.AttributedCharacterIterator: ...
	@overload
	def formatted(self, arg0: javawrappers.java.text.Format.Field, arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: javawrappers.java.lang.StringBuffer, ) -> None: ...
	@overload
	def formatted(self, arg0: Union[int, JInt], arg1: javawrappers.java.text.Format.Field, arg2: javawrappers.java.lang.Object, arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: javawrappers.java.lang.StringBuffer, ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Object: ...


class AttributedCharacterIterator:
	class Attribute:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def next(self, ) -> Union[string, JString]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getAttributes(self, ) -> javawrappers.java.util.Map: ...
	def previous(self, ) -> Union[string, JString]: ...
	def getIndex(self, ) -> Union[int, JInt]: ...
	def last(self, ) -> Union[string, JString]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getRunLimit(self, ) -> Union[int, JInt]: ...
	@overload
	def getRunLimit(self, arg0: javawrappers.java.util.Set, ) -> Union[int, JInt]: ...
	@overload
	def getRunLimit(self, arg0: javawrappers.java.text.AttributedCharacterIterator.Attribute, ) -> Union[int, JInt]: ...
	def getBeginIndex(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def current(self, ) -> Union[string, JString]: ...
	def getAttribute(self, arg0: javawrappers.java.text.AttributedCharacterIterator.Attribute, ) -> javawrappers.java.lang.Object: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getEndIndex(self, ) -> Union[int, JInt]: ...
	def setIndex(self, arg0: Union[int, JInt], ) -> Union[string, JString]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getRunStart(self, ) -> Union[int, JInt]: ...
	@overload
	def getRunStart(self, arg0: javawrappers.java.text.AttributedCharacterIterator.Attribute, ) -> Union[int, JInt]: ...
	@overload
	def getRunStart(self, arg0: javawrappers.java.util.Set, ) -> Union[int, JInt]: ...
	def first(self, ) -> Union[string, JString]: ...
	def getAllAttributeKeys(self, ) -> javawrappers.java.util.Set: ...


class DateFormatSymbols:
	@overload
	def __init__(self, arg0: javawrappers.java.util.Locale, ): ...
	@overload
	def __init__(self, ): ...
	def setShortWeekdays(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setShortMonths(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def getWeekdays(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def notifyAll(self, ) -> None: ...
	def setAmPmStrings(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def setWeekdays(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def notify(self, ) -> None: ...
	def getMonths(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getAmPmStrings(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@staticmethod
	def getAvailableLocales() -> JArray(javawrappers.java.util.Locale, 1): ...
	def setEras(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def setMonths(self, arg0: JArray(javawrappers.java.lang.String, 1), ) -> None: ...
	def getEras(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def setZoneStrings(self, arg0: JArray(JArray(javawrappers.java.lang.String, 1), 1), ) -> None: ...
	def getLocalPatternChars(self, ) -> javawrappers.java.lang.String: ...
	def setLocalPatternChars(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def getZoneStrings(self, ) -> JArray(JArray(javawrappers.java.lang.String, 1), 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance() -> javawrappers.java.text.DateFormatSymbols: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormatSymbols: ...
	def getShortMonths(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getShortWeekdays(self, ) -> JArray(javawrappers.java.lang.String, 1): ...


class ParseException:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def getErrorOffset(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class RuleBasedCollator:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def getCollationElementIterator(self, arg0: javawrappers.java.text.CharacterIterator, ) -> javawrappers.java.text.CollationElementIterator: ...
	@overload
	def getCollationElementIterator(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.text.CollationElementIterator: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def compare(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@overload
	def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
	def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
	def getCollationKey(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.text.CollationKey: ...
	def notifyAll(self, ) -> None: ...
	def getStrength(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDecomposition(self, ) -> Union[int, JInt]: ...
	def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	def setStrength(self, arg0: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.Collator: ...
	@overload
	@staticmethod
	def getInstance() -> javawrappers.java.text.Collator: ...
	def getRules(self, ) -> javawrappers.java.lang.String: ...
	def reversed(self, ) -> javawrappers.java.util.Comparator: ...
	@staticmethod
	def getAvailableLocales() -> JArray(javawrappers.java.util.Locale, 1): ...
	def setDecomposition(self, arg0: Union[int, JInt], ) -> None: ...


class Annotation:
	def __init__(self, arg0: javawrappers.java.lang.Object, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getValue(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Collator:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def compare(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compare(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def thenComparingInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.Comparator: ...
	def thenComparingDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.Comparator: ...
	def getCollationKey(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.text.CollationKey: ...
	def notifyAll(self, ) -> None: ...
	def getStrength(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDecomposition(self, ) -> Union[int, JInt]: ...
	def thenComparingLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	@overload
	def thenComparing(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Comparator: ...
	def setStrength(self, arg0: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.util.Locale, ) -> javawrappers.java.text.Collator: ...
	@overload
	@staticmethod
	def getInstance() -> javawrappers.java.text.Collator: ...
	def reversed(self, ) -> javawrappers.java.util.Comparator: ...
	@staticmethod
	def getAvailableLocales() -> JArray(javawrappers.java.util.Locale, 1): ...
	def setDecomposition(self, arg0: Union[int, JInt], ) -> None: ...


class CharacterIterator:
	def next(self, ) -> Union[string, JString]: ...
	def current(self, ) -> Union[string, JString]: ...
	def previous(self, ) -> Union[string, JString]: ...
	def getIndex(self, ) -> Union[int, JInt]: ...
	def last(self, ) -> Union[string, JString]: ...
	def getEndIndex(self, ) -> Union[int, JInt]: ...
	def setIndex(self, arg0: Union[int, JInt], ) -> Union[string, JString]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def getBeginIndex(self, ) -> Union[int, JInt]: ...
	def first(self, ) -> Union[string, JString]: ...


class Bidi:
	@overload
	def __init__(self, arg0: javawrappers.java.text.AttributedCharacterIterator, ): ...
	@overload
	def __init__(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: JArray(JByte, 1), arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getRunLevel(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def baseIsLeftToRight(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getRunCount(self, ) -> Union[int, JInt]: ...
	def getRunLimit(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getBaseLevel(self, ) -> Union[int, JInt]: ...
	def isMixed(self, ) -> Union[int, JBoolean]: ...
	def isRightToLeft(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def requiresBidi(arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def isLeftToRight(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def reorderVisually(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: JArray(javawrappers.java.lang.Object, 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> None: ...
	def createLineBidi(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.text.Bidi: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getLevelAt(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getLength(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getRunStart(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...


class AttributedString:
	@overload
	def __init__(self, arg0: javawrappers.java.text.AttributedCharacterIterator, arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.text.AttributedCharacterIterator, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Map, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.text.AttributedCharacterIterator, arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: JArray(javawrappers.java.text.AttributedCharacterIterator.Attribute, 1), ): ...
	class AttributeMap:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
		def notifyAll(self, ) -> None: ...
		def values(self, ) -> javawrappers.java.util.Collection: ...
		@overload
		def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
		def notify(self, ) -> None: ...
		def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
		def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def keySet(self, ) -> javawrappers.java.util.Set: ...
		def entrySet(self, ) -> javawrappers.java.util.Set: ...
		def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
		def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		def size(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


	class AttributedStringIterator:
		def next(self, ) -> Union[string, JString]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getAttributes(self, ) -> javawrappers.java.util.Map: ...
		def previous(self, ) -> Union[string, JString]: ...
		def getIndex(self, ) -> Union[int, JInt]: ...
		def last(self, ) -> Union[string, JString]: ...
		def notifyAll(self, ) -> None: ...
		@overload
		def getRunLimit(self, ) -> Union[int, JInt]: ...
		@overload
		def getRunLimit(self, arg0: javawrappers.java.text.AttributedCharacterIterator.Attribute, ) -> Union[int, JInt]: ...
		@overload
		def getRunLimit(self, arg0: javawrappers.java.util.Set, ) -> Union[int, JInt]: ...
		def getBeginIndex(self, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def current(self, ) -> Union[string, JString]: ...
		def getAttribute(self, arg0: javawrappers.java.text.AttributedCharacterIterator.Attribute, ) -> javawrappers.java.lang.Object: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getEndIndex(self, ) -> Union[int, JInt]: ...
		def setIndex(self, arg0: Union[int, JInt], ) -> Union[string, JString]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def clone(self, ) -> javawrappers.java.lang.Object: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def getRunStart(self, arg0: javawrappers.java.text.AttributedCharacterIterator.Attribute, ) -> Union[int, JInt]: ...
		@overload
		def getRunStart(self, ) -> Union[int, JInt]: ...
		@overload
		def getRunStart(self, arg0: javawrappers.java.util.Set, ) -> Union[int, JInt]: ...
		def first(self, ) -> Union[string, JString]: ...
		def getAllAttributeKeys(self, ) -> javawrappers.java.util.Set: ...


	def next(self, ) -> Union[string, JString]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getIndex(self, ) -> Union[int, JInt]: ...
	def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
	def values(self, ) -> javawrappers.java.util.Collection: ...
	def notifyAll(self, ) -> None: ...
	def addAttributes(self, arg0: javawrappers.java.util.Map, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getRunLimit(self, ) -> Union[int, JInt]: ...
	@overload
	def getRunLimit(self, arg0: javawrappers.java.text.AttributedCharacterIterator.Attribute, ) -> Union[int, JInt]: ...
	@overload
	def getRunLimit(self, arg0: javawrappers.java.util.Set, ) -> Union[int, JInt]: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
	def getBeginIndex(self, ) -> Union[int, JInt]: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def current(self, ) -> Union[string, JString]: ...
	def getAttribute(self, arg0: javawrappers.java.text.AttributedCharacterIterator.Attribute, ) -> javawrappers.java.lang.Object: ...
	def getEndIndex(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def getRunStart(self, arg0: javawrappers.java.text.AttributedCharacterIterator.Attribute, ) -> Union[int, JInt]: ...
	@overload
	def getRunStart(self, ) -> Union[int, JInt]: ...
	@overload
	def getRunStart(self, arg0: javawrappers.java.util.Set, ) -> Union[int, JInt]: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def getAttributes(self, ) -> javawrappers.java.util.Map: ...
	def previous(self, ) -> Union[string, JString]: ...
	def last(self, ) -> Union[string, JString]: ...
	def entrySet(self, ) -> javawrappers.java.util.Set: ...
	def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	@overload
	def getIterator(self, ) -> javawrappers.java.text.AttributedCharacterIterator: ...
	@overload
	def getIterator(self, arg0: JArray(javawrappers.java.text.AttributedCharacterIterator.Attribute, 1), ) -> javawrappers.java.text.AttributedCharacterIterator: ...
	@overload
	def getIterator(self, arg0: JArray(javawrappers.java.text.AttributedCharacterIterator.Attribute, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.text.AttributedCharacterIterator: ...
	def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def size(self, ) -> Union[int, JInt]: ...
	@overload
	def addAttribute(self, arg0: javawrappers.java.text.AttributedCharacterIterator.Attribute, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def addAttribute(self, arg0: javawrappers.java.text.AttributedCharacterIterator.Attribute, arg1: javawrappers.java.lang.Object, arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> None: ...
	def setIndex(self, arg0: Union[int, JInt], ) -> Union[string, JString]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def first(self, ) -> Union[string, JString]: ...
	def getAllAttributeKeys(self, ) -> javawrappers.java.util.Set: ...


class DateFormat:
	class Field:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def getCalendarField(self, ) -> Union[int, JInt]: ...
		@staticmethod
		def ofCalendarField(arg0: Union[int, JInt], ) -> javawrappers.java.text.DateFormat.Field: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def formatToCharacterIterator(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.text.AttributedCharacterIterator: ...
	def getTimeZone(self, ) -> javawrappers.java.util.TimeZone: ...
	def isLenient(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	@staticmethod
	def getTimeInstance(arg0: Union[int, JInt], ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getTimeInstance() -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getTimeInstance(arg0: Union[int, JInt], arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
	def setLenient(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setNumberFormat(self, arg0: javawrappers.java.text.NumberFormat, ) -> None: ...
	def getCalendar(self, ) -> javawrappers.java.util.Calendar: ...
	def notify(self, ) -> None: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setTimeZone(self, arg0: javawrappers.java.util.TimeZone, ) -> None: ...
	def getCalendarField(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getAvailableLocales() -> JArray(javawrappers.java.util.Locale, 1): ...
	@overload
	def format(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: javawrappers.java.util.Date, ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.util.Date: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Date: ...
	@overload
	@staticmethod
	def getDateInstance() -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateInstance(arg0: Union[int, JInt], ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateInstance(arg0: Union[int, JInt], arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Object: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getNumberFormat(self, ) -> javawrappers.java.text.NumberFormat: ...
	def setCalendar(self, arg0: javawrappers.java.util.Calendar, ) -> None: ...
	@overload
	@staticmethod
	def getDateTimeInstance(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateTimeInstance(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateTimeInstance() -> javawrappers.java.text.DateFormat: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def ofCalendarField(arg0: Union[int, JInt], ) -> javawrappers.java.text.DateFormat.Field: ...
	@staticmethod
	def getInstance() -> javawrappers.java.text.DateFormat: ...


class SimpleDateFormat:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Locale, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.DateFormatSymbols, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def formatToCharacterIterator(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.text.AttributedCharacterIterator: ...
	def getTimeZone(self, ) -> javawrappers.java.util.TimeZone: ...
	def isLenient(self, ) -> Union[int, JBoolean]: ...
	def setDateFormatSymbols(self, arg0: javawrappers.java.text.DateFormatSymbols, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def set2DigitYearStart(self, arg0: javawrappers.java.util.Date, ) -> None: ...
	@overload
	@staticmethod
	def getTimeInstance(arg0: Union[int, JInt], ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getTimeInstance() -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getTimeInstance(arg0: Union[int, JInt], arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
	def setLenient(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setNumberFormat(self, arg0: javawrappers.java.text.NumberFormat, ) -> None: ...
	def getCalendar(self, ) -> javawrappers.java.util.Calendar: ...
	def notify(self, ) -> None: ...
	def toLocalizedPattern(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setTimeZone(self, arg0: javawrappers.java.util.TimeZone, ) -> None: ...
	def getDateFormatSymbols(self, ) -> javawrappers.java.text.DateFormatSymbols: ...
	@staticmethod
	def getAvailableLocales() -> JArray(javawrappers.java.util.Locale, 1): ...
	def applyPattern(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def toPattern(self, ) -> javawrappers.java.lang.String: ...
	def applyLocalizedPattern(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def format(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: javawrappers.java.util.Date, ) -> javawrappers.java.lang.String: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.StringBuffer, arg2: javawrappers.java.text.FieldPosition, ) -> javawrappers.java.lang.StringBuffer: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.util.Date: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Date: ...
	@overload
	@staticmethod
	def getDateInstance() -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateInstance(arg0: Union[int, JInt], ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateInstance(arg0: Union[int, JInt], arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.text.ParsePosition, ) -> javawrappers.java.lang.Object: ...
	@overload
	def parseObject(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Object: ...
	def getNumberFormat(self, ) -> javawrappers.java.text.NumberFormat: ...
	def setCalendar(self, arg0: javawrappers.java.util.Calendar, ) -> None: ...
	@overload
	@staticmethod
	def getDateTimeInstance(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.util.Locale, ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateTimeInstance(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.text.DateFormat: ...
	@overload
	@staticmethod
	def getDateTimeInstance() -> javawrappers.java.text.DateFormat: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def get2DigitYearStart(self, ) -> javawrappers.java.util.Date: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getInstance() -> javawrappers.java.text.DateFormat: ...


