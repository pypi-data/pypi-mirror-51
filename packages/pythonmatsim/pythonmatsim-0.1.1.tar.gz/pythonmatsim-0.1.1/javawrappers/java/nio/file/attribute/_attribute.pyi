################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.time
import javawrappers.java.util
import javawrappers.java.io
import javawrappers.java.util.concurrent
import javawrappers.javax.security.auth
import javawrappers.java.nio
import javawrappers.java.nio.file.attribute

from jpype.types import *
from typing import Union

from typing import overload

class FileTime:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def fromMillis(arg0: Union[long, JLong], ) -> javawrappers.java.nio.file.attribute.FileTime: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def from_(arg0: Union[long, JLong], arg1: javawrappers.java.util.concurrent.TimeUnit, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
	@overload
	@staticmethod
	def from_(arg0: javawrappers.java.time.Instant, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def toMillis(self, ) -> Union[long, JLong]: ...
	def to(self, arg0: javawrappers.java.util.concurrent.TimeUnit, ) -> Union[long, JLong]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.nio.file.attribute.FileTime, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def toInstant(self, ) -> javawrappers.java.time.Instant: ...
	def notify(self, ) -> None: ...


class PosixFilePermission:
	OWNER_READ: PosixFilePermission = ...
	OWNER_WRITE: PosixFilePermission = ...
	OWNER_EXECUTE: PosixFilePermission = ...
	GROUP_READ: PosixFilePermission = ...
	GROUP_WRITE: PosixFilePermission = ...
	GROUP_EXECUTE: PosixFilePermission = ...
	OTHERS_READ: PosixFilePermission = ...
	OTHERS_WRITE: PosixFilePermission = ...
	OTHERS_EXECUTE: PosixFilePermission = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.nio.file.attribute.PosixFilePermission: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.nio.file.attribute.PosixFilePermission, 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class DosFileAttributes:
	def isSystem(self, ) -> Union[int, JBoolean]: ...
	def isArchive(self, ) -> Union[int, JBoolean]: ...
	def lastAccessTime(self, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
	def lastModifiedTime(self, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
	def isReadOnly(self, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[long, JLong]: ...
	def creationTime(self, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
	def isSymbolicLink(self, ) -> Union[int, JBoolean]: ...
	def isRegularFile(self, ) -> Union[int, JBoolean]: ...
	def fileKey(self, ) -> javawrappers.java.lang.Object: ...
	def isOther(self, ) -> Union[int, JBoolean]: ...
	def isDirectory(self, ) -> Union[int, JBoolean]: ...
	def isHidden(self, ) -> Union[int, JBoolean]: ...


class FileStoreAttributeView:
	def name(self, ) -> javawrappers.java.lang.String: ...


class GroupPrincipal:
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def implies(self, arg0: javawrappers.javax.security.auth.Subject, ) -> Union[int, JBoolean]: ...


class FileOwnerAttributeView:
	def name(self, ) -> javawrappers.java.lang.String: ...
	def getOwner(self, ) -> javawrappers.java.nio.file.attribute.UserPrincipal: ...
	def setOwner(self, arg0: javawrappers.java.nio.file.attribute.UserPrincipal, ) -> None: ...


class PosixFilePermissions:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def toString(arg0: javawrappers.java.util.Set, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def asFileAttribute(arg0: javawrappers.java.util.Set, ) -> javawrappers.java.nio.file.attribute.FileAttribute: ...
	@staticmethod
	def fromString(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Set: ...
	def notify(self, ) -> None: ...


class AclEntryPermission:
	READ_DATA: AclEntryPermission = ...
	WRITE_DATA: AclEntryPermission = ...
	APPEND_DATA: AclEntryPermission = ...
	READ_NAMED_ATTRS: AclEntryPermission = ...
	WRITE_NAMED_ATTRS: AclEntryPermission = ...
	EXECUTE: AclEntryPermission = ...
	DELETE_CHILD: AclEntryPermission = ...
	READ_ATTRIBUTES: AclEntryPermission = ...
	WRITE_ATTRIBUTES: AclEntryPermission = ...
	DELETE: AclEntryPermission = ...
	READ_ACL: AclEntryPermission = ...
	WRITE_ACL: AclEntryPermission = ...
	WRITE_OWNER: AclEntryPermission = ...
	SYNCHRONIZE: AclEntryPermission = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.nio.file.attribute.AclEntryPermission: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.nio.file.attribute.AclEntryPermission, 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class AttributeView:
	def name(self, ) -> javawrappers.java.lang.String: ...


class UserPrincipalLookupService:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def lookupPrincipalByGroupName(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.nio.file.attribute.GroupPrincipal: ...
	def lookupPrincipalByName(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.nio.file.attribute.UserPrincipal: ...
	def notify(self, ) -> None: ...


class FileAttribute:
	def name(self, ) -> javawrappers.java.lang.String: ...
	def value(self, ) -> javawrappers.java.lang.Object: ...


class BasicFileAttributes:
	def lastAccessTime(self, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
	def lastModifiedTime(self, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
	def size(self, ) -> Union[long, JLong]: ...
	def creationTime(self, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
	def isSymbolicLink(self, ) -> Union[int, JBoolean]: ...
	def isRegularFile(self, ) -> Union[int, JBoolean]: ...
	def fileKey(self, ) -> javawrappers.java.lang.Object: ...
	def isOther(self, ) -> Union[int, JBoolean]: ...
	def isDirectory(self, ) -> Union[int, JBoolean]: ...


class BasicFileAttributeView:
	def readAttributes(self, ) -> javawrappers.java.nio.file.attribute.BasicFileAttributes: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def setTimes(self, arg0: javawrappers.java.nio.file.attribute.FileTime, arg1: javawrappers.java.nio.file.attribute.FileTime, arg2: javawrappers.java.nio.file.attribute.FileTime, ) -> None: ...


class UserPrincipalNotFoundException:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class AclEntryType:
	ALLOW: AclEntryType = ...
	DENY: AclEntryType = ...
	AUDIT: AclEntryType = ...
	ALARM: AclEntryType = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.nio.file.attribute.AclEntryType: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.nio.file.attribute.AclEntryType, 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class AclEntry:
	class Builder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def setPrincipal(self, arg0: javawrappers.java.nio.file.attribute.UserPrincipal, ) -> javawrappers.java.nio.file.attribute.AclEntry.Builder: ...
		def build(self, ) -> javawrappers.java.nio.file.attribute.AclEntry: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def setType(self, arg0: javawrappers.java.nio.file.attribute.AclEntryType, ) -> javawrappers.java.nio.file.attribute.AclEntry.Builder: ...
		@overload
		def setPermissions(self, *arg0: javawrappers.java.nio.file.attribute.AclEntryPermission, ) -> javawrappers.java.nio.file.attribute.AclEntry.Builder: ...
		@overload
		def setPermissions(self, arg0: javawrappers.java.util.Set, ) -> javawrappers.java.nio.file.attribute.AclEntry.Builder: ...
		def notify(self, ) -> None: ...
		@overload
		def setFlags(self, arg0: javawrappers.java.util.Set, ) -> javawrappers.java.nio.file.attribute.AclEntry.Builder: ...
		@overload
		def setFlags(self, *arg0: javawrappers.java.nio.file.attribute.AclEntryFlag, ) -> javawrappers.java.nio.file.attribute.AclEntry.Builder: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def flags(self, ) -> javawrappers.java.util.Set: ...
	def setType(self, arg0: javawrappers.java.nio.file.attribute.AclEntryType, ) -> javawrappers.java.nio.file.attribute.AclEntry.Builder: ...
	@overload
	def setPermissions(self, *arg0: javawrappers.java.nio.file.attribute.AclEntryPermission, ) -> javawrappers.java.nio.file.attribute.AclEntry.Builder: ...
	@overload
	def setPermissions(self, arg0: javawrappers.java.util.Set, ) -> javawrappers.java.nio.file.attribute.AclEntry.Builder: ...
	def type(self, ) -> javawrappers.java.nio.file.attribute.AclEntryType: ...
	@overload
	@staticmethod
	def newBuilder(arg0: javawrappers.java.nio.file.attribute.AclEntry, ) -> javawrappers.java.nio.file.attribute.AclEntry.Builder: ...
	@overload
	@staticmethod
	def newBuilder() -> javawrappers.java.nio.file.attribute.AclEntry.Builder: ...
	def notify(self, ) -> None: ...
	def principal(self, ) -> javawrappers.java.nio.file.attribute.UserPrincipal: ...
	def setPrincipal(self, arg0: javawrappers.java.nio.file.attribute.UserPrincipal, ) -> javawrappers.java.nio.file.attribute.AclEntry.Builder: ...
	def build(self, ) -> javawrappers.java.nio.file.attribute.AclEntry: ...
	def permissions(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def setFlags(self, arg0: javawrappers.java.util.Set, ) -> javawrappers.java.nio.file.attribute.AclEntry.Builder: ...
	@overload
	def setFlags(self, *arg0: javawrappers.java.nio.file.attribute.AclEntryFlag, ) -> javawrappers.java.nio.file.attribute.AclEntry.Builder: ...


class AclFileAttributeView:
	def name(self, ) -> javawrappers.java.lang.String: ...
	def setAcl(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getOwner(self, ) -> javawrappers.java.nio.file.attribute.UserPrincipal: ...
	def getAcl(self, ) -> javawrappers.java.util.List: ...
	def setOwner(self, arg0: javawrappers.java.nio.file.attribute.UserPrincipal, ) -> None: ...


class UserDefinedFileAttributeView:
	def read(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...
	def size(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def list(self, ) -> javawrappers.java.util.List: ...
	def delete(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def write(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.nio.ByteBuffer, ) -> Union[int, JInt]: ...


class DosFileAttributeView:
	def setHidden(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def readAttributes(self, ) -> javawrappers.java.nio.file.attribute.BasicFileAttributes: ...
	@overload
	def readAttributes(self, ) -> javawrappers.java.nio.file.attribute.DosFileAttributes: ...
	def setArchive(self, arg0: Union[int, JBoolean], ) -> None: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def setSystem(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setTimes(self, arg0: javawrappers.java.nio.file.attribute.FileTime, arg1: javawrappers.java.nio.file.attribute.FileTime, arg2: javawrappers.java.nio.file.attribute.FileTime, ) -> None: ...
	def setReadOnly(self, arg0: Union[int, JBoolean], ) -> None: ...


class AclEntryFlag:
	FILE_INHERIT: AclEntryFlag = ...
	DIRECTORY_INHERIT: AclEntryFlag = ...
	NO_PROPAGATE_INHERIT: AclEntryFlag = ...
	INHERIT_ONLY: AclEntryFlag = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.nio.file.attribute.AclEntryFlag: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.nio.file.attribute.AclEntryFlag, 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class PosixFileAttributes:
	def owner(self, ) -> javawrappers.java.nio.file.attribute.UserPrincipal: ...
	def lastAccessTime(self, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
	def lastModifiedTime(self, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
	def size(self, ) -> Union[long, JLong]: ...
	def creationTime(self, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
	def isSymbolicLink(self, ) -> Union[int, JBoolean]: ...
	def permissions(self, ) -> javawrappers.java.util.Set: ...
	def isRegularFile(self, ) -> Union[int, JBoolean]: ...
	def fileKey(self, ) -> javawrappers.java.lang.Object: ...
	def isOther(self, ) -> Union[int, JBoolean]: ...
	def isDirectory(self, ) -> Union[int, JBoolean]: ...
	def group(self, ) -> javawrappers.java.nio.file.attribute.GroupPrincipal: ...


class UserPrincipal:
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def implies(self, arg0: javawrappers.javax.security.auth.Subject, ) -> Union[int, JBoolean]: ...


class FileAttributeView:
	def name(self, ) -> javawrappers.java.lang.String: ...


class PosixFileAttributeView:
	def setGroup(self, arg0: javawrappers.java.nio.file.attribute.GroupPrincipal, ) -> None: ...
	@overload
	def readAttributes(self, ) -> javawrappers.java.nio.file.attribute.BasicFileAttributes: ...
	@overload
	def readAttributes(self, ) -> javawrappers.java.nio.file.attribute.PosixFileAttributes: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def setTimes(self, arg0: javawrappers.java.nio.file.attribute.FileTime, arg1: javawrappers.java.nio.file.attribute.FileTime, arg2: javawrappers.java.nio.file.attribute.FileTime, ) -> None: ...
	def getOwner(self, ) -> javawrappers.java.nio.file.attribute.UserPrincipal: ...
	def setPermissions(self, arg0: javawrappers.java.util.Set, ) -> None: ...
	def setOwner(self, arg0: javawrappers.java.nio.file.attribute.UserPrincipal, ) -> None: ...


