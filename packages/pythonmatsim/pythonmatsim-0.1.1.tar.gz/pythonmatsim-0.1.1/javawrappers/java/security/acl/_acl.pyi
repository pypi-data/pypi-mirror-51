################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.security
import javawrappers.java.util
import javawrappers.java.lang
import javawrappers.java.io
import javawrappers.java.security.acl
import javawrappers.javax.security.auth

from jpype.types import *
from typing import Union

from typing import overload

class AclEntry:
	def checkPermission(self, arg0: javawrappers.java.security.acl.Permission, ) -> Union[int, JBoolean]: ...
	def isNegative(self, ) -> Union[int, JBoolean]: ...
	def setPrincipal(self, arg0: javawrappers.java.security.Principal, ) -> Union[int, JBoolean]: ...
	def getPrincipal(self, ) -> javawrappers.java.security.Principal: ...
	def permissions(self, ) -> javawrappers.java.util.Enumeration: ...
	def addPermission(self, arg0: javawrappers.java.security.acl.Permission, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def removePermission(self, arg0: javawrappers.java.security.acl.Permission, ) -> Union[int, JBoolean]: ...
	def setNegativePermissions(self, ) -> None: ...


class Group:
	def removeMember(self, arg0: javawrappers.java.security.Principal, ) -> Union[int, JBoolean]: ...
	def addMember(self, arg0: javawrappers.java.security.Principal, ) -> Union[int, JBoolean]: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def members(self, ) -> javawrappers.java.util.Enumeration: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isMember(self, arg0: javawrappers.java.security.Principal, ) -> Union[int, JBoolean]: ...
	def implies(self, arg0: javawrappers.javax.security.auth.Subject, ) -> Union[int, JBoolean]: ...


class Owner:
	def addOwner(self, arg0: javawrappers.java.security.Principal, arg1: javawrappers.java.security.Principal, ) -> Union[int, JBoolean]: ...
	def isOwner(self, arg0: javawrappers.java.security.Principal, ) -> Union[int, JBoolean]: ...
	def deleteOwner(self, arg0: javawrappers.java.security.Principal, arg1: javawrappers.java.security.Principal, ) -> Union[int, JBoolean]: ...


class AclNotFoundException:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class LastOwnerException:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class Acl:
	def setName(self, arg0: javawrappers.java.security.Principal, arg1: javawrappers.java.lang.String, ) -> None: ...
	def checkPermission(self, arg0: javawrappers.java.security.Principal, arg1: javawrappers.java.security.acl.Permission, ) -> Union[int, JBoolean]: ...
	def removeEntry(self, arg0: javawrappers.java.security.Principal, arg1: javawrappers.java.security.acl.AclEntry, ) -> Union[int, JBoolean]: ...
	def entries(self, ) -> javawrappers.java.util.Enumeration: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def addOwner(self, arg0: javawrappers.java.security.Principal, arg1: javawrappers.java.security.Principal, ) -> Union[int, JBoolean]: ...
	def addEntry(self, arg0: javawrappers.java.security.Principal, arg1: javawrappers.java.security.acl.AclEntry, ) -> Union[int, JBoolean]: ...
	def isOwner(self, arg0: javawrappers.java.security.Principal, ) -> Union[int, JBoolean]: ...
	def getPermissions(self, arg0: javawrappers.java.security.Principal, ) -> javawrappers.java.util.Enumeration: ...
	def deleteOwner(self, arg0: javawrappers.java.security.Principal, arg1: javawrappers.java.security.Principal, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class Permission:
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class NotOwnerException:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


