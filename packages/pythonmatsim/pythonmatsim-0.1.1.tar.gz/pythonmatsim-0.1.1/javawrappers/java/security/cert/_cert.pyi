################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.security
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.net
import javawrappers.javax.security.auth.x500
import javawrappers.java.io
import javawrappers.java.math
import javawrappers.java.security.cert

from jpype.types import *
from typing import Union

from typing import overload

class URICertStoreParameters:
	def __init__(self, arg0: javawrappers.java.net.URI, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def clone(self, ) -> javawrappers.java.security.cert.URICertStoreParameters: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getURI(self, ) -> javawrappers.java.net.URI: ...


class PolicyNode:
	def getChildren(self, ) -> javawrappers.java.util.Iterator: ...
	def getParent(self, ) -> javawrappers.java.security.cert.PolicyNode: ...
	def getDepth(self, ) -> Union[int, JInt]: ...
	def getValidPolicy(self, ) -> javawrappers.java.lang.String: ...
	def getPolicyQualifiers(self, ) -> javawrappers.java.util.Set: ...
	def getExpectedPolicies(self, ) -> javawrappers.java.util.Set: ...
	def isCritical(self, ) -> Union[int, JBoolean]: ...


class CollectionCertStoreParameters:
	@overload
	def __init__(self, arg0: javawrappers.java.util.Collection, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getCollection(self, ) -> javawrappers.java.util.Collection: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class TrustAnchor:
	@overload
	def __init__(self, arg0: javawrappers.javax.security.auth.x500.X500Principal, arg1: javawrappers.java.security.PublicKey, arg2: JArray(JByte, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.PublicKey, arg2: JArray(JByte, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.security.cert.X509Certificate, arg1: JArray(JByte, 1), ): ...
	def getCAName(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTrustedCert(self, ) -> javawrappers.java.security.cert.X509Certificate: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getNameConstraints(self, ) -> JArray(JByte, 1): ...
	def notify(self, ) -> None: ...
	def getCAPublicKey(self, ) -> javawrappers.java.security.PublicKey: ...
	def getCA(self, ) -> javawrappers.javax.security.auth.x500.X500Principal: ...


class CertPathValidatorResult:
	def clone(self, ) -> javawrappers.java.lang.Object: ...


class CertificateException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class CertStoreParameters:
	def clone(self, ) -> javawrappers.java.lang.Object: ...


class CertPathValidatorException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.security.cert.CertPath, arg3: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.security.cert.CertPath, arg3: Union[int, JInt], arg4: javawrappers.java.security.cert.CertPathValidatorException.Reason, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	class BasicReason:
		UNSPECIFIED: CertPathValidatorException.BasicReason = ...
		EXPIRED: CertPathValidatorException.BasicReason = ...
		NOT_YET_VALID: CertPathValidatorException.BasicReason = ...
		REVOKED: CertPathValidatorException.BasicReason = ...
		UNDETERMINED_REVOCATION_STATUS: CertPathValidatorException.BasicReason = ...
		INVALID_SIGNATURE: CertPathValidatorException.BasicReason = ...
		ALGORITHM_CONSTRAINED: CertPathValidatorException.BasicReason = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.cert.CertPathValidatorException.BasicReason: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.java.security.cert.CertPathValidatorException.BasicReason, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class Reason:


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getIndex(self, ) -> Union[int, JInt]: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.security.cert.CertPathValidatorException.BasicReason, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def getCertPath(self, ) -> javawrappers.java.security.cert.CertPath: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.cert.CertPathValidatorException.BasicReason: ...
	def getReason(self, ) -> javawrappers.java.security.cert.CertPathValidatorException.Reason: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ordinal(self, ) -> Union[int, JInt]: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class CertificateFactorySpi:
	def __init__(self, ): ...
	def engineGetCertPathEncodings(self, ) -> javawrappers.java.util.Iterator: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def engineGenerateCertificates(self, arg0: javawrappers.java.io.InputStream, ) -> javawrappers.java.util.Collection: ...
	def engineGenerateCertificate(self, arg0: javawrappers.java.io.InputStream, ) -> javawrappers.java.security.cert.Certificate: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def engineGenerateCertPath(self, arg0: javawrappers.java.io.InputStream, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.security.cert.CertPath: ...
	@overload
	def engineGenerateCertPath(self, arg0: javawrappers.java.util.List, ) -> javawrappers.java.security.cert.CertPath: ...
	@overload
	def engineGenerateCertPath(self, arg0: javawrappers.java.io.InputStream, ) -> javawrappers.java.security.cert.CertPath: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def engineGenerateCRLs(self, arg0: javawrappers.java.io.InputStream, ) -> javawrappers.java.util.Collection: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def engineGenerateCRL(self, arg0: javawrappers.java.io.InputStream, ) -> javawrappers.java.security.cert.CRL: ...


class X509CertSelector:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getSubject(self, ) -> javawrappers.javax.security.auth.x500.X500Principal: ...
	@overload
	def setSubject(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def setSubject(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setSubject(self, arg0: javawrappers.javax.security.auth.x500.X500Principal, ) -> None: ...
	def getSubjectAsString(self, ) -> javawrappers.java.lang.String: ...
	def setPrivateKeyValid(self, arg0: javawrappers.java.util.Date, ) -> None: ...
	def setMatchAllSubjectAltNames(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setPolicy(self, arg0: javawrappers.java.util.Set, ) -> None: ...
	def getAuthorityKeyIdentifier(self, ) -> JArray(JByte, 1): ...
	def getSubjectPublicKeyAlgID(self, ) -> javawrappers.java.lang.String: ...
	def setSubjectPublicKeyAlgID(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getBasicConstraints(self, ) -> Union[int, JInt]: ...
	def getIssuerAsBytes(self, ) -> JArray(JByte, 1): ...
	def getSerialNumber(self, ) -> javawrappers.java.math.BigInteger: ...
	@overload
	def setSubjectPublicKey(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def setSubjectPublicKey(self, arg0: javawrappers.java.security.PublicKey, ) -> None: ...
	def setExtendedKeyUsage(self, arg0: javawrappers.java.util.Set, ) -> None: ...
	def getExtendedKeyUsage(self, ) -> javawrappers.java.util.Set: ...
	def setBasicConstraints(self, arg0: Union[int, JInt], ) -> None: ...
	def getPolicy(self, ) -> javawrappers.java.util.Set: ...
	def getSubjectPublicKey(self, ) -> javawrappers.java.security.PublicKey: ...
	def getPrivateKeyValid(self, ) -> javawrappers.java.util.Date: ...
	def setSubjectKeyIdentifier(self, arg0: JArray(JByte, 1), ) -> None: ...
	def setSubjectAlternativeNames(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getIssuerAsString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def setIssuer(self, arg0: javawrappers.javax.security.auth.x500.X500Principal, ) -> None: ...
	@overload
	def setIssuer(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def setIssuer(self, arg0: JArray(JByte, 1), ) -> None: ...
	def getMatchAllSubjectAltNames(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def addPathToName(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def addPathToName(self, arg0: Union[int, JInt], arg1: JArray(JByte, 1), ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getSubjectKeyIdentifier(self, ) -> JArray(JByte, 1): ...
	def setCertificateValid(self, arg0: javawrappers.java.util.Date, ) -> None: ...
	def getNameConstraints(self, ) -> JArray(JByte, 1): ...
	def notify(self, ) -> None: ...
	def setCertificate(self, arg0: javawrappers.java.security.cert.X509Certificate, ) -> None: ...
	def getSubjectAlternativeNames(self, ) -> javawrappers.java.util.Collection: ...
	def getPathToNames(self, ) -> javawrappers.java.util.Collection: ...
	def getKeyUsage(self, ) -> JArray(Union[int, JBoolean], 1): ...
	def getCertificate(self, ) -> javawrappers.java.security.cert.X509Certificate: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSubjectAsBytes(self, ) -> JArray(JByte, 1): ...
	def getIssuer(self, ) -> javawrappers.javax.security.auth.x500.X500Principal: ...
	def setSerialNumber(self, arg0: javawrappers.java.math.BigInteger, ) -> None: ...
	def setKeyUsage(self, arg0: JArray(Union[int, JBoolean], 1), ) -> None: ...
	def setNameConstraints(self, arg0: JArray(JByte, 1), ) -> None: ...
	def match(self, arg0: javawrappers.java.security.cert.Certificate, ) -> Union[int, JBoolean]: ...
	def setPathToNames(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getCertificateValid(self, ) -> javawrappers.java.util.Date: ...
	@overload
	def addSubjectAlternativeName(self, arg0: Union[int, JInt], arg1: JArray(JByte, 1), ) -> None: ...
	@overload
	def addSubjectAlternativeName(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setAuthorityKeyIdentifier(self, arg0: JArray(JByte, 1), ) -> None: ...


class Extension:
	def encode(self, arg0: javawrappers.java.io.OutputStream, ) -> None: ...
	def getValue(self, ) -> JArray(JByte, 1): ...
	def getId(self, ) -> javawrappers.java.lang.String: ...
	def isCritical(self, ) -> Union[int, JBoolean]: ...


class CRL:
	def isRevoked(self, arg0: javawrappers.java.security.cert.Certificate, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getType(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class CertPathParameters:
	def clone(self, ) -> javawrappers.java.lang.Object: ...


class X509Extension:
	def getCriticalExtensionOIDs(self, ) -> javawrappers.java.util.Set: ...
	def hasUnsupportedCriticalExtension(self, ) -> Union[int, JBoolean]: ...
	def getNonCriticalExtensionOIDs(self, ) -> javawrappers.java.util.Set: ...
	def getExtensionValue(self, arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...


class CertStoreSpi:
	def __init__(self, arg0: javawrappers.java.security.cert.CertStoreParameters, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def engineGetCRLs(self, arg0: javawrappers.java.security.cert.CRLSelector, ) -> javawrappers.java.util.Collection: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def engineGetCertificates(self, arg0: javawrappers.java.security.cert.CertSelector, ) -> javawrappers.java.util.Collection: ...


class PKIXCertPathChecker:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def init(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isForwardCheckingSupported(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def check(self, arg0: javawrappers.java.security.cert.Certificate, arg1: javawrappers.java.util.Collection, ) -> None: ...
	@overload
	def check(self, arg0: javawrappers.java.security.cert.Certificate, ) -> None: ...
	def notify(self, ) -> None: ...
	def getSupportedExtensions(self, ) -> javawrappers.java.util.Set: ...


class CertPathValidatorSpi:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def engineGetRevocationChecker(self, ) -> javawrappers.java.security.cert.CertPathChecker: ...
	def notify(self, ) -> None: ...
	def engineValidate(self, arg0: javawrappers.java.security.cert.CertPath, arg1: javawrappers.java.security.cert.CertPathParameters, ) -> javawrappers.java.security.cert.CertPathValidatorResult: ...


class PKIXCertPathValidatorResult:
	def __init__(self, arg0: javawrappers.java.security.cert.TrustAnchor, arg1: javawrappers.java.security.cert.PolicyNode, arg2: javawrappers.java.security.PublicKey, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTrustAnchor(self, ) -> javawrappers.java.security.cert.TrustAnchor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getPolicyTree(self, ) -> javawrappers.java.security.cert.PolicyNode: ...
	def getPublicKey(self, ) -> javawrappers.java.security.PublicKey: ...
	def notify(self, ) -> None: ...


class CertificateRevokedException:
	def __init__(self, arg0: javawrappers.java.util.Date, arg1: javawrappers.java.security.cert.CRLReason, arg2: javawrappers.javax.security.auth.x500.X500Principal, arg3: javawrappers.java.util.Map, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getInvalidityDate(self, ) -> javawrappers.java.util.Date: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def getExtensions(self, ) -> javawrappers.java.util.Map: ...
	def notify(self, ) -> None: ...
	def getRevocationReason(self, ) -> javawrappers.java.security.cert.CRLReason: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def getAuthorityName(self, ) -> javawrappers.javax.security.auth.x500.X500Principal: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getRevocationDate(self, ) -> javawrappers.java.util.Date: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class X509Certificate:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getSubjectX500Principal(self, ) -> javawrappers.javax.security.auth.x500.X500Principal: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getIssuerUniqueID(self, ) -> JArray(Union[int, JBoolean], 1): ...
	def getCriticalExtensionOIDs(self, ) -> javawrappers.java.util.Set: ...
	def getIssuerDN(self, ) -> javawrappers.java.security.Principal: ...
	def notifyAll(self, ) -> None: ...
	def getNonCriticalExtensionOIDs(self, ) -> javawrappers.java.util.Set: ...
	def getTBSCertificate(self, ) -> JArray(JByte, 1): ...
	def getSigAlgParams(self, ) -> JArray(JByte, 1): ...
	def notify(self, ) -> None: ...
	def getSubjectAlternativeNames(self, ) -> javawrappers.java.util.Collection: ...
	def getIssuerX500Principal(self, ) -> javawrappers.javax.security.auth.x500.X500Principal: ...
	def getKeyUsage(self, ) -> JArray(Union[int, JBoolean], 1): ...
	def getBasicConstraints(self, ) -> Union[int, JInt]: ...
	def getSigAlgName(self, ) -> javawrappers.java.lang.String: ...
	def getNotBefore(self, ) -> javawrappers.java.util.Date: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getSubjectDN(self, ) -> javawrappers.java.security.Principal: ...
	def getIssuerAlternativeNames(self, ) -> javawrappers.java.util.Collection: ...
	@overload
	def verify(self, arg0: javawrappers.java.security.PublicKey, arg1: javawrappers.java.security.Provider, ) -> None: ...
	@overload
	def verify(self, arg0: javawrappers.java.security.PublicKey, ) -> None: ...
	@overload
	def verify(self, arg0: javawrappers.java.security.PublicKey, arg1: javawrappers.java.lang.String, ) -> None: ...
	def getNotAfter(self, ) -> javawrappers.java.util.Date: ...
	def getVersion(self, ) -> Union[int, JInt]: ...
	def getSerialNumber(self, ) -> javawrappers.java.math.BigInteger: ...
	def getEncoded(self, ) -> JArray(JByte, 1): ...
	def hasUnsupportedCriticalExtension(self, ) -> Union[int, JBoolean]: ...
	def getSignature(self, ) -> JArray(JByte, 1): ...
	def getExtendedKeyUsage(self, ) -> javawrappers.java.util.List: ...
	def getPublicKey(self, ) -> javawrappers.java.security.PublicKey: ...
	@overload
	def checkValidity(self, arg0: javawrappers.java.util.Date, ) -> None: ...
	@overload
	def checkValidity(self, ) -> None: ...
	def getType(self, ) -> javawrappers.java.lang.String: ...
	def getSubjectUniqueID(self, ) -> JArray(Union[int, JBoolean], 1): ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSigAlgOID(self, ) -> javawrappers.java.lang.String: ...
	def getExtensionValue(self, arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...


class CertPath:
	class CertPathRep:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getType(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getEncoded(self, arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...
	@overload
	def getEncoded(self, ) -> JArray(JByte, 1): ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getCertificates(self, ) -> javawrappers.java.util.List: ...
	def getEncodings(self, ) -> javawrappers.java.util.Iterator: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class CertPathBuilder:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getRevocationChecker(self, ) -> javawrappers.java.security.cert.CertPathChecker: ...
	def build(self, arg0: javawrappers.java.security.cert.CertPathParameters, ) -> javawrappers.java.security.cert.CertPathBuilderResult: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	def getProvider(self, ) -> javawrappers.java.security.Provider: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.cert.CertPathBuilder: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Provider, ) -> javawrappers.java.security.cert.CertPathBuilder: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.security.cert.CertPathBuilder: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def getDefaultType() -> javawrappers.java.lang.String: ...


class CRLException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class PolicyQualifierInfo:
	def __init__(self, arg0: JArray(JByte, 1), ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getPolicyQualifierId(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getEncoded(self, ) -> JArray(JByte, 1): ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPolicyQualifier(self, ) -> JArray(JByte, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class CertSelector:
	def match(self, arg0: javawrappers.java.security.cert.Certificate, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...


class CertPathBuilderException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class CertPathValidator:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getRevocationChecker(self, ) -> javawrappers.java.security.cert.CertPathChecker: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getAlgorithm(self, ) -> javawrappers.java.lang.String: ...
	def getProvider(self, ) -> javawrappers.java.security.Provider: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.security.cert.CertPathValidator: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.cert.CertPathValidator: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Provider, ) -> javawrappers.java.security.cert.CertPathValidator: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def getDefaultType() -> javawrappers.java.lang.String: ...
	def validate(self, arg0: javawrappers.java.security.cert.CertPath, arg1: javawrappers.java.security.cert.CertPathParameters, ) -> javawrappers.java.security.cert.CertPathValidatorResult: ...


class CertStore:
	def getCertStoreParameters(self, ) -> javawrappers.java.security.cert.CertStoreParameters: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getCertificates(self, arg0: javawrappers.java.security.cert.CertSelector, ) -> javawrappers.java.util.Collection: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def getDefaultType() -> javawrappers.java.lang.String: ...
	def getCRLs(self, arg0: javawrappers.java.security.cert.CRLSelector, ) -> javawrappers.java.util.Collection: ...
	def getType(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getProvider(self, ) -> javawrappers.java.security.Provider: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.cert.CertStoreParameters, arg2: javawrappers.java.lang.String, ) -> javawrappers.java.security.cert.CertStore: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.cert.CertStoreParameters, ) -> javawrappers.java.security.cert.CertStore: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.cert.CertStoreParameters, arg2: javawrappers.java.security.Provider, ) -> javawrappers.java.security.cert.CertStore: ...


class PKIXParameters:
	@overload
	def __init__(self, arg0: javawrappers.java.util.Set, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.security.KeyStore, ): ...
	def setPolicyQualifiersRejected(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getPolicyQualifiersRejected(self, ) -> Union[int, JBoolean]: ...
	def setExplicitPolicyRequired(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setInitialPolicies(self, arg0: javawrappers.java.util.Set, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isAnyPolicyInhibited(self, ) -> Union[int, JBoolean]: ...
	def addCertPathChecker(self, arg0: javawrappers.java.security.cert.PKIXCertPathChecker, ) -> None: ...
	def getTargetCertConstraints(self, ) -> javawrappers.java.security.cert.CertSelector: ...
	def notify(self, ) -> None: ...
	def setCertPathCheckers(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getSigProvider(self, ) -> javawrappers.java.lang.String: ...
	def getCertStores(self, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getDate(self, ) -> javawrappers.java.util.Date: ...
	def setTrustAnchors(self, arg0: javawrappers.java.util.Set, ) -> None: ...
	def getInitialPolicies(self, ) -> javawrappers.java.util.Set: ...
	def setCertStores(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def setTargetCertConstraints(self, arg0: javawrappers.java.security.cert.CertSelector, ) -> None: ...
	def isExplicitPolicyRequired(self, ) -> Union[int, JBoolean]: ...
	def isRevocationEnabled(self, ) -> Union[int, JBoolean]: ...
	def addCertStore(self, arg0: javawrappers.java.security.cert.CertStore, ) -> None: ...
	def getTrustAnchors(self, ) -> javawrappers.java.util.Set: ...
	def setPolicyMappingInhibited(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isPolicyMappingInhibited(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getCertPathCheckers(self, ) -> javawrappers.java.util.List: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setDate(self, arg0: javawrappers.java.util.Date, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setRevocationEnabled(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setSigProvider(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setAnyPolicyInhibited(self, arg0: Union[int, JBoolean], ) -> None: ...


class CertificateFactory:
	@overload
	def generateCertPath(self, arg0: javawrappers.java.io.InputStream, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.security.cert.CertPath: ...
	@overload
	def generateCertPath(self, arg0: javawrappers.java.util.List, ) -> javawrappers.java.security.cert.CertPath: ...
	@overload
	def generateCertPath(self, arg0: javawrappers.java.io.InputStream, ) -> javawrappers.java.security.cert.CertPath: ...
	def generateCertificate(self, arg0: javawrappers.java.io.InputStream, ) -> javawrappers.java.security.cert.Certificate: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def generateCRLs(self, arg0: javawrappers.java.io.InputStream, ) -> javawrappers.java.util.Collection: ...
	def notify(self, ) -> None: ...
	def generateCRL(self, arg0: javawrappers.java.io.InputStream, ) -> javawrappers.java.security.cert.CRL: ...
	def getType(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getCertPathEncodings(self, ) -> javawrappers.java.util.Iterator: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def generateCertificates(self, arg0: javawrappers.java.io.InputStream, ) -> javawrappers.java.util.Collection: ...
	def getProvider(self, ) -> javawrappers.java.security.Provider: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.security.cert.CertificateFactory: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.security.Provider, ) -> javawrappers.java.security.cert.CertificateFactory: ...
	@overload
	@staticmethod
	def getInstance(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.cert.CertificateFactory: ...


class CertificateEncodingException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class X509CRLEntry:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getSerialNumber(self, ) -> javawrappers.java.math.BigInteger: ...
	def getCriticalExtensionOIDs(self, ) -> javawrappers.java.util.Set: ...
	def getEncoded(self, ) -> JArray(JByte, 1): ...
	def hasUnsupportedCriticalExtension(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def getNonCriticalExtensionOIDs(self, ) -> javawrappers.java.util.Set: ...
	def notify(self, ) -> None: ...
	def getRevocationReason(self, ) -> javawrappers.java.security.cert.CRLReason: ...
	def hasExtensions(self, ) -> Union[int, JBoolean]: ...
	def getCertificateIssuer(self, ) -> javawrappers.javax.security.auth.x500.X500Principal: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getRevocationDate(self, ) -> javawrappers.java.util.Date: ...
	def getExtensionValue(self, arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...


class X509CRLSelector:
	def __init__(self, ): ...
	def getIssuers(self, ) -> javawrappers.java.util.Collection: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setDateAndTime(self, arg0: javawrappers.java.util.Date, ) -> None: ...
	def getIssuerNames(self, ) -> javawrappers.java.util.Collection: ...
	def notifyAll(self, ) -> None: ...
	def match(self, arg0: javawrappers.java.security.cert.CRL, ) -> Union[int, JBoolean]: ...
	def setIssuerNames(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def getCertificateChecking(self, ) -> javawrappers.java.security.cert.X509Certificate: ...
	def getMaxCRL(self, ) -> javawrappers.java.math.BigInteger: ...
	def getDateAndTime(self, ) -> javawrappers.java.util.Date: ...
	def setMinCRLNumber(self, arg0: javawrappers.java.math.BigInteger, ) -> None: ...
	def setIssuers(self, arg0: javawrappers.java.util.Collection, ) -> None: ...
	def notify(self, ) -> None: ...
	def setMaxCRLNumber(self, arg0: javawrappers.java.math.BigInteger, ) -> None: ...
	@overload
	def addIssuerName(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def addIssuerName(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getMinCRL(self, ) -> javawrappers.java.math.BigInteger: ...
	def addIssuer(self, arg0: javawrappers.javax.security.auth.x500.X500Principal, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setCertificateChecking(self, arg0: javawrappers.java.security.cert.X509Certificate, ) -> None: ...


class CertificateExpiredException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class CRLSelector:
	def match(self, arg0: javawrappers.java.security.cert.CRL, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...


class X509CRL:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getCriticalExtensionOIDs(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def getRevokedCertificate(self, arg0: javawrappers.java.math.BigInteger, ) -> javawrappers.java.security.cert.X509CRLEntry: ...
	@overload
	def getRevokedCertificate(self, arg0: javawrappers.java.security.cert.X509Certificate, ) -> javawrappers.java.security.cert.X509CRLEntry: ...
	def getNextUpdate(self, ) -> javawrappers.java.util.Date: ...
	def getIssuerDN(self, ) -> javawrappers.java.security.Principal: ...
	def notifyAll(self, ) -> None: ...
	def getNonCriticalExtensionOIDs(self, ) -> javawrappers.java.util.Set: ...
	def getSigAlgParams(self, ) -> JArray(JByte, 1): ...
	def notify(self, ) -> None: ...
	def isRevoked(self, arg0: javawrappers.java.security.cert.Certificate, ) -> Union[int, JBoolean]: ...
	def getIssuerX500Principal(self, ) -> javawrappers.javax.security.auth.x500.X500Principal: ...
	def getSigAlgName(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def verify(self, arg0: javawrappers.java.security.PublicKey, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def verify(self, arg0: javawrappers.java.security.PublicKey, ) -> None: ...
	@overload
	def verify(self, arg0: javawrappers.java.security.PublicKey, arg1: javawrappers.java.security.Provider, ) -> None: ...
	def getVersion(self, ) -> Union[int, JInt]: ...
	def getRevokedCertificates(self, ) -> javawrappers.java.util.Set: ...
	def getEncoded(self, ) -> JArray(JByte, 1): ...
	def hasUnsupportedCriticalExtension(self, ) -> Union[int, JBoolean]: ...
	def getSignature(self, ) -> JArray(JByte, 1): ...
	def getType(self, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getTBSCertList(self, ) -> JArray(JByte, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getSigAlgOID(self, ) -> javawrappers.java.lang.String: ...
	def getExtensionValue(self, arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...
	def getThisUpdate(self, ) -> javawrappers.java.util.Date: ...


class PKIXReason:
	NAME_CHAINING: PKIXReason = ...
	INVALID_KEY_USAGE: PKIXReason = ...
	INVALID_POLICY: PKIXReason = ...
	NO_TRUST_ANCHOR: PKIXReason = ...
	UNRECOGNIZED_CRIT_EXT: PKIXReason = ...
	NOT_CA_CERT: PKIXReason = ...
	PATH_TOO_LONG: PKIXReason = ...
	INVALID_NAME: PKIXReason = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.cert.PKIXReason: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.security.cert.PKIXReason, 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class LDAPCertStoreParameters:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getPort(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getServerName(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class CertificateNotYetValidException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class PKIXCertPathBuilderResult:
	def __init__(self, arg0: javawrappers.java.security.cert.CertPath, arg1: javawrappers.java.security.cert.TrustAnchor, arg2: javawrappers.java.security.cert.PolicyNode, arg3: javawrappers.java.security.PublicKey, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getTrustAnchor(self, ) -> javawrappers.java.security.cert.TrustAnchor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def getPolicyTree(self, ) -> javawrappers.java.security.cert.PolicyNode: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getPublicKey(self, ) -> javawrappers.java.security.PublicKey: ...
	def getCertPath(self, ) -> javawrappers.java.security.cert.CertPath: ...
	def notify(self, ) -> None: ...


class CertificateParsingException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class CertPathBuilderResult:
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def getCertPath(self, ) -> javawrappers.java.security.cert.CertPath: ...


class CRLReason:
	UNSPECIFIED: CRLReason = ...
	KEY_COMPROMISE: CRLReason = ...
	CA_COMPROMISE: CRLReason = ...
	AFFILIATION_CHANGED: CRLReason = ...
	SUPERSEDED: CRLReason = ...
	CESSATION_OF_OPERATION: CRLReason = ...
	CERTIFICATE_HOLD: CRLReason = ...
	UNUSED: CRLReason = ...
	REMOVE_FROM_CRL: CRLReason = ...
	PRIVILEGE_WITHDRAWN: CRLReason = ...
	AA_COMPROMISE: CRLReason = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.cert.CRLReason: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.security.cert.CRLReason, 1): ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class PKIXBuilderParameters:
	@overload
	def __init__(self, arg0: javawrappers.java.util.Set, arg1: javawrappers.java.security.cert.CertSelector, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.security.KeyStore, arg1: javawrappers.java.security.cert.CertSelector, ): ...
	def setPolicyQualifiersRejected(self, arg0: Union[int, JBoolean], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getPolicyQualifiersRejected(self, ) -> Union[int, JBoolean]: ...
	def setExplicitPolicyRequired(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setInitialPolicies(self, arg0: javawrappers.java.util.Set, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def setMaxPathLength(self, arg0: Union[int, JInt], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def isAnyPolicyInhibited(self, ) -> Union[int, JBoolean]: ...
	def addCertPathChecker(self, arg0: javawrappers.java.security.cert.PKIXCertPathChecker, ) -> None: ...
	def getTargetCertConstraints(self, ) -> javawrappers.java.security.cert.CertSelector: ...
	def notify(self, ) -> None: ...
	def setCertPathCheckers(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getSigProvider(self, ) -> javawrappers.java.lang.String: ...
	def getCertStores(self, ) -> javawrappers.java.util.List: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getDate(self, ) -> javawrappers.java.util.Date: ...
	def setTrustAnchors(self, arg0: javawrappers.java.util.Set, ) -> None: ...
	def getInitialPolicies(self, ) -> javawrappers.java.util.Set: ...
	def setCertStores(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def setTargetCertConstraints(self, arg0: javawrappers.java.security.cert.CertSelector, ) -> None: ...
	def isExplicitPolicyRequired(self, ) -> Union[int, JBoolean]: ...
	def isRevocationEnabled(self, ) -> Union[int, JBoolean]: ...
	def getMaxPathLength(self, ) -> Union[int, JInt]: ...
	def addCertStore(self, arg0: javawrappers.java.security.cert.CertStore, ) -> None: ...
	def getTrustAnchors(self, ) -> javawrappers.java.util.Set: ...
	def setPolicyMappingInhibited(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isPolicyMappingInhibited(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getCertPathCheckers(self, ) -> javawrappers.java.util.List: ...
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def setDate(self, arg0: javawrappers.java.util.Date, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setRevocationEnabled(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setSigProvider(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def setAnyPolicyInhibited(self, arg0: Union[int, JBoolean], ) -> None: ...


class CertStoreException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class CertPathBuilderSpi:
	def __init__(self, ): ...
	def engineBuild(self, arg0: javawrappers.java.security.cert.CertPathParameters, ) -> javawrappers.java.security.cert.CertPathBuilderResult: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def engineGetRevocationChecker(self, ) -> javawrappers.java.security.cert.CertPathChecker: ...
	def notify(self, ) -> None: ...


class CertPathChecker:
	def init(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isForwardCheckingSupported(self, ) -> Union[int, JBoolean]: ...
	def check(self, arg0: javawrappers.java.security.cert.Certificate, ) -> None: ...


class Certificate:
	class CertificateRep:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getType(self, ) -> javawrappers.java.lang.String: ...
	def getEncoded(self, ) -> JArray(JByte, 1): ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def verify(self, arg0: javawrappers.java.security.PublicKey, ) -> None: ...
	@overload
	def verify(self, arg0: javawrappers.java.security.PublicKey, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def verify(self, arg0: javawrappers.java.security.PublicKey, arg1: javawrappers.java.security.Provider, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getPublicKey(self, ) -> javawrappers.java.security.PublicKey: ...
	def notify(self, ) -> None: ...


class PKIXRevocationChecker:
	class Option:
		ONLY_END_ENTITY: PKIXRevocationChecker.Option = ...
		PREFER_CRLS: PKIXRevocationChecker.Option = ...
		NO_FALLBACK: PKIXRevocationChecker.Option = ...
		SOFT_FAIL: PKIXRevocationChecker.Option = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.cert.PKIXRevocationChecker.Option: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.java.security.cert.PKIXRevocationChecker.Option, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getOcspResponder(self, ) -> javawrappers.java.net.URI: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.security.cert.PKIXRevocationChecker.Option, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def setOcspExtensions(self, arg0: javawrappers.java.util.List, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setOptions(self, arg0: javawrappers.java.util.Set, ) -> None: ...
	def getOcspExtensions(self, ) -> javawrappers.java.util.List: ...
	def getSupportedExtensions(self, ) -> javawrappers.java.util.Set: ...
	def init(self, arg0: Union[int, JBoolean], ) -> None: ...
	def isForwardCheckingSupported(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.security.cert.PKIXRevocationChecker.Option: ...
	@overload
	def check(self, arg0: javawrappers.java.security.cert.Certificate, arg1: javawrappers.java.util.Collection, ) -> None: ...
	@overload
	def check(self, arg0: javawrappers.java.security.cert.Certificate, ) -> None: ...
	def setOcspResponses(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def setOcspResponderCert(self, arg0: javawrappers.java.security.cert.X509Certificate, ) -> None: ...
	def getOcspResponses(self, ) -> javawrappers.java.util.Map: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSoftFailExceptions(self, ) -> javawrappers.java.util.List: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def clone(self, ) -> javawrappers.java.security.cert.PKIXRevocationChecker: ...
	@overload
	def clone(self, ) -> javawrappers.java.lang.Object: ...
	def getOcspResponderCert(self, ) -> javawrappers.java.security.cert.X509Certificate: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setOcspResponder(self, arg0: javawrappers.java.net.URI, ) -> None: ...
	def getOptions(self, ) -> javawrappers.java.util.Set: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


