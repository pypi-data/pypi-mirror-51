################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.security
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.java.util.stream
import javawrappers.java.nio
import javawrappers.java.nio.channels
import javawrappers.java.nio.file
import javawrappers.java.nio.charset

from jpype.types import *
from typing import Union

from typing import overload

class ByteArrayOutputStream:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def writeTo(self, arg0: javawrappers.java.io.OutputStream, ) -> None: ...
	def writeBytes(self, arg0: JArray(JByte, 1), ) -> None: ...
	def flush(self, ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toByteArray(self, ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	@overload
	def toString(self, arg0: javawrappers.java.nio.charset.Charset, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...


class SyncFailedException:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class LineNumberReader:
	@overload
	def __init__(self, arg0: javawrappers.java.io.Reader, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.Reader, arg1: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: javawrappers.java.nio.CharBuffer, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.Writer, ) -> Union[long, JLong]: ...
	def readLine(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getLineNumber(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullReader() -> javawrappers.java.io.Reader: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def ready(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def setLineNumber(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def lines(self, ) -> javawrappers.java.util.stream.Stream: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class BufferedOutputStream:
	@overload
	def __init__(self, arg0: javawrappers.java.io.OutputStream, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.OutputStream, arg1: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	def notify(self, ) -> None: ...


class FileInputStream:
	@overload
	def __init__(self, arg0: javawrappers.java.io.FileDescriptor, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	class AltFinalizer:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def getFD(self, ) -> javawrappers.java.io.FileDescriptor: ...
	def getChannel(self, ) -> javawrappers.java.nio.channels.FileChannel: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class OutputStream:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...


class InputStream:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class NotSerializableException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class StringReader:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: javawrappers.java.nio.CharBuffer, ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.Writer, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def nullReader() -> javawrappers.java.io.Reader: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def ready(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class PrintWriter:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.nio.charset.Charset, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, arg1: javawrappers.java.nio.charset.Charset, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.Writer, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.Writer, arg1: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.OutputStream, arg1: Union[int, JBoolean], arg2: javawrappers.java.nio.charset.Charset, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.OutputStream, arg1: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.OutputStream, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def format(self, arg0: javawrappers.java.util.Locale, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.io.PrintWriter: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.io.PrintWriter: ...
	def checkError(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@overload
	def printf(self, arg0: javawrappers.java.util.Locale, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.io.PrintWriter: ...
	@overload
	def printf(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.io.PrintWriter: ...
	@overload
	def print_(self, arg0: Union[float, JFloat], ) -> None: ...
	@overload
	def print_(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def print_(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def print_(self, arg0: Union[string, JString], ) -> None: ...
	@overload
	def print_(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def print_(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def print_(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def println(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def println(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def println(self, arg0: Union[float, JFloat], ) -> None: ...
	@overload
	def println(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def println(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def println(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def println(self, arg0: Union[string, JString], ) -> None: ...
	@overload
	def println(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def println(self, ) -> None: ...
	@overload
	def println(self, arg0: Union[long, JLong], ) -> None: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def nullWriter() -> javawrappers.java.io.Writer: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.io.PrintWriter: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.io.PrintWriter: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.io.PrintWriter: ...


class CharArrayWriter:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def toCharArray(self, ) -> JArray(Union[string, JString], 1): ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def writeTo(self, arg0: javawrappers.java.io.Writer, ) -> None: ...
	def flush(self, ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def nullWriter() -> javawrappers.java.io.Writer: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.io.CharArrayWriter: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.io.CharArrayWriter: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.io.CharArrayWriter: ...


class FileDescriptor:
	def __init__(self, ): ...
	def valid(self, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def sync(self, ) -> None: ...
	def notify(self, ) -> None: ...


class ObjectStreamConstants:


class FilterOutputStream:
	def __init__(self, arg0: javawrappers.java.io.OutputStream, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...


class File:
	@overload
	def __init__(self, arg0: javawrappers.java.net.URI, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	class TempDirectory:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class PathStatus:
		INVALID: File.PathStatus = ...
		CHECKED: File.PathStatus = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.File.PathStatus: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.java.io.File.PathStatus, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getUsableSpace(self, ) -> Union[long, JLong]: ...
	@staticmethod
	def listRoots() -> JArray(javawrappers.java.io.File, 1): ...
	def renameTo(self, arg0: javawrappers.java.io.File, ) -> Union[int, JBoolean]: ...
	def getCanonicalFile(self, ) -> javawrappers.java.io.File: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.io.File, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	@overload
	def setReadable(self, arg0: Union[int, JBoolean], arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def setReadable(self, arg0: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def getTotalSpace(self, ) -> Union[long, JLong]: ...
	def getPath(self, ) -> javawrappers.java.lang.String: ...
	def getParentFile(self, ) -> javawrappers.java.io.File: ...
	def mkdir(self, ) -> Union[int, JBoolean]: ...
	def canExecute(self, ) -> Union[int, JBoolean]: ...
	@overload
	def setWritable(self, arg0: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def setWritable(self, arg0: Union[int, JBoolean], arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	def getFreeSpace(self, ) -> Union[long, JLong]: ...
	@overload
	@staticmethod
	def createTempFile(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.io.File: ...
	@overload
	@staticmethod
	def createTempFile(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.io.File, ) -> javawrappers.java.io.File: ...
	@overload
	def list(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	def list(self, arg0: javawrappers.java.io.FilenameFilter, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def mkdirs(self, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def lastModified(self, ) -> Union[long, JLong]: ...
	def setReadOnly(self, ) -> Union[int, JBoolean]: ...
	def isDirectory(self, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def canRead(self, ) -> Union[int, JBoolean]: ...
	@overload
	def setExecutable(self, arg0: Union[int, JBoolean], arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def setExecutable(self, arg0: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.io.File.PathStatus, 1): ...
	def notifyAll(self, ) -> None: ...
	def delete(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getAbsoluteFile(self, ) -> javawrappers.java.io.File: ...
	@overload
	def listFiles(self, arg0: javawrappers.java.io.FilenameFilter, ) -> JArray(javawrappers.java.io.File, 1): ...
	@overload
	def listFiles(self, arg0: javawrappers.java.io.FileFilter, ) -> JArray(javawrappers.java.io.File, 1): ...
	@overload
	def listFiles(self, ) -> JArray(javawrappers.java.io.File, 1): ...
	def deleteOnExit(self, ) -> None: ...
	def toURL(self, ) -> javawrappers.java.net.URL: ...
	def getParent(self, ) -> javawrappers.java.lang.String: ...
	def getCanonicalPath(self, ) -> javawrappers.java.lang.String: ...
	def isFile(self, ) -> Union[int, JBoolean]: ...
	def getAbsolutePath(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.File.PathStatus: ...
	def toURI(self, ) -> javawrappers.java.net.URI: ...
	def length(self, ) -> Union[long, JLong]: ...
	def canWrite(self, ) -> Union[int, JBoolean]: ...
	def isHidden(self, ) -> Union[int, JBoolean]: ...
	def toPath(self, ) -> javawrappers.java.nio.file.Path: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isAbsolute(self, ) -> Union[int, JBoolean]: ...
	def exists(self, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def createNewFile(self, ) -> Union[int, JBoolean]: ...
	def setLastModified(self, arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class ObjectStreamClass:
	class WeakClassKey:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def enqueue(self, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def get(self, ) -> javawrappers.java.lang.Object: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def isEnqueued(self, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...
		def notify(self, ) -> None: ...


	class FieldReflectorKey:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def enqueue(self, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def get(self, ) -> javawrappers.java.lang.Object: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def isEnqueued(self, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...
		def notify(self, ) -> None: ...


	class FieldReflector:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class MemberSignature:
		@overload
		def __init__(self, arg0: javawrappers.java.lang.reflect.Field, ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.lang.reflect.Constructor, ): ...
		@overload
		def __init__(self, arg0: javawrappers.java.lang.reflect.Method, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class ClassDataSlot:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class EntryFuture:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class ExceptionInfo:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Caches:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def lookup(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.io.ObjectStreamClass: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def lookupAny(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.io.ObjectStreamClass: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def clear(self, ) -> None: ...
	def getField(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.ObjectStreamField: ...
	def isEnqueued(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def enqueue(self, ) -> Union[int, JBoolean]: ...
	def getFields(self, ) -> JArray(javawrappers.java.io.ObjectStreamField, 1): ...
	def getSerialVersionUID(self, ) -> Union[long, JLong]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def forClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def reachabilityFence(arg0: javawrappers.java.lang.Object, ) -> None: ...


class NotActiveException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class ObjectInputValidation:
	def validateObject(self, ) -> None: ...


class ByteArrayInputStream:
	@overload
	def __init__(self, arg0: JArray(JByte, 1), ): ...
	@overload
	def __init__(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class PipedOutputStream:
	@overload
	def __init__(self, arg0: javawrappers.java.io.PipedInputStream, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	def notify(self, ) -> None: ...
	def connect(self, arg0: javawrappers.java.io.PipedInputStream, ) -> None: ...


class BufferedWriter:
	@overload
	def __init__(self, arg0: javawrappers.java.io.Writer, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.Writer, arg1: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def newLine(self, ) -> None: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def nullWriter() -> javawrappers.java.io.Writer: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.io.Writer: ...


class FilenameFilter:
	def accept(self, arg0: javawrappers.java.io.File, arg1: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...


class DataOutput:
	def writeInt(self, arg0: Union[int, JInt], ) -> None: ...
	def writeChar(self, arg0: Union[int, JInt], ) -> None: ...
	def writeLong(self, arg0: Union[long, JLong], ) -> None: ...
	def writeByte(self, arg0: Union[int, JInt], ) -> None: ...
	def writeBytes(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def writeUTF(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def writeShort(self, arg0: Union[int, JInt], ) -> None: ...
	def writeChars(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def writeFloat(self, arg0: Union[float, JFloat], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def writeBoolean(self, arg0: Union[int, JBoolean], ) -> None: ...
	def writeDouble(self, arg0: Union[float, JDouble], ) -> None: ...


class CharArrayReader:
	@overload
	def __init__(self, arg0: JArray(Union[string, JString], 1), ): ...
	@overload
	def __init__(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: javawrappers.java.nio.CharBuffer, ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.Writer, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def nullReader() -> javawrappers.java.io.Reader: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def ready(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class FilterInputStream:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class LineNumberInputStream:
	def __init__(self, arg0: javawrappers.java.io.InputStream, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def getLineNumber(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	def setLineNumber(self, arg0: Union[int, JInt], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class DataInput:
	def readLine(self, ) -> javawrappers.java.lang.String: ...
	def readChar(self, ) -> Union[string, JString]: ...
	def skipBytes(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def readUTF(self, ) -> javawrappers.java.lang.String: ...
	def readLong(self, ) -> Union[long, JLong]: ...
	def readShort(self, ) -> Union[int, JShort]: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), ) -> None: ...
	def readDouble(self, ) -> Union[float, JDouble]: ...
	def readFloat(self, ) -> Union[float, JFloat]: ...
	def readBoolean(self, ) -> Union[int, JBoolean]: ...
	def readInt(self, ) -> Union[int, JInt]: ...
	def readByte(self, ) -> JByte: ...
	def readUnsignedByte(self, ) -> Union[int, JInt]: ...
	def readUnsignedShort(self, ) -> Union[int, JInt]: ...


class InvalidClassException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class Flushable:
	def flush(self, ) -> None: ...


class Console:
	class LineReader:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def read(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JInt]: ...
		@overload
		def read(self, arg0: javawrappers.java.nio.CharBuffer, ) -> Union[int, JInt]: ...
		@overload
		def read(self, ) -> Union[int, JInt]: ...
		@overload
		def read(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		def markSupported(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
		def transferTo(self, arg0: javawrappers.java.io.Writer, ) -> Union[long, JLong]: ...
		def notify(self, ) -> None: ...
		@staticmethod
		def nullReader() -> javawrappers.java.io.Reader: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def ready(self, ) -> Union[int, JBoolean]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def reset(self, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def close(self, ) -> None: ...
		def mark(self, arg0: Union[int, JInt], ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: javawrappers.java.nio.CharBuffer, ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def reader(self, ) -> javawrappers.java.io.Reader: ...
	def notifyAll(self, ) -> None: ...
	def format(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.io.Console: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.Writer, ) -> Union[long, JLong]: ...
	@overload
	def readLine(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def readLine(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def printf(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.io.Console: ...
	def flush(self, ) -> None: ...
	@staticmethod
	def nullReader() -> javawrappers.java.io.Reader: ...
	def ready(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def readPassword(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> JArray(Union[string, JString], 1): ...
	@overload
	def readPassword(self, ) -> JArray(Union[string, JString], 1): ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def writer(self, ) -> javawrappers.java.io.PrintWriter: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class ObjectStreamField:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, arg2: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Class, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def getOffset(self, ) -> Union[int, JInt]: ...
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getTypeString(self, ) -> javawrappers.java.lang.String: ...
	def getType(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def isUnshared(self, ) -> Union[int, JBoolean]: ...
	def isPrimitive(self, ) -> Union[int, JBoolean]: ...
	def getTypeCode(self, ) -> Union[string, JString]: ...


class ObjectOutput:
	def writeInt(self, arg0: Union[int, JInt], ) -> None: ...
	def writeByte(self, arg0: Union[int, JInt], ) -> None: ...
	def writeObject(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def writeFloat(self, arg0: Union[float, JFloat], ) -> None: ...
	def writeChar(self, arg0: Union[int, JInt], ) -> None: ...
	def writeLong(self, arg0: Union[long, JLong], ) -> None: ...
	def writeBytes(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def flush(self, ) -> None: ...
	def writeUTF(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def writeShort(self, arg0: Union[int, JInt], ) -> None: ...
	def writeChars(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def writeBoolean(self, arg0: Union[int, JBoolean], ) -> None: ...
	def writeDouble(self, arg0: Union[float, JDouble], ) -> None: ...


class PipedWriter:
	@overload
	def __init__(self, arg0: javawrappers.java.io.PipedReader, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def nullWriter() -> javawrappers.java.io.Writer: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.io.Writer: ...
	def connect(self, arg0: javawrappers.java.io.PipedReader, ) -> None: ...


class Reader:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: javawrappers.java.nio.CharBuffer, ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.Writer, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def nullReader() -> javawrappers.java.io.Reader: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def ready(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class WriteAbortedException:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Exception, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class FileNotFoundException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class SerializablePermission:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def checkGuard(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def newPermissionCollection(self, ) -> javawrappers.java.security.PermissionCollection: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getActions(self, ) -> javawrappers.java.lang.String: ...
	def implies(self, arg0: javawrappers.java.security.Permission, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class ObjectInputFilter:
	class Config:
		class Global:
			def checkInput(self, arg0: javawrappers.java.io.ObjectInputFilter.FilterInfo, ) -> javawrappers.java.io.ObjectInputFilter.Status: ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def notify(self, ) -> None: ...


		def checkInput(self, arg0: javawrappers.java.io.ObjectInputFilter.FilterInfo, ) -> javawrappers.java.io.ObjectInputFilter.Status: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@staticmethod
		def getSerialFilter() -> javawrappers.java.io.ObjectInputFilter: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def setSerialFilter(arg0: javawrappers.java.io.ObjectInputFilter, ) -> None: ...
		@staticmethod
		def createFilter(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.ObjectInputFilter: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Status:
		UNDECIDED: ObjectInputFilter.Status = ...
		ALLOWED: ObjectInputFilter.Status = ...
		REJECTED: ObjectInputFilter.Status = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.ObjectInputFilter.Status: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.java.io.ObjectInputFilter.Status, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class FilterInfo:
		def streamBytes(self, ) -> Union[long, JLong]: ...
		def serialClass(self, ) -> javawrappers.java.lang.Class: ...
		def arrayLength(self, ) -> Union[long, JLong]: ...
		def depth(self, ) -> Union[long, JLong]: ...
		def references(self, ) -> Union[long, JLong]: ...


	def streamBytes(self, ) -> Union[long, JLong]: ...
	@overload
	def checkInput(self, arg0: javawrappers.java.io.ObjectInputFilter.FilterInfo, ) -> javawrappers.java.io.ObjectInputFilter.Status: ...
	@overload
	def checkInput(self, arg0: javawrappers.java.io.ObjectInputFilter.FilterInfo, ) -> javawrappers.java.io.ObjectInputFilter.Status: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getSerialFilter() -> javawrappers.java.io.ObjectInputFilter: ...
	def references(self, ) -> Union[long, JLong]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.ObjectInputFilter.Status: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@staticmethod
	def setSerialFilter(arg0: javawrappers.java.io.ObjectInputFilter, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.io.ObjectInputFilter.Status, 1): ...
	@staticmethod
	def createFilter(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.ObjectInputFilter: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def serialClass(self, ) -> javawrappers.java.lang.Class: ...
	def arrayLength(self, ) -> Union[long, JLong]: ...
	def depth(self, ) -> Union[long, JLong]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class ObjectStreamException:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class CharConversionException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class PipedInputStream:
	@overload
	def __init__(self, arg0: javawrappers.java.io.PipedOutputStream, ): ...
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.PipedOutputStream, arg1: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...
	def connect(self, arg0: javawrappers.java.io.PipedOutputStream, ) -> None: ...


class IOException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class StringBufferInputStream:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class StreamCorruptedException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class PrintStream:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.OutputStream, arg1: Union[int, JBoolean], arg2: javawrappers.java.nio.charset.Charset, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.OutputStream, arg1: Union[int, JBoolean], arg2: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.nio.charset.Charset, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, arg1: javawrappers.java.nio.charset.Charset, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.OutputStream, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.OutputStream, arg1: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def format(self, arg0: javawrappers.java.util.Locale, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.io.PrintStream: ...
	@overload
	def format(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.io.PrintStream: ...
	def checkError(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@overload
	def printf(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.io.PrintStream: ...
	@overload
	def printf(self, arg0: javawrappers.java.util.Locale, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> javawrappers.java.io.PrintStream: ...
	@overload
	def print_(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def print_(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def print_(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def print_(self, arg0: Union[float, JFloat], ) -> None: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def print_(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def print_(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def print_(self, arg0: Union[string, JString], ) -> None: ...
	@overload
	def print_(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def println(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def println(self, arg0: Union[float, JFloat], ) -> None: ...
	@overload
	def println(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def println(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def println(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def println(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def println(self, ) -> None: ...
	@overload
	def println(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def println(self, arg0: Union[string, JString], ) -> None: ...
	@overload
	def println(self, arg0: Union[int, JInt], ) -> None: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.io.PrintStream: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.io.PrintStream: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.io.PrintStream: ...


class FilterReader:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: javawrappers.java.nio.CharBuffer, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.Writer, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def nullReader() -> javawrappers.java.io.Reader: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def ready(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class UncheckedIOException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.io.IOException, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.IOException, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	@overload
	def getCause(self, ) -> javawrappers.java.io.IOException: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class FilterWriter:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def nullWriter() -> javawrappers.java.io.Writer: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.io.Writer: ...


class FileReader:
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, arg1: javawrappers.java.nio.charset.Charset, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.nio.charset.Charset, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.FileDescriptor, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: javawrappers.java.nio.CharBuffer, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.Writer, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def getEncoding(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def nullReader() -> javawrappers.java.io.Reader: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def ready(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class ObjectInput:
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	def available(self, ) -> Union[int, JInt]: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def readLine(self, ) -> javawrappers.java.lang.String: ...
	def readChar(self, ) -> Union[string, JString]: ...
	def skipBytes(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def readObject(self, ) -> javawrappers.java.lang.Object: ...
	def readUTF(self, ) -> javawrappers.java.lang.String: ...
	def readLong(self, ) -> Union[long, JLong]: ...
	def readShort(self, ) -> Union[int, JShort]: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), ) -> None: ...
	def readDouble(self, ) -> Union[float, JDouble]: ...
	def readFloat(self, ) -> Union[float, JFloat]: ...
	def readBoolean(self, ) -> Union[int, JBoolean]: ...
	def readInt(self, ) -> Union[int, JInt]: ...
	def readByte(self, ) -> JByte: ...
	def readUnsignedByte(self, ) -> Union[int, JInt]: ...
	def close(self, ) -> None: ...
	def readUnsignedShort(self, ) -> Union[int, JInt]: ...


class FileWriter:
	@overload
	def __init__(self, arg0: javawrappers.java.io.FileDescriptor, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.nio.charset.Charset, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.nio.charset.Charset, arg2: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, arg1: javawrappers.java.nio.charset.Charset, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, arg1: javawrappers.java.nio.charset.Charset, arg2: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, arg1: Union[int, JBoolean], ): ...
	def getEncoding(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def nullWriter() -> javawrappers.java.io.Writer: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.io.Writer: ...


class SequenceInputStream:
	@overload
	def __init__(self, arg0: javawrappers.java.util.Enumeration, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.InputStream, arg1: javawrappers.java.io.InputStream, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class UTFDataFormatException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class OutputStreamWriter:
	@overload
	def __init__(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.nio.charset.CharsetEncoder, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.nio.charset.Charset, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.OutputStream, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.OutputStream, arg1: javawrappers.java.lang.String, ): ...
	def getEncoding(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def nullWriter() -> javawrappers.java.io.Writer: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.io.Writer: ...


class IOError:
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class OptionalDataException:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class ObjectInputStream:
	def __init__(self, arg0: javawrappers.java.io.InputStream, ): ...
	class HandleTable:
		class HandleList:
			def __init__(self, ): ...
			def add(self, arg0: Union[int, JInt], ) -> None: ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def size(self, ) -> Union[int, JInt]: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def get(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def notify(self, ) -> None: ...


		def add(self, arg0: Union[int, JInt], ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def size(self, ) -> Union[int, JInt]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def get(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class BlockDataInputStream:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def markSupported(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def available(self, ) -> Union[int, JInt]: ...
		def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
		def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
		def notify(self, ) -> None: ...
		def readChar(self, ) -> Union[string, JString]: ...
		def readUTF(self, ) -> javawrappers.java.lang.String: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def readFully(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		@overload
		def readFully(self, arg0: JArray(JByte, 1), ) -> None: ...
		@overload
		def readFully(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JBoolean], ) -> None: ...
		def readDouble(self, ) -> Union[float, JDouble]: ...
		def readAllBytes(self, ) -> JArray(JByte, 1): ...
		def readFloat(self, ) -> Union[float, JFloat]: ...
		def readInt(self, ) -> Union[int, JInt]: ...
		def close(self, ) -> None: ...
		def readUnsignedByte(self, ) -> Union[int, JInt]: ...
		@overload
		def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		@overload
		def read(self, ) -> Union[int, JInt]: ...
		@overload
		def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
		@staticmethod
		def nullInputStream() -> javawrappers.java.io.InputStream: ...
		def readLine(self, ) -> javawrappers.java.lang.String: ...
		def skipBytes(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
		def readLong(self, ) -> Union[long, JLong]: ...
		def readShort(self, ) -> Union[int, JShort]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def reset(self, ) -> None: ...
		@overload
		def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		@overload
		def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def readBoolean(self, ) -> Union[int, JBoolean]: ...
		def readByte(self, ) -> JByte: ...
		def mark(self, arg0: Union[int, JInt], ) -> None: ...
		def readUnsignedShort(self, ) -> Union[int, JInt]: ...


	class PeekInputStream:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def read(self, ) -> Union[int, JInt]: ...
		@overload
		def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		@overload
		def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
		def markSupported(self, ) -> Union[int, JBoolean]: ...
		def notifyAll(self, ) -> None: ...
		def available(self, ) -> Union[int, JInt]: ...
		@staticmethod
		def nullInputStream() -> javawrappers.java.io.InputStream: ...
		def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
		def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
		def notify(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def readAllBytes(self, ) -> JArray(JByte, 1): ...
		def reset(self, ) -> None: ...
		@overload
		def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
		@overload
		def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def close(self, ) -> None: ...
		def mark(self, arg0: Union[int, JInt], ) -> None: ...
		def getBytesRead(self, ) -> Union[long, JLong]: ...


	class FilterValues:
		def __init__(self, arg0: javawrappers.java.lang.Class, arg1: Union[long, JLong], arg2: Union[long, JLong], arg3: Union[long, JLong], arg4: Union[long, JLong], ): ...
		def streamBytes(self, ) -> Union[long, JLong]: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def serialClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def arrayLength(self, ) -> Union[long, JLong]: ...
		def depth(self, ) -> Union[long, JLong]: ...
		def references(self, ) -> Union[long, JLong]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class ValidationList:
		class Callback:
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def notify(self, ) -> None: ...


		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class GetFieldImpl:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def get(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JFloat], ) -> Union[float, JFloat]: ...
		@overload
		def get(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
		@overload
		def get(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
		@overload
		def get(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def get(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
		@overload
		def get(self, arg0: javawrappers.java.lang.String, arg1: JByte, ) -> JByte: ...
		@overload
		def get(self, arg0: javawrappers.java.lang.String, arg1: Union[string, JString], ) -> Union[string, JString]: ...
		@overload
		def get(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JShort], ) -> Union[int, JShort]: ...
		@overload
		def get(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
		def defaulted(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		def getObjectStreamClass(self, ) -> javawrappers.java.io.ObjectStreamClass: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class FieldValues:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class GetField:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def get(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JFloat], ) -> Union[float, JFloat]: ...
		@overload
		def get(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
		@overload
		def get(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
		@overload
		def get(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
		@overload
		def get(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def get(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
		@overload
		def get(self, arg0: javawrappers.java.lang.String, arg1: JByte, ) -> JByte: ...
		@overload
		def get(self, arg0: javawrappers.java.lang.String, arg1: Union[string, JString], ) -> Union[string, JString]: ...
		@overload
		def get(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JShort], ) -> Union[int, JShort]: ...
		def defaulted(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
		def getObjectStreamClass(self, ) -> javawrappers.java.io.ObjectStreamClass: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Logging:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Caches:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def references(self, ) -> Union[long, JLong]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	@overload
	def available(self, ) -> Union[int, JInt]: ...
	@overload
	def available(self, ) -> Union[int, JInt]: ...
	@overload
	def available(self, ) -> Union[int, JInt]: ...
	def serialClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JBoolean], ) -> None: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def readInt(self, ) -> Union[int, JInt]: ...
	@overload
	def readInt(self, ) -> Union[int, JInt]: ...
	def add(self, arg0: Union[int, JInt], ) -> None: ...
	def streamBytes(self, ) -> Union[long, JLong]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	def registerValidation(self, arg0: javawrappers.java.io.ObjectInputValidation, arg1: Union[int, JInt], ) -> None: ...
	def readObject(self, ) -> javawrappers.java.lang.Object: ...
	def readFields(self, ) -> javawrappers.java.io.ObjectInputStream.GetField: ...
	def size(self, ) -> Union[int, JInt]: ...
	def reset(self, ) -> None: ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	@overload
	def readUnsignedShort(self, ) -> Union[int, JInt]: ...
	@overload
	def readUnsignedShort(self, ) -> Union[int, JInt]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def setObjectInputFilter(self, arg0: javawrappers.java.io.ObjectInputFilter, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def readChar(self, ) -> Union[string, JString]: ...
	@overload
	def readChar(self, ) -> Union[string, JString]: ...
	def readUnshared(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def readUTF(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def readUTF(self, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def readDouble(self, ) -> Union[float, JDouble]: ...
	@overload
	def readDouble(self, ) -> Union[float, JDouble]: ...
	@overload
	def get(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.String, arg1: JByte, ) -> JByte: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.String, arg1: Union[string, JString], ) -> Union[string, JString]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JShort], ) -> Union[int, JShort]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JFloat], ) -> Union[float, JFloat]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> Union[long, JLong]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JDouble], ) -> Union[float, JDouble]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.String, arg1: JByte, ) -> JByte: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.String, arg1: Union[string, JString], ) -> Union[string, JString]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JShort], ) -> Union[int, JShort]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> Union[int, JBoolean]: ...
	@overload
	def defaulted(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	@overload
	def defaulted(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	@overload
	def readFloat(self, ) -> Union[float, JFloat]: ...
	@overload
	def readFloat(self, ) -> Union[float, JFloat]: ...
	@overload
	def close(self, ) -> None: ...
	@overload
	def close(self, ) -> None: ...
	@overload
	def close(self, ) -> None: ...
	@overload
	def readUnsignedByte(self, ) -> Union[int, JInt]: ...
	@overload
	def readUnsignedByte(self, ) -> Union[int, JInt]: ...
	def getBytesRead(self, ) -> Union[long, JLong]: ...
	def clear(self, ) -> None: ...
	def defaultReadObject(self, ) -> None: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	@overload
	def readLine(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def readLine(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def skipBytes(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def skipBytes(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def arrayLength(self, ) -> Union[long, JLong]: ...
	def depth(self, ) -> Union[long, JLong]: ...
	@overload
	def readLong(self, ) -> Union[long, JLong]: ...
	@overload
	def readLong(self, ) -> Union[long, JLong]: ...
	@overload
	def readShort(self, ) -> Union[int, JShort]: ...
	@overload
	def readShort(self, ) -> Union[int, JShort]: ...
	@overload
	def getObjectStreamClass(self, ) -> javawrappers.java.io.ObjectStreamClass: ...
	@overload
	def getObjectStreamClass(self, ) -> javawrappers.java.io.ObjectStreamClass: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def readBoolean(self, ) -> Union[int, JBoolean]: ...
	@overload
	def readBoolean(self, ) -> Union[int, JBoolean]: ...
	def getObjectInputFilter(self, ) -> javawrappers.java.io.ObjectInputFilter: ...
	@overload
	def readByte(self, ) -> JByte: ...
	@overload
	def readByte(self, ) -> JByte: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class FileFilter:
	def accept(self, arg0: javawrappers.java.io.File, ) -> Union[int, JBoolean]: ...


class InterruptedIOException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class FilePermission:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def checkGuard(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def newPermissionCollection(self, ) -> javawrappers.java.security.PermissionCollection: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getActions(self, ) -> javawrappers.java.lang.String: ...
	def implies(self, arg0: javawrappers.java.security.Permission, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...


class InvalidObjectException:
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class ObjectOutputStream:
	def __init__(self, arg0: javawrappers.java.io.OutputStream, ): ...
	class DebugTraceInfoStack:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class ReplaceTable:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class HandleTable:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class BlockDataOutputStream:
		def writeInt(self, arg0: Union[int, JInt], ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def writeByte(self, arg0: Union[int, JInt], ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def writeFloat(self, arg0: Union[float, JFloat], ) -> None: ...
		def notify(self, ) -> None: ...
		def writeChar(self, arg0: Union[int, JInt], ) -> None: ...
		def writeLong(self, arg0: Union[long, JLong], ) -> None: ...
		def writeBytes(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def flush(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def writeUTF(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
		def writeShort(self, arg0: Union[int, JInt], ) -> None: ...
		def writeChars(self, arg0: javawrappers.java.lang.String, ) -> None: ...
		def close(self, ) -> None: ...
		@overload
		def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
		@overload
		def write(self, arg0: JArray(JByte, 1), ) -> None: ...
		@overload
		def write(self, arg0: Union[int, JInt], ) -> None: ...
		def writeBoolean(self, arg0: Union[int, JBoolean], ) -> None: ...
		def writeDouble(self, arg0: Union[float, JDouble], ) -> None: ...


	class PutFieldImpl:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def write(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
		def notify(self, ) -> None: ...
		@overload
		def put(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
		@overload
		def put(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> None: ...
		@overload
		def put(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JDouble], ) -> None: ...
		@overload
		def put(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def put(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JFloat], ) -> None: ...
		@overload
		def put(self, arg0: javawrappers.java.lang.String, arg1: JByte, ) -> None: ...
		@overload
		def put(self, arg0: javawrappers.java.lang.String, arg1: Union[string, JString], ) -> None: ...
		@overload
		def put(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JShort], ) -> None: ...
		@overload
		def put(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...


	class PutField:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def write(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
		def notify(self, ) -> None: ...
		@overload
		def put(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JFloat], ) -> None: ...
		@overload
		def put(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> None: ...
		@overload
		def put(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
		@overload
		def put(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JDouble], ) -> None: ...
		@overload
		def put(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def put(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
		@overload
		def put(self, arg0: javawrappers.java.lang.String, arg1: JByte, ) -> None: ...
		@overload
		def put(self, arg0: javawrappers.java.lang.String, arg1: Union[string, JString], ) -> None: ...
		@overload
		def put(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JShort], ) -> None: ...


	class Caches:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def writeFloat(self, arg0: Union[float, JFloat], ) -> None: ...
	@overload
	def writeFloat(self, arg0: Union[float, JFloat], ) -> None: ...
	def useProtocolVersion(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JFloat], ) -> None: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> None: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.String, arg1: JByte, ) -> None: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.String, arg1: Union[string, JString], ) -> None: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JShort], ) -> None: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.String, arg1: Union[long, JLong], ) -> None: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JDouble], ) -> None: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.String, arg1: Union[float, JFloat], ) -> None: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.String, arg1: JByte, ) -> None: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.String, arg1: Union[string, JString], ) -> None: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JShort], ) -> None: ...
	@overload
	def put(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def writeLong(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def writeLong(self, arg0: Union[long, JLong], ) -> None: ...
	def writeUnshared(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def flush(self, ) -> None: ...
	@overload
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	def defaultWriteObject(self, ) -> None: ...
	@overload
	def close(self, ) -> None: ...
	@overload
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def writeDouble(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def writeDouble(self, arg0: Union[float, JDouble], ) -> None: ...
	@overload
	def writeInt(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def writeInt(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def writeByte(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def writeByte(self, arg0: Union[int, JInt], ) -> None: ...
	def writeFields(self, ) -> None: ...
	def writeObject(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def writeChar(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def writeChar(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def writeBytes(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeBytes(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def writeUTF(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeUTF(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def reset(self, ) -> None: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def writeShort(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def writeShort(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def writeChars(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeChars(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeBoolean(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def writeBoolean(self, arg0: Union[int, JBoolean], ) -> None: ...
	def putFields(self, ) -> javawrappers.java.io.ObjectOutputStream.PutField: ...


class DataInputStream:
	def __init__(self, arg0: javawrappers.java.io.InputStream, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def readChar(self, ) -> Union[string, JString]: ...
	@overload
	def readUTF(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def readUTF(arg0: javawrappers.java.io.DataInput, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def readDouble(self, ) -> Union[float, JDouble]: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	def readFloat(self, ) -> Union[float, JFloat]: ...
	def readInt(self, ) -> Union[int, JInt]: ...
	def close(self, ) -> None: ...
	def readUnsignedByte(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def readLine(self, ) -> javawrappers.java.lang.String: ...
	def skipBytes(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def readLong(self, ) -> Union[long, JLong]: ...
	def readShort(self, ) -> Union[int, JShort]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def readBoolean(self, ) -> Union[int, JBoolean]: ...
	def readByte(self, ) -> JByte: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...
	def readUnsignedShort(self, ) -> Union[int, JInt]: ...


class InputStreamReader:
	@overload
	def __init__(self, arg0: javawrappers.java.io.InputStream, arg1: javawrappers.java.nio.charset.CharsetDecoder, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.InputStream, arg1: javawrappers.java.nio.charset.Charset, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.InputStream, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.InputStream, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: javawrappers.java.nio.CharBuffer, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.Writer, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def getEncoding(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def nullReader() -> javawrappers.java.io.Reader: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def ready(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class EOFException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class Externalizable:
	def writeExternal(self, arg0: javawrappers.java.io.ObjectOutput, ) -> None: ...
	def readExternal(self, arg0: javawrappers.java.io.ObjectInput, ) -> None: ...


class DataOutputStream:
	def __init__(self, arg0: javawrappers.java.io.OutputStream, ): ...
	def writeInt(self, arg0: Union[int, JInt], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def writeByte(self, arg0: Union[int, JInt], ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def writeFloat(self, arg0: Union[float, JFloat], ) -> None: ...
	def notify(self, ) -> None: ...
	def writeChar(self, arg0: Union[int, JInt], ) -> None: ...
	def writeLong(self, arg0: Union[long, JLong], ) -> None: ...
	def writeBytes(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def flush(self, ) -> None: ...
	def size(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def writeUTF(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	def writeShort(self, arg0: Union[int, JInt], ) -> None: ...
	def writeChars(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def writeBoolean(self, arg0: Union[int, JBoolean], ) -> None: ...
	def writeDouble(self, arg0: Union[float, JDouble], ) -> None: ...


class PushbackInputStream:
	@overload
	def __init__(self, arg0: javawrappers.java.io.InputStream, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.InputStream, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def unread(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def unread(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def unread(self, arg0: JArray(JByte, 1), ) -> None: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class BufferedReader:
	@overload
	def __init__(self, arg0: javawrappers.java.io.Reader, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.Reader, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: javawrappers.java.nio.CharBuffer, ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.Writer, ) -> Union[long, JLong]: ...
	def readLine(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def nullReader() -> javawrappers.java.io.Reader: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def ready(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def lines(self, ) -> javawrappers.java.util.stream.Stream: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class FileOutputStream:
	@overload
	def __init__(self, arg0: javawrappers.java.io.FileDescriptor, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, arg1: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	class AltFinalizer:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getFD(self, ) -> javawrappers.java.io.FileDescriptor: ...
	def flush(self, ) -> None: ...
	def getChannel(self, ) -> javawrappers.java.nio.channels.FileChannel: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def nullOutputStream() -> javawrappers.java.io.OutputStream: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...


class UnsupportedEncodingException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class PushbackReader:
	@overload
	def __init__(self, arg0: javawrappers.java.io.Reader, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.Reader, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: javawrappers.java.nio.CharBuffer, ) -> Union[int, JInt]: ...
	@overload
	def unread(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def unread(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def unread(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.Writer, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def nullReader() -> javawrappers.java.io.Reader: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def ready(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


class StreamTokenizer:
	@overload
	def __init__(self, arg0: javawrappers.java.io.InputStream, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.Reader, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def quoteChar(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def resetSyntax(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def ordinaryChars(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def slashSlashComments(self, arg0: Union[int, JBoolean], ) -> None: ...
	def eolIsSignificant(self, arg0: Union[int, JBoolean], ) -> None: ...
	def commentChar(self, arg0: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	def wordChars(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def pushBack(self, ) -> None: ...
	def parseNumbers(self, ) -> None: ...
	def slashStarComments(self, arg0: Union[int, JBoolean], ) -> None: ...
	def whitespaceChars(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def lineno(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def nextToken(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def ordinaryChar(self, arg0: Union[int, JInt], ) -> None: ...
	def lowerCaseMode(self, arg0: Union[int, JBoolean], ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class StringWriter:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def flush(self, ) -> None: ...
	def getBuffer(self, ) -> javawrappers.java.lang.StringBuffer: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def nullWriter() -> javawrappers.java.io.Writer: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.io.StringWriter: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.io.StringWriter: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.io.StringWriter: ...


class PipedReader:
	@overload
	def __init__(self, arg0: javawrappers.java.io.PipedWriter, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.PipedWriter, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(Union[string, JString], 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: javawrappers.java.nio.CharBuffer, ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.Writer, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def nullReader() -> javawrappers.java.io.Reader: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def ready(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...
	def connect(self, arg0: javawrappers.java.io.PipedWriter, ) -> None: ...


class Serializable:


class Writer:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def flush(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def nullWriter() -> javawrappers.java.io.Writer: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), ) -> None: ...
	@overload
	def write(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def write(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.io.Writer: ...
	@overload
	def append(self, arg0: Union[string, JString], ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.lang.Appendable: ...
	@overload
	def append(self, arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.io.Writer: ...


class Closeable:
	def close(self, ) -> None: ...


class RandomAccessFile:
	@overload
	def __init__(self, arg0: javawrappers.java.io.File, arg1: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getFilePointer(self, ) -> Union[long, JLong]: ...
	def writeFloat(self, arg0: Union[float, JFloat], ) -> None: ...
	def seek(self, arg0: Union[long, JLong], ) -> None: ...
	def notify(self, ) -> None: ...
	def readChar(self, ) -> Union[string, JString]: ...
	def getFD(self, ) -> javawrappers.java.io.FileDescriptor: ...
	def writeLong(self, arg0: Union[long, JLong], ) -> None: ...
	def readUTF(self, ) -> javawrappers.java.lang.String: ...
	def getChannel(self, ) -> javawrappers.java.nio.channels.FileChannel: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def readFully(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def readDouble(self, ) -> Union[float, JDouble]: ...
	def readFloat(self, ) -> Union[float, JFloat]: ...
	def readInt(self, ) -> Union[int, JInt]: ...
	def close(self, ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), ) -> None: ...
	@overload
	def write(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def write(self, arg0: Union[int, JInt], ) -> None: ...
	def readUnsignedByte(self, ) -> Union[int, JInt]: ...
	def writeDouble(self, arg0: Union[float, JDouble], ) -> None: ...
	def writeInt(self, arg0: Union[int, JInt], ) -> None: ...
	def writeByte(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	def length(self, ) -> Union[long, JLong]: ...
	def readLine(self, ) -> javawrappers.java.lang.String: ...
	def skipBytes(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def writeChar(self, arg0: Union[int, JInt], ) -> None: ...
	def setLength(self, arg0: Union[long, JLong], ) -> None: ...
	def writeBytes(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def readLong(self, ) -> Union[long, JLong]: ...
	def readShort(self, ) -> Union[int, JShort]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def writeUTF(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def writeShort(self, arg0: Union[int, JInt], ) -> None: ...
	def readBoolean(self, ) -> Union[int, JBoolean]: ...
	def writeChars(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def readByte(self, ) -> JByte: ...
	def writeBoolean(self, arg0: Union[int, JBoolean], ) -> None: ...
	def readUnsignedShort(self, ) -> Union[int, JInt]: ...


class BufferedInputStream:
	@overload
	def __init__(self, arg0: javawrappers.java.io.InputStream, arg1: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.io.InputStream, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def read(self, ) -> Union[int, JInt]: ...
	@overload
	def read(self, arg0: JArray(JByte, 1), ) -> Union[int, JInt]: ...
	def markSupported(self, ) -> Union[int, JBoolean]: ...
	def notifyAll(self, ) -> None: ...
	def available(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def nullInputStream() -> javawrappers.java.io.InputStream: ...
	def skip(self, arg0: Union[long, JLong], ) -> Union[long, JLong]: ...
	def transferTo(self, arg0: javawrappers.java.io.OutputStream, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def readAllBytes(self, ) -> JArray(JByte, 1): ...
	@overload
	def readNBytes(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def readNBytes(self, arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def reset(self, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def close(self, ) -> None: ...
	def mark(self, arg0: Union[int, JInt], ) -> None: ...


