################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util
import javawrappers.java.lang
import javawrappers.java.util.stream
import javawrappers.java.util.function

from jpype.types import *
from typing import Union

from typing import overload

class StreamSupport:
	@overload
	@staticmethod
	def intStream(arg0: javawrappers.java.util.function.Supplier, arg1: Union[int, JInt], arg2: Union[int, JBoolean], ) -> javawrappers.java.util.stream.IntStream: ...
	@overload
	@staticmethod
	def intStream(arg0: javawrappers.java.util.Spliterator.OfInt, arg1: Union[int, JBoolean], ) -> javawrappers.java.util.stream.IntStream: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def stream(arg0: javawrappers.java.util.function.Supplier, arg1: Union[int, JInt], arg2: Union[int, JBoolean], ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	@staticmethod
	def stream(arg0: javawrappers.java.util.Spliterator, arg1: Union[int, JBoolean], ) -> javawrappers.java.util.stream.Stream: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def longStream(arg0: javawrappers.java.util.function.Supplier, arg1: Union[int, JInt], arg2: Union[int, JBoolean], ) -> javawrappers.java.util.stream.LongStream: ...
	@overload
	@staticmethod
	def longStream(arg0: javawrappers.java.util.Spliterator.OfLong, arg1: Union[int, JBoolean], ) -> javawrappers.java.util.stream.LongStream: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def doubleStream(arg0: javawrappers.java.util.function.Supplier, arg1: Union[int, JInt], arg2: Union[int, JBoolean], ) -> javawrappers.java.util.stream.DoubleStream: ...
	@overload
	@staticmethod
	def doubleStream(arg0: javawrappers.java.util.Spliterator.OfDouble, arg1: Union[int, JBoolean], ) -> javawrappers.java.util.stream.DoubleStream: ...


class Collectors:
	class Partition:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
		def notifyAll(self, ) -> None: ...
		def values(self, ) -> javawrappers.java.util.Collection: ...
		@overload
		def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
		def notify(self, ) -> None: ...
		def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		@overload
		def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
		def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def keySet(self, ) -> javawrappers.java.util.Set: ...
		def entrySet(self, ) -> javawrappers.java.util.Set: ...
		def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
		def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def isEmpty(self, ) -> Union[int, JBoolean]: ...
		def clear(self, ) -> None: ...
		def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		def size(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...


	class CollectorImpl:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def characteristics(self, ) -> javawrappers.java.util.Set: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def supplier(self, ) -> javawrappers.java.util.function.Supplier: ...
		def finisher(self, ) -> javawrappers.java.util.function.Function: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def accumulator(self, ) -> javawrappers.java.util.function.BiConsumer: ...
		def combiner(self, ) -> javawrappers.java.util.function.BinaryOperator: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getOrDefault(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def summarizingInt(arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.stream.Collector: ...
	@staticmethod
	def toUnmodifiableList() -> javawrappers.java.util.stream.Collector: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def replace(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def toList() -> javawrappers.java.util.stream.Collector: ...
	def containsValue(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def put(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def compute(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def summingDouble(arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.stream.Collector: ...
	@staticmethod
	def toUnmodifiableSet() -> javawrappers.java.util.stream.Collector: ...
	def merge(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, arg2: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def supplier(self, ) -> javawrappers.java.util.function.Supplier: ...
	@overload
	@staticmethod
	def toUnmodifiableMap(arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.stream.Collector: ...
	@overload
	@staticmethod
	def toUnmodifiableMap(arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.function.Function, arg2: javawrappers.java.util.function.BinaryOperator, ) -> javawrappers.java.util.stream.Collector: ...
	@staticmethod
	def summarizingDouble(arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.stream.Collector: ...
	@staticmethod
	def filtering(arg0: javawrappers.java.util.function.Predicate, arg1: javawrappers.java.util.stream.Collector, ) -> javawrappers.java.util.stream.Collector: ...
	@staticmethod
	def counting() -> javawrappers.java.util.stream.Collector: ...
	@staticmethod
	def mapping(arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.stream.Collector, ) -> javawrappers.java.util.stream.Collector: ...
	@staticmethod
	def flatMapping(arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.stream.Collector, ) -> javawrappers.java.util.stream.Collector: ...
	def entrySet(self, ) -> javawrappers.java.util.Set: ...
	def containsKey(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def toConcurrentMap(arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.stream.Collector: ...
	@overload
	@staticmethod
	def toConcurrentMap(arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.function.Function, arg2: javawrappers.java.util.function.BinaryOperator, arg3: javawrappers.java.util.function.Supplier, ) -> javawrappers.java.util.stream.Collector: ...
	@overload
	@staticmethod
	def toConcurrentMap(arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.function.Function, arg2: javawrappers.java.util.function.BinaryOperator, ) -> javawrappers.java.util.stream.Collector: ...
	def size(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def summingInt(arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.stream.Collector: ...
	def accumulator(self, ) -> javawrappers.java.util.function.BiConsumer: ...
	@staticmethod
	def averagingDouble(arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.stream.Collector: ...
	@overload
	@staticmethod
	def groupingBy(arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.stream.Collector: ...
	@overload
	@staticmethod
	def groupingBy(arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.function.Supplier, arg2: javawrappers.java.util.stream.Collector, ) -> javawrappers.java.util.stream.Collector: ...
	@overload
	@staticmethod
	def groupingBy(arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.stream.Collector, ) -> javawrappers.java.util.stream.Collector: ...
	@overload
	@staticmethod
	def joining(arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.lang.CharSequence, arg2: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.util.stream.Collector: ...
	@overload
	@staticmethod
	def joining(arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.util.stream.Collector: ...
	@overload
	@staticmethod
	def joining() -> javawrappers.java.util.stream.Collector: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def partitioningBy(arg0: javawrappers.java.util.function.Predicate, ) -> javawrappers.java.util.stream.Collector: ...
	@overload
	@staticmethod
	def partitioningBy(arg0: javawrappers.java.util.function.Predicate, arg1: javawrappers.java.util.stream.Collector, ) -> javawrappers.java.util.stream.Collector: ...
	@staticmethod
	def averagingLong(arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.stream.Collector: ...
	def computeIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.Object: ...
	def values(self, ) -> javawrappers.java.util.Collection: ...
	def notifyAll(self, ) -> None: ...
	def replaceAll(self, arg0: javawrappers.java.util.function.BiFunction, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def remove(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def summarizingLong(arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.stream.Collector: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def toCollection(arg0: javawrappers.java.util.function.Supplier, ) -> javawrappers.java.util.stream.Collector: ...
	def putAll(self, arg0: javawrappers.java.util.Map, ) -> None: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def finisher(self, ) -> javawrappers.java.util.function.Function: ...
	def keySet(self, ) -> javawrappers.java.util.Set: ...
	def characteristics(self, ) -> javawrappers.java.util.Set: ...
	def forEach(self, arg0: javawrappers.java.util.function.BiConsumer, ) -> None: ...
	def isEmpty(self, ) -> Union[int, JBoolean]: ...
	def clear(self, ) -> None: ...
	def combiner(self, ) -> javawrappers.java.util.function.BinaryOperator: ...
	@staticmethod
	def toSet() -> javawrappers.java.util.stream.Collector: ...
	def computeIfPresent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def maxBy(arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.stream.Collector: ...
	@staticmethod
	def collectingAndThen(arg0: javawrappers.java.util.stream.Collector, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.stream.Collector: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def toMap(arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.stream.Collector: ...
	@overload
	@staticmethod
	def toMap(arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.function.Function, arg2: javawrappers.java.util.function.BinaryOperator, arg3: javawrappers.java.util.function.Supplier, ) -> javawrappers.java.util.stream.Collector: ...
	@overload
	@staticmethod
	def toMap(arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.function.Function, arg2: javawrappers.java.util.function.BinaryOperator, ) -> javawrappers.java.util.stream.Collector: ...
	@staticmethod
	def minBy(arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.stream.Collector: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def groupingByConcurrent(arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.stream.Collector: ...
	@overload
	@staticmethod
	def groupingByConcurrent(arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.function.Supplier, arg2: javawrappers.java.util.stream.Collector, ) -> javawrappers.java.util.stream.Collector: ...
	@overload
	@staticmethod
	def groupingByConcurrent(arg0: javawrappers.java.util.function.Function, arg1: javawrappers.java.util.stream.Collector, ) -> javawrappers.java.util.stream.Collector: ...
	@overload
	@staticmethod
	def reducing(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Function, arg2: javawrappers.java.util.function.BinaryOperator, ) -> javawrappers.java.util.stream.Collector: ...
	@overload
	@staticmethod
	def reducing(arg0: javawrappers.java.util.function.BinaryOperator, ) -> javawrappers.java.util.stream.Collector: ...
	@overload
	@staticmethod
	def reducing(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BinaryOperator, ) -> javawrappers.java.util.stream.Collector: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def averagingInt(arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.stream.Collector: ...
	@staticmethod
	def summingLong(arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.stream.Collector: ...


class DoubleStream:
	class Builder:
		def add(self, arg0: Union[float, JDouble], ) -> javawrappers.java.util.stream.DoubleStream.Builder: ...
		def build(self, ) -> javawrappers.java.util.stream.DoubleStream: ...
		def andThen(self, arg0: javawrappers.java.util.function.DoubleConsumer, ) -> javawrappers.java.util.function.DoubleConsumer: ...
		def accept(self, arg0: Union[float, JDouble], ) -> None: ...


	def average(self, ) -> javawrappers.java.util.OptionalDouble: ...
	@overload
	def sequential(self, ) -> javawrappers.java.util.stream.DoubleStream: ...
	@overload
	def sequential(self, ) -> javawrappers.java.util.stream.BaseStream: ...
	def takeWhile(self, arg0: javawrappers.java.util.function.DoublePredicate, ) -> javawrappers.java.util.stream.DoubleStream: ...
	def distinct(self, ) -> javawrappers.java.util.stream.DoubleStream: ...
	def sum(self, ) -> Union[float, JDouble]: ...
	def skip(self, arg0: Union[long, JLong], ) -> javawrappers.java.util.stream.DoubleStream: ...
	def findFirst(self, ) -> javawrappers.java.util.OptionalDouble: ...
	def allMatch(self, arg0: javawrappers.java.util.function.DoublePredicate, ) -> Union[int, JBoolean]: ...
	def andThen(self, arg0: javawrappers.java.util.function.DoubleConsumer, ) -> javawrappers.java.util.function.DoubleConsumer: ...
	def mapToObj(self, arg0: javawrappers.java.util.function.DoubleFunction, ) -> javawrappers.java.util.stream.Stream: ...
	@staticmethod
	def empty() -> javawrappers.java.util.stream.DoubleStream: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.PrimitiveIterator.OfDouble: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def min(self, ) -> javawrappers.java.util.OptionalDouble: ...
	def mapToLong(self, arg0: javawrappers.java.util.function.DoubleToLongFunction, ) -> javawrappers.java.util.stream.LongStream: ...
	@overload
	def parallel(self, ) -> javawrappers.java.util.stream.DoubleStream: ...
	@overload
	def parallel(self, ) -> javawrappers.java.util.stream.BaseStream: ...
	def findAny(self, ) -> javawrappers.java.util.OptionalDouble: ...
	def noneMatch(self, arg0: javawrappers.java.util.function.DoublePredicate, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def of(*arg0: Union[float, JDouble], ) -> javawrappers.java.util.stream.DoubleStream: ...
	@overload
	@staticmethod
	def of(arg0: Union[float, JDouble], ) -> javawrappers.java.util.stream.DoubleStream: ...
	def isParallel(self, ) -> Union[int, JBoolean]: ...
	def toArray(self, ) -> JArray(Union[float, JDouble], 1): ...
	def limit(self, arg0: Union[long, JLong], ) -> javawrappers.java.util.stream.DoubleStream: ...
	@staticmethod
	def builder() -> javawrappers.java.util.stream.DoubleStream.Builder: ...
	def forEachOrdered(self, arg0: javawrappers.java.util.function.DoubleConsumer, ) -> None: ...
	def close(self, ) -> None: ...
	def map(self, arg0: javawrappers.java.util.function.DoubleUnaryOperator, ) -> javawrappers.java.util.stream.DoubleStream: ...
	def anyMatch(self, arg0: javawrappers.java.util.function.DoublePredicate, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def generate(arg0: javawrappers.java.util.function.DoubleSupplier, ) -> javawrappers.java.util.stream.DoubleStream: ...
	@overload
	@staticmethod
	def iterate(arg0: Union[float, JDouble], arg1: javawrappers.java.util.function.DoubleUnaryOperator, ) -> javawrappers.java.util.stream.DoubleStream: ...
	@overload
	@staticmethod
	def iterate(arg0: Union[float, JDouble], arg1: javawrappers.java.util.function.DoublePredicate, arg2: javawrappers.java.util.function.DoubleUnaryOperator, ) -> javawrappers.java.util.stream.DoubleStream: ...
	def add(self, arg0: Union[float, JDouble], ) -> javawrappers.java.util.stream.DoubleStream.Builder: ...
	def unordered(self, ) -> javawrappers.java.util.stream.BaseStream: ...
	@overload
	def reduce(self, arg0: javawrappers.java.util.function.DoubleBinaryOperator, ) -> javawrappers.java.util.OptionalDouble: ...
	@overload
	def reduce(self, arg0: Union[float, JDouble], arg1: javawrappers.java.util.function.DoubleBinaryOperator, ) -> Union[float, JDouble]: ...
	@overload
	def spliterator(self, ) -> javawrappers.java.util.Spliterator.OfDouble: ...
	@overload
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def max(self, ) -> javawrappers.java.util.OptionalDouble: ...
	def forEach(self, arg0: javawrappers.java.util.function.DoubleConsumer, ) -> None: ...
	def count(self, ) -> Union[long, JLong]: ...
	@staticmethod
	def concat(arg0: javawrappers.java.util.stream.DoubleStream, arg1: javawrappers.java.util.stream.DoubleStream, ) -> javawrappers.java.util.stream.DoubleStream: ...
	def dropWhile(self, arg0: javawrappers.java.util.function.DoublePredicate, ) -> javawrappers.java.util.stream.DoubleStream: ...
	def accept(self, arg0: Union[float, JDouble], ) -> None: ...
	def peek(self, arg0: javawrappers.java.util.function.DoubleConsumer, ) -> javawrappers.java.util.stream.DoubleStream: ...
	def flatMap(self, arg0: javawrappers.java.util.function.DoubleFunction, ) -> javawrappers.java.util.stream.DoubleStream: ...
	def filter(self, arg0: javawrappers.java.util.function.DoublePredicate, ) -> javawrappers.java.util.stream.DoubleStream: ...
	def onClose(self, arg0: javawrappers.java.lang.Runnable, ) -> javawrappers.java.util.stream.BaseStream: ...
	def sorted(self, ) -> javawrappers.java.util.stream.DoubleStream: ...
	def boxed(self, ) -> javawrappers.java.util.stream.Stream: ...
	def build(self, ) -> javawrappers.java.util.stream.DoubleStream: ...
	def summaryStatistics(self, ) -> javawrappers.java.util.DoubleSummaryStatistics: ...
	def mapToInt(self, arg0: javawrappers.java.util.function.DoubleToIntFunction, ) -> javawrappers.java.util.stream.IntStream: ...
	def collect(self, arg0: javawrappers.java.util.function.Supplier, arg1: javawrappers.java.util.function.ObjDoubleConsumer, arg2: javawrappers.java.util.function.BiConsumer, ) -> javawrappers.java.lang.Object: ...


class IntStream:
	class Builder:
		def add(self, arg0: Union[int, JInt], ) -> javawrappers.java.util.stream.IntStream.Builder: ...
		def build(self, ) -> javawrappers.java.util.stream.IntStream: ...
		def andThen(self, arg0: javawrappers.java.util.function.IntConsumer, ) -> javawrappers.java.util.function.IntConsumer: ...
		def accept(self, arg0: Union[int, JInt], ) -> None: ...


	def takeWhile(self, arg0: javawrappers.java.util.function.IntPredicate, ) -> javawrappers.java.util.stream.IntStream: ...
	def allMatch(self, arg0: javawrappers.java.util.function.IntPredicate, ) -> Union[int, JBoolean]: ...
	def andThen(self, arg0: javawrappers.java.util.function.IntConsumer, ) -> javawrappers.java.util.function.IntConsumer: ...
	def mapToObj(self, arg0: javawrappers.java.util.function.IntFunction, ) -> javawrappers.java.util.stream.Stream: ...
	@staticmethod
	def empty() -> javawrappers.java.util.stream.IntStream: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.PrimitiveIterator.OfInt: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def asDoubleStream(self, ) -> javawrappers.java.util.stream.DoubleStream: ...
	def toArray(self, ) -> JArray(Union[int, JInt], 1): ...
	def limit(self, arg0: Union[long, JLong], ) -> javawrappers.java.util.stream.IntStream: ...
	def anyMatch(self, arg0: javawrappers.java.util.function.IntPredicate, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def generate(arg0: javawrappers.java.util.function.IntSupplier, ) -> javawrappers.java.util.stream.IntStream: ...
	def mapToDouble(self, arg0: javawrappers.java.util.function.IntToDoubleFunction, ) -> javawrappers.java.util.stream.DoubleStream: ...
	def add(self, arg0: Union[int, JInt], ) -> javawrappers.java.util.stream.IntStream.Builder: ...
	def unordered(self, ) -> javawrappers.java.util.stream.BaseStream: ...
	@overload
	def reduce(self, arg0: javawrappers.java.util.function.IntBinaryOperator, ) -> javawrappers.java.util.OptionalInt: ...
	@overload
	def reduce(self, arg0: Union[int, JInt], arg1: javawrappers.java.util.function.IntBinaryOperator, ) -> Union[int, JInt]: ...
	@overload
	def spliterator(self, ) -> javawrappers.java.util.Spliterator.OfInt: ...
	@overload
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def count(self, ) -> Union[long, JLong]: ...
	@staticmethod
	def concat(arg0: javawrappers.java.util.stream.IntStream, arg1: javawrappers.java.util.stream.IntStream, ) -> javawrappers.java.util.stream.IntStream: ...
	def accept(self, arg0: Union[int, JInt], ) -> None: ...
	def flatMap(self, arg0: javawrappers.java.util.function.IntFunction, ) -> javawrappers.java.util.stream.IntStream: ...
	def onClose(self, arg0: javawrappers.java.lang.Runnable, ) -> javawrappers.java.util.stream.BaseStream: ...
	def sorted(self, ) -> javawrappers.java.util.stream.IntStream: ...
	def boxed(self, ) -> javawrappers.java.util.stream.Stream: ...
	def summaryStatistics(self, ) -> javawrappers.java.util.IntSummaryStatistics: ...
	def collect(self, arg0: javawrappers.java.util.function.Supplier, arg1: javawrappers.java.util.function.ObjIntConsumer, arg2: javawrappers.java.util.function.BiConsumer, ) -> javawrappers.java.lang.Object: ...
	def average(self, ) -> javawrappers.java.util.OptionalDouble: ...
	@overload
	def sequential(self, ) -> javawrappers.java.util.stream.IntStream: ...
	@overload
	def sequential(self, ) -> javawrappers.java.util.stream.BaseStream: ...
	def distinct(self, ) -> javawrappers.java.util.stream.IntStream: ...
	@staticmethod
	def range(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.util.stream.IntStream: ...
	def sum(self, ) -> Union[int, JInt]: ...
	def skip(self, arg0: Union[long, JLong], ) -> javawrappers.java.util.stream.IntStream: ...
	def findFirst(self, ) -> javawrappers.java.util.OptionalInt: ...
	def asLongStream(self, ) -> javawrappers.java.util.stream.LongStream: ...
	def min(self, ) -> javawrappers.java.util.OptionalInt: ...
	def mapToLong(self, arg0: javawrappers.java.util.function.IntToLongFunction, ) -> javawrappers.java.util.stream.LongStream: ...
	@overload
	def parallel(self, ) -> javawrappers.java.util.stream.IntStream: ...
	@overload
	def parallel(self, ) -> javawrappers.java.util.stream.BaseStream: ...
	def findAny(self, ) -> javawrappers.java.util.OptionalInt: ...
	def noneMatch(self, arg0: javawrappers.java.util.function.IntPredicate, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def of(*arg0: Union[int, JInt], ) -> javawrappers.java.util.stream.IntStream: ...
	@overload
	@staticmethod
	def of(arg0: Union[int, JInt], ) -> javawrappers.java.util.stream.IntStream: ...
	def isParallel(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def builder() -> javawrappers.java.util.stream.IntStream.Builder: ...
	def forEachOrdered(self, arg0: javawrappers.java.util.function.IntConsumer, ) -> None: ...
	def close(self, ) -> None: ...
	def map(self, arg0: javawrappers.java.util.function.IntUnaryOperator, ) -> javawrappers.java.util.stream.IntStream: ...
	@overload
	@staticmethod
	def iterate(arg0: Union[int, JInt], arg1: javawrappers.java.util.function.IntPredicate, arg2: javawrappers.java.util.function.IntUnaryOperator, ) -> javawrappers.java.util.stream.IntStream: ...
	@overload
	@staticmethod
	def iterate(arg0: Union[int, JInt], arg1: javawrappers.java.util.function.IntUnaryOperator, ) -> javawrappers.java.util.stream.IntStream: ...
	def max(self, ) -> javawrappers.java.util.OptionalInt: ...
	def forEach(self, arg0: javawrappers.java.util.function.IntConsumer, ) -> None: ...
	def dropWhile(self, arg0: javawrappers.java.util.function.IntPredicate, ) -> javawrappers.java.util.stream.IntStream: ...
	def peek(self, arg0: javawrappers.java.util.function.IntConsumer, ) -> javawrappers.java.util.stream.IntStream: ...
	def filter(self, arg0: javawrappers.java.util.function.IntPredicate, ) -> javawrappers.java.util.stream.IntStream: ...
	def build(self, ) -> javawrappers.java.util.stream.IntStream: ...
	@staticmethod
	def rangeClosed(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.util.stream.IntStream: ...


class LongStream:
	class Builder:
		def add(self, arg0: Union[long, JLong], ) -> javawrappers.java.util.stream.LongStream.Builder: ...
		def build(self, ) -> javawrappers.java.util.stream.LongStream: ...
		def andThen(self, arg0: javawrappers.java.util.function.LongConsumer, ) -> javawrappers.java.util.function.LongConsumer: ...
		def accept(self, arg0: Union[long, JLong], ) -> None: ...


	def takeWhile(self, arg0: javawrappers.java.util.function.LongPredicate, ) -> javawrappers.java.util.stream.LongStream: ...
	def allMatch(self, arg0: javawrappers.java.util.function.LongPredicate, ) -> Union[int, JBoolean]: ...
	def andThen(self, arg0: javawrappers.java.util.function.LongConsumer, ) -> javawrappers.java.util.function.LongConsumer: ...
	def mapToObj(self, arg0: javawrappers.java.util.function.LongFunction, ) -> javawrappers.java.util.stream.Stream: ...
	@staticmethod
	def empty() -> javawrappers.java.util.stream.LongStream: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.PrimitiveIterator.OfLong: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def asDoubleStream(self, ) -> javawrappers.java.util.stream.DoubleStream: ...
	def toArray(self, ) -> JArray(Union[long, JLong], 1): ...
	def limit(self, arg0: Union[long, JLong], ) -> javawrappers.java.util.stream.LongStream: ...
	def anyMatch(self, arg0: javawrappers.java.util.function.LongPredicate, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def generate(arg0: javawrappers.java.util.function.LongSupplier, ) -> javawrappers.java.util.stream.LongStream: ...
	def mapToDouble(self, arg0: javawrappers.java.util.function.LongToDoubleFunction, ) -> javawrappers.java.util.stream.DoubleStream: ...
	def add(self, arg0: Union[long, JLong], ) -> javawrappers.java.util.stream.LongStream.Builder: ...
	def unordered(self, ) -> javawrappers.java.util.stream.BaseStream: ...
	@overload
	def reduce(self, arg0: javawrappers.java.util.function.LongBinaryOperator, ) -> javawrappers.java.util.OptionalLong: ...
	@overload
	def reduce(self, arg0: Union[long, JLong], arg1: javawrappers.java.util.function.LongBinaryOperator, ) -> Union[long, JLong]: ...
	@overload
	def spliterator(self, ) -> javawrappers.java.util.Spliterator.OfLong: ...
	@overload
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def count(self, ) -> Union[long, JLong]: ...
	@staticmethod
	def concat(arg0: javawrappers.java.util.stream.LongStream, arg1: javawrappers.java.util.stream.LongStream, ) -> javawrappers.java.util.stream.LongStream: ...
	def accept(self, arg0: Union[long, JLong], ) -> None: ...
	def flatMap(self, arg0: javawrappers.java.util.function.LongFunction, ) -> javawrappers.java.util.stream.LongStream: ...
	def onClose(self, arg0: javawrappers.java.lang.Runnable, ) -> javawrappers.java.util.stream.BaseStream: ...
	def sorted(self, ) -> javawrappers.java.util.stream.LongStream: ...
	def boxed(self, ) -> javawrappers.java.util.stream.Stream: ...
	def summaryStatistics(self, ) -> javawrappers.java.util.LongSummaryStatistics: ...
	def collect(self, arg0: javawrappers.java.util.function.Supplier, arg1: javawrappers.java.util.function.ObjLongConsumer, arg2: javawrappers.java.util.function.BiConsumer, ) -> javawrappers.java.lang.Object: ...
	def average(self, ) -> javawrappers.java.util.OptionalDouble: ...
	@overload
	def sequential(self, ) -> javawrappers.java.util.stream.LongStream: ...
	@overload
	def sequential(self, ) -> javawrappers.java.util.stream.BaseStream: ...
	def distinct(self, ) -> javawrappers.java.util.stream.LongStream: ...
	@staticmethod
	def range(arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.java.util.stream.LongStream: ...
	def sum(self, ) -> Union[long, JLong]: ...
	def skip(self, arg0: Union[long, JLong], ) -> javawrappers.java.util.stream.LongStream: ...
	def findFirst(self, ) -> javawrappers.java.util.OptionalLong: ...
	def min(self, ) -> javawrappers.java.util.OptionalLong: ...
	@overload
	def parallel(self, ) -> javawrappers.java.util.stream.BaseStream: ...
	@overload
	def parallel(self, ) -> javawrappers.java.util.stream.LongStream: ...
	def findAny(self, ) -> javawrappers.java.util.OptionalLong: ...
	def noneMatch(self, arg0: javawrappers.java.util.function.LongPredicate, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def of(*arg0: Union[long, JLong], ) -> javawrappers.java.util.stream.LongStream: ...
	@overload
	@staticmethod
	def of(arg0: Union[long, JLong], ) -> javawrappers.java.util.stream.LongStream: ...
	def isParallel(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def builder() -> javawrappers.java.util.stream.LongStream.Builder: ...
	def forEachOrdered(self, arg0: javawrappers.java.util.function.LongConsumer, ) -> None: ...
	def close(self, ) -> None: ...
	def map(self, arg0: javawrappers.java.util.function.LongUnaryOperator, ) -> javawrappers.java.util.stream.LongStream: ...
	@overload
	@staticmethod
	def iterate(arg0: Union[long, JLong], arg1: javawrappers.java.util.function.LongPredicate, arg2: javawrappers.java.util.function.LongUnaryOperator, ) -> javawrappers.java.util.stream.LongStream: ...
	@overload
	@staticmethod
	def iterate(arg0: Union[long, JLong], arg1: javawrappers.java.util.function.LongUnaryOperator, ) -> javawrappers.java.util.stream.LongStream: ...
	def max(self, ) -> javawrappers.java.util.OptionalLong: ...
	def forEach(self, arg0: javawrappers.java.util.function.LongConsumer, ) -> None: ...
	def dropWhile(self, arg0: javawrappers.java.util.function.LongPredicate, ) -> javawrappers.java.util.stream.LongStream: ...
	def peek(self, arg0: javawrappers.java.util.function.LongConsumer, ) -> javawrappers.java.util.stream.LongStream: ...
	def filter(self, arg0: javawrappers.java.util.function.LongPredicate, ) -> javawrappers.java.util.stream.LongStream: ...
	def build(self, ) -> javawrappers.java.util.stream.LongStream: ...
	@staticmethod
	def rangeClosed(arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.java.util.stream.LongStream: ...
	def mapToInt(self, arg0: javawrappers.java.util.function.LongToIntFunction, ) -> javawrappers.java.util.stream.IntStream: ...


class Stream:
	class Builder:
		def add(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.stream.Stream.Builder: ...
		def build(self, ) -> javawrappers.java.util.stream.Stream: ...
		def andThen(self, arg0: javawrappers.java.util.function.Consumer, ) -> javawrappers.java.util.function.Consumer: ...
		def accept(self, arg0: javawrappers.java.lang.Object, ) -> None: ...


	@staticmethod
	def ofNullable(arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.stream.Stream: ...
	def sequential(self, ) -> javawrappers.java.util.stream.BaseStream: ...
	def takeWhile(self, arg0: javawrappers.java.util.function.Predicate, ) -> javawrappers.java.util.stream.Stream: ...
	def distinct(self, ) -> javawrappers.java.util.stream.Stream: ...
	def skip(self, arg0: Union[long, JLong], ) -> javawrappers.java.util.stream.Stream: ...
	def findFirst(self, ) -> javawrappers.java.util.Optional: ...
	def allMatch(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
	def andThen(self, arg0: javawrappers.java.util.function.Consumer, ) -> javawrappers.java.util.function.Consumer: ...
	@staticmethod
	def empty() -> javawrappers.java.util.stream.Stream: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def min(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Optional: ...
	def flatMapToInt(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.stream.IntStream: ...
	def flatMapToLong(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.stream.LongStream: ...
	def parallel(self, ) -> javawrappers.java.util.stream.BaseStream: ...
	def mapToLong(self, arg0: javawrappers.java.util.function.ToLongFunction, ) -> javawrappers.java.util.stream.LongStream: ...
	def findAny(self, ) -> javawrappers.java.util.Optional: ...
	def noneMatch(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def of(arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	@staticmethod
	def of(*arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.stream.Stream: ...
	def isParallel(self, ) -> Union[int, JBoolean]: ...
	@overload
	def toArray(self, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	@overload
	def toArray(self, arg0: javawrappers.java.util.function.IntFunction, ) -> JArray(javawrappers.java.lang.Object, 1): ...
	def limit(self, arg0: Union[long, JLong], ) -> javawrappers.java.util.stream.Stream: ...
	@staticmethod
	def builder() -> javawrappers.java.util.stream.Stream.Builder: ...
	def forEachOrdered(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def close(self, ) -> None: ...
	def map(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.stream.Stream: ...
	def anyMatch(self, arg0: javawrappers.java.util.function.Predicate, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def generate(arg0: javawrappers.java.util.function.Supplier, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	@staticmethod
	def iterate(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.UnaryOperator, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	@staticmethod
	def iterate(arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.Predicate, arg2: javawrappers.java.util.function.UnaryOperator, ) -> javawrappers.java.util.stream.Stream: ...
	def mapToDouble(self, arg0: javawrappers.java.util.function.ToDoubleFunction, ) -> javawrappers.java.util.stream.DoubleStream: ...
	def add(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.util.stream.Stream.Builder: ...
	def unordered(self, ) -> javawrappers.java.util.stream.BaseStream: ...
	@overload
	def reduce(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BiFunction, arg2: javawrappers.java.util.function.BinaryOperator, ) -> javawrappers.java.lang.Object: ...
	@overload
	def reduce(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.util.function.BinaryOperator, ) -> javawrappers.java.lang.Object: ...
	@overload
	def reduce(self, arg0: javawrappers.java.util.function.BinaryOperator, ) -> javawrappers.java.util.Optional: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def max(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.Optional: ...
	def forEach(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def count(self, ) -> Union[long, JLong]: ...
	@staticmethod
	def concat(arg0: javawrappers.java.util.stream.Stream, arg1: javawrappers.java.util.stream.Stream, ) -> javawrappers.java.util.stream.Stream: ...
	def dropWhile(self, arg0: javawrappers.java.util.function.Predicate, ) -> javawrappers.java.util.stream.Stream: ...
	def flatMapToDouble(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.stream.DoubleStream: ...
	def accept(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def peek(self, arg0: javawrappers.java.util.function.Consumer, ) -> javawrappers.java.util.stream.Stream: ...
	def flatMap(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.stream.Stream: ...
	def filter(self, arg0: javawrappers.java.util.function.Predicate, ) -> javawrappers.java.util.stream.Stream: ...
	def onClose(self, arg0: javawrappers.java.lang.Runnable, ) -> javawrappers.java.util.stream.BaseStream: ...
	@overload
	def sorted(self, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def sorted(self, arg0: javawrappers.java.util.Comparator, ) -> javawrappers.java.util.stream.Stream: ...
	def build(self, ) -> javawrappers.java.util.stream.Stream: ...
	def mapToInt(self, arg0: javawrappers.java.util.function.ToIntFunction, ) -> javawrappers.java.util.stream.IntStream: ...
	@overload
	def collect(self, arg0: javawrappers.java.util.stream.Collector, ) -> javawrappers.java.lang.Object: ...
	@overload
	def collect(self, arg0: javawrappers.java.util.function.Supplier, arg1: javawrappers.java.util.function.BiConsumer, arg2: javawrappers.java.util.function.BiConsumer, ) -> javawrappers.java.lang.Object: ...


class Collector:
	class Characteristics:
		CONCURRENT: Collector.Characteristics = ...
		UNORDERED: Collector.Characteristics = ...
		IDENTITY_FINISH: Collector.Characteristics = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.stream.Collector.Characteristics: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.java.util.stream.Collector.Characteristics, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def characteristics(self, ) -> javawrappers.java.util.Set: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.stream.Collector.Characteristics: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.util.stream.Collector.Characteristics, 1): ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def combiner(self, ) -> javawrappers.java.util.function.BinaryOperator: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def supplier(self, ) -> javawrappers.java.util.function.Supplier: ...
	@overload
	@staticmethod
	def of(arg0: javawrappers.java.util.function.Supplier, arg1: javawrappers.java.util.function.BiConsumer, arg2: javawrappers.java.util.function.BinaryOperator, *arg3: javawrappers.java.util.stream.Collector.Characteristics, ) -> javawrappers.java.util.stream.Collector: ...
	@overload
	@staticmethod
	def of(arg0: javawrappers.java.util.function.Supplier, arg1: javawrappers.java.util.function.BiConsumer, arg2: javawrappers.java.util.function.BinaryOperator, arg3: javawrappers.java.util.function.Function, *arg4: javawrappers.java.util.stream.Collector.Characteristics, ) -> javawrappers.java.util.stream.Collector: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def finisher(self, ) -> javawrappers.java.util.function.Function: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def accumulator(self, ) -> javawrappers.java.util.function.BiConsumer: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class BaseStream:
	def unordered(self, ) -> javawrappers.java.util.stream.BaseStream: ...
	def iterator(self, ) -> javawrappers.java.util.Iterator: ...
	def onClose(self, arg0: javawrappers.java.lang.Runnable, ) -> javawrappers.java.util.stream.BaseStream: ...
	def spliterator(self, ) -> javawrappers.java.util.Spliterator: ...
	def parallel(self, ) -> javawrappers.java.util.stream.BaseStream: ...
	def sequential(self, ) -> javawrappers.java.util.stream.BaseStream: ...
	def isParallel(self, ) -> Union[int, JBoolean]: ...
	def close(self, ) -> None: ...


