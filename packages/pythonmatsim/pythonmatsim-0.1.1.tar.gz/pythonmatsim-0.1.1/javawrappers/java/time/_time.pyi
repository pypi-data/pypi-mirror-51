################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.time
import javawrappers.java.util
import javawrappers.java.time.format
import javawrappers.java.io
import javawrappers.java.time.chrono
import javawrappers.java.util.stream
import javawrappers.java.time.zone
import javawrappers.java.time.temporal

from jpype.types import *
from typing import Union

from typing import overload

class Duration:
	class DurationUnits:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class Lazy:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def negated(self, ) -> javawrappers.java.time.Duration: ...
	def plusHours(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.Duration: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.time.Duration, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def multipliedBy(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.Duration: ...
	def plusSeconds(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.Duration: ...
	@staticmethod
	def from_(arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.Duration: ...
	def toMillis(self, ) -> Union[long, JLong]: ...
	def plusNanos(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.Duration: ...
	@staticmethod
	def ofMinutes(arg0: Union[long, JLong], ) -> javawrappers.java.time.Duration: ...
	@staticmethod
	def between(arg0: javawrappers.java.time.temporal.Temporal, arg1: javawrappers.java.time.temporal.Temporal, ) -> javawrappers.java.time.Duration: ...
	@overload
	@staticmethod
	def ofSeconds(arg0: Union[long, JLong], ) -> javawrappers.java.time.Duration: ...
	@overload
	@staticmethod
	def ofSeconds(arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.java.time.Duration: ...
	def truncatedTo(self, arg0: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.Duration: ...
	def getNano(self, ) -> Union[int, JInt]: ...
	def minusNanos(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.Duration: ...
	def toMillisPart(self, ) -> Union[int, JInt]: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.Duration, ) -> javawrappers.java.time.Duration: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.Duration: ...
	def toNanos(self, ) -> Union[long, JLong]: ...
	def toMinutesPart(self, ) -> Union[int, JInt]: ...
	def toMinutes(self, ) -> Union[long, JLong]: ...
	def toHours(self, ) -> Union[long, JLong]: ...
	def plusMillis(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.Duration: ...
	def subtractFrom(self, arg0: javawrappers.java.time.temporal.Temporal, ) -> javawrappers.java.time.temporal.Temporal: ...
	def toSecondsPart(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def ofMillis(arg0: Union[long, JLong], ) -> javawrappers.java.time.Duration: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.Duration: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.Duration, ) -> javawrappers.java.time.Duration: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def minusHours(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.Duration: ...
	def notifyAll(self, ) -> None: ...
	def withSeconds(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.Duration: ...
	def minusMillis(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.Duration: ...
	def plusMinutes(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.Duration: ...
	def notify(self, ) -> None: ...
	def toSeconds(self, ) -> Union[long, JLong]: ...
	def minusMinutes(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.Duration: ...
	def plusDays(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.Duration: ...
	@overload
	def dividedBy(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.Duration: ...
	@overload
	def dividedBy(self, arg0: javawrappers.java.time.Duration, ) -> Union[long, JLong]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def of(arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.Duration: ...
	def get(self, arg0: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[long, JLong]: ...
	def isZero(self, ) -> Union[int, JBoolean]: ...
	def toDays(self, ) -> Union[long, JLong]: ...
	def toNanosPart(self, ) -> Union[int, JInt]: ...
	def isNegative(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def ofDays(arg0: Union[long, JLong], ) -> javawrappers.java.time.Duration: ...
	@staticmethod
	def parse(arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.time.Duration: ...
	def minusDays(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.Duration: ...
	def toHoursPart(self, ) -> Union[int, JInt]: ...
	def toDaysPart(self, ) -> Union[long, JLong]: ...
	@staticmethod
	def ofNanos(arg0: Union[long, JLong], ) -> javawrappers.java.time.Duration: ...
	def abs(self, ) -> javawrappers.java.time.Duration: ...
	def getSeconds(self, ) -> Union[long, JLong]: ...
	@staticmethod
	def ofHours(arg0: Union[long, JLong], ) -> javawrappers.java.time.Duration: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def withNanos(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.Duration: ...
	def getUnits(self, ) -> javawrappers.java.util.List: ...
	def addTo(self, arg0: javawrappers.java.time.temporal.Temporal, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def minusSeconds(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.Duration: ...


class ZonedDateTime:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def plusHours(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.ZonedDateTime: ...
	def isEqual(self, arg0: javawrappers.java.time.chrono.ChronoZonedDateTime, ) -> Union[int, JBoolean]: ...
	def toLocalTime(self, ) -> javawrappers.java.time.LocalTime: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.time.chrono.ChronoZonedDateTime, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@staticmethod
	def ofLocal(arg0: javawrappers.java.time.LocalDateTime, arg1: javawrappers.java.time.ZoneId, arg2: javawrappers.java.time.ZoneOffset, ) -> javawrappers.java.time.ZonedDateTime: ...
	def getDayOfWeek(self, ) -> javawrappers.java.time.DayOfWeek: ...
	@staticmethod
	def ofStrict(arg0: javawrappers.java.time.LocalDateTime, arg1: javawrappers.java.time.ZoneOffset, arg2: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.ZonedDateTime: ...
	def getMinute(self, ) -> Union[int, JInt]: ...
	def plusSeconds(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.ZonedDateTime: ...
	@staticmethod
	def from_(arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.ZonedDateTime: ...
	def plusNanos(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.ZonedDateTime: ...
	def getMonth(self, ) -> javawrappers.java.time.Month: ...
	def withHour(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.ZonedDateTime: ...
	def plusMonths(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.ZonedDateTime: ...
	def query(self, arg0: javawrappers.java.time.temporal.TemporalQuery, ) -> javawrappers.java.lang.Object: ...
	def plusYears(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.ZonedDateTime: ...
	def truncatedTo(self, arg0: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.ZonedDateTime: ...
	def format(self, arg0: javawrappers.java.time.format.DateTimeFormatter, ) -> javawrappers.java.lang.String: ...
	def getNano(self, ) -> Union[int, JInt]: ...
	def minusNanos(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.ZonedDateTime: ...
	def getZone(self, ) -> javawrappers.java.time.ZoneId: ...
	@overload
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[int, JBoolean]: ...
	@overload
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JBoolean]: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.ZonedDateTime: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.ZonedDateTime: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	def getYear(self, ) -> Union[int, JInt]: ...
	def toEpochSecond(self, ) -> Union[long, JLong]: ...
	@overload
	def toLocalDateTime(self, ) -> javawrappers.java.time.LocalDateTime: ...
	@overload
	def toLocalDateTime(self, ) -> javawrappers.java.time.chrono.ChronoLocalDateTime: ...
	def withDayOfMonth(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.ZonedDateTime: ...
	def isAfter(self, arg0: javawrappers.java.time.chrono.ChronoZonedDateTime, ) -> Union[int, JBoolean]: ...
	def withMonth(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.ZonedDateTime: ...
	def toOffsetDateTime(self, ) -> javawrappers.java.time.OffsetDateTime: ...
	@overload
	@staticmethod
	def ofInstant(arg0: javawrappers.java.time.LocalDateTime, arg1: javawrappers.java.time.ZoneOffset, arg2: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.ZonedDateTime: ...
	@overload
	@staticmethod
	def ofInstant(arg0: javawrappers.java.time.Instant, arg1: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.ZonedDateTime: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.ZonedDateTime: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.ZonedDateTime: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def withFixedOffsetZone(self, ) -> javawrappers.java.time.ZonedDateTime: ...
	def minusHours(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.ZonedDateTime: ...
	def notifyAll(self, ) -> None: ...
	def getOffset(self, ) -> javawrappers.java.time.ZoneOffset: ...
	def range(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> javawrappers.java.time.temporal.ValueRange: ...
	def withYear(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.ZonedDateTime: ...
	def plusMinutes(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.ZonedDateTime: ...
	def notify(self, ) -> None: ...
	def minusMinutes(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.ZonedDateTime: ...
	def plusDays(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.ZonedDateTime: ...
	@overload
	def withLaterOffsetAtOverlap(self, ) -> javawrappers.java.time.ZonedDateTime: ...
	@overload
	def withLaterOffsetAtOverlap(self, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def now(arg0: javawrappers.java.time.Clock, ) -> javawrappers.java.time.ZonedDateTime: ...
	@overload
	@staticmethod
	def now(arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.ZonedDateTime: ...
	@overload
	@staticmethod
	def now() -> javawrappers.java.time.ZonedDateTime: ...
	@overload
	@staticmethod
	def of(arg0: javawrappers.java.time.LocalDateTime, arg1: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.ZonedDateTime: ...
	@overload
	@staticmethod
	def of(arg0: javawrappers.java.time.LocalDate, arg1: javawrappers.java.time.LocalTime, arg2: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.ZonedDateTime: ...
	@overload
	@staticmethod
	def of(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.ZonedDateTime: ...
	def get(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JInt]: ...
	@overload
	def withZoneSameLocal(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	@overload
	def withZoneSameLocal(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.ZonedDateTime: ...
	@overload
	def withEarlierOffsetAtOverlap(self, ) -> javawrappers.java.time.ZonedDateTime: ...
	@overload
	def withEarlierOffsetAtOverlap(self, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	def getDayOfYear(self, ) -> Union[int, JInt]: ...
	def getHour(self, ) -> Union[int, JInt]: ...
	def plusWeeks(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.ZonedDateTime: ...
	def getChronology(self, ) -> javawrappers.java.time.chrono.Chronology: ...
	def withMinute(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.ZonedDateTime: ...
	def getMonthValue(self, ) -> Union[int, JInt]: ...
	def minusYears(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.ZonedDateTime: ...
	@overload
	def withZoneSameInstant(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.ZonedDateTime: ...
	@overload
	def withZoneSameInstant(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	def minusWeeks(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.ZonedDateTime: ...
	def withDayOfYear(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.ZonedDateTime: ...
	@overload
	@staticmethod
	def parse(arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.time.format.DateTimeFormatter, ) -> javawrappers.java.time.ZonedDateTime: ...
	@overload
	@staticmethod
	def parse(arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.time.ZonedDateTime: ...
	def toInstant(self, ) -> javawrappers.java.time.Instant: ...
	def isBefore(self, arg0: javawrappers.java.time.chrono.ChronoZonedDateTime, ) -> Union[int, JBoolean]: ...
	def minusDays(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.ZonedDateTime: ...
	def getLong(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[long, JLong]: ...
	def withNano(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.ZonedDateTime: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.ZonedDateTime: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.ZonedDateTime: ...
	def minusMonths(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.ZonedDateTime: ...
	@overload
	def toLocalDate(self, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def toLocalDate(self, ) -> javawrappers.java.time.LocalDate: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSecond(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def until(self, arg0: javawrappers.java.time.temporal.Temporal, arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[long, JLong]: ...
	def getDayOfMonth(self, ) -> Union[int, JInt]: ...
	def minusSeconds(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.ZonedDateTime: ...
	def withSecond(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.ZonedDateTime: ...


class Clock:
	class TickClock:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def withZone(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Clock: ...
		@staticmethod
		def offset(arg0: javawrappers.java.time.Clock, arg1: javawrappers.java.time.Duration, ) -> javawrappers.java.time.Clock: ...
		@staticmethod
		def tickMinutes(arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Clock: ...
		@staticmethod
		def tickMillis(arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Clock: ...
		def notifyAll(self, ) -> None: ...
		def getZone(self, ) -> javawrappers.java.time.ZoneId: ...
		@staticmethod
		def tick(arg0: javawrappers.java.time.Clock, arg1: javawrappers.java.time.Duration, ) -> javawrappers.java.time.Clock: ...
		def notify(self, ) -> None: ...
		def instant(self, ) -> javawrappers.java.time.Instant: ...
		@staticmethod
		def system(arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Clock: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def tickSeconds(arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Clock: ...
		@staticmethod
		def systemDefaultZone() -> javawrappers.java.time.Clock: ...
		@staticmethod
		def systemUTC() -> javawrappers.java.time.Clock: ...
		@staticmethod
		def fixed(arg0: javawrappers.java.time.Instant, arg1: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Clock: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def millis(self, ) -> Union[long, JLong]: ...


	class OffsetClock:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def withZone(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Clock: ...
		@staticmethod
		def offset(arg0: javawrappers.java.time.Clock, arg1: javawrappers.java.time.Duration, ) -> javawrappers.java.time.Clock: ...
		@staticmethod
		def tickMinutes(arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Clock: ...
		@staticmethod
		def tickMillis(arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Clock: ...
		def notifyAll(self, ) -> None: ...
		def getZone(self, ) -> javawrappers.java.time.ZoneId: ...
		@staticmethod
		def tick(arg0: javawrappers.java.time.Clock, arg1: javawrappers.java.time.Duration, ) -> javawrappers.java.time.Clock: ...
		def notify(self, ) -> None: ...
		def instant(self, ) -> javawrappers.java.time.Instant: ...
		@staticmethod
		def system(arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Clock: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def tickSeconds(arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Clock: ...
		@staticmethod
		def systemDefaultZone() -> javawrappers.java.time.Clock: ...
		@staticmethod
		def systemUTC() -> javawrappers.java.time.Clock: ...
		@staticmethod
		def fixed(arg0: javawrappers.java.time.Instant, arg1: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Clock: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def millis(self, ) -> Union[long, JLong]: ...


	class FixedClock:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def withZone(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Clock: ...
		@staticmethod
		def offset(arg0: javawrappers.java.time.Clock, arg1: javawrappers.java.time.Duration, ) -> javawrappers.java.time.Clock: ...
		@staticmethod
		def tickMinutes(arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Clock: ...
		@staticmethod
		def tickMillis(arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Clock: ...
		def notifyAll(self, ) -> None: ...
		def getZone(self, ) -> javawrappers.java.time.ZoneId: ...
		@staticmethod
		def tick(arg0: javawrappers.java.time.Clock, arg1: javawrappers.java.time.Duration, ) -> javawrappers.java.time.Clock: ...
		def notify(self, ) -> None: ...
		def instant(self, ) -> javawrappers.java.time.Instant: ...
		@staticmethod
		def system(arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Clock: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def tickSeconds(arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Clock: ...
		@staticmethod
		def systemDefaultZone() -> javawrappers.java.time.Clock: ...
		@staticmethod
		def systemUTC() -> javawrappers.java.time.Clock: ...
		@staticmethod
		def fixed(arg0: javawrappers.java.time.Instant, arg1: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Clock: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def millis(self, ) -> Union[long, JLong]: ...


	class SystemClock:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def withZone(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Clock: ...
		@staticmethod
		def offset(arg0: javawrappers.java.time.Clock, arg1: javawrappers.java.time.Duration, ) -> javawrappers.java.time.Clock: ...
		@staticmethod
		def tickMinutes(arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Clock: ...
		@staticmethod
		def tickMillis(arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Clock: ...
		def notifyAll(self, ) -> None: ...
		def getZone(self, ) -> javawrappers.java.time.ZoneId: ...
		@staticmethod
		def tick(arg0: javawrappers.java.time.Clock, arg1: javawrappers.java.time.Duration, ) -> javawrappers.java.time.Clock: ...
		def notify(self, ) -> None: ...
		def instant(self, ) -> javawrappers.java.time.Instant: ...
		@staticmethod
		def system(arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Clock: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def tickSeconds(arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Clock: ...
		@staticmethod
		def systemDefaultZone() -> javawrappers.java.time.Clock: ...
		@staticmethod
		def systemUTC() -> javawrappers.java.time.Clock: ...
		@staticmethod
		def fixed(arg0: javawrappers.java.time.Instant, arg1: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Clock: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def millis(self, ) -> Union[long, JLong]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def withZone(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Clock: ...
	@overload
	def withZone(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Clock: ...
	@overload
	def withZone(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Clock: ...
	@overload
	def withZone(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Clock: ...
	@overload
	def withZone(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Clock: ...
	@staticmethod
	def offset(arg0: javawrappers.java.time.Clock, arg1: javawrappers.java.time.Duration, ) -> javawrappers.java.time.Clock: ...
	@staticmethod
	def tickMinutes(arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Clock: ...
	@staticmethod
	def tickMillis(arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Clock: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getZone(self, ) -> javawrappers.java.time.ZoneId: ...
	@overload
	def getZone(self, ) -> javawrappers.java.time.ZoneId: ...
	@overload
	def getZone(self, ) -> javawrappers.java.time.ZoneId: ...
	@overload
	def getZone(self, ) -> javawrappers.java.time.ZoneId: ...
	@overload
	def getZone(self, ) -> javawrappers.java.time.ZoneId: ...
	@staticmethod
	def tick(arg0: javawrappers.java.time.Clock, arg1: javawrappers.java.time.Duration, ) -> javawrappers.java.time.Clock: ...
	def notify(self, ) -> None: ...
	@overload
	def instant(self, ) -> javawrappers.java.time.Instant: ...
	@overload
	def instant(self, ) -> javawrappers.java.time.Instant: ...
	@overload
	def instant(self, ) -> javawrappers.java.time.Instant: ...
	@overload
	def instant(self, ) -> javawrappers.java.time.Instant: ...
	@overload
	def instant(self, ) -> javawrappers.java.time.Instant: ...
	@staticmethod
	def system(arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Clock: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def tickSeconds(arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Clock: ...
	@staticmethod
	def systemDefaultZone() -> javawrappers.java.time.Clock: ...
	@staticmethod
	def systemUTC() -> javawrappers.java.time.Clock: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def fixed(arg0: javawrappers.java.time.Instant, arg1: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Clock: ...
	@overload
	def millis(self, ) -> Union[long, JLong]: ...
	@overload
	def millis(self, ) -> Union[long, JLong]: ...
	@overload
	def millis(self, ) -> Union[long, JLong]: ...
	@overload
	def millis(self, ) -> Union[long, JLong]: ...
	@overload
	def millis(self, ) -> Union[long, JLong]: ...


class Instant:
	@overload
	@staticmethod
	def ofEpochSecond(arg0: Union[long, JLong], arg1: Union[long, JLong], ) -> javawrappers.java.time.Instant: ...
	@overload
	@staticmethod
	def ofEpochSecond(arg0: Union[long, JLong], ) -> javawrappers.java.time.Instant: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.Instant: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.Instant: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def ofEpochMilli(arg0: Union[long, JLong], ) -> javawrappers.java.time.Instant: ...
	def adjustInto(self, arg0: javawrappers.java.time.temporal.Temporal, ) -> javawrappers.java.time.temporal.Temporal: ...
	def range(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> javawrappers.java.time.temporal.ValueRange: ...
	def minusMillis(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.Instant: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.time.Instant, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def now() -> javawrappers.java.time.Instant: ...
	@overload
	@staticmethod
	def now(arg0: javawrappers.java.time.Clock, ) -> javawrappers.java.time.Instant: ...
	def get(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JInt]: ...
	def plusSeconds(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.Instant: ...
	@staticmethod
	def from_(arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.Instant: ...
	def plusNanos(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.Instant: ...
	def query(self, arg0: javawrappers.java.time.temporal.TemporalQuery, ) -> javawrappers.java.lang.Object: ...
	def atOffset(self, arg0: javawrappers.java.time.ZoneOffset, ) -> javawrappers.java.time.OffsetDateTime: ...
	def truncatedTo(self, arg0: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.Instant: ...
	def getNano(self, ) -> Union[int, JInt]: ...
	def minusNanos(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.Instant: ...
	def toEpochMilli(self, ) -> Union[long, JLong]: ...
	@staticmethod
	def parse(arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.time.Instant: ...
	@overload
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[int, JBoolean]: ...
	@overload
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JBoolean]: ...
	def atZone(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.ZonedDateTime: ...
	def isBefore(self, arg0: javawrappers.java.time.Instant, ) -> Union[int, JBoolean]: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.Instant: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.Instant: ...
	def getLong(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[long, JLong]: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.Instant: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.Instant: ...
	def plusMillis(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.Instant: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def until(self, arg0: javawrappers.java.time.temporal.Temporal, arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[long, JLong]: ...
	def minusSeconds(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.Instant: ...
	def getEpochSecond(self, ) -> Union[long, JLong]: ...
	def isAfter(self, arg0: javawrappers.java.time.Instant, ) -> Union[int, JBoolean]: ...


class LocalDate:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def atStartOfDay(self, ) -> javawrappers.java.time.LocalDateTime: ...
	@overload
	def atStartOfDay(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.ZonedDateTime: ...
	def toEpochDay(self, ) -> Union[long, JLong]: ...
	def isEqual(self, arg0: javawrappers.java.time.chrono.ChronoLocalDate, ) -> Union[int, JBoolean]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.time.chrono.ChronoLocalDate, ) -> Union[int, JInt]: ...
	def getDayOfWeek(self, ) -> javawrappers.java.time.DayOfWeek: ...
	def lengthOfMonth(self, ) -> Union[int, JInt]: ...
	@overload
	def getEra(self, ) -> javawrappers.java.time.chrono.Era: ...
	@overload
	def getEra(self, ) -> javawrappers.java.time.chrono.IsoEra: ...
	@staticmethod
	def from_(arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.LocalDate: ...
	@staticmethod
	def ofYearDay(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.time.LocalDate: ...
	def getMonth(self, ) -> javawrappers.java.time.Month: ...
	def plusMonths(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalDate: ...
	def query(self, arg0: javawrappers.java.time.temporal.TemporalQuery, ) -> javawrappers.java.lang.Object: ...
	def plusYears(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalDate: ...
	def format(self, arg0: javawrappers.java.time.format.DateTimeFormatter, ) -> javawrappers.java.lang.String: ...
	@overload
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[int, JBoolean]: ...
	@overload
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JBoolean]: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.LocalDate: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.LocalDate: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def atTime(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.java.time.LocalDateTime: ...
	@overload
	def atTime(self, arg0: javawrappers.java.time.OffsetTime, ) -> javawrappers.java.time.OffsetDateTime: ...
	@overload
	def atTime(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.time.LocalDateTime: ...
	@overload
	def atTime(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.LocalDateTime: ...
	@overload
	def atTime(self, arg0: javawrappers.java.time.LocalTime, ) -> javawrappers.java.time.chrono.ChronoLocalDateTime: ...
	@overload
	def atTime(self, arg0: javawrappers.java.time.LocalTime, ) -> javawrappers.java.time.LocalDateTime: ...
	def getYear(self, ) -> Union[int, JInt]: ...
	def toEpochSecond(self, arg0: javawrappers.java.time.LocalTime, arg1: javawrappers.java.time.ZoneOffset, ) -> Union[long, JLong]: ...
	def withDayOfMonth(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.LocalDate: ...
	def withMonth(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.LocalDate: ...
	def isAfter(self, arg0: javawrappers.java.time.chrono.ChronoLocalDate, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def ofInstant(arg0: javawrappers.java.time.Instant, arg1: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.LocalDate: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.LocalDate: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.LocalDate: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def datesUntil(self, arg0: javawrappers.java.time.LocalDate, arg1: javawrappers.java.time.Period, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def datesUntil(self, arg0: javawrappers.java.time.LocalDate, ) -> javawrappers.java.util.stream.Stream: ...
	def notifyAll(self, ) -> None: ...
	def adjustInto(self, arg0: javawrappers.java.time.temporal.Temporal, ) -> javawrappers.java.time.temporal.Temporal: ...
	def range(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> javawrappers.java.time.temporal.ValueRange: ...
	def withYear(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.LocalDate: ...
	def notify(self, ) -> None: ...
	def lengthOfYear(self, ) -> Union[int, JInt]: ...
	def plusDays(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalDate: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def now(arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.LocalDate: ...
	@overload
	@staticmethod
	def now() -> javawrappers.java.time.LocalDate: ...
	@overload
	@staticmethod
	def now(arg0: javawrappers.java.time.Clock, ) -> javawrappers.java.time.LocalDate: ...
	@overload
	@staticmethod
	def of(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.LocalDate: ...
	@overload
	@staticmethod
	def of(arg0: Union[int, JInt], arg1: javawrappers.java.time.Month, arg2: Union[int, JInt], ) -> javawrappers.java.time.LocalDate: ...
	def get(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JInt]: ...
	def getDayOfYear(self, ) -> Union[int, JInt]: ...
	def plusWeeks(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalDate: ...
	@overload
	def getChronology(self, ) -> javawrappers.java.time.chrono.Chronology: ...
	@overload
	def getChronology(self, ) -> javawrappers.java.time.chrono.IsoChronology: ...
	@staticmethod
	def ofEpochDay(arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalDate: ...
	def getMonthValue(self, ) -> Union[int, JInt]: ...
	def minusYears(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalDate: ...
	def minusWeeks(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalDate: ...
	def withDayOfYear(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.LocalDate: ...
	def isLeapYear(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def parse(arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.time.format.DateTimeFormatter, ) -> javawrappers.java.time.LocalDate: ...
	@overload
	@staticmethod
	def parse(arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.time.LocalDate: ...
	def isBefore(self, arg0: javawrappers.java.time.chrono.ChronoLocalDate, ) -> Union[int, JBoolean]: ...
	def minusDays(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalDate: ...
	def getLong(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[long, JLong]: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.LocalDate: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.LocalDate: ...
	def minusMonths(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalDate: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def until(self, arg0: javawrappers.java.time.temporal.Temporal, arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[long, JLong]: ...
	@overload
	def until(self, arg0: javawrappers.java.time.chrono.ChronoLocalDate, ) -> javawrappers.java.time.Period: ...
	@overload
	def until(self, arg0: javawrappers.java.time.chrono.ChronoLocalDate, ) -> javawrappers.java.time.chrono.ChronoPeriod: ...
	def getDayOfMonth(self, ) -> Union[int, JInt]: ...


class MonthDay:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def atYear(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.LocalDate: ...
	def notifyAll(self, ) -> None: ...
	def adjustInto(self, arg0: javawrappers.java.time.temporal.Temporal, ) -> javawrappers.java.time.temporal.Temporal: ...
	def range(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> javawrappers.java.time.temporal.ValueRange: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.time.MonthDay, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def now() -> javawrappers.java.time.MonthDay: ...
	@overload
	@staticmethod
	def now(arg0: javawrappers.java.time.Clock, ) -> javawrappers.java.time.MonthDay: ...
	@overload
	@staticmethod
	def now(arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.MonthDay: ...
	@overload
	@staticmethod
	def of(arg0: javawrappers.java.time.Month, arg1: Union[int, JInt], ) -> javawrappers.java.time.MonthDay: ...
	@overload
	@staticmethod
	def of(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.time.MonthDay: ...
	def get(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JInt]: ...
	@staticmethod
	def from_(arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.MonthDay: ...
	def getMonth(self, ) -> javawrappers.java.time.Month: ...
	def isValidYear(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	def getMonthValue(self, ) -> Union[int, JInt]: ...
	def query(self, arg0: javawrappers.java.time.temporal.TemporalQuery, ) -> javawrappers.java.lang.Object: ...
	def format(self, arg0: javawrappers.java.time.format.DateTimeFormatter, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def parse(arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.time.format.DateTimeFormatter, ) -> javawrappers.java.time.MonthDay: ...
	@overload
	@staticmethod
	def parse(arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.time.MonthDay: ...
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JBoolean]: ...
	def isBefore(self, arg0: javawrappers.java.time.MonthDay, ) -> Union[int, JBoolean]: ...
	def getLong(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[long, JLong]: ...
	def with(self, arg0: javawrappers.java.time.Month, ) -> javawrappers.java.time.MonthDay: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getDayOfMonth(self, ) -> Union[int, JInt]: ...
	def withDayOfMonth(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.MonthDay: ...
	def withMonth(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.MonthDay: ...
	def isAfter(self, arg0: javawrappers.java.time.MonthDay, ) -> Union[int, JBoolean]: ...


class Year:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.Year: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.Year: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def adjustInto(self, arg0: javawrappers.java.time.temporal.Temporal, ) -> javawrappers.java.time.temporal.Temporal: ...
	def range(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> javawrappers.java.time.temporal.ValueRange: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.time.Year, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	def atMonth(self, arg0: javawrappers.java.time.Month, ) -> javawrappers.java.time.YearMonth: ...
	@overload
	def atMonth(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.YearMonth: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def now(arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.Year: ...
	@overload
	@staticmethod
	def now() -> javawrappers.java.time.Year: ...
	@overload
	@staticmethod
	def now(arg0: javawrappers.java.time.Clock, ) -> javawrappers.java.time.Year: ...
	@staticmethod
	def of(arg0: Union[int, JInt], ) -> javawrappers.java.time.Year: ...
	def get(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JInt]: ...
	@overload
	def isLeap(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def isLeap(arg0: Union[long, JLong], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def from_(arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.Year: ...
	def atMonthDay(self, arg0: javawrappers.java.time.MonthDay, ) -> javawrappers.java.time.LocalDate: ...
	def atDay(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.LocalDate: ...
	def minusYears(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.Year: ...
	def query(self, arg0: javawrappers.java.time.temporal.TemporalQuery, ) -> javawrappers.java.lang.Object: ...
	def plusYears(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.Year: ...
	def format(self, arg0: javawrappers.java.time.format.DateTimeFormatter, ) -> javawrappers.java.lang.String: ...
	def length(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def parse(arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.time.format.DateTimeFormatter, ) -> javawrappers.java.time.Year: ...
	@overload
	@staticmethod
	def parse(arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.time.Year: ...
	@overload
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[int, JBoolean]: ...
	@overload
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JBoolean]: ...
	def isValidMonthDay(self, arg0: javawrappers.java.time.MonthDay, ) -> Union[int, JBoolean]: ...
	def isBefore(self, arg0: javawrappers.java.time.Year, ) -> Union[int, JBoolean]: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.Year: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.Year: ...
	def getLong(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[long, JLong]: ...
	def getValue(self, ) -> Union[int, JInt]: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.Year: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.Year: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.temporal.Temporal: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def until(self, arg0: javawrappers.java.time.temporal.Temporal, arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[long, JLong]: ...
	def isAfter(self, arg0: javawrappers.java.time.Year, ) -> Union[int, JBoolean]: ...


class OffsetDateTime:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def plusHours(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.OffsetDateTime: ...
	def isEqual(self, arg0: javawrappers.java.time.OffsetDateTime, ) -> Union[int, JBoolean]: ...
	def toLocalTime(self, ) -> javawrappers.java.time.LocalTime: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.time.OffsetDateTime, ) -> Union[int, JInt]: ...
	def withOffsetSameLocal(self, arg0: javawrappers.java.time.ZoneOffset, ) -> javawrappers.java.time.OffsetDateTime: ...
	def getDayOfWeek(self, ) -> javawrappers.java.time.DayOfWeek: ...
	def getMinute(self, ) -> Union[int, JInt]: ...
	def plusSeconds(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.OffsetDateTime: ...
	@staticmethod
	def from_(arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.OffsetDateTime: ...
	def plusNanos(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.OffsetDateTime: ...
	def getMonth(self, ) -> javawrappers.java.time.Month: ...
	def atZoneSameInstant(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.ZonedDateTime: ...
	def withHour(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.OffsetDateTime: ...
	def plusMonths(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.OffsetDateTime: ...
	def query(self, arg0: javawrappers.java.time.temporal.TemporalQuery, ) -> javawrappers.java.lang.Object: ...
	def plusYears(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.OffsetDateTime: ...
	def truncatedTo(self, arg0: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.OffsetDateTime: ...
	def format(self, arg0: javawrappers.java.time.format.DateTimeFormatter, ) -> javawrappers.java.lang.String: ...
	def getNano(self, ) -> Union[int, JInt]: ...
	def minusNanos(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.OffsetDateTime: ...
	@overload
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JBoolean]: ...
	@overload
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[int, JBoolean]: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.OffsetDateTime: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.OffsetDateTime: ...
	def getYear(self, ) -> Union[int, JInt]: ...
	def toEpochSecond(self, ) -> Union[long, JLong]: ...
	def toLocalDateTime(self, ) -> javawrappers.java.time.LocalDateTime: ...
	def withDayOfMonth(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.OffsetDateTime: ...
	def withMonth(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.OffsetDateTime: ...
	def isAfter(self, arg0: javawrappers.java.time.OffsetDateTime, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def ofInstant(arg0: javawrappers.java.time.Instant, arg1: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.OffsetDateTime: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.OffsetDateTime: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.OffsetDateTime: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def toOffsetTime(self, ) -> javawrappers.java.time.OffsetTime: ...
	def minusHours(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.OffsetDateTime: ...
	def notifyAll(self, ) -> None: ...
	def getOffset(self, ) -> javawrappers.java.time.ZoneOffset: ...
	def adjustInto(self, arg0: javawrappers.java.time.temporal.Temporal, ) -> javawrappers.java.time.temporal.Temporal: ...
	def range(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> javawrappers.java.time.temporal.ValueRange: ...
	def withYear(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.OffsetDateTime: ...
	def plusMinutes(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.OffsetDateTime: ...
	def notify(self, ) -> None: ...
	def minusMinutes(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.OffsetDateTime: ...
	def plusDays(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.OffsetDateTime: ...
	def atZoneSimilarLocal(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.ZonedDateTime: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def now() -> javawrappers.java.time.OffsetDateTime: ...
	@overload
	@staticmethod
	def now(arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.OffsetDateTime: ...
	@overload
	@staticmethod
	def now(arg0: javawrappers.java.time.Clock, ) -> javawrappers.java.time.OffsetDateTime: ...
	@overload
	@staticmethod
	def of(arg0: javawrappers.java.time.LocalDateTime, arg1: javawrappers.java.time.ZoneOffset, ) -> javawrappers.java.time.OffsetDateTime: ...
	@overload
	@staticmethod
	def of(arg0: javawrappers.java.time.LocalDate, arg1: javawrappers.java.time.LocalTime, arg2: javawrappers.java.time.ZoneOffset, ) -> javawrappers.java.time.OffsetDateTime: ...
	@overload
	@staticmethod
	def of(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: javawrappers.java.time.ZoneOffset, ) -> javawrappers.java.time.OffsetDateTime: ...
	def get(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JInt]: ...
	def getDayOfYear(self, ) -> Union[int, JInt]: ...
	def getHour(self, ) -> Union[int, JInt]: ...
	def plusWeeks(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.OffsetDateTime: ...
	def withMinute(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.OffsetDateTime: ...
	def getMonthValue(self, ) -> Union[int, JInt]: ...
	def toZonedDateTime(self, ) -> javawrappers.java.time.ZonedDateTime: ...
	def minusYears(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.OffsetDateTime: ...
	def minusWeeks(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.OffsetDateTime: ...
	def withDayOfYear(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.OffsetDateTime: ...
	@overload
	@staticmethod
	def parse(arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.time.format.DateTimeFormatter, ) -> javawrappers.java.time.OffsetDateTime: ...
	@overload
	@staticmethod
	def parse(arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.time.OffsetDateTime: ...
	def toInstant(self, ) -> javawrappers.java.time.Instant: ...
	def isBefore(self, arg0: javawrappers.java.time.OffsetDateTime, ) -> Union[int, JBoolean]: ...
	def minusDays(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.OffsetDateTime: ...
	def getLong(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[long, JLong]: ...
	def withNano(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.OffsetDateTime: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.OffsetDateTime: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.OffsetDateTime: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.temporal.Temporal: ...
	def minusMonths(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.OffsetDateTime: ...
	def toLocalDate(self, ) -> javawrappers.java.time.LocalDate: ...
	def withOffsetSameInstant(self, arg0: javawrappers.java.time.ZoneOffset, ) -> javawrappers.java.time.OffsetDateTime: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSecond(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def timeLineOrder() -> javawrappers.java.util.Comparator: ...
	def until(self, arg0: javawrappers.java.time.temporal.Temporal, arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[long, JLong]: ...
	def getDayOfMonth(self, ) -> Union[int, JInt]: ...
	def minusSeconds(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.OffsetDateTime: ...
	def withSecond(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.OffsetDateTime: ...


class ZoneOffset:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def normalized(self, ) -> javawrappers.java.time.ZoneId: ...
	def notifyAll(self, ) -> None: ...
	def adjustInto(self, arg0: javawrappers.java.time.temporal.Temporal, ) -> javawrappers.java.time.temporal.Temporal: ...
	def range(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> javawrappers.java.time.temporal.ValueRange: ...
	def getId(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.time.ZoneOffset, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def systemDefault() -> javawrappers.java.time.ZoneId: ...
	@staticmethod
	def getAvailableZoneIds() -> javawrappers.java.util.Set: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def of(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.time.ZoneId: ...
	@overload
	@staticmethod
	def of(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Map, ) -> javawrappers.java.time.ZoneId: ...
	@overload
	@staticmethod
	def of(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.time.ZoneOffset: ...
	def get(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def from_(arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.ZoneOffset: ...
	@overload
	@staticmethod
	def from_(arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.ZoneId: ...
	def getRules(self, ) -> javawrappers.java.time.zone.ZoneRules: ...
	def getTotalSeconds(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def ofHoursMinutes(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.time.ZoneOffset: ...
	def query(self, arg0: javawrappers.java.time.temporal.TemporalQuery, ) -> javawrappers.java.lang.Object: ...
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def ofOffset(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.time.ZoneOffset, ) -> javawrappers.java.time.ZoneId: ...
	def getLong(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[long, JLong]: ...
	@staticmethod
	def ofHours(arg0: Union[int, JInt], ) -> javawrappers.java.time.ZoneOffset: ...
	def getDisplayName(self, arg0: javawrappers.java.time.format.TextStyle, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def ofHoursMinutesSeconds(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.ZoneOffset: ...
	@staticmethod
	def ofTotalSeconds(arg0: Union[int, JInt], ) -> javawrappers.java.time.ZoneOffset: ...


class Period:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.chrono.ChronoPeriod: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.Period: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def negated(self, ) -> javawrappers.java.time.chrono.ChronoPeriod: ...
	@overload
	def negated(self, ) -> javawrappers.java.time.Period: ...
	@overload
	def normalized(self, ) -> javawrappers.java.time.chrono.ChronoPeriod: ...
	@overload
	def normalized(self, ) -> javawrappers.java.time.Period: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def ofYears(arg0: Union[int, JInt], ) -> javawrappers.java.time.Period: ...
	def notify(self, ) -> None: ...
	def getMonths(self, ) -> Union[int, JInt]: ...
	def plusDays(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.Period: ...
	@overload
	def multipliedBy(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.Period: ...
	@overload
	def multipliedBy(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.chrono.ChronoPeriod: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getYears(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def of(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.Period: ...
	def get(self, arg0: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[long, JLong]: ...
	def isZero(self, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def from_(arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.Period: ...
	def withDays(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.Period: ...
	@overload
	def getChronology(self, ) -> javawrappers.java.time.chrono.IsoChronology: ...
	@overload
	def getChronology(self, ) -> javawrappers.java.time.chrono.Chronology: ...
	@staticmethod
	def between(arg0: javawrappers.java.time.LocalDate, arg1: javawrappers.java.time.LocalDate, ) -> javawrappers.java.time.Period: ...
	def isNegative(self, ) -> Union[int, JBoolean]: ...
	def withMonths(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.Period: ...
	def minusYears(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.Period: ...
	def plusMonths(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.Period: ...
	def plusYears(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.Period: ...
	@staticmethod
	def ofDays(arg0: Union[int, JInt], ) -> javawrappers.java.time.Period: ...
	@staticmethod
	def parse(arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.time.Period: ...
	def toTotalMonths(self, ) -> Union[long, JLong]: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.chrono.ChronoPeriod: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.Period: ...
	def minusDays(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.Period: ...
	def minusMonths(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.Period: ...
	@staticmethod
	def ofWeeks(arg0: Union[int, JInt], ) -> javawrappers.java.time.Period: ...
	def getDays(self, ) -> Union[int, JInt]: ...
	def subtractFrom(self, arg0: javawrappers.java.time.temporal.Temporal, ) -> javawrappers.java.time.temporal.Temporal: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getUnits(self, ) -> javawrappers.java.util.List: ...
	@staticmethod
	def ofMonths(arg0: Union[int, JInt], ) -> javawrappers.java.time.Period: ...
	def addTo(self, arg0: javawrappers.java.time.temporal.Temporal, ) -> javawrappers.java.time.temporal.Temporal: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def withYears(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.Period: ...


class LocalTime:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def plusHours(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalTime: ...
	def atDate(self, arg0: javawrappers.java.time.LocalDate, ) -> javawrappers.java.time.LocalDateTime: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.time.LocalTime, ) -> Union[int, JInt]: ...
	def toSecondOfDay(self, ) -> Union[int, JInt]: ...
	def getMinute(self, ) -> Union[int, JInt]: ...
	def plusSeconds(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalTime: ...
	@staticmethod
	def from_(arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.LocalTime: ...
	def plusNanos(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalTime: ...
	def withHour(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.LocalTime: ...
	@staticmethod
	def ofNanoOfDay(arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalTime: ...
	def query(self, arg0: javawrappers.java.time.temporal.TemporalQuery, ) -> javawrappers.java.lang.Object: ...
	def truncatedTo(self, arg0: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.LocalTime: ...
	def format(self, arg0: javawrappers.java.time.format.DateTimeFormatter, ) -> javawrappers.java.lang.String: ...
	def getNano(self, ) -> Union[int, JInt]: ...
	def minusNanos(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalTime: ...
	@overload
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[int, JBoolean]: ...
	@overload
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JBoolean]: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.LocalTime: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.LocalTime: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.temporal.Temporal: ...
	@staticmethod
	def ofSecondOfDay(arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalTime: ...
	def toNanoOfDay(self, ) -> Union[long, JLong]: ...
	def toEpochSecond(self, arg0: javawrappers.java.time.LocalDate, arg1: javawrappers.java.time.ZoneOffset, ) -> Union[long, JLong]: ...
	def isAfter(self, arg0: javawrappers.java.time.LocalTime, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def ofInstant(arg0: javawrappers.java.time.Instant, arg1: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.LocalTime: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.LocalTime: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.LocalTime: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def minusHours(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalTime: ...
	def notifyAll(self, ) -> None: ...
	def adjustInto(self, arg0: javawrappers.java.time.temporal.Temporal, ) -> javawrappers.java.time.temporal.Temporal: ...
	def range(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> javawrappers.java.time.temporal.ValueRange: ...
	def plusMinutes(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalTime: ...
	def notify(self, ) -> None: ...
	def minusMinutes(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalTime: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def now(arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.LocalTime: ...
	@overload
	@staticmethod
	def now(arg0: javawrappers.java.time.Clock, ) -> javawrappers.java.time.LocalTime: ...
	@overload
	@staticmethod
	def now() -> javawrappers.java.time.LocalTime: ...
	@overload
	@staticmethod
	def of(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.time.LocalTime: ...
	@overload
	@staticmethod
	def of(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ) -> javawrappers.java.time.LocalTime: ...
	@overload
	@staticmethod
	def of(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.time.LocalTime: ...
	def get(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JInt]: ...
	def getHour(self, ) -> Union[int, JInt]: ...
	def withMinute(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.LocalTime: ...
	def atOffset(self, arg0: javawrappers.java.time.ZoneOffset, ) -> javawrappers.java.time.OffsetTime: ...
	@overload
	@staticmethod
	def parse(arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.time.format.DateTimeFormatter, ) -> javawrappers.java.time.LocalTime: ...
	@overload
	@staticmethod
	def parse(arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.time.LocalTime: ...
	def isBefore(self, arg0: javawrappers.java.time.LocalTime, ) -> Union[int, JBoolean]: ...
	def getLong(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[long, JLong]: ...
	def withNano(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.LocalTime: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.LocalTime: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.LocalTime: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.temporal.Temporal: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSecond(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def until(self, arg0: javawrappers.java.time.temporal.Temporal, arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[long, JLong]: ...
	def minusSeconds(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalTime: ...
	def withSecond(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.LocalTime: ...


class LocalDateTime:
	@staticmethod
	def ofEpochSecond(arg0: Union[long, JLong], arg1: Union[int, JInt], arg2: javawrappers.java.time.ZoneOffset, ) -> javawrappers.java.time.LocalDateTime: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def plusHours(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalDateTime: ...
	def isEqual(self, arg0: javawrappers.java.time.chrono.ChronoLocalDateTime, ) -> Union[int, JBoolean]: ...
	def toLocalTime(self, ) -> javawrappers.java.time.LocalTime: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.time.chrono.ChronoLocalDateTime, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def getDayOfWeek(self, ) -> javawrappers.java.time.DayOfWeek: ...
	def getMinute(self, ) -> Union[int, JInt]: ...
	def plusSeconds(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalDateTime: ...
	@staticmethod
	def from_(arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.LocalDateTime: ...
	def plusNanos(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalDateTime: ...
	def getMonth(self, ) -> javawrappers.java.time.Month: ...
	def withHour(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.LocalDateTime: ...
	def plusMonths(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalDateTime: ...
	def query(self, arg0: javawrappers.java.time.temporal.TemporalQuery, ) -> javawrappers.java.lang.Object: ...
	def plusYears(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalDateTime: ...
	def truncatedTo(self, arg0: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.LocalDateTime: ...
	def format(self, arg0: javawrappers.java.time.format.DateTimeFormatter, ) -> javawrappers.java.lang.String: ...
	def getNano(self, ) -> Union[int, JInt]: ...
	def minusNanos(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalDateTime: ...
	@overload
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[int, JBoolean]: ...
	@overload
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JBoolean]: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.chrono.ChronoLocalDateTime: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.LocalDateTime: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.LocalDateTime: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.chrono.ChronoLocalDateTime: ...
	def getYear(self, ) -> Union[int, JInt]: ...
	def toEpochSecond(self, arg0: javawrappers.java.time.ZoneOffset, ) -> Union[long, JLong]: ...
	def withDayOfMonth(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.LocalDateTime: ...
	def withMonth(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.LocalDateTime: ...
	def isAfter(self, arg0: javawrappers.java.time.chrono.ChronoLocalDateTime, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def ofInstant(arg0: javawrappers.java.time.Instant, arg1: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.LocalDateTime: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.LocalDateTime: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.chrono.ChronoLocalDateTime: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.chrono.ChronoLocalDateTime: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.LocalDateTime: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def minusHours(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalDateTime: ...
	def notifyAll(self, ) -> None: ...
	def adjustInto(self, arg0: javawrappers.java.time.temporal.Temporal, ) -> javawrappers.java.time.temporal.Temporal: ...
	def range(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> javawrappers.java.time.temporal.ValueRange: ...
	def withYear(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.LocalDateTime: ...
	def plusMinutes(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalDateTime: ...
	def notify(self, ) -> None: ...
	def minusMinutes(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalDateTime: ...
	def plusDays(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalDateTime: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def now(arg0: javawrappers.java.time.Clock, ) -> javawrappers.java.time.LocalDateTime: ...
	@overload
	@staticmethod
	def now(arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.LocalDateTime: ...
	@overload
	@staticmethod
	def now() -> javawrappers.java.time.LocalDateTime: ...
	@overload
	@staticmethod
	def of(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], ) -> javawrappers.java.time.LocalDateTime: ...
	@overload
	@staticmethod
	def of(arg0: javawrappers.java.time.LocalDate, arg1: javawrappers.java.time.LocalTime, ) -> javawrappers.java.time.LocalDateTime: ...
	@overload
	@staticmethod
	def of(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> javawrappers.java.time.LocalDateTime: ...
	@overload
	@staticmethod
	def of(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], ) -> javawrappers.java.time.LocalDateTime: ...
	@overload
	@staticmethod
	def of(arg0: Union[int, JInt], arg1: javawrappers.java.time.Month, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> javawrappers.java.time.LocalDateTime: ...
	@overload
	@staticmethod
	def of(arg0: Union[int, JInt], arg1: javawrappers.java.time.Month, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], ) -> javawrappers.java.time.LocalDateTime: ...
	@overload
	@staticmethod
	def of(arg0: Union[int, JInt], arg1: javawrappers.java.time.Month, arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], ) -> javawrappers.java.time.LocalDateTime: ...
	def get(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JInt]: ...
	def getDayOfYear(self, ) -> Union[int, JInt]: ...
	def getHour(self, ) -> Union[int, JInt]: ...
	def plusWeeks(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalDateTime: ...
	def getChronology(self, ) -> javawrappers.java.time.chrono.Chronology: ...
	def withMinute(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.LocalDateTime: ...
	def getMonthValue(self, ) -> Union[int, JInt]: ...
	def minusYears(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalDateTime: ...
	def atOffset(self, arg0: javawrappers.java.time.ZoneOffset, ) -> javawrappers.java.time.OffsetDateTime: ...
	def minusWeeks(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalDateTime: ...
	def withDayOfYear(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.LocalDateTime: ...
	@overload
	@staticmethod
	def parse(arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.time.format.DateTimeFormatter, ) -> javawrappers.java.time.LocalDateTime: ...
	@overload
	@staticmethod
	def parse(arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.time.LocalDateTime: ...
	@overload
	def atZone(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.chrono.ChronoZonedDateTime: ...
	@overload
	def atZone(self, arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.ZonedDateTime: ...
	def toInstant(self, arg0: javawrappers.java.time.ZoneOffset, ) -> javawrappers.java.time.Instant: ...
	def isBefore(self, arg0: javawrappers.java.time.chrono.ChronoLocalDateTime, ) -> Union[int, JBoolean]: ...
	def minusDays(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalDateTime: ...
	def getLong(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[long, JLong]: ...
	def withNano(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.LocalDateTime: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.LocalDateTime: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.chrono.ChronoLocalDateTime: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.chrono.ChronoLocalDateTime: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.LocalDateTime: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.temporal.Temporal: ...
	def minusMonths(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalDateTime: ...
	@overload
	def toLocalDate(self, ) -> javawrappers.java.time.LocalDate: ...
	@overload
	def toLocalDate(self, ) -> javawrappers.java.time.chrono.ChronoLocalDate: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSecond(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def until(self, arg0: javawrappers.java.time.temporal.Temporal, arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[long, JLong]: ...
	def getDayOfMonth(self, ) -> Union[int, JInt]: ...
	def minusSeconds(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.LocalDateTime: ...
	def withSecond(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.LocalDateTime: ...


class ZoneId:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def normalized(self, ) -> javawrappers.java.time.ZoneId: ...
	def notifyAll(self, ) -> None: ...
	def getId(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def ofOffset(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.time.ZoneOffset, ) -> javawrappers.java.time.ZoneId: ...
	@staticmethod
	def systemDefault() -> javawrappers.java.time.ZoneId: ...
	@staticmethod
	def getAvailableZoneIds() -> javawrappers.java.util.Set: ...
	def getDisplayName(self, arg0: javawrappers.java.time.format.TextStyle, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def of(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Map, ) -> javawrappers.java.time.ZoneId: ...
	@overload
	@staticmethod
	def of(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.time.ZoneId: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def from_(arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.ZoneId: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getRules(self, ) -> javawrappers.java.time.zone.ZoneRules: ...


class YearMonth:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.YearMonth: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.YearMonth: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def atEndOfMonth(self, ) -> javawrappers.java.time.LocalDate: ...
	def notifyAll(self, ) -> None: ...
	def adjustInto(self, arg0: javawrappers.java.time.temporal.Temporal, ) -> javawrappers.java.time.temporal.Temporal: ...
	def range(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> javawrappers.java.time.temporal.ValueRange: ...
	def isValidDay(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.time.YearMonth, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def withYear(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.YearMonth: ...
	def notify(self, ) -> None: ...
	def lengthOfYear(self, ) -> Union[int, JInt]: ...
	def lengthOfMonth(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def now(arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.YearMonth: ...
	@overload
	@staticmethod
	def now(arg0: javawrappers.java.time.Clock, ) -> javawrappers.java.time.YearMonth: ...
	@overload
	@staticmethod
	def now() -> javawrappers.java.time.YearMonth: ...
	@overload
	@staticmethod
	def of(arg0: Union[int, JInt], arg1: javawrappers.java.time.Month, ) -> javawrappers.java.time.YearMonth: ...
	@overload
	@staticmethod
	def of(arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> javawrappers.java.time.YearMonth: ...
	def get(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JInt]: ...
	@staticmethod
	def from_(arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.YearMonth: ...
	def getMonth(self, ) -> javawrappers.java.time.Month: ...
	def getMonthValue(self, ) -> Union[int, JInt]: ...
	def atDay(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.LocalDate: ...
	def minusYears(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.YearMonth: ...
	def plusMonths(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.YearMonth: ...
	def query(self, arg0: javawrappers.java.time.temporal.TemporalQuery, ) -> javawrappers.java.lang.Object: ...
	def plusYears(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.YearMonth: ...
	def format(self, arg0: javawrappers.java.time.format.DateTimeFormatter, ) -> javawrappers.java.lang.String: ...
	def isLeapYear(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def parse(arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.time.format.DateTimeFormatter, ) -> javawrappers.java.time.YearMonth: ...
	@overload
	@staticmethod
	def parse(arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.time.YearMonth: ...
	@overload
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[int, JBoolean]: ...
	@overload
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JBoolean]: ...
	def isBefore(self, arg0: javawrappers.java.time.YearMonth, ) -> Union[int, JBoolean]: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.YearMonth: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.YearMonth: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.temporal.Temporal: ...
	def getLong(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[long, JLong]: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.YearMonth: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.YearMonth: ...
	def minusMonths(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.YearMonth: ...
	def getYear(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def until(self, arg0: javawrappers.java.time.temporal.Temporal, arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[long, JLong]: ...
	def withMonth(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.YearMonth: ...
	def isAfter(self, arg0: javawrappers.java.time.YearMonth, ) -> Union[int, JBoolean]: ...


class DateTimeException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class OffsetTime:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def plusHours(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.OffsetTime: ...
	def isEqual(self, arg0: javawrappers.java.time.OffsetTime, ) -> Union[int, JBoolean]: ...
	def atDate(self, arg0: javawrappers.java.time.LocalDate, ) -> javawrappers.java.time.OffsetDateTime: ...
	def toLocalTime(self, ) -> javawrappers.java.time.LocalTime: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.time.OffsetTime, ) -> Union[int, JInt]: ...
	def withOffsetSameLocal(self, arg0: javawrappers.java.time.ZoneOffset, ) -> javawrappers.java.time.OffsetTime: ...
	def getMinute(self, ) -> Union[int, JInt]: ...
	def plusSeconds(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.OffsetTime: ...
	@staticmethod
	def from_(arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.OffsetTime: ...
	def plusNanos(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.OffsetTime: ...
	def withHour(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.OffsetTime: ...
	def query(self, arg0: javawrappers.java.time.temporal.TemporalQuery, ) -> javawrappers.java.lang.Object: ...
	def truncatedTo(self, arg0: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.OffsetTime: ...
	def format(self, arg0: javawrappers.java.time.format.DateTimeFormatter, ) -> javawrappers.java.lang.String: ...
	def getNano(self, ) -> Union[int, JInt]: ...
	def minusNanos(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.OffsetTime: ...
	@overload
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[int, JBoolean]: ...
	@overload
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JBoolean]: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.OffsetTime: ...
	@overload
	def plus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def plus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.OffsetTime: ...
	def toEpochSecond(self, arg0: javawrappers.java.time.LocalDate, ) -> Union[long, JLong]: ...
	def isAfter(self, arg0: javawrappers.java.time.OffsetTime, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def ofInstant(arg0: javawrappers.java.time.Instant, arg1: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.OffsetTime: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.OffsetTime: ...
	@overload
	def minus(self, arg0: Union[long, JLong], arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def minus(self, arg0: javawrappers.java.time.temporal.TemporalAmount, ) -> javawrappers.java.time.OffsetTime: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def minusHours(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.OffsetTime: ...
	def notifyAll(self, ) -> None: ...
	def getOffset(self, ) -> javawrappers.java.time.ZoneOffset: ...
	def adjustInto(self, arg0: javawrappers.java.time.temporal.Temporal, ) -> javawrappers.java.time.temporal.Temporal: ...
	def range(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> javawrappers.java.time.temporal.ValueRange: ...
	def plusMinutes(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.OffsetTime: ...
	def notify(self, ) -> None: ...
	def minusMinutes(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.OffsetTime: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def now(arg0: javawrappers.java.time.ZoneId, ) -> javawrappers.java.time.OffsetTime: ...
	@overload
	@staticmethod
	def now(arg0: javawrappers.java.time.Clock, ) -> javawrappers.java.time.OffsetTime: ...
	@overload
	@staticmethod
	def now() -> javawrappers.java.time.OffsetTime: ...
	@overload
	@staticmethod
	def of(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: javawrappers.java.time.ZoneOffset, ) -> javawrappers.java.time.OffsetTime: ...
	@overload
	@staticmethod
	def of(arg0: javawrappers.java.time.LocalTime, arg1: javawrappers.java.time.ZoneOffset, ) -> javawrappers.java.time.OffsetTime: ...
	def get(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JInt]: ...
	def getHour(self, ) -> Union[int, JInt]: ...
	def withMinute(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.OffsetTime: ...
	@overload
	@staticmethod
	def parse(arg0: javawrappers.java.lang.CharSequence, arg1: javawrappers.java.time.format.DateTimeFormatter, ) -> javawrappers.java.time.OffsetTime: ...
	@overload
	@staticmethod
	def parse(arg0: javawrappers.java.lang.CharSequence, ) -> javawrappers.java.time.OffsetTime: ...
	def isBefore(self, arg0: javawrappers.java.time.OffsetTime, ) -> Union[int, JBoolean]: ...
	def getLong(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[long, JLong]: ...
	def withNano(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.OffsetTime: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalField, arg1: Union[long, JLong], ) -> javawrappers.java.time.OffsetTime: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.temporal.Temporal: ...
	@overload
	def with(self, arg0: javawrappers.java.time.temporal.TemporalAdjuster, ) -> javawrappers.java.time.OffsetTime: ...
	def withOffsetSameInstant(self, arg0: javawrappers.java.time.ZoneOffset, ) -> javawrappers.java.time.OffsetTime: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSecond(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def until(self, arg0: javawrappers.java.time.temporal.Temporal, arg1: javawrappers.java.time.temporal.TemporalUnit, ) -> Union[long, JLong]: ...
	def minusSeconds(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.OffsetTime: ...
	def withSecond(self, arg0: Union[int, JInt], ) -> javawrappers.java.time.OffsetTime: ...


class Month:
	JANUARY: Month = ...
	FEBRUARY: Month = ...
	MARCH: Month = ...
	APRIL: Month = ...
	MAY: Month = ...
	JUNE: Month = ...
	JULY: Month = ...
	AUGUST: Month = ...
	SEPTEMBER: Month = ...
	OCTOBER: Month = ...
	NOVEMBER: Month = ...
	DECEMBER: Month = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def firstMonthOfQuarter(self, ) -> javawrappers.java.time.Month: ...
	def minus(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.Month: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def firstDayOfYear(self, arg0: Union[int, JBoolean], ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.time.Month, 1): ...
	def minLength(self, ) -> Union[int, JInt]: ...
	def adjustInto(self, arg0: javawrappers.java.time.temporal.Temporal, ) -> javawrappers.java.time.temporal.Temporal: ...
	def range(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> javawrappers.java.time.temporal.ValueRange: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def of(arg0: Union[int, JInt], ) -> javawrappers.java.time.Month: ...
	def get(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JInt]: ...
	@staticmethod
	def from_(arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.Month: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.time.Month: ...
	def query(self, arg0: javawrappers.java.time.temporal.TemporalQuery, ) -> javawrappers.java.lang.Object: ...
	def length(self, arg0: Union[int, JBoolean], ) -> Union[int, JInt]: ...
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JBoolean]: ...
	def plus(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.Month: ...
	def getLong(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[long, JLong]: ...
	def getValue(self, ) -> Union[int, JInt]: ...
	def getDisplayName(self, arg0: javawrappers.java.time.format.TextStyle, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def maxLength(self, ) -> Union[int, JInt]: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class DayOfWeek:
	MONDAY: DayOfWeek = ...
	TUESDAY: DayOfWeek = ...
	WEDNESDAY: DayOfWeek = ...
	THURSDAY: DayOfWeek = ...
	FRIDAY: DayOfWeek = ...
	SATURDAY: DayOfWeek = ...
	SUNDAY: DayOfWeek = ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def minus(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.DayOfWeek: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.time.DayOfWeek: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	def notifyAll(self, ) -> None: ...
	def query(self, arg0: javawrappers.java.time.temporal.TemporalQuery, ) -> javawrappers.java.lang.Object: ...
	@staticmethod
	def values() -> JArray(javawrappers.java.time.DayOfWeek, 1): ...
	def adjustInto(self, arg0: javawrappers.java.time.temporal.Temporal, ) -> javawrappers.java.time.temporal.Temporal: ...
	def range(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> javawrappers.java.time.temporal.ValueRange: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def isSupported(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	def plus(self, arg0: Union[long, JLong], ) -> javawrappers.java.time.DayOfWeek: ...
	def getLong(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[long, JLong]: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def getValue(self, ) -> Union[int, JInt]: ...
	def getDisplayName(self, arg0: javawrappers.java.time.format.TextStyle, arg1: javawrappers.java.util.Locale, ) -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def of(arg0: Union[int, JInt], ) -> javawrappers.java.time.DayOfWeek: ...
	def get(self, arg0: javawrappers.java.time.temporal.TemporalField, ) -> Union[int, JInt]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def from_(arg0: javawrappers.java.time.temporal.TemporalAccessor, ) -> javawrappers.java.time.DayOfWeek: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


