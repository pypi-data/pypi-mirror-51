################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.util
import javawrappers.java.lang
import javawrappers.java.io
import javawrappers.java.util.stream
import javawrappers.java.nio
import javawrappers.java.util.function
import javawrappers.java.nio.file
import javawrappers.java.lang.module

from jpype.types import *
from typing import Union

from typing import overload

class Configuration:
	def findModule(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def resolve(arg0: javawrappers.java.lang.module.ModuleFinder, arg1: javawrappers.java.util.List, arg2: javawrappers.java.lang.module.ModuleFinder, arg3: javawrappers.java.util.Collection, ) -> javawrappers.java.lang.module.Configuration: ...
	@overload
	def resolve(self, arg0: javawrappers.java.lang.module.ModuleFinder, arg1: javawrappers.java.lang.module.ModuleFinder, arg2: javawrappers.java.util.Collection, ) -> javawrappers.java.lang.module.Configuration: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def resolveAndBind(arg0: javawrappers.java.lang.module.ModuleFinder, arg1: javawrappers.java.util.List, arg2: javawrappers.java.lang.module.ModuleFinder, arg3: javawrappers.java.util.Collection, ) -> javawrappers.java.lang.module.Configuration: ...
	@overload
	def resolveAndBind(self, arg0: javawrappers.java.lang.module.ModuleFinder, arg1: javawrappers.java.lang.module.ModuleFinder, arg2: javawrappers.java.util.Collection, ) -> javawrappers.java.lang.module.Configuration: ...
	def notify(self, ) -> None: ...
	def modules(self, ) -> javawrappers.java.util.Set: ...
	def parents(self, ) -> javawrappers.java.util.List: ...
	@staticmethod
	def empty() -> javawrappers.java.lang.module.Configuration: ...


class ModuleReference:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def location(self, ) -> javawrappers.java.util.Optional: ...
	def descriptor(self, ) -> javawrappers.java.lang.module.ModuleDescriptor: ...
	def notify(self, ) -> None: ...
	def open(self, ) -> javawrappers.java.lang.module.ModuleReader: ...


class ResolutionException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class ModuleReader:
	def read(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...
	def release(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> None: ...
	def find(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...
	def list(self, ) -> javawrappers.java.util.stream.Stream: ...
	def close(self, ) -> None: ...
	def open(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...


class ResolvedModule:
	def reference(self, ) -> javawrappers.java.lang.module.ModuleReference: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def configuration(self, ) -> javawrappers.java.lang.module.Configuration: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def reads(self, ) -> javawrappers.java.util.Set: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ModuleFinder:
	@staticmethod
	def compose(*arg0: javawrappers.java.lang.module.ModuleFinder, ) -> javawrappers.java.lang.module.ModuleFinder: ...
	def find(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...
	@staticmethod
	def of(*arg0: javawrappers.java.nio.file.Path, ) -> javawrappers.java.lang.module.ModuleFinder: ...
	@staticmethod
	def ofSystem() -> javawrappers.java.lang.module.ModuleFinder: ...
	def findAll(self, ) -> javawrappers.java.util.Set: ...


class FindException:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class ModuleDescriptor:
	class Builder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def mainClass(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
		@overload
		def exports(self, arg0: javawrappers.java.lang.module.ModuleDescriptor.Exports, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
		@overload
		def exports(self, arg0: javawrappers.java.util.Set, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
		@overload
		def exports(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Set, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
		@overload
		def exports(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
		@overload
		def exports(self, arg0: javawrappers.java.util.Set, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.util.Set, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
		def notifyAll(self, ) -> None: ...
		def packages(self, arg0: javawrappers.java.util.Set, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
		@overload
		def version(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
		@overload
		def version(self, arg0: javawrappers.java.lang.module.ModuleDescriptor.Version, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
		def notify(self, ) -> None: ...
		def build(self, ) -> javawrappers.java.lang.module.ModuleDescriptor: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def provides(self, arg0: javawrappers.java.lang.module.ModuleDescriptor.Provides, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
		@overload
		def provides(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.List, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def opens(self, arg0: javawrappers.java.util.Set, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.util.Set, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
		@overload
		def opens(self, arg0: javawrappers.java.lang.module.ModuleDescriptor.Opens, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
		@overload
		def opens(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Set, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
		@overload
		def opens(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
		@overload
		def opens(self, arg0: javawrappers.java.util.Set, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def uses(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
		@overload
		def requires(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
		@overload
		def requires(self, arg0: javawrappers.java.util.Set, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
		@overload
		def requires(self, arg0: javawrappers.java.util.Set, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.module.ModuleDescriptor.Version, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
		@overload
		def requires(self, arg0: javawrappers.java.lang.module.ModuleDescriptor.Requires, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...


	class Version:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def parse(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Version: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.module.ModuleDescriptor.Version, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...


	class Provides:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def service(self, ) -> javawrappers.java.lang.String: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.module.ModuleDescriptor.Provides, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def providers(self, ) -> javawrappers.java.util.List: ...


	class Opens:
		class Modifier:
			SYNTHETIC: ModuleDescriptor.Opens.Modifier = ...
			MANDATED: ModuleDescriptor.Opens.Modifier = ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			@overload
			@staticmethod
			def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
			@overload
			@staticmethod
			def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Opens.Modifier: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			@staticmethod
			def values() -> JArray(javawrappers.java.lang.module.ModuleDescriptor.Opens.Modifier, 1): ...
			def name(self, ) -> javawrappers.java.lang.String: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			@overload
			def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
			@overload
			def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
			def notify(self, ) -> None: ...
			def ordinal(self, ) -> Union[int, JInt]: ...


		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Opens.Modifier: ...
		@staticmethod
		def values() -> JArray(javawrappers.java.lang.module.ModuleDescriptor.Opens.Modifier, 1): ...
		def notifyAll(self, ) -> None: ...
		def isQualified(self, ) -> Union[int, JBoolean]: ...
		def source(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.module.ModuleDescriptor.Opens, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def modifiers(self, ) -> javawrappers.java.util.Set: ...
		def targets(self, ) -> javawrappers.java.util.Set: ...
		def notify(self, ) -> None: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class Exports:
		class Modifier:
			SYNTHETIC: ModuleDescriptor.Exports.Modifier = ...
			MANDATED: ModuleDescriptor.Exports.Modifier = ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			@overload
			@staticmethod
			def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Exports.Modifier: ...
			@overload
			@staticmethod
			def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			@staticmethod
			def values() -> JArray(javawrappers.java.lang.module.ModuleDescriptor.Exports.Modifier, 1): ...
			def name(self, ) -> javawrappers.java.lang.String: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			@overload
			def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
			@overload
			def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
			def notify(self, ) -> None: ...
			def ordinal(self, ) -> Union[int, JInt]: ...


		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Exports.Modifier: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@staticmethod
		def values() -> JArray(javawrappers.java.lang.module.ModuleDescriptor.Exports.Modifier, 1): ...
		def notifyAll(self, ) -> None: ...
		def isQualified(self, ) -> Union[int, JBoolean]: ...
		def source(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.module.ModuleDescriptor.Exports, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def modifiers(self, ) -> javawrappers.java.util.Set: ...
		def targets(self, ) -> javawrappers.java.util.Set: ...
		def notify(self, ) -> None: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class Requires:
		class Modifier:
			TRANSITIVE: ModuleDescriptor.Requires.Modifier = ...
			STATIC: ModuleDescriptor.Requires.Modifier = ...
			SYNTHETIC: ModuleDescriptor.Requires.Modifier = ...
			MANDATED: ModuleDescriptor.Requires.Modifier = ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			@overload
			@staticmethod
			def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
			@overload
			@staticmethod
			def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Requires.Modifier: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			@staticmethod
			def values() -> JArray(javawrappers.java.lang.module.ModuleDescriptor.Requires.Modifier, 1): ...
			def name(self, ) -> javawrappers.java.lang.String: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			@overload
			def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
			@overload
			def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
			def notify(self, ) -> None: ...
			def ordinal(self, ) -> Union[int, JInt]: ...


		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Requires.Modifier: ...
		@staticmethod
		def values() -> JArray(javawrappers.java.lang.module.ModuleDescriptor.Requires.Modifier, 1): ...
		def notifyAll(self, ) -> None: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.module.ModuleDescriptor.Requires, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def modifiers(self, ) -> javawrappers.java.util.Set: ...
		def notify(self, ) -> None: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		def compiledVersion(self, ) -> javawrappers.java.util.Optional: ...
		@overload
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def name(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def name(self, ) -> javawrappers.java.lang.String: ...
		def rawCompiledVersion(self, ) -> javawrappers.java.util.Optional: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class Modifier:
		OPEN: ModuleDescriptor.Modifier = ...
		AUTOMATIC: ModuleDescriptor.Modifier = ...
		SYNTHETIC: ModuleDescriptor.Modifier = ...
		MANDATED: ModuleDescriptor.Modifier = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Modifier: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.java.lang.module.ModuleDescriptor.Modifier, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def toNameAndVersion(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def mainClass(self, ) -> javawrappers.java.util.Optional: ...
	@overload
	def mainClass(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
	@overload
	def exports(self, arg0: javawrappers.java.lang.module.ModuleDescriptor.Exports, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
	@overload
	def exports(self, arg0: javawrappers.java.util.Set, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
	@overload
	def exports(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Set, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
	@overload
	def exports(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
	@overload
	def exports(self, arg0: javawrappers.java.util.Set, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.util.Set, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
	@overload
	def exports(self, ) -> javawrappers.java.util.Set: ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.java.lang.module.ModuleDescriptor.Modifier, 1): ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.java.lang.module.ModuleDescriptor.Exports.Modifier, 1): ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.java.lang.module.ModuleDescriptor.Requires.Modifier, 1): ...
	@overload
	@staticmethod
	def values() -> JArray(javawrappers.java.lang.module.ModuleDescriptor.Opens.Modifier, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def isQualified(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isQualified(self, ) -> Union[int, JBoolean]: ...
	@overload
	def source(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def source(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.module.ModuleDescriptor, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.module.ModuleDescriptor.Version, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.module.ModuleDescriptor.Provides, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.module.ModuleDescriptor.Exports, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.module.ModuleDescriptor.Opens, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.module.ModuleDescriptor.Requires, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	@overload
	def modifiers(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def modifiers(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def modifiers(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def modifiers(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def targets(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def targets(self, ) -> javawrappers.java.util.Set: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def provides(self, arg0: javawrappers.java.lang.module.ModuleDescriptor.Provides, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
	@overload
	def provides(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.List, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
	@overload
	def provides(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def newOpenModule(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
	def rawCompiledVersion(self, ) -> javawrappers.java.util.Optional: ...
	@overload
	@staticmethod
	def newModule(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
	@overload
	@staticmethod
	def newModule(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Set, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
	def isAutomatic(self, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def read(arg0: javawrappers.java.nio.ByteBuffer, ) -> javawrappers.java.lang.module.ModuleDescriptor: ...
	@overload
	@staticmethod
	def read(arg0: javawrappers.java.nio.ByteBuffer, arg1: javawrappers.java.util.function.Supplier, ) -> javawrappers.java.lang.module.ModuleDescriptor: ...
	@overload
	@staticmethod
	def read(arg0: javawrappers.java.io.InputStream, arg1: javawrappers.java.util.function.Supplier, ) -> javawrappers.java.lang.module.ModuleDescriptor: ...
	@overload
	@staticmethod
	def read(arg0: javawrappers.java.io.InputStream, ) -> javawrappers.java.lang.module.ModuleDescriptor: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Modifier: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Exports.Modifier: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Requires.Modifier: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Opens.Modifier: ...
	@staticmethod
	def parse(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Version: ...
	def rawVersion(self, ) -> javawrappers.java.util.Optional: ...
	@overload
	def packages(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def packages(self, arg0: javawrappers.java.util.Set, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
	@overload
	def version(self, ) -> javawrappers.java.util.Optional: ...
	@overload
	def version(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
	@overload
	def version(self, arg0: javawrappers.java.lang.module.ModuleDescriptor.Version, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
	@staticmethod
	def newAutomaticModule(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
	def isOpen(self, ) -> Union[int, JBoolean]: ...
	def build(self, ) -> javawrappers.java.lang.module.ModuleDescriptor: ...
	def compiledVersion(self, ) -> javawrappers.java.util.Optional: ...
	def service(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def opens(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def opens(self, arg0: javawrappers.java.util.Set, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.util.Set, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
	@overload
	def opens(self, arg0: javawrappers.java.lang.module.ModuleDescriptor.Opens, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
	@overload
	def opens(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.Set, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
	@overload
	def opens(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
	@overload
	def opens(self, arg0: javawrappers.java.util.Set, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
	@overload
	def uses(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
	@overload
	def uses(self, ) -> javawrappers.java.util.Set: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def providers(self, ) -> javawrappers.java.util.List: ...
	def ordinal(self, ) -> Union[int, JInt]: ...
	@overload
	def requires(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
	@overload
	def requires(self, arg0: javawrappers.java.util.Set, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
	@overload
	def requires(self, arg0: javawrappers.java.util.Set, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.module.ModuleDescriptor.Version, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
	@overload
	def requires(self, arg0: javawrappers.java.lang.module.ModuleDescriptor.Requires, ) -> javawrappers.java.lang.module.ModuleDescriptor.Builder: ...
	@overload
	def requires(self, ) -> javawrappers.java.util.Set: ...


class InvalidModuleDescriptorException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


