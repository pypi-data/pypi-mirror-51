################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.security
import javawrappers.java.util
import javawrappers.jdk.internal.loader
import javawrappers.java.util.stream
import javawrappers.java.util.concurrent
import javawrappers.java.nio
import javawrappers.java.security.cert
import javawrappers.java.lang.module
import javawrappers.java.lang
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.java.util.jar
import javawrappers.java.util.function
import javawrappers.jdk.internal.module

from jpype.types import *
from typing import Union

from typing import overload

class Resource:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getCodeSigners(self, ) -> JArray(javawrappers.java.security.CodeSigner, 1): ...
	def getManifest(self, ) -> javawrappers.java.util.jar.Manifest: ...
	def getCodeSourceURL(self, ) -> javawrappers.java.net.URL: ...
	def notifyAll(self, ) -> None: ...
	def getCertificates(self, ) -> JArray(javawrappers.java.security.cert.Certificate, 1): ...
	def getByteBuffer(self, ) -> javawrappers.java.nio.ByteBuffer: ...
	def getContentLength(self, ) -> Union[int, JInt]: ...
	def getInputStream(self, ) -> javawrappers.java.io.InputStream: ...
	def notify(self, ) -> None: ...
	def getBytes(self, ) -> JArray(JByte, 1): ...
	def getURL(self, ) -> javawrappers.java.net.URL: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class ClassLoaders:
	class AppClassLoader:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getResource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
		@overload
		def findResource(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
		@overload
		def findResource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def setDefaultAssertionStatus(self, arg0: Union[int, JBoolean], ) -> None: ...
		def setPackageAssertionStatus(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
		def notify(self, ) -> None: ...
		def setClassAssertionStatus(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
		def getDefinedPackage(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Package: ...
		def clearAssertionStatus(self, ) -> None: ...
		def isRegisteredAsParallelCapable(self, ) -> Union[int, JBoolean]: ...
		def getResources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getDefinedPackages(self, ) -> JArray(javawrappers.java.lang.Package, 1): ...
		def getUnnamedModule(self, ) -> javawrappers.java.lang.Module: ...
		@staticmethod
		def getSystemResources(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
		def getParent(self, ) -> javawrappers.java.lang.ClassLoader: ...
		@staticmethod
		def getPlatformClassLoader() -> javawrappers.java.lang.ClassLoader: ...
		def getResourceAsStream(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
		def resources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.stream.Stream: ...
		def findResources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
		@staticmethod
		def getSystemClassLoader() -> javawrappers.java.lang.ClassLoader: ...
		@staticmethod
		def getSystemResource(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
		def loadModule(self, arg0: javawrappers.java.lang.module.ModuleReference, ) -> None: ...
		@staticmethod
		def getSystemResourceAsStream(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def loadClass(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def findResourceAsStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...


	class PlatformClassLoader:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getResource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
		@overload
		def findResource(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
		@overload
		def findResource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def setDefaultAssertionStatus(self, arg0: Union[int, JBoolean], ) -> None: ...
		def setPackageAssertionStatus(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
		def notify(self, ) -> None: ...
		def setClassAssertionStatus(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
		def getDefinedPackage(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Package: ...
		def clearAssertionStatus(self, ) -> None: ...
		def isRegisteredAsParallelCapable(self, ) -> Union[int, JBoolean]: ...
		def getResources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getDefinedPackages(self, ) -> JArray(javawrappers.java.lang.Package, 1): ...
		def getUnnamedModule(self, ) -> javawrappers.java.lang.Module: ...
		@staticmethod
		def getSystemResources(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
		def getParent(self, ) -> javawrappers.java.lang.ClassLoader: ...
		@staticmethod
		def getPlatformClassLoader() -> javawrappers.java.lang.ClassLoader: ...
		def getResourceAsStream(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
		def resources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.stream.Stream: ...
		def findResources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
		@staticmethod
		def getSystemClassLoader() -> javawrappers.java.lang.ClassLoader: ...
		@staticmethod
		def getSystemResource(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
		def loadModule(self, arg0: javawrappers.java.lang.module.ModuleReference, ) -> None: ...
		@staticmethod
		def getSystemResourceAsStream(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def loadClass(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def findResourceAsStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...


	class BootClassLoader:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getResource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
		@overload
		def findResource(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
		@overload
		def findResource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def setDefaultAssertionStatus(self, arg0: Union[int, JBoolean], ) -> None: ...
		def setPackageAssertionStatus(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
		def notify(self, ) -> None: ...
		def setClassAssertionStatus(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
		def getDefinedPackage(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Package: ...
		def clearAssertionStatus(self, ) -> None: ...
		def isRegisteredAsParallelCapable(self, ) -> Union[int, JBoolean]: ...
		def getResources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getDefinedPackages(self, ) -> JArray(javawrappers.java.lang.Package, 1): ...
		def getUnnamedModule(self, ) -> javawrappers.java.lang.Module: ...
		@staticmethod
		def getSystemResources(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
		def getParent(self, ) -> javawrappers.java.lang.ClassLoader: ...
		@staticmethod
		def getPlatformClassLoader() -> javawrappers.java.lang.ClassLoader: ...
		def getResourceAsStream(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
		def resources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.stream.Stream: ...
		def findResources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
		@staticmethod
		def getSystemClassLoader() -> javawrappers.java.lang.ClassLoader: ...
		@staticmethod
		def getSystemResource(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
		def loadModule(self, arg0: javawrappers.java.lang.module.ModuleReference, ) -> None: ...
		@staticmethod
		def getSystemResourceAsStream(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def loadClass(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def findResourceAsStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getResource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	@overload
	def findResource(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	@overload
	def findResource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def setDefaultAssertionStatus(self, arg0: Union[int, JBoolean], ) -> None: ...
	@staticmethod
	def platformClassLoader() -> javawrappers.java.lang.ClassLoader: ...
	def setPackageAssertionStatus(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def setClassAssertionStatus(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	def getDefinedPackage(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Package: ...
	def clearAssertionStatus(self, ) -> None: ...
	def isRegisteredAsParallelCapable(self, ) -> Union[int, JBoolean]: ...
	def getResources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getDefinedPackages(self, ) -> JArray(javawrappers.java.lang.Package, 1): ...
	def getUnnamedModule(self, ) -> javawrappers.java.lang.Module: ...
	@staticmethod
	def getSystemResources(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
	def getParent(self, ) -> javawrappers.java.lang.ClassLoader: ...
	@staticmethod
	def getPlatformClassLoader() -> javawrappers.java.lang.ClassLoader: ...
	def getResourceAsStream(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
	def resources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.stream.Stream: ...
	def findResources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
	@staticmethod
	def getSystemClassLoader() -> javawrappers.java.lang.ClassLoader: ...
	@staticmethod
	def getSystemResource(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def loadModule(self, arg0: javawrappers.java.lang.module.ModuleReference, ) -> None: ...
	@staticmethod
	def appClassLoader() -> javawrappers.java.lang.ClassLoader: ...
	@staticmethod
	def getSystemResourceAsStream(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
	def loadClass(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def findResourceAsStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...


class URLClassPath:
	@overload
	def __init__(self, arg0: JArray(javawrappers.java.net.URL, 1), arg1: javawrappers.java.security.AccessControlContext, ): ...
	@overload
	def __init__(self, arg0: JArray(javawrappers.java.net.URL, 1), arg1: javawrappers.java.net.URLStreamHandlerFactory, arg2: javawrappers.java.security.AccessControlContext, ): ...
	class FileLoader:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def close(self, ) -> None: ...
		def notify(self, ) -> None: ...


	class JarLoader:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def close(self, ) -> None: ...
		def notify(self, ) -> None: ...


	class Loader:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def close(self, ) -> None: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def findResource(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.java.net.URL: ...
	@overload
	def getResource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.loader.Resource: ...
	@overload
	def getResource(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.jdk.internal.loader.Resource: ...
	def notifyAll(self, ) -> None: ...
	def findResources(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.java.util.Enumeration: ...
	@staticmethod
	def check(arg0: javawrappers.java.net.URL, ) -> None: ...
	def closeLoaders(self, ) -> javawrappers.java.util.List: ...
	def notify(self, ) -> None: ...
	@overload
	def getResources(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.java.util.Enumeration: ...
	@overload
	def getResources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def addURL(self, arg0: javawrappers.java.net.URL, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def close(self, ) -> None: ...
	@overload
	def close(self, ) -> None: ...
	@staticmethod
	def checkURL(arg0: javawrappers.java.net.URL, ) -> javawrappers.java.net.URL: ...
	def addFile(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def getURLs(self, ) -> JArray(javawrappers.java.net.URL, 1): ...


class BuiltinClassLoader:
	class NullModuleReader:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def read(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...
		def release(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def find(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def list(self, ) -> javawrappers.java.util.stream.Stream: ...
		def close(self, ) -> None: ...
		def open(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...
		def notify(self, ) -> None: ...


	class LoadedModule:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getResource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	@overload
	def findResource(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	@overload
	def findResource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def release(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setDefaultAssertionStatus(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setPackageAssertionStatus(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def setClassAssertionStatus(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	def getDefinedPackage(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Package: ...
	def clearAssertionStatus(self, ) -> None: ...
	def isRegisteredAsParallelCapable(self, ) -> Union[int, JBoolean]: ...
	def getResources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
	def find(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def close(self, ) -> None: ...
	def getDefinedPackages(self, ) -> JArray(javawrappers.java.lang.Package, 1): ...
	def getUnnamedModule(self, ) -> javawrappers.java.lang.Module: ...
	@staticmethod
	def getSystemResources(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
	def getParent(self, ) -> javawrappers.java.lang.ClassLoader: ...
	def read(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...
	@staticmethod
	def getPlatformClassLoader() -> javawrappers.java.lang.ClassLoader: ...
	def getResourceAsStream(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
	def resources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.stream.Stream: ...
	def findResources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
	@staticmethod
	def getSystemClassLoader() -> javawrappers.java.lang.ClassLoader: ...
	@staticmethod
	def getSystemResource(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def loadModule(self, arg0: javawrappers.java.lang.module.ModuleReference, ) -> None: ...
	def list(self, ) -> javawrappers.java.util.stream.Stream: ...
	@staticmethod
	def getSystemResourceAsStream(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def loadClass(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def findResourceAsStream(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
	def open(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...


class AbstractClassLoaderValue:
	class Sub:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def sub(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.jdk.internal.loader.AbstractClassLoaderValue.Sub: ...
		def parent(self, ) -> javawrappers.jdk.internal.loader.AbstractClassLoaderValue: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def computeIfAbsent(self, arg0: javawrappers.java.lang.ClassLoader, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
		def notify(self, ) -> None: ...
		def remove(self, arg0: javawrappers.java.lang.ClassLoader, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def removeAll(self, arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def get(self, arg0: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.lang.Object: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def isEqualOrDescendantOf(self, arg0: javawrappers.jdk.internal.loader.AbstractClassLoaderValue, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def putIfAbsent(self, arg0: javawrappers.java.lang.ClassLoader, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def key(self, ) -> javawrappers.java.lang.Object: ...


	class Memoizer:
		class RecursiveInvocationException:
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			@overload
			def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
			@overload
			def printStackTrace(self, ) -> None: ...
			@overload
			def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
			def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
			def notifyAll(self, ) -> None: ...
			def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
			def getMessage(self, ) -> javawrappers.java.lang.String: ...
			def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
			def notify(self, ) -> None: ...
			def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
			def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
			def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
		@overload
		def printStackTrace(self, ) -> None: ...
		@overload
		def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
		def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
		def getMessage(self, ) -> javawrappers.java.lang.String: ...
		def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
		def notify(self, ) -> None: ...
		def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
		def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
		def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def get(self, ) -> javawrappers.java.lang.Object: ...
		def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


	def parent(self, ) -> javawrappers.jdk.internal.loader.AbstractClassLoaderValue: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def sub(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.jdk.internal.loader.AbstractClassLoaderValue.Sub: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def computeIfAbsent(self, arg0: javawrappers.java.lang.ClassLoader, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.java.lang.ClassLoader, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def removeAll(self, arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def get(self, arg0: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.lang.Object: ...
	@overload
	def get(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def isEqualOrDescendantOf(self, arg0: javawrappers.jdk.internal.loader.AbstractClassLoaderValue, ) -> Union[int, JBoolean]: ...
	@overload
	def isEqualOrDescendantOf(self, arg0: javawrappers.jdk.internal.loader.AbstractClassLoaderValue, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	@overload
	def key(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def key(self, ) -> javawrappers.java.lang.Object: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.ClassLoader, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class Loader:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.module.ResolvedModule, arg1: javawrappers.jdk.internal.loader.LoaderPool, arg2: javawrappers.java.lang.ClassLoader, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.util.Collection, arg1: javawrappers.java.lang.ClassLoader, ): ...
	class NullModuleReader:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def read(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...
		def release(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def find(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def list(self, ) -> javawrappers.java.util.stream.Stream: ...
		def close(self, ) -> None: ...
		def open(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...
		def notify(self, ) -> None: ...


	class LoadedModule:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def findResource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def getResource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def release(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def setDefaultAssertionStatus(self, arg0: Union[int, JBoolean], ) -> None: ...
	def setPackageAssertionStatus(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	def notify(self, ) -> None: ...
	def setClassAssertionStatus(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	def getDefinedPackage(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Package: ...
	def clearAssertionStatus(self, ) -> None: ...
	def isRegisteredAsParallelCapable(self, ) -> Union[int, JBoolean]: ...
	def getResources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
	def find(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def close(self, ) -> None: ...
	def getDefinedPackages(self, ) -> JArray(javawrappers.java.lang.Package, 1): ...
	def getUnnamedModule(self, ) -> javawrappers.java.lang.Module: ...
	@staticmethod
	def getSystemResources(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
	def getParent(self, ) -> javawrappers.java.lang.ClassLoader: ...
	def read(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...
	@staticmethod
	def getPlatformClassLoader() -> javawrappers.java.lang.ClassLoader: ...
	def getResourceAsStream(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
	def pool(self, ) -> javawrappers.jdk.internal.loader.LoaderPool: ...
	def resources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.stream.Stream: ...
	def findResources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
	@staticmethod
	def getSystemClassLoader() -> javawrappers.java.lang.ClassLoader: ...
	@staticmethod
	def getSystemResource(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def list(self, ) -> javawrappers.java.util.stream.Stream: ...
	@staticmethod
	def getSystemResourceAsStream(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
	def initRemotePackageMap(self, arg0: javawrappers.java.lang.module.Configuration, arg1: javawrappers.java.util.List, ) -> javawrappers.jdk.internal.loader.Loader: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def loadClass(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def open(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Optional: ...


class LoaderPool:
	def __init__(self, arg0: javawrappers.java.lang.module.Configuration, arg1: javawrappers.java.util.List, arg2: javawrappers.java.lang.ClassLoader, ): ...
	def loaders(self, ) -> javawrappers.java.util.stream.Stream: ...
	def loaderFor(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.loader.Loader: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class FileURLMapper:
	def __init__(self, arg0: javawrappers.java.net.URL, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getPath(self, ) -> javawrappers.java.lang.String: ...
	def exists(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class BootLoader:
	class PackageHelper:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	@staticmethod
	def getClassLoaderValueMap() -> javawrappers.java.util.concurrent.ConcurrentHashMap: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def findResource(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	@overload
	@staticmethod
	def findResource(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	@staticmethod
	def loadClassOrNull(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def getServicesCatalog() -> javawrappers.jdk.internal.module.ServicesCatalog: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def findResources(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
	@staticmethod
	def loadModule(arg0: javawrappers.java.lang.module.ModuleReference, ) -> None: ...
	@staticmethod
	def packages() -> javawrappers.java.util.stream.Stream: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def hasClassPath() -> Union[int, JBoolean]: ...
	@staticmethod
	def getDefinedPackage(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Package: ...
	@staticmethod
	def definePackage(arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.Package: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def loadClass(arg0: javawrappers.java.lang.Module, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def findResourceAsStream(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
	@staticmethod
	def getUnnamedModule() -> javawrappers.java.lang.Module: ...


class ClassLoaderValue:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def sub(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.jdk.internal.loader.AbstractClassLoaderValue.Sub: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def computeIfAbsent(self, arg0: javawrappers.java.lang.ClassLoader, arg1: javawrappers.java.util.function.BiFunction, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def remove(self, arg0: javawrappers.java.lang.ClassLoader, arg1: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def removeAll(self, arg0: javawrappers.java.lang.ClassLoader, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.lang.Object: ...
	def isEqualOrDescendantOf(self, arg0: javawrappers.jdk.internal.loader.AbstractClassLoaderValue, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def putIfAbsent(self, arg0: javawrappers.java.lang.ClassLoader, arg1: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	def key(self, ) -> javawrappers.jdk.internal.loader.ClassLoaderValue: ...
	@overload
	def key(self, ) -> javawrappers.java.lang.Object: ...


