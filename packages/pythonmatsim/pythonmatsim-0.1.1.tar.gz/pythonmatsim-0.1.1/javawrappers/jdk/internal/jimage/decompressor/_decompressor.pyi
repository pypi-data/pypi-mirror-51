################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.io
import javawrappers.jdk.internal.jimage.decompressor
import javawrappers.java.nio

from jpype.types import *
from typing import Union

from typing import overload

class StringSharingDecompressorFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def newDecompressor(self, arg0: javawrappers.java.util.Properties, ) -> javawrappers.jdk.internal.jimage.decompressor.ResourceDecompressor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class ResourceDecompressorRepository:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def newResourceDecompressor(arg0: javawrappers.java.util.Properties, arg1: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.jimage.decompressor.ResourceDecompressor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class Decompressor:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def decompressResource(self, arg0: javawrappers.java.nio.ByteOrder, arg1: javawrappers.jdk.internal.jimage.decompressor.ResourceDecompressor.StringsProvider, arg2: JArray(JByte, 1), ) -> JArray(JByte, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class CompressedResourceHeader:
	def __init__(self, arg0: Union[long, JLong], arg1: Union[long, JLong], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JBoolean], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def readFromResource(arg0: javawrappers.java.nio.ByteOrder, arg1: JArray(JByte, 1), ) -> javawrappers.jdk.internal.jimage.decompressor.CompressedResourceHeader: ...
	def isTerminal(self, ) -> Union[int, JBoolean]: ...
	def getUncompressedSize(self, ) -> Union[long, JLong]: ...
	def getResourceSize(self, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def getBytes(self, arg0: javawrappers.java.nio.ByteOrder, ) -> JArray(JByte, 1): ...
	def getDecompressorNameOffset(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getSize() -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getContentOffset(self, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getStoredContent(self, arg0: javawrappers.jdk.internal.jimage.decompressor.ResourceDecompressor.StringsProvider, ) -> javawrappers.java.lang.String: ...


class ResourceDecompressorFactory:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def newDecompressor(self, arg0: javawrappers.java.util.Properties, ) -> javawrappers.jdk.internal.jimage.decompressor.ResourceDecompressor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class StringSharingDecompressor:
	def __init__(self, arg0: javawrappers.java.util.Properties, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def decompress(self, arg0: javawrappers.jdk.internal.jimage.decompressor.ResourceDecompressor.StringsProvider, arg1: JArray(JByte, 1), arg2: Union[int, JInt], arg3: Union[long, JLong], ) -> JArray(JByte, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getEncoded(arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def normalize(arg0: javawrappers.jdk.internal.jimage.decompressor.ResourceDecompressor.StringsProvider, arg1: JArray(JByte, 1), arg2: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def getSizes() -> JArray(Union[int, JInt], 1): ...


class CompressIndexes:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def decompressFlow(arg0: JArray(JByte, 1), ) -> javawrappers.java.util.List: ...
	@staticmethod
	def decompress(arg0: JArray(JByte, 1), arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def compress(arg0: Union[int, JInt], ) -> JArray(JByte, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def readInt(arg0: javawrappers.java.io.DataInputStream, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


class ResourceDecompressor:
	class StringsProvider:
		def getString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...


	def getName(self, ) -> javawrappers.java.lang.String: ...
	def decompress(self, arg0: javawrappers.jdk.internal.jimage.decompressor.ResourceDecompressor.StringsProvider, arg1: JArray(JByte, 1), arg2: Union[int, JInt], arg3: Union[long, JLong], ) -> JArray(JByte, 1): ...
	def getString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...


class ZipDecompressorFactory:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def newDecompressor(self, arg0: javawrappers.java.util.Properties, ) -> javawrappers.jdk.internal.jimage.decompressor.ResourceDecompressor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class SignatureParser:
	class ParseResult:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def parseSignatureDescriptor(arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.jimage.decompressor.SignatureParser.ParseResult: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def reconstruct(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.List, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


