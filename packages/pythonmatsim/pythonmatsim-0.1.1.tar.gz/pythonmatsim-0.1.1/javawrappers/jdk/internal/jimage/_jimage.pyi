################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.io
import javawrappers.jdk.internal.jimage
import javawrappers.java.nio
import javawrappers.java.util.function
import javawrappers.java.nio.file
import javawrappers.java.nio.file.attribute

from jpype.types import *
from typing import Union

from typing import overload

class ImageStringsReader:
	def add(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@staticmethod
	def mutf8FromString(arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def hashCode(arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def hashCode(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def hashCode(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def hashCode(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def get(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def unmaskedHashCode(arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> Union[int, JInt]: ...
	@staticmethod
	def stringFromByteBuffer(arg0: javawrappers.java.nio.ByteBuffer, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@overload
	@staticmethod
	def stringFromMUTF8(arg0: JArray(JByte, 1), ) -> javawrappers.java.lang.String: ...
	@overload
	@staticmethod
	def stringFromMUTF8(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.java.lang.String: ...


class ImageReader:
	class LinkNode:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getLocation(self, ) -> javawrappers.jdk.internal.jimage.ImageLocation: ...
		def contentOffset(self, ) -> Union[long, JLong]: ...
		def extension(self, ) -> javawrappers.java.lang.String: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		def lastModifiedTime(self, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
		def creationTime(self, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
		def setIsModulesDir(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def isModulesDir(self, ) -> Union[int, JBoolean]: ...
		def setIsRootDir(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getNameString(self, ) -> javawrappers.java.lang.String: ...
		def isCompleted(self, ) -> Union[int, JBoolean]: ...
		def isLink(self, ) -> Union[int, JBoolean]: ...
		def lastAccessTime(self, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
		@overload
		def resolveLink(self, arg0: Union[int, JBoolean], ) -> javawrappers.jdk.internal.jimage.ImageReader.Node: ...
		@overload
		def resolveLink(self, ) -> javawrappers.jdk.internal.jimage.ImageReader.Node: ...
		def setCompleted(self, arg0: Union[int, JBoolean], ) -> None: ...
		def getChildren(self, ) -> javawrappers.java.util.List: ...
		def setIsPackagesDir(self, ) -> None: ...
		def isRootDir(self, ) -> Union[int, JBoolean]: ...
		def compressedSize(self, ) -> Union[long, JLong]: ...
		def size(self, ) -> Union[long, JLong]: ...
		def getFileAttributes(self, ) -> javawrappers.java.nio.file.attribute.BasicFileAttributes: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def isPackagesDir(self, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def isResource(self, ) -> Union[int, JBoolean]: ...
		def isDirectory(self, ) -> Union[int, JBoolean]: ...


	class Resource:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getLocation(self, ) -> javawrappers.jdk.internal.jimage.ImageLocation: ...
		def contentOffset(self, ) -> Union[long, JLong]: ...
		def extension(self, ) -> javawrappers.java.lang.String: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		def lastModifiedTime(self, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
		def creationTime(self, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
		def setIsModulesDir(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def isModulesDir(self, ) -> Union[int, JBoolean]: ...
		def setIsRootDir(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getNameString(self, ) -> javawrappers.java.lang.String: ...
		def isCompleted(self, ) -> Union[int, JBoolean]: ...
		def isLink(self, ) -> Union[int, JBoolean]: ...
		def lastAccessTime(self, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
		@overload
		def resolveLink(self, ) -> javawrappers.jdk.internal.jimage.ImageReader.Node: ...
		@overload
		def resolveLink(self, arg0: Union[int, JBoolean], ) -> javawrappers.jdk.internal.jimage.ImageReader.Node: ...
		def setCompleted(self, arg0: Union[int, JBoolean], ) -> None: ...
		def getChildren(self, ) -> javawrappers.java.util.List: ...
		def setIsPackagesDir(self, ) -> None: ...
		def isRootDir(self, ) -> Union[int, JBoolean]: ...
		def compressedSize(self, ) -> Union[long, JLong]: ...
		def size(self, ) -> Union[long, JLong]: ...
		def getFileAttributes(self, ) -> javawrappers.java.nio.file.attribute.BasicFileAttributes: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def isPackagesDir(self, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def isResource(self, ) -> Union[int, JBoolean]: ...
		def isDirectory(self, ) -> Union[int, JBoolean]: ...


	class Directory:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getLocation(self, ) -> javawrappers.jdk.internal.jimage.ImageLocation: ...
		def contentOffset(self, ) -> Union[long, JLong]: ...
		def extension(self, ) -> javawrappers.java.lang.String: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		def lastModifiedTime(self, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
		def creationTime(self, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
		def setIsModulesDir(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def isModulesDir(self, ) -> Union[int, JBoolean]: ...
		def setIsRootDir(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def isCompleted(self, ) -> Union[int, JBoolean]: ...
		def getNameString(self, ) -> javawrappers.java.lang.String: ...
		def isLink(self, ) -> Union[int, JBoolean]: ...
		def lastAccessTime(self, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
		@overload
		def resolveLink(self, ) -> javawrappers.jdk.internal.jimage.ImageReader.Node: ...
		@overload
		def resolveLink(self, arg0: Union[int, JBoolean], ) -> javawrappers.jdk.internal.jimage.ImageReader.Node: ...
		def setCompleted(self, arg0: Union[int, JBoolean], ) -> None: ...
		def setIsPackagesDir(self, ) -> None: ...
		def getChildren(self, ) -> javawrappers.java.util.List: ...
		def isRootDir(self, ) -> Union[int, JBoolean]: ...
		def compressedSize(self, ) -> Union[long, JLong]: ...
		def size(self, ) -> Union[long, JLong]: ...
		def getFileAttributes(self, ) -> javawrappers.java.nio.file.attribute.BasicFileAttributes: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def isPackagesDir(self, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def isResource(self, ) -> Union[int, JBoolean]: ...
		def walk(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def isDirectory(self, ) -> Union[int, JBoolean]: ...


	class Node:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getLocation(self, ) -> javawrappers.jdk.internal.jimage.ImageLocation: ...
		def contentOffset(self, ) -> Union[long, JLong]: ...
		def extension(self, ) -> javawrappers.java.lang.String: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		def lastModifiedTime(self, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
		def creationTime(self, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
		def setIsModulesDir(self, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def isModulesDir(self, ) -> Union[int, JBoolean]: ...
		def setIsRootDir(self, ) -> None: ...
		def notify(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def isCompleted(self, ) -> Union[int, JBoolean]: ...
		def getNameString(self, ) -> javawrappers.java.lang.String: ...
		def isLink(self, ) -> Union[int, JBoolean]: ...
		def lastAccessTime(self, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
		@overload
		def resolveLink(self, ) -> javawrappers.jdk.internal.jimage.ImageReader.Node: ...
		@overload
		def resolveLink(self, arg0: Union[int, JBoolean], ) -> javawrappers.jdk.internal.jimage.ImageReader.Node: ...
		def setCompleted(self, arg0: Union[int, JBoolean], ) -> None: ...
		def getChildren(self, ) -> javawrappers.java.util.List: ...
		def setIsPackagesDir(self, ) -> None: ...
		def isRootDir(self, ) -> Union[int, JBoolean]: ...
		def compressedSize(self, ) -> Union[long, JLong]: ...
		def size(self, ) -> Union[long, JLong]: ...
		def getFileAttributes(self, ) -> javawrappers.java.nio.file.attribute.BasicFileAttributes: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def isPackagesDir(self, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def isResource(self, ) -> Union[int, JBoolean]: ...
		def isDirectory(self, ) -> Union[int, JBoolean]: ...


	class SharedImageReader:
		class LocationVisitor:
			def visit(self, arg0: javawrappers.jdk.internal.jimage.ImageLocation, ) -> None: ...


		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		def getResource(self, arg0: javawrappers.jdk.internal.jimage.ImageLocation, ) -> JArray(JByte, 1): ...
		@overload
		def getResource(self, arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...
		def getAttributes(self, arg0: Union[int, JInt], ) -> JArray(Union[long, JLong], 1): ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		@overload
		def findLocation(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.jimage.ImageLocation: ...
		@overload
		def findLocation(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.jimage.ImageLocation: ...
		def getEntryNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
		def getString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...
		def getStrings(self, ) -> javawrappers.jdk.internal.jimage.ImageStringsReader: ...
		def getHeader(self, ) -> javawrappers.jdk.internal.jimage.ImageHeader: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def getResourceStream(self, arg0: javawrappers.jdk.internal.jimage.ImageLocation, ) -> javawrappers.java.io.InputStream: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getImagePath(self, ) -> javawrappers.java.nio.file.Path: ...
		def getByteOrder(self, ) -> javawrappers.java.nio.ByteOrder: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@staticmethod
		def releaseByteBuffer(arg0: javawrappers.java.nio.ByteBuffer, ) -> None: ...
		def visit(self, arg0: javawrappers.jdk.internal.jimage.ImageLocation, ) -> None: ...
		def getResourceBuffer(self, arg0: javawrappers.jdk.internal.jimage.ImageLocation, ) -> javawrappers.java.nio.ByteBuffer: ...
		@overload
		def close(self, arg0: javawrappers.jdk.internal.jimage.ImageReader, ) -> None: ...
		@overload
		def close(self, ) -> None: ...
		@overload
		@staticmethod
		def open(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.nio.ByteOrder, ) -> javawrappers.jdk.internal.jimage.ImageReader: ...
		@overload
		@staticmethod
		def open(arg0: javawrappers.java.nio.file.Path, ) -> javawrappers.jdk.internal.jimage.BasicImageReader: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def getLocation(self, ) -> javawrappers.jdk.internal.jimage.ImageLocation: ...
	@overload
	def getLocation(self, ) -> javawrappers.jdk.internal.jimage.ImageLocation: ...
	@overload
	def contentOffset(self, ) -> Union[long, JLong]: ...
	@overload
	def contentOffset(self, ) -> Union[long, JLong]: ...
	@overload
	def getResource(self, arg0: javawrappers.jdk.internal.jimage.ImageLocation, ) -> JArray(JByte, 1): ...
	@overload
	def getResource(self, arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...
	@overload
	def getResource(self, arg0: javawrappers.jdk.internal.jimage.ImageReader.Resource, ) -> JArray(JByte, 1): ...
	@overload
	def getResource(self, arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...
	@overload
	def getResource(self, arg0: javawrappers.jdk.internal.jimage.ImageLocation, ) -> JArray(JByte, 1): ...
	@overload
	def getResource(self, arg0: javawrappers.jdk.internal.jimage.ImageReader.Node, ) -> JArray(JByte, 1): ...
	@overload
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def setIsModulesDir(self, ) -> None: ...
	@overload
	def findLocation(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.jimage.ImageLocation: ...
	@overload
	def findLocation(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.jimage.ImageLocation: ...
	@overload
	def findLocation(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.jimage.ImageLocation: ...
	@overload
	def findLocation(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.jimage.ImageLocation: ...
	def setIsRootDir(self, ) -> None: ...
	@overload
	def getResourceStream(self, arg0: javawrappers.jdk.internal.jimage.ImageLocation, ) -> javawrappers.java.io.InputStream: ...
	@overload
	def getResourceStream(self, arg0: javawrappers.jdk.internal.jimage.ImageLocation, ) -> javawrappers.java.io.InputStream: ...
	@overload
	@staticmethod
	def releaseByteBuffer(arg0: javawrappers.java.nio.ByteBuffer, ) -> None: ...
	@overload
	@staticmethod
	def releaseByteBuffer(arg0: javawrappers.java.nio.ByteBuffer, ) -> None: ...
	def getModuleNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	def getAttributes(self, arg0: Union[int, JInt], ) -> JArray(Union[long, JLong], 1): ...
	@overload
	def getAttributes(self, arg0: Union[int, JInt], ) -> JArray(Union[long, JLong], 1): ...
	def setCompleted(self, arg0: Union[int, JBoolean], ) -> None: ...
	@overload
	def getChildren(self, ) -> javawrappers.java.util.List: ...
	@overload
	def getChildren(self, ) -> javawrappers.java.util.List: ...
	@overload
	def compressedSize(self, ) -> Union[long, JLong]: ...
	@overload
	def compressedSize(self, ) -> Union[long, JLong]: ...
	@overload
	def size(self, ) -> Union[long, JLong]: ...
	@overload
	def size(self, ) -> Union[long, JLong]: ...
	def getFileAttributes(self, ) -> javawrappers.java.nio.file.attribute.BasicFileAttributes: ...
	def getRootDirectory(self, ) -> javawrappers.jdk.internal.jimage.ImageReader.Directory: ...
	@overload
	def getByteOrder(self, ) -> javawrappers.java.nio.ByteOrder: ...
	@overload
	def getByteOrder(self, ) -> javawrappers.java.nio.ByteOrder: ...
	@overload
	def isResource(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isResource(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isDirectory(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isDirectory(self, ) -> Union[int, JBoolean]: ...
	@overload
	def extension(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def extension(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def lastModifiedTime(self, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
	def creationTime(self, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def getEntryNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	@overload
	def getEntryNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def isModulesDir(self, ) -> Union[int, JBoolean]: ...
	def notify(self, ) -> None: ...
	@overload
	def getHeader(self, ) -> javawrappers.jdk.internal.jimage.ImageHeader: ...
	@overload
	def getHeader(self, ) -> javawrappers.jdk.internal.jimage.ImageHeader: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def findNode(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.jimage.ImageReader.Node: ...
	@overload
	def getResourceBuffer(self, arg0: javawrappers.jdk.internal.jimage.ImageLocation, ) -> javawrappers.java.nio.ByteBuffer: ...
	@overload
	def getResourceBuffer(self, arg0: javawrappers.jdk.internal.jimage.ImageLocation, ) -> javawrappers.java.nio.ByteBuffer: ...
	@overload
	def close(self, arg0: javawrappers.jdk.internal.jimage.ImageReader, ) -> None: ...
	@overload
	def close(self, ) -> None: ...
	@overload
	def close(self, ) -> None: ...
	@overload
	def isCompleted(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isCompleted(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isCompleted(self, ) -> Union[int, JBoolean]: ...
	def getNameString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def isLink(self, ) -> Union[int, JBoolean]: ...
	@overload
	def isLink(self, ) -> Union[int, JBoolean]: ...
	def lastAccessTime(self, ) -> javawrappers.java.nio.file.attribute.FileTime: ...
	@overload
	def resolveLink(self, arg0: Union[int, JBoolean], ) -> javawrappers.jdk.internal.jimage.ImageReader.Node: ...
	@overload
	def resolveLink(self, ) -> javawrappers.jdk.internal.jimage.ImageReader.Node: ...
	@overload
	def resolveLink(self, arg0: Union[int, JBoolean], ) -> javawrappers.jdk.internal.jimage.ImageReader.Node: ...
	@overload
	def getString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	@overload
	def getStrings(self, ) -> javawrappers.jdk.internal.jimage.ImageStringsReader: ...
	@overload
	def getStrings(self, ) -> javawrappers.jdk.internal.jimage.ImageStringsReader: ...
	def setIsPackagesDir(self, ) -> None: ...
	def isRootDir(self, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isPackagesDir(self, ) -> Union[int, JBoolean]: ...
	@overload
	def getImagePath(self, ) -> javawrappers.java.nio.file.Path: ...
	@overload
	def getImagePath(self, ) -> javawrappers.java.nio.file.Path: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visit(self, arg0: javawrappers.jdk.internal.jimage.ImageLocation, ) -> None: ...
	def walk(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	@overload
	@staticmethod
	def open(arg0: javawrappers.java.nio.file.Path, ) -> javawrappers.jdk.internal.jimage.ImageReader: ...
	@overload
	@staticmethod
	def open(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.nio.ByteOrder, ) -> javawrappers.jdk.internal.jimage.ImageReader: ...
	@overload
	@staticmethod
	def open(arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.nio.ByteOrder, ) -> javawrappers.jdk.internal.jimage.ImageReader: ...
	@overload
	@staticmethod
	def open(arg0: javawrappers.java.nio.file.Path, ) -> javawrappers.jdk.internal.jimage.BasicImageReader: ...


class ImageLocation:
	def __init__(self, arg0: JArray(Union[long, JLong], 1), arg1: javawrappers.jdk.internal.jimage.ImageStrings, ): ...
	def getModule(self, ) -> javawrappers.java.lang.String: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getParent(self, ) -> javawrappers.java.lang.String: ...
	def getExtensionOffset(self, ) -> Union[int, JInt]: ...
	def getExtension(self, ) -> javawrappers.java.lang.String: ...
	def getParentOffset(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def compress(arg0: JArray(Union[long, JLong], 1), ) -> JArray(JByte, 1): ...
	def notifyAll(self, ) -> None: ...
	def getUncompressedSize(self, ) -> Union[long, JLong]: ...
	def notify(self, ) -> None: ...
	def getCompressedSize(self, ) -> Union[long, JLong]: ...
	def getModuleOffset(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getContentOffset(self, ) -> Union[long, JLong]: ...
	def verify(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getBase(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getFullName(self, arg0: Union[int, JBoolean], ) -> javawrappers.java.lang.String: ...
	@overload
	def getFullName(self, ) -> javawrappers.java.lang.String: ...
	def getBaseOffset(self, ) -> Union[int, JInt]: ...


class ImageStream:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: JArray(JByte, 1), ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.nio.ByteOrder, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.nio.ByteBuffer, ): ...
	@overload
	def __init__(self, arg0: JArray(JByte, 1), arg1: javawrappers.java.nio.ByteOrder, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.java.nio.ByteOrder, ): ...
	def hasByte(self, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getBuffer(self, ) -> javawrappers.java.nio.ByteBuffer: ...
	def notifyAll(self, ) -> None: ...
	def skip(self, arg0: Union[int, JInt], ) -> None: ...
	def putLong(self, arg0: Union[long, JLong], ) -> javawrappers.jdk.internal.jimage.ImageStream: ...
	def align(self, arg0: Union[int, JInt], ) -> javawrappers.jdk.internal.jimage.ImageStream: ...
	def notify(self, ) -> None: ...
	def getBytes(self, ) -> JArray(JByte, 1): ...
	@overload
	def put(self, arg0: javawrappers.jdk.internal.jimage.ImageStream, ) -> javawrappers.jdk.internal.jimage.ImageStream: ...
	@overload
	def put(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> javawrappers.jdk.internal.jimage.ImageStream: ...
	@overload
	def put(self, arg0: Union[int, JInt], ) -> javawrappers.jdk.internal.jimage.ImageStream: ...
	@overload
	def put(self, arg0: JByte, ) -> javawrappers.jdk.internal.jimage.ImageStream: ...
	def setPosition(self, arg0: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def get(self, arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	@overload
	def get(self, ) -> Union[int, JInt]: ...
	def toArray(self, ) -> JArray(JByte, 1): ...
	@overload
	def putShort(self, arg0: Union[int, JInt], ) -> javawrappers.jdk.internal.jimage.ImageStream: ...
	@overload
	def putShort(self, arg0: Union[int, JShort], ) -> javawrappers.jdk.internal.jimage.ImageStream: ...
	def ensure(self, arg0: Union[int, JInt], ) -> None: ...
	def putInt(self, arg0: Union[int, JInt], ) -> javawrappers.jdk.internal.jimage.ImageStream: ...
	def getShort(self, ) -> Union[int, JInt]: ...
	def getLong(self, ) -> Union[long, JLong]: ...
	def getInt(self, ) -> Union[int, JInt]: ...
	def getSize(self, ) -> Union[int, JInt]: ...
	def getPosition(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def hasBytes(self, arg0: Union[int, JInt], ) -> Union[int, JBoolean]: ...


class BasicImageReader:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def getResource(self, arg0: javawrappers.jdk.internal.jimage.ImageLocation, ) -> JArray(JByte, 1): ...
	@overload
	def getResource(self, arg0: javawrappers.java.lang.String, ) -> JArray(JByte, 1): ...
	def getAttributes(self, arg0: Union[int, JInt], ) -> JArray(Union[long, JLong], 1): ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def findLocation(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.jimage.ImageLocation: ...
	@overload
	def findLocation(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.jimage.ImageLocation: ...
	def getEntryNames(self, ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getString(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getStrings(self, ) -> javawrappers.jdk.internal.jimage.ImageStringsReader: ...
	def getHeader(self, ) -> javawrappers.jdk.internal.jimage.ImageHeader: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getResourceStream(self, arg0: javawrappers.jdk.internal.jimage.ImageLocation, ) -> javawrappers.java.io.InputStream: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getImagePath(self, ) -> javawrappers.java.nio.file.Path: ...
	def getByteOrder(self, ) -> javawrappers.java.nio.ByteOrder: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def releaseByteBuffer(arg0: javawrappers.java.nio.ByteBuffer, ) -> None: ...
	def getResourceBuffer(self, arg0: javawrappers.jdk.internal.jimage.ImageLocation, ) -> javawrappers.java.nio.ByteBuffer: ...
	def close(self, ) -> None: ...
	@staticmethod
	def open(arg0: javawrappers.java.nio.file.Path, ) -> javawrappers.jdk.internal.jimage.BasicImageReader: ...


class ImageHeader:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getMinorVersion(self, ) -> Union[int, JInt]: ...
	def getRedirectSize(self, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	@overload
	def writeTo(self, arg0: javawrappers.jdk.internal.jimage.ImageStream, ) -> None: ...
	@overload
	def writeTo(self, arg0: javawrappers.java.nio.ByteBuffer, ) -> None: ...
	def getMajorVersion(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getStringsSize(self, ) -> Union[int, JInt]: ...
	def getIndexSize(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOffsetsSize(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def getHeaderSize() -> Union[int, JInt]: ...
	def getTableLength(self, ) -> Union[int, JInt]: ...
	def getFlags(self, ) -> Union[int, JInt]: ...
	def getMagic(self, ) -> Union[int, JInt]: ...
	def getResourceCount(self, ) -> Union[int, JInt]: ...
	def getLocationsSize(self, ) -> Union[int, JInt]: ...


class ImageStrings:
	def add(self, arg0: javawrappers.java.lang.String, ) -> Union[int, JInt]: ...
	def get(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...


class ImageReaderFactory:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def get(arg0: javawrappers.java.nio.file.Path, ) -> javawrappers.jdk.internal.jimage.ImageReader: ...
	@staticmethod
	def getImageReader() -> javawrappers.jdk.internal.jimage.ImageReader: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


