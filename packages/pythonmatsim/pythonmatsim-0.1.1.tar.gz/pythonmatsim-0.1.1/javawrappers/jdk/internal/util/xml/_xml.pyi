################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.jdk.internal.org.xml.sax
import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.io
import javawrappers.jdk.internal.org.xml.sax.helpers
import javawrappers.java.nio.charset

from jpype.types import *
from typing import Union

from typing import overload

class XMLStreamWriter:
	def writeEndDocument(self, ) -> None: ...
	def flush(self, ) -> None: ...
	def writeDTD(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def writeEmptyElement(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def writeCData(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeStartDocument(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeStartDocument(self, ) -> None: ...
	@overload
	def writeStartDocument(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def writeStartElement(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def close(self, ) -> None: ...
	def writeEndElement(self, ) -> None: ...
	@overload
	def writeCharacters(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def writeCharacters(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def writeAttribute(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...


class PropertiesDefaultHandler:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def endPrefixMapping(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def error(self, arg0: javawrappers.jdk.internal.org.xml.sax.SAXParseException, ) -> None: ...
	def notify(self, ) -> None: ...
	def notationDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def characters(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def startPrefixMapping(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def endElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def load(self, arg0: javawrappers.java.util.Properties, arg1: javawrappers.java.io.InputStream, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def warning(self, arg0: javawrappers.jdk.internal.org.xml.sax.SAXParseException, ) -> None: ...
	def setDocumentLocator(self, arg0: javawrappers.jdk.internal.org.xml.sax.Locator, ) -> None: ...
	def ignorableWhitespace(self, arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: Union[int, JInt], ) -> None: ...
	def startElement(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.jdk.internal.org.xml.sax.Attributes, ) -> None: ...
	def fatalError(self, arg0: javawrappers.jdk.internal.org.xml.sax.SAXParseException, ) -> None: ...
	def resolveEntity(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.org.xml.sax.InputSource: ...
	def store(self, arg0: javawrappers.java.util.Properties, arg1: javawrappers.java.io.OutputStream, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.nio.charset.Charset, ) -> None: ...
	def endDocument(self, ) -> None: ...
	def startDocument(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def skippedEntity(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def unparsedEntityDecl(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def processingInstruction(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...


class XMLStreamException:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.Throwable, ): ...
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintStream, ) -> None: ...
	@overload
	def printStackTrace(self, ) -> None: ...
	@overload
	def printStackTrace(self, arg0: javawrappers.java.io.PrintWriter, ) -> None: ...
	def getLocalizedMessage(self, ) -> javawrappers.java.lang.String: ...
	def notifyAll(self, ) -> None: ...
	def initCause(self, arg0: javawrappers.java.lang.Throwable, ) -> javawrappers.java.lang.Throwable: ...
	def getMessage(self, ) -> javawrappers.java.lang.String: ...
	def getCause(self, ) -> javawrappers.java.lang.Throwable: ...
	def notify(self, ) -> None: ...
	def getNestedException(self, ) -> javawrappers.java.lang.Throwable: ...
	def addSuppressed(self, arg0: javawrappers.java.lang.Throwable, ) -> None: ...
	def setStackTrace(self, arg0: JArray(javawrappers.java.lang.StackTraceElement, 1), ) -> None: ...
	def getStackTrace(self, ) -> JArray(javawrappers.java.lang.StackTraceElement, 1): ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getSuppressed(self, ) -> JArray(javawrappers.java.lang.Throwable, 1): ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def fillInStackTrace(self, ) -> javawrappers.java.lang.Throwable: ...


class SAXParser:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def isNamespaceAware(self, ) -> Union[int, JBoolean]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def parse(self, arg0: javawrappers.jdk.internal.org.xml.sax.InputSource, arg1: javawrappers.jdk.internal.org.xml.sax.helpers.DefaultHandler, ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.java.io.InputStream, arg1: javawrappers.jdk.internal.org.xml.sax.helpers.DefaultHandler, ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.jdk.internal.org.xml.sax.helpers.DefaultHandler, ) -> None: ...
	@overload
	def parse(self, arg0: javawrappers.java.io.File, arg1: javawrappers.jdk.internal.org.xml.sax.helpers.DefaultHandler, ) -> None: ...
	def getXMLReader(self, ) -> javawrappers.jdk.internal.org.xml.sax.XMLReader: ...
	def notify(self, ) -> None: ...
	def isXIncludeAware(self, ) -> Union[int, JBoolean]: ...
	def isValidating(self, ) -> Union[int, JBoolean]: ...


