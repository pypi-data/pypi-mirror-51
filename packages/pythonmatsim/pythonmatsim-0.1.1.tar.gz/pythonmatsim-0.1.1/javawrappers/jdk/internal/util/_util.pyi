################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util.function

from jpype.types import *
from typing import Union

from typing import overload

class ArraysSupport:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	@staticmethod
	def mismatch(arg0: JArray(Union[int, JInt], 1), arg1: JArray(Union[int, JInt], 1), arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def mismatch(arg0: JArray(Union[long, JLong], 1), arg1: Union[int, JInt], arg2: JArray(Union[long, JLong], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def mismatch(arg0: JArray(Union[int, JShort], 1), arg1: JArray(Union[int, JShort], 1), arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def mismatch(arg0: JArray(Union[string, JString], 1), arg1: Union[int, JInt], arg2: JArray(Union[string, JString], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def mismatch(arg0: JArray(Union[long, JLong], 1), arg1: JArray(Union[long, JLong], 1), arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def mismatch(arg0: JArray(JByte, 1), arg1: JArray(JByte, 1), arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def mismatch(arg0: JArray(Union[float, JFloat], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JFloat], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def mismatch(arg0: JArray(Union[float, JFloat], 1), arg1: JArray(Union[float, JFloat], 1), arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def mismatch(arg0: JArray(Union[int, JShort], 1), arg1: Union[int, JInt], arg2: JArray(Union[int, JShort], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def mismatch(arg0: JArray(Union[int, JInt], 1), arg1: Union[int, JInt], arg2: JArray(Union[int, JInt], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def mismatch(arg0: JArray(Union[int, JBoolean], 1), arg1: JArray(Union[int, JBoolean], 1), arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def mismatch(arg0: JArray(Union[float, JDouble], 1), arg1: JArray(Union[float, JDouble], 1), arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def mismatch(arg0: JArray(Union[int, JBoolean], 1), arg1: Union[int, JInt], arg2: JArray(Union[int, JBoolean], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def mismatch(arg0: JArray(Union[string, JString], 1), arg1: JArray(Union[string, JString], 1), arg2: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def mismatch(arg0: JArray(JByte, 1), arg1: Union[int, JInt], arg2: JArray(JByte, 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def mismatch(arg0: JArray(Union[float, JDouble], 1), arg1: Union[int, JInt], arg2: JArray(Union[float, JDouble], 1), arg3: Union[int, JInt], arg4: Union[int, JInt], ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def vectorizedMismatch(arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], arg2: javawrappers.java.lang.Object, arg3: Union[long, JLong], arg4: Union[int, JInt], arg5: Union[int, JInt], ) -> Union[int, JInt]: ...


class StaticProperty:
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def userHome() -> javawrappers.java.lang.String: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def userDir() -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def userName() -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def javaHome() -> javawrappers.java.lang.String: ...


class Preconditions:
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def checkFromIndexSize(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.util.function.BiFunction, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def outOfBoundsExceptionFormatter(arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.function.BiFunction: ...
	@staticmethod
	def checkIndex(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.util.function.BiFunction, ) -> Union[int, JInt]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def checkFromToIndex(arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: Union[int, JInt], arg3: javawrappers.java.util.function.BiFunction, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...


