################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.jdk.internal.org.objectweb.asm.tree
import javawrappers.jdk.internal.org.objectweb.asm
import javawrappers.java.util.function

from jpype.types import *
from typing import Union

from typing import overload

class LdcInsnNode:
	def __init__(self, arg0: javawrappers.java.lang.Object, ): ...
	def getPrevious(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getType(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getNext(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def notify(self, ) -> None: ...
	def getOpcode(self, ) -> Union[int, JInt]: ...
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, ) -> None: ...


class ModuleOpenNode:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.util.List, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.ModuleVisitor, ) -> None: ...


class TypeAnnotationNode:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg3: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitEnd(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def check(self, arg0: Union[int, JInt], ) -> None: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor, ) -> None: ...
	def visitEnum(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def visitArray(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visit(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...


class JumpInsnNode:
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.tree.LabelNode, ): ...
	def getPrevious(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getNext(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, ) -> None: ...
	def getType(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOpcode(self, ) -> Union[int, JInt]: ...
	def setOpcode(self, arg0: Union[int, JInt], ) -> None: ...


class FrameNode:
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(javawrappers.java.lang.Object, 1), arg3: Union[int, JInt], arg4: JArray(javawrappers.java.lang.Object, 1), ): ...
	def getPrevious(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getType(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getNext(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def notify(self, ) -> None: ...
	def getOpcode(self, ) -> Union[int, JInt]: ...
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, ) -> None: ...


class LineNumberNode:
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.tree.LabelNode, ): ...
	def getPrevious(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getType(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getNext(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def notify(self, ) -> None: ...
	def getOpcode(self, ) -> Union[int, JInt]: ...
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, ) -> None: ...


class ModuleRequireNode:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.ModuleVisitor, ) -> None: ...


class IntInsnNode:
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
	def getPrevious(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getNext(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, ) -> None: ...
	def getType(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOpcode(self, ) -> Union[int, JInt]: ...
	def setOpcode(self, arg0: Union[int, JInt], ) -> None: ...


class MethodInsnNode:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: Union[int, JBoolean], ): ...
	def getPrevious(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getNext(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, ) -> None: ...
	def getType(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOpcode(self, ) -> Union[int, JInt]: ...
	def setOpcode(self, arg0: Union[int, JInt], ) -> None: ...


class AnnotationNode:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitEnd(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def check(self, arg0: Union[int, JInt], ) -> None: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor, ) -> None: ...
	def visitEnum(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def visitArray(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visit(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...


class MethodNode:
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: JArray(javawrappers.java.lang.String, 1), ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: JArray(javawrappers.java.lang.String, 1), ): ...
	@overload
	def __init__(self, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitTypeAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitJumpInsn(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitAttribute(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Attribute, ) -> None: ...
	@overload
	def visitMethodInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: Union[int, JBoolean], ) -> None: ...
	@overload
	def visitMethodInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def visitTryCatchBlock(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, arg2: javawrappers.jdk.internal.org.objectweb.asm.Label, arg3: javawrappers.java.lang.String, ) -> None: ...
	def visitTableSwitchInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.jdk.internal.org.objectweb.asm.Label, *arg3: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def notify(self, ) -> None: ...
	def visitParameterAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitParameter(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def visitInsnAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitMultiANewArrayInsn(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ) -> None: ...
	def visitCode(self, ) -> None: ...
	def visitLdcInsn(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	def visitTypeInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ) -> None: ...
	def visitFrame(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: JArray(javawrappers.java.lang.Object, 1), arg3: Union[int, JInt], arg4: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	def visitLocalVariable(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.jdk.internal.org.objectweb.asm.Label, arg4: javawrappers.jdk.internal.org.objectweb.asm.Label, arg5: Union[int, JInt], ) -> None: ...
	def visitEnd(self, ) -> None: ...
	def visitLabel(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitLookupSwitchInsn(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, arg1: JArray(Union[int, JInt], 1), arg2: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), ) -> None: ...
	def check(self, arg0: Union[int, JInt], ) -> None: ...
	def visitLocalVariableAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), arg3: JArray(javawrappers.jdk.internal.org.objectweb.asm.Label, 1), arg4: JArray(Union[int, JInt], 1), arg5: javawrappers.java.lang.String, arg6: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitIntInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitIincInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitInsn(self, arg0: Union[int, JInt], ) -> None: ...
	@overload
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.ClassVisitor, ) -> None: ...
	@overload
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, ) -> None: ...
	def visitLineNumber(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.Label, ) -> None: ...
	def visitVarInsn(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitTryCatchAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitInvokeDynamicInsn(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.jdk.internal.org.objectweb.asm.Handle, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visitAnnotationDefault(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitMaxs(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ) -> None: ...
	def visitFieldInsn(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...


class LocalVariableNode:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.jdk.internal.org.objectweb.asm.tree.LabelNode, arg4: javawrappers.jdk.internal.org.objectweb.asm.tree.LabelNode, arg5: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, ) -> None: ...


class LocalVariableAnnotationNode:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: JArray(javawrappers.jdk.internal.org.objectweb.asm.tree.LabelNode, 1), arg3: JArray(javawrappers.jdk.internal.org.objectweb.asm.tree.LabelNode, 1), arg4: JArray(Union[int, JInt], 1), arg5: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg3: JArray(javawrappers.jdk.internal.org.objectweb.asm.tree.LabelNode, 1), arg4: JArray(javawrappers.jdk.internal.org.objectweb.asm.tree.LabelNode, 1), arg5: JArray(Union[int, JInt], 1), arg6: javawrappers.java.lang.String, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitEnd(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def check(self, arg0: Union[int, JInt], ) -> None: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def notify(self, ) -> None: ...
	def visitEnum(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor, ) -> None: ...
	@overload
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, arg1: Union[int, JBoolean], ) -> None: ...
	def visitArray(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visit(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Object, ) -> None: ...


class ModuleNode:
	@overload
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: Union[int, JInt], arg3: javawrappers.java.lang.String, arg4: javawrappers.java.util.List, arg5: javawrappers.java.util.List, arg6: javawrappers.java.util.List, arg7: javawrappers.java.util.List, arg8: javawrappers.java.util.List, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitEnd(self, ) -> None: ...
	def visitProvide(self, arg0: javawrappers.java.lang.String, *arg1: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.ClassVisitor, ) -> None: ...
	def visitUse(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def visitMainClass(self, arg0: javawrappers.java.lang.String, ) -> None: ...
	def visitRequire(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visitExport(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], *arg2: javawrappers.java.lang.String, ) -> None: ...
	def visitOpen(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], *arg2: javawrappers.java.lang.String, ) -> None: ...
	def visitPackage(self, arg0: javawrappers.java.lang.String, ) -> None: ...


class LabelNode:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Label, ): ...
	def getPrevious(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getLabel(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.Label: ...
	def notifyAll(self, ) -> None: ...
	def getNext(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, ) -> None: ...
	def getType(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def resetLabel(self, ) -> None: ...
	def getOpcode(self, ) -> Union[int, JInt]: ...


class AbstractInsnNode:
	def getPrevious(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getType(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getNext(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def notify(self, ) -> None: ...
	def getOpcode(self, ) -> Union[int, JInt]: ...
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, ) -> None: ...


class ModuleProvideNode:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.List, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.ModuleVisitor, ) -> None: ...


class ModuleExportNode:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.util.List, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.ModuleVisitor, ) -> None: ...


class LookupSwitchInsnNode:
	def __init__(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.tree.LabelNode, arg1: JArray(Union[int, JInt], 1), arg2: JArray(javawrappers.jdk.internal.org.objectweb.asm.tree.LabelNode, 1), ): ...
	def getPrevious(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getType(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getNext(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def notify(self, ) -> None: ...
	def getOpcode(self, ) -> Union[int, JInt]: ...
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, ) -> None: ...


class InsnList:
	def __init__(self, ): ...
	class InsnListIterator:
		def next(self, ) -> javawrappers.java.lang.Object: ...
		def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def set(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
		def previous(self, ) -> javawrappers.java.lang.Object: ...
		def notifyAll(self, ) -> None: ...
		def hasNext(self, ) -> Union[int, JBoolean]: ...
		def nextIndex(self, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def remove(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def hasPrevious(self, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
		def previousIndex(self, ) -> Union[int, JInt]: ...


	def next(self, ) -> javawrappers.java.lang.Object: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def resetLabels(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@overload
	def insert(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.tree.InsnList, ) -> None: ...
	@overload
	def insert(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode, ) -> None: ...
	@overload
	def insert(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode, arg1: javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode, ) -> None: ...
	@overload
	def insert(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode, arg1: javawrappers.jdk.internal.org.objectweb.asm.tree.InsnList, ) -> None: ...
	def nextIndex(self, ) -> Union[int, JInt]: ...
	def getLast(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def notify(self, ) -> None: ...
	@overload
	def remove(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode, ) -> None: ...
	@overload
	def remove(self, ) -> None: ...
	@overload
	def insertBefore(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode, arg1: javawrappers.jdk.internal.org.objectweb.asm.tree.InsnList, ) -> None: ...
	@overload
	def insertBefore(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode, arg1: javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode, ) -> None: ...
	@overload
	def iterator(self, ) -> javawrappers.java.util.ListIterator: ...
	@overload
	def iterator(self, arg0: Union[int, JInt], ) -> javawrappers.java.util.ListIterator: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getFirst(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def get(self, arg0: Union[int, JInt], ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def toArray(self, ) -> JArray(javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode, 1): ...
	def hasPrevious(self, ) -> Union[int, JBoolean]: ...
	def forEachRemaining(self, arg0: javawrappers.java.util.function.Consumer, ) -> None: ...
	def indexOf(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode, ) -> Union[int, JInt]: ...
	@overload
	def add(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.tree.InsnList, ) -> None: ...
	@overload
	def add(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode, ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def set(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode, arg1: javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode, ) -> None: ...
	def previous(self, ) -> javawrappers.java.lang.Object: ...
	def clear(self, ) -> None: ...
	def hasNext(self, ) -> Union[int, JBoolean]: ...
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, ) -> None: ...
	def contains(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode, ) -> Union[int, JBoolean]: ...
	def size(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def previousIndex(self, ) -> Union[int, JInt]: ...


class TableSwitchInsnNode:
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.jdk.internal.org.objectweb.asm.tree.LabelNode, *arg3: javawrappers.jdk.internal.org.objectweb.asm.tree.LabelNode, ): ...
	def getPrevious(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getType(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getNext(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def notify(self, ) -> None: ...
	def getOpcode(self, ) -> Union[int, JInt]: ...
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, ) -> None: ...


class VarInsnNode:
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
	def getPrevious(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getNext(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, ) -> None: ...
	def getType(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOpcode(self, ) -> Union[int, JInt]: ...
	def setOpcode(self, arg0: Union[int, JInt], ) -> None: ...


class TypeInsnNode:
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, ): ...
	def getPrevious(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getNext(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, ) -> None: ...
	def getType(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOpcode(self, ) -> Union[int, JInt]: ...
	def setOpcode(self, arg0: Union[int, JInt], ) -> None: ...


class ParameterNode:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, ) -> None: ...


class InnerClassNode:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.ClassVisitor, ) -> None: ...


class IincInsnNode:
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], ): ...
	def getPrevious(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getType(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getNext(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def notify(self, ) -> None: ...
	def getOpcode(self, ) -> Union[int, JInt]: ...
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, ) -> None: ...


class MultiANewArrayInsnNode:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], ): ...
	def getPrevious(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getType(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getNext(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def notify(self, ) -> None: ...
	def getOpcode(self, ) -> Union[int, JInt]: ...
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, ) -> None: ...


class FieldInsnNode:
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ): ...
	def getPrevious(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def getNext(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, ) -> None: ...
	def getType(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getOpcode(self, ) -> Union[int, JInt]: ...
	def setOpcode(self, arg0: Union[int, JInt], ) -> None: ...


class InvokeDynamicInsnNode:
	def __init__(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.jdk.internal.org.objectweb.asm.Handle, *arg3: javawrappers.java.lang.Object, ): ...
	def getPrevious(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getType(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getNext(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def notify(self, ) -> None: ...
	def getOpcode(self, ) -> Union[int, JInt]: ...
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, ) -> None: ...


class TryCatchBlockNode:
	def __init__(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.tree.LabelNode, arg1: javawrappers.jdk.internal.org.objectweb.asm.tree.LabelNode, arg2: javawrappers.jdk.internal.org.objectweb.asm.tree.LabelNode, arg3: javawrappers.java.lang.String, ): ...
	def updateIndex(self, arg0: Union[int, JInt], ) -> None: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, ) -> None: ...


class ClassNode:
	@overload
	def __init__(self, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitInnerClass(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: Union[int, JInt], ) -> None: ...
	def visitTypeAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitEnd(self, ) -> None: ...
	def visitAttribute(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Attribute, ) -> None: ...
	def visitOuterClass(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def check(self, arg0: Union[int, JInt], ) -> None: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitMethod(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: JArray(javawrappers.java.lang.String, 1), ) -> javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor: ...
	def visitSource(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.String, ) -> None: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.ClassVisitor, ) -> None: ...
	def visitModule(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.org.objectweb.asm.ModuleVisitor: ...
	def visitField(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Object, ) -> javawrappers.jdk.internal.org.objectweb.asm.FieldVisitor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def visit(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: JArray(javawrappers.java.lang.String, 1), ) -> None: ...


class InsnNode:
	def __init__(self, arg0: Union[int, JInt], ): ...
	def getPrevious(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getType(self, ) -> Union[int, JInt]: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def clone(self, arg0: javawrappers.java.util.Map, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getNext(self, ) -> javawrappers.jdk.internal.org.objectweb.asm.tree.AbstractInsnNode: ...
	def notify(self, ) -> None: ...
	def getOpcode(self, ) -> Union[int, JInt]: ...
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.MethodVisitor, ) -> None: ...


class FieldNode:
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Object, ): ...
	@overload
	def __init__(self, arg0: Union[int, JInt], arg1: Union[int, JInt], arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.String, arg5: javawrappers.java.lang.Object, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def visitTypeAnnotation(self, arg0: Union[int, JInt], arg1: javawrappers.jdk.internal.org.objectweb.asm.TypePath, arg2: javawrappers.java.lang.String, arg3: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def visitEnd(self, ) -> None: ...
	def visitAttribute(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.Attribute, ) -> None: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def check(self, arg0: Union[int, JInt], ) -> None: ...
	def visitAnnotation(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> javawrappers.jdk.internal.org.objectweb.asm.AnnotationVisitor: ...
	def notify(self, ) -> None: ...
	def accept(self, arg0: javawrappers.jdk.internal.org.objectweb.asm.ClassVisitor, ) -> None: ...


