################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.sun.util.logging
import javawrappers.java.util.function
import javawrappers.jdk.internal.logger

from jpype.types import *
from typing import Union

from typing import overload

class LazyLoggers:
	class JdkLazyLogger:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def isLoggable(self, arg0: javawrappers.java.lang.System.Logger.Level, ) -> Union[int, JBoolean]: ...
		@overload
		def isLoggable(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.function.Supplier, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.function.Supplier, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.util.function.Supplier, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.util.function.Supplier, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def notify(self, ) -> None: ...
		@overload
		def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.ResourceBundle, arg4: javawrappers.java.lang.String, arg5: javawrappers.java.lang.Throwable, ) -> None: ...
		@overload
		def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, ) -> None: ...
		@overload
		def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.ResourceBundle, arg4: javawrappers.java.lang.String, *arg5: javawrappers.java.lang.Object, ) -> None: ...
		def getLoggerConfiguration(self, ) -> javawrappers.sun.util.logging.PlatformLogger.ConfigurableBridge.LoggerConfiguration: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def isEnabled(self, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, arg4: javawrappers.java.util.function.Supplier, ) -> None: ...
		@overload
		def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Throwable, ) -> None: ...
		@overload
		def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, *arg4: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.function.Supplier, ) -> None: ...


	class LazyLoggerWrapper:
		def __init__(self, arg0: javawrappers.jdk.internal.logger.LazyLoggers.LazyLoggerAccessor, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def isLoggable(self, arg0: javawrappers.java.lang.System.Logger.Level, ) -> Union[int, JBoolean]: ...
		@overload
		def isLoggable(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, ) -> Union[int, JBoolean]: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.function.Supplier, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.function.Supplier, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.util.function.Supplier, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.util.function.Supplier, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, ) -> None: ...
		@overload
		def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> None: ...
		def notifyAll(self, ) -> None: ...
		def notify(self, ) -> None: ...
		@overload
		def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.ResourceBundle, arg4: javawrappers.java.lang.String, arg5: javawrappers.java.lang.Throwable, ) -> None: ...
		@overload
		def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, ) -> None: ...
		@overload
		def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.ResourceBundle, arg4: javawrappers.java.lang.String, *arg5: javawrappers.java.lang.Object, ) -> None: ...
		def getLoggerConfiguration(self, ) -> javawrappers.sun.util.logging.PlatformLogger.ConfigurableBridge.LoggerConfiguration: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def isEnabled(self, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
		@overload
		def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, arg4: javawrappers.java.util.function.Supplier, ) -> None: ...
		@overload
		def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Throwable, ) -> None: ...
		@overload
		def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, *arg4: javawrappers.java.lang.Object, ) -> None: ...
		@overload
		def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.function.Supplier, ) -> None: ...


	class LazyLoggerAccessor:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@staticmethod
		def makeAccessor(arg0: javawrappers.java.lang.String, arg1: javawrappers.jdk.internal.logger.LazyLoggers.LazyLoggerFactories, arg2: javawrappers.java.lang.Module, ) -> javawrappers.jdk.internal.logger.LazyLoggers.LazyLoggerAccessor: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def getLoggerName(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def wrapped(self, ) -> javawrappers.java.lang.System.Logger: ...
		def notify(self, ) -> None: ...
		def platform(self, ) -> javawrappers.sun.util.logging.PlatformLogger.Bridge: ...


	class LoggerAccessor:
		def getLoggerName(self, ) -> javawrappers.java.lang.String: ...
		def wrapped(self, ) -> javawrappers.java.lang.System.Logger: ...
		def platform(self, ) -> javawrappers.sun.util.logging.PlatformLogger.Bridge: ...


	class LazyLoggerFactories:
		def __init__(self, arg0: javawrappers.java.util.function.BiFunction, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	@overload
	def isLoggable(self, arg0: javawrappers.java.lang.System.Logger.Level, ) -> Union[int, JBoolean]: ...
	@overload
	def isLoggable(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.function.Supplier, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.function.Supplier, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.util.function.Supplier, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.util.function.Supplier, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def getLogger(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.lang.System.Logger: ...
	@overload
	def platform(self, ) -> javawrappers.sun.util.logging.PlatformLogger.Bridge: ...
	@overload
	def platform(self, ) -> javawrappers.sun.util.logging.PlatformLogger.Bridge: ...
	def notify(self, ) -> None: ...
	@overload
	def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.ResourceBundle, arg4: javawrappers.java.lang.String, arg5: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.ResourceBundle, arg4: javawrappers.java.lang.String, *arg5: javawrappers.java.lang.Object, ) -> None: ...
	def getLoggerConfiguration(self, ) -> javawrappers.sun.util.logging.PlatformLogger.ConfigurableBridge.LoggerConfiguration: ...
	@staticmethod
	def makeAccessor(arg0: javawrappers.java.lang.String, arg1: javawrappers.jdk.internal.logger.LazyLoggers.LazyLoggerFactories, arg2: javawrappers.java.lang.Module, ) -> javawrappers.jdk.internal.logger.LazyLoggers.LazyLoggerAccessor: ...
	@staticmethod
	def getLazyLogger(arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.lang.System.Logger: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def isEnabled(self, ) -> Union[int, JBoolean]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def getLoggerName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def getLoggerName(self, ) -> javawrappers.java.lang.String: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def wrapped(self, ) -> javawrappers.java.lang.System.Logger: ...
	@overload
	def wrapped(self, ) -> javawrappers.java.lang.System.Logger: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, arg4: javawrappers.java.util.function.Supplier, ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, *arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.function.Supplier, ) -> None: ...


class DefaultLoggerFinder:
	class SharedLoggers:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	@staticmethod
	def isSystem(arg0: javawrappers.java.lang.Module, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getLoggerFinder() -> javawrappers.java.lang.System.LoggerFinder: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def notifyAll(self, ) -> None: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getLocalizedLogger(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.Module, ) -> javawrappers.java.lang.System.Logger: ...
	def getLogger(self, arg0: javawrappers.java.lang.String, arg1: javawrappers.java.lang.Module, ) -> javawrappers.java.lang.System.Logger: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...


class LoggerWrapper:
	def __init__(self, arg0: javawrappers.java.lang.System.Logger, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def isLoggable(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, ) -> Union[int, JBoolean]: ...
	@overload
	def isLoggable(self, arg0: javawrappers.java.lang.System.Logger.Level, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.util.function.Supplier, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.function.Supplier, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, arg3: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.String, arg2: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.function.Supplier, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.util.function.Supplier, ) -> None: ...
	def platformProxy(self, ) -> javawrappers.sun.util.logging.PlatformLogger.Bridge: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.ResourceBundle, arg4: javawrappers.java.lang.String, arg5: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.ResourceBundle, arg4: javawrappers.java.lang.String, arg5: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	@overload
	def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, arg3: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	def getLoggerConfiguration(self, ) -> javawrappers.sun.util.logging.PlatformLogger.ConfigurableBridge.LoggerConfiguration: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isEnabled(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def wrapped(self, ) -> javawrappers.java.lang.System.Logger: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, arg4: javawrappers.java.util.function.Supplier, ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.function.Supplier, ) -> None: ...


class SurrogateLogger:
	@staticmethod
	def makeSimpleLogger(arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.logger.SimpleConsoleLogger: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def isLoggable(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, ) -> Union[int, JBoolean]: ...
	@overload
	def isLoggable(self, arg0: javawrappers.java.lang.System.Logger.Level, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def getSimpleFormat(arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.lang.String: ...
	def getPlatformLevel(self, ) -> javawrappers.sun.util.logging.PlatformLogger.Level: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.function.Supplier, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.function.Supplier, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.util.function.Supplier, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.util.function.Supplier, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def makeSurrogateLogger(arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.logger.SurrogateLogger: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def isFilteredFrame(arg0: javawrappers.java.lang.StackWalker.StackFrame, ) -> Union[int, JBoolean]: ...
	@overload
	def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.ResourceBundle, arg4: javawrappers.java.lang.String, arg5: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.ResourceBundle, arg4: javawrappers.java.lang.String, *arg5: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	def getLoggerConfiguration(self, ) -> javawrappers.sun.util.logging.PlatformLogger.ConfigurableBridge.LoggerConfiguration: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isEnabled(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setPlatformLevel(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, arg4: javawrappers.java.util.function.Supplier, ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, *arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.function.Supplier, ) -> None: ...


class LoggerFinderLoader:
	class ErrorPolicy:
		ERROR: LoggerFinderLoader.ErrorPolicy = ...
		WARNING: LoggerFinderLoader.ErrorPolicy = ...
		DEBUG: LoggerFinderLoader.ErrorPolicy = ...
		QUIET: LoggerFinderLoader.ErrorPolicy = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.logger.LoggerFinderLoader.ErrorPolicy: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.jdk.internal.logger.LoggerFinderLoader.ErrorPolicy, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def getLoggerFinder() -> javawrappers.java.lang.System.LoggerFinder: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.logger.LoggerFinderLoader.ErrorPolicy: ...
	@staticmethod
	def values() -> JArray(javawrappers.jdk.internal.logger.LoggerFinderLoader.ErrorPolicy, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class LocalizedLoggerWrapper:
	def __init__(self, arg0: javawrappers.java.lang.System.Logger, arg1: javawrappers.java.util.ResourceBundle, ): ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def isLoggable(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, ) -> Union[int, JBoolean]: ...
	@overload
	def isLoggable(self, arg0: javawrappers.java.lang.System.Logger.Level, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.util.function.Supplier, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.util.function.Supplier, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.function.Supplier, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.function.Supplier, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	def platformProxy(self, ) -> javawrappers.sun.util.logging.PlatformLogger.Bridge: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	def getBundle(self, ) -> javawrappers.java.util.ResourceBundle: ...
	@overload
	def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.ResourceBundle, arg4: javawrappers.java.lang.String, arg5: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.ResourceBundle, arg4: javawrappers.java.lang.String, arg5: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	@overload
	def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, arg3: JArray(javawrappers.java.lang.Object, 1), ) -> None: ...
	def getLoggerConfiguration(self, ) -> javawrappers.sun.util.logging.PlatformLogger.ConfigurableBridge.LoggerConfiguration: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isEnabled(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def wrapped(self, ) -> javawrappers.java.lang.System.Logger: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, *arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, arg4: javawrappers.java.util.function.Supplier, ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.function.Supplier, ) -> None: ...


class BootstrapLogger:
	class RedirectedLoggers:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def compose(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.function.Function: ...
		@overload
		def apply(self, arg0: javawrappers.jdk.internal.logger.LazyLoggers.LazyLoggerAccessor, ) -> javawrappers.jdk.internal.logger.SurrogateLogger: ...
		@overload
		def apply(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def andThen(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.function.Function: ...
		def notify(self, ) -> None: ...


	class DetectBackend:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class LoggingBackend:
		NONE: BootstrapLogger.LoggingBackend = ...
		JUL_DEFAULT: BootstrapLogger.LoggingBackend = ...
		JUL_WITH_CONFIG: BootstrapLogger.LoggingBackend = ...
		CUSTOM: BootstrapLogger.LoggingBackend = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.logger.BootstrapLogger.LoggingBackend: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.jdk.internal.logger.BootstrapLogger.LoggingBackend, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	class LogEvent:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class BootstrapExecutors:
		class BootstrapMessageLoggerTask:
			def __init__(self, arg0: javawrappers.java.util.concurrent.ExecutorService, arg1: javawrappers.java.lang.Runnable, ): ...
			def getClass(self, ) -> javawrappers.java.lang.Class: ...
			@overload
			def wait(self, arg0: Union[long, JLong], ) -> None: ...
			@overload
			def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
			@overload
			def wait(self, ) -> None: ...
			def hashCode(self, ) -> Union[int, JInt]: ...
			def notifyAll(self, ) -> None: ...
			def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
			def toString(self, ) -> javawrappers.java.lang.String: ...
			def run(self, ) -> None: ...
			def notify(self, ) -> None: ...


		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def newThread(self, arg0: javawrappers.java.lang.Runnable, ) -> javawrappers.java.lang.Thread: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def run(self, ) -> None: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def newThread(self, arg0: javawrappers.java.lang.Runnable, ) -> javawrappers.java.lang.Thread: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.util.function.Supplier, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.function.Supplier, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.util.function.Supplier, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.function.Supplier, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@staticmethod
	def values() -> JArray(javawrappers.jdk.internal.logger.BootstrapLogger.LoggingBackend, 1): ...
	def notifyAll(self, ) -> None: ...
	def run(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def andThen(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.function.Function: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.ResourceBundle, arg4: javawrappers.java.lang.String, arg5: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.ResourceBundle, arg4: javawrappers.java.lang.String, *arg5: javawrappers.java.lang.Object, ) -> None: ...
	def getLoggerConfiguration(self, ) -> javawrappers.sun.util.logging.PlatformLogger.ConfigurableBridge.LoggerConfiguration: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@staticmethod
	def redirectTemporaryLoggers() -> None: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, arg4: javawrappers.java.util.function.Supplier, ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, *arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.function.Supplier, ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def isLoggable(self, arg0: javawrappers.java.lang.System.Logger.Level, ) -> Union[int, JBoolean]: ...
	@overload
	def isLoggable(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def isBooted() -> Union[int, JBoolean]: ...
	@overload
	def apply(self, arg0: javawrappers.jdk.internal.logger.LazyLoggers.LazyLoggerAccessor, ) -> javawrappers.jdk.internal.logger.SurrogateLogger: ...
	@overload
	def apply(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.logger.BootstrapLogger.LoggingBackend: ...
	def compose(self, arg0: javawrappers.java.util.function.Function, ) -> javawrappers.java.util.function.Function: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isEnabled(self, ) -> Union[int, JBoolean]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def useLazyLoggers() -> Union[int, JBoolean]: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


class SimpleConsoleLogger:
	class Formatting:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	class CallerFinder:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def or_(self, arg0: javawrappers.java.util.function.Predicate, ) -> javawrappers.java.util.function.Predicate: ...
		@overload
		def test(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@overload
		def test(self, arg0: javawrappers.java.lang.StackWalker.StackFrame, ) -> Union[int, JBoolean]: ...
		def and(self, arg0: javawrappers.java.util.function.Predicate, ) -> javawrappers.java.util.function.Predicate: ...
		def negate(self, ) -> javawrappers.java.util.function.Predicate: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def notify(self, ) -> None: ...


	@staticmethod
	def makeSimpleLogger(arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.logger.SimpleConsoleLogger: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def isLoggable(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, ) -> Union[int, JBoolean]: ...
	@overload
	def isLoggable(self, arg0: javawrappers.java.lang.System.Logger.Level, ) -> Union[int, JBoolean]: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def or_(self, arg0: javawrappers.java.util.function.Predicate, ) -> javawrappers.java.util.function.Predicate: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def test(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def test(self, arg0: javawrappers.java.lang.StackWalker.StackFrame, ) -> Union[int, JBoolean]: ...
	def getPlatformLevel(self, ) -> javawrappers.sun.util.logging.PlatformLogger.Level: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.function.Supplier, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.function.Supplier, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.java.lang.System.Logger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.util.function.Supplier, ) -> None: ...
	@overload
	def log(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.Throwable, arg2: javawrappers.java.util.function.Supplier, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	def notify(self, ) -> None: ...
	@overload
	def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.ResourceBundle, arg4: javawrappers.java.lang.String, arg5: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.ResourceBundle, arg4: javawrappers.java.lang.String, *arg5: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, *arg3: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logrb(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.util.ResourceBundle, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, ) -> None: ...
	def getLoggerConfiguration(self, ) -> javawrappers.sun.util.logging.PlatformLogger.ConfigurableBridge.LoggerConfiguration: ...
	def and(self, arg0: javawrappers.java.util.function.Predicate, ) -> javawrappers.java.util.function.Predicate: ...
	def negate(self, ) -> javawrappers.java.util.function.Predicate: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def isEnabled(self, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def setPlatformLevel(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.Throwable, arg4: javawrappers.java.util.function.Supplier, ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, arg4: javawrappers.java.lang.Throwable, ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, *arg4: javawrappers.java.lang.Object, ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def logp(self, arg0: javawrappers.sun.util.logging.PlatformLogger.Level, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.String, arg3: javawrappers.java.util.function.Supplier, ) -> None: ...


