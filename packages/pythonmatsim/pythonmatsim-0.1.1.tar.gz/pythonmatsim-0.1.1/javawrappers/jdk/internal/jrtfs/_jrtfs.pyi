################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.util
import javawrappers.java.net
import javawrappers.java.io
import javawrappers.java.util.concurrent
import javawrappers.java.util.stream
import javawrappers.java.nio.channels
import javawrappers.java.nio.file
import javawrappers.java.nio.file.attribute

from jpype.types import *
from typing import Union

from typing import overload

class JrtFileSystemProvider:
	def __init__(self, ): ...
	class JrtFsLoader:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def getResource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
		def findResource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
		def getName(self, ) -> javawrappers.java.lang.String: ...
		def notifyAll(self, ) -> None: ...
		def setDefaultAssertionStatus(self, arg0: Union[int, JBoolean], ) -> None: ...
		def setPackageAssertionStatus(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
		def notify(self, ) -> None: ...
		def setClassAssertionStatus(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
		def getDefinedPackage(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Package: ...
		def clearAssertionStatus(self, ) -> None: ...
		def isRegisteredAsParallelCapable(self, ) -> Union[int, JBoolean]: ...
		def getResources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def close(self, ) -> None: ...
		def getDefinedPackages(self, ) -> JArray(javawrappers.java.lang.Package, 1): ...
		def getUnnamedModule(self, ) -> javawrappers.java.lang.Module: ...
		def getURLs(self, ) -> JArray(javawrappers.java.net.URL, 1): ...
		@staticmethod
		def getSystemResources(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
		def getParent(self, ) -> javawrappers.java.lang.ClassLoader: ...
		@staticmethod
		def getPlatformClassLoader() -> javawrappers.java.lang.ClassLoader: ...
		def getResourceAsStream(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
		def resources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.stream.Stream: ...
		def findResources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
		@staticmethod
		def getSystemClassLoader() -> javawrappers.java.lang.ClassLoader: ...
		@overload
		@staticmethod
		def newInstance(arg0: JArray(javawrappers.java.net.URL, 1), arg1: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.net.URLClassLoader: ...
		@overload
		@staticmethod
		def newInstance(arg0: JArray(javawrappers.java.net.URL, 1), ) -> javawrappers.java.net.URLClassLoader: ...
		@staticmethod
		def getSystemResource(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
		@staticmethod
		def getSystemResourceAsStream(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def loadClass(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...


	def isSameFile(self, arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.nio.file.Path, ) -> Union[int, JBoolean]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	def getResource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def findResource(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def getName(self, ) -> javawrappers.java.lang.String: ...
	def getFileAttributeView(self, arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.lang.Class, *arg2: javawrappers.java.nio.file.LinkOption, ) -> javawrappers.java.nio.file.attribute.FileAttributeView: ...
	@staticmethod
	def installedProviders() -> javawrappers.java.util.List: ...
	def createLink(self, arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.nio.file.Path, ) -> None: ...
	def setClassAssertionStatus(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	def clearAssertionStatus(self, ) -> None: ...
	def newFileChannel(self, arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.util.Set, *arg2: javawrappers.java.nio.file.attribute.FileAttribute, ) -> javawrappers.java.nio.channels.FileChannel: ...
	def newInputStream(self, arg0: javawrappers.java.nio.file.Path, *arg1: javawrappers.java.nio.file.OpenOption, ) -> javawrappers.java.io.InputStream: ...
	@overload
	def readAttributes(self, arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.lang.Class, *arg2: javawrappers.java.nio.file.LinkOption, ) -> javawrappers.java.nio.file.attribute.BasicFileAttributes: ...
	@overload
	def readAttributes(self, arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.lang.String, *arg2: javawrappers.java.nio.file.LinkOption, ) -> javawrappers.java.util.Map: ...
	def newOutputStream(self, arg0: javawrappers.java.nio.file.Path, *arg1: javawrappers.java.nio.file.OpenOption, ) -> javawrappers.java.io.OutputStream: ...
	def getPath(self, arg0: javawrappers.java.net.URI, ) -> javawrappers.java.nio.file.Path: ...
	def createDirectory(self, arg0: javawrappers.java.nio.file.Path, *arg1: javawrappers.java.nio.file.attribute.FileAttribute, ) -> None: ...
	@staticmethod
	def getPlatformClassLoader() -> javawrappers.java.lang.ClassLoader: ...
	@overload
	def newFileSystem(self, arg0: javawrappers.java.net.URI, arg1: javawrappers.java.util.Map, ) -> javawrappers.java.nio.file.FileSystem: ...
	@overload
	def newFileSystem(self, arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.util.Map, ) -> javawrappers.java.nio.file.FileSystem: ...
	def findResources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
	@overload
	@staticmethod
	def newInstance(arg0: JArray(javawrappers.java.net.URL, 1), arg1: javawrappers.java.lang.ClassLoader, ) -> javawrappers.java.net.URLClassLoader: ...
	@overload
	@staticmethod
	def newInstance(arg0: JArray(javawrappers.java.net.URL, 1), ) -> javawrappers.java.net.URLClassLoader: ...
	def getFileSystem(self, arg0: javawrappers.java.net.URI, ) -> javawrappers.java.nio.file.FileSystem: ...
	def checkAccess(self, arg0: javawrappers.java.nio.file.Path, *arg1: javawrappers.java.nio.file.AccessMode, ) -> None: ...
	@staticmethod
	def getSystemResourceAsStream(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
	def newByteChannel(self, arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.util.Set, *arg2: javawrappers.java.nio.file.attribute.FileAttribute, ) -> javawrappers.java.nio.channels.SeekableByteChannel: ...
	def getFileStore(self, arg0: javawrappers.java.nio.file.Path, ) -> javawrappers.java.nio.file.FileStore: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def newAsynchronousFileChannel(self, arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.util.Set, arg2: javawrappers.java.util.concurrent.ExecutorService, *arg3: javawrappers.java.nio.file.attribute.FileAttribute, ) -> javawrappers.java.nio.channels.AsynchronousFileChannel: ...
	def notifyAll(self, ) -> None: ...
	def setDefaultAssertionStatus(self, arg0: Union[int, JBoolean], ) -> None: ...
	def createSymbolicLink(self, arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.nio.file.Path, *arg2: javawrappers.java.nio.file.attribute.FileAttribute, ) -> None: ...
	def setPackageAssertionStatus(self, arg0: javawrappers.java.lang.String, arg1: Union[int, JBoolean], ) -> None: ...
	def delete(self, arg0: javawrappers.java.nio.file.Path, ) -> None: ...
	def notify(self, ) -> None: ...
	def getDefinedPackage(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Package: ...
	def setAttribute(self, arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Object, *arg3: javawrappers.java.nio.file.LinkOption, ) -> None: ...
	def isRegisteredAsParallelCapable(self, ) -> Union[int, JBoolean]: ...
	def getResources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def copy(self, arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.nio.file.Path, *arg2: javawrappers.java.nio.file.CopyOption, ) -> None: ...
	def close(self, ) -> None: ...
	def getDefinedPackages(self, ) -> JArray(javawrappers.java.lang.Package, 1): ...
	def getUnnamedModule(self, ) -> javawrappers.java.lang.Module: ...
	def getURLs(self, ) -> JArray(javawrappers.java.net.URL, 1): ...
	@staticmethod
	def getSystemResources(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.Enumeration: ...
	def getParent(self, ) -> javawrappers.java.lang.ClassLoader: ...
	def move(self, arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.nio.file.Path, *arg2: javawrappers.java.nio.file.CopyOption, ) -> None: ...
	def getScheme(self, ) -> javawrappers.java.lang.String: ...
	def getResourceAsStream(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
	def deleteIfExists(self, arg0: javawrappers.java.nio.file.Path, ) -> Union[int, JBoolean]: ...
	def resources(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.util.stream.Stream: ...
	@staticmethod
	def getSystemClassLoader() -> javawrappers.java.lang.ClassLoader: ...
	def newDirectoryStream(self, arg0: javawrappers.java.nio.file.Path, arg1: javawrappers.java.nio.file.DirectoryStream.Filter, ) -> javawrappers.java.nio.file.DirectoryStream: ...
	@staticmethod
	def getSystemResource(arg0: javawrappers.java.lang.String, ) -> javawrappers.java.net.URL: ...
	def isHidden(self, arg0: javawrappers.java.nio.file.Path, ) -> Union[int, JBoolean]: ...
	def readSymbolicLink(self, arg0: javawrappers.java.nio.file.Path, ) -> javawrappers.java.nio.file.Path: ...
	def loadClass(self, arg0: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Class: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


