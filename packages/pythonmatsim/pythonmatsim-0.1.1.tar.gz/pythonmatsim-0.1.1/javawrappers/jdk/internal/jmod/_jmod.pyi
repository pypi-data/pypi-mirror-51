################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang
import javawrappers.java.io
import javawrappers.jdk.internal.jmod
import javawrappers.java.util.stream
import javawrappers.java.util.zip
import javawrappers.java.nio.file

from jpype.types import *
from typing import Union

from typing import overload

class JmodFile:
	def __init__(self, arg0: javawrappers.java.nio.file.Path, ): ...
	class Entry:
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def size(self, ) -> Union[long, JLong]: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def section(self, ) -> javawrappers.jdk.internal.jmod.JmodFile.Section: ...
		def zipEntry(self, ) -> javawrappers.java.util.zip.ZipEntry: ...
		def notify(self, ) -> None: ...
		def isDirectory(self, ) -> Union[int, JBoolean]: ...


	class Section:
		CLASSES: JmodFile.Section = ...
		CONFIG: JmodFile.Section = ...
		HEADER_FILES: JmodFile.Section = ...
		LEGAL_NOTICES: JmodFile.Section = ...
		MAN_PAGES: JmodFile.Section = ...
		NATIVE_LIBS: JmodFile.Section = ...
		NATIVE_CMDS: JmodFile.Section = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.jmod.JmodFile.Section: ...
		def notifyAll(self, ) -> None: ...
		@staticmethod
		def values() -> JArray(javawrappers.jdk.internal.jmod.JmodFile.Section, 1): ...
		def jmodDir(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.jmod.JmodFile.Section: ...
	@staticmethod
	def values() -> JArray(javawrappers.jdk.internal.jmod.JmodFile.Section, 1): ...
	def notifyAll(self, ) -> None: ...
	def section(self, ) -> javawrappers.jdk.internal.jmod.JmodFile.Section: ...
	def jmodDir(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def zipEntry(self, ) -> javawrappers.java.util.zip.ZipEntry: ...
	@overload
	def getInputStream(self, arg0: javawrappers.jdk.internal.jmod.JmodFile.Entry, ) -> javawrappers.java.io.InputStream: ...
	@overload
	def getInputStream(self, arg0: javawrappers.jdk.internal.jmod.JmodFile.Section, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.io.InputStream: ...
	def notify(self, ) -> None: ...
	@staticmethod
	def writeMagicNumber(arg0: javawrappers.java.io.OutputStream, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def checkMagic(arg0: javawrappers.java.nio.file.Path, ) -> None: ...
	def size(self, ) -> Union[long, JLong]: ...
	def stream(self, ) -> javawrappers.java.util.stream.Stream: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def name(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getEntry(self, arg0: javawrappers.jdk.internal.jmod.JmodFile.Section, arg1: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.jmod.JmodFile.Entry: ...
	def close(self, ) -> None: ...
	def isDirectory(self, ) -> Union[int, JBoolean]: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


