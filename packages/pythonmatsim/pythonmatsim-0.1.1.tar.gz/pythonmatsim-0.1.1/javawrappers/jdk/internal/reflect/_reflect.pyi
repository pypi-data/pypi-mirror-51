################################################################################
#          This file was automatically generated. Please do not edit.          #
################################################################################

import javawrappers.java.lang.reflect
import javawrappers.java.lang
import javawrappers.java.lang.invoke
import javawrappers.jdk.internal.reflect

from jpype.types import *
from typing import Union

from typing import overload

class ReflectionFactory:
	class GetReflectionFactoryAction:
		def __init__(self, ): ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def run(self, ) -> javawrappers.jdk.internal.reflect.ReflectionFactory: ...
		@overload
		def run(self, ) -> javawrappers.java.lang.Object: ...
		def notify(self, ) -> None: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def newFieldAccessor(self, arg0: javawrappers.java.lang.reflect.Field, arg1: Union[int, JBoolean], ) -> javawrappers.jdk.internal.reflect.FieldAccessor: ...
	def notifyAll(self, ) -> None: ...
	def newField(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: javawrappers.java.lang.String, arg6: JArray(JByte, 1), ) -> javawrappers.java.lang.reflect.Field: ...
	@overload
	def run(self, ) -> javawrappers.jdk.internal.reflect.ReflectionFactory: ...
	@overload
	def run(self, ) -> javawrappers.java.lang.Object: ...
	def notify(self, ) -> None: ...
	def copyConstructor(self, arg0: javawrappers.java.lang.reflect.Constructor, ) -> javawrappers.java.lang.reflect.Constructor: ...
	def hasStaticInitializerForSerialization(self, arg0: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def newMethod(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: JArray(javawrappers.java.lang.Class, 1), arg3: javawrappers.java.lang.Class, arg4: JArray(javawrappers.java.lang.Class, 1), arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: javawrappers.java.lang.String, arg8: JArray(JByte, 1), arg9: JArray(JByte, 1), arg10: JArray(JByte, 1), ) -> javawrappers.java.lang.reflect.Method: ...
	@overload
	def newConstructorForSerialization(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.reflect.Constructor: ...
	@overload
	def newConstructorForSerialization(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.reflect.Constructor, ) -> javawrappers.java.lang.reflect.Constructor: ...
	def getConstructorAccessor(self, arg0: javawrappers.java.lang.reflect.Constructor, ) -> javawrappers.jdk.internal.reflect.ConstructorAccessor: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def setMethodAccessor(self, arg0: javawrappers.java.lang.reflect.Method, arg1: javawrappers.jdk.internal.reflect.MethodAccessor, ) -> None: ...
	def readObjectForSerialization(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def newMethodAccessor(self, arg0: javawrappers.java.lang.reflect.Method, ) -> javawrappers.jdk.internal.reflect.MethodAccessor: ...
	def copyField(self, arg0: javawrappers.java.lang.reflect.Field, ) -> javawrappers.java.lang.reflect.Field: ...
	def setConstructorAccessor(self, arg0: javawrappers.java.lang.reflect.Constructor, arg1: javawrappers.jdk.internal.reflect.ConstructorAccessor, ) -> None: ...
	def leafCopyMethod(self, arg0: javawrappers.java.lang.reflect.Method, ) -> javawrappers.java.lang.reflect.Method: ...
	def writeObjectForSerialization(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def getMethodAccessor(self, arg0: javawrappers.java.lang.reflect.Method, ) -> javawrappers.jdk.internal.reflect.MethodAccessor: ...
	def copyMethod(self, arg0: javawrappers.java.lang.reflect.Method, ) -> javawrappers.java.lang.reflect.Method: ...
	def readResolveForSerialization(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def setLangReflectAccess(self, arg0: javawrappers.jdk.internal.reflect.LangReflectAccess, ) -> None: ...
	def newOptionalDataExceptionForSerialization(self, ) -> javawrappers.java.lang.reflect.Constructor: ...
	def newConstructorAccessor(self, arg0: javawrappers.java.lang.reflect.Constructor, ) -> javawrappers.jdk.internal.reflect.ConstructorAccessor: ...
	def getExecutableSharedParameterTypes(self, arg0: javawrappers.java.lang.reflect.Executable, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	@staticmethod
	def getReflectionFactory() -> javawrappers.jdk.internal.reflect.ReflectionFactory: ...
	def newConstructor(self, arg0: javawrappers.java.lang.Class, arg1: JArray(javawrappers.java.lang.Class, 1), arg2: JArray(javawrappers.java.lang.Class, 1), arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: javawrappers.java.lang.String, arg6: JArray(JByte, 1), arg7: JArray(JByte, 1), ) -> javawrappers.java.lang.reflect.Constructor: ...
	def getExecutableTypeAnnotationBytes(self, arg0: javawrappers.java.lang.reflect.Executable, ) -> JArray(JByte, 1): ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def writeReplaceForSerialization(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def readObjectNoDataForSerialization(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.invoke.MethodHandle: ...
	def newConstructorForExternalization(self, arg0: javawrappers.java.lang.Class, ) -> javawrappers.java.lang.reflect.Constructor: ...


class CallerSensitive:
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def annotationType(self, ) -> javawrappers.java.lang.Class: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...


class LangReflectAccess:
	def setConstructorAccessor(self, arg0: javawrappers.java.lang.reflect.Constructor, arg1: javawrappers.jdk.internal.reflect.ConstructorAccessor, ) -> None: ...
	def leafCopyMethod(self, arg0: javawrappers.java.lang.reflect.Method, ) -> javawrappers.java.lang.reflect.Method: ...
	def getMethodAccessor(self, arg0: javawrappers.java.lang.reflect.Method, ) -> javawrappers.jdk.internal.reflect.MethodAccessor: ...
	def copyMethod(self, arg0: javawrappers.java.lang.reflect.Method, ) -> javawrappers.java.lang.reflect.Method: ...
	def newField(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: javawrappers.java.lang.Class, arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: javawrappers.java.lang.String, arg6: JArray(JByte, 1), ) -> javawrappers.java.lang.reflect.Field: ...
	def copyConstructor(self, arg0: javawrappers.java.lang.reflect.Constructor, ) -> javawrappers.java.lang.reflect.Constructor: ...
	def getConstructorParameterAnnotations(self, arg0: javawrappers.java.lang.reflect.Constructor, ) -> JArray(JByte, 1): ...
	def newMethod(self, arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, arg2: JArray(javawrappers.java.lang.Class, 1), arg3: javawrappers.java.lang.Class, arg4: JArray(javawrappers.java.lang.Class, 1), arg5: Union[int, JInt], arg6: Union[int, JInt], arg7: javawrappers.java.lang.String, arg8: JArray(JByte, 1), arg9: JArray(JByte, 1), arg10: JArray(JByte, 1), ) -> javawrappers.java.lang.reflect.Method: ...
	def getExecutableSharedParameterTypes(self, arg0: javawrappers.java.lang.reflect.Executable, ) -> JArray(javawrappers.java.lang.Class, 1): ...
	def getConstructorAnnotations(self, arg0: javawrappers.java.lang.reflect.Constructor, ) -> JArray(JByte, 1): ...
	def getConstructorAccessor(self, arg0: javawrappers.java.lang.reflect.Constructor, ) -> javawrappers.jdk.internal.reflect.ConstructorAccessor: ...
	def newConstructor(self, arg0: javawrappers.java.lang.Class, arg1: JArray(javawrappers.java.lang.Class, 1), arg2: JArray(javawrappers.java.lang.Class, 1), arg3: Union[int, JInt], arg4: Union[int, JInt], arg5: javawrappers.java.lang.String, arg6: JArray(JByte, 1), arg7: JArray(JByte, 1), ) -> javawrappers.java.lang.reflect.Constructor: ...
	def getConstructorSignature(self, arg0: javawrappers.java.lang.reflect.Constructor, ) -> javawrappers.java.lang.String: ...
	def getExecutableTypeAnnotationBytes(self, arg0: javawrappers.java.lang.reflect.Executable, ) -> JArray(JByte, 1): ...
	def getConstructorSlot(self, arg0: javawrappers.java.lang.reflect.Constructor, ) -> Union[int, JInt]: ...
	def setMethodAccessor(self, arg0: javawrappers.java.lang.reflect.Method, arg1: javawrappers.jdk.internal.reflect.MethodAccessor, ) -> None: ...
	def getRoot(self, arg0: javawrappers.java.lang.reflect.AccessibleObject, ) -> javawrappers.java.lang.reflect.AccessibleObject: ...
	def copyField(self, arg0: javawrappers.java.lang.reflect.Field, ) -> javawrappers.java.lang.reflect.Field: ...


class Reflection:
	def __init__(self, ): ...
	@staticmethod
	def getClassAccessFlags(arg0: javawrappers.java.lang.Class, ) -> Union[int, JInt]: ...
	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@staticmethod
	def registerFieldsToFilter(arg0: javawrappers.java.lang.Class, *arg1: javawrappers.java.lang.String, ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	@staticmethod
	def ensureMemberAccess(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.Class, arg3: Union[int, JInt], ) -> None: ...
	@staticmethod
	def registerMethodsToFilter(arg0: javawrappers.java.lang.Class, *arg1: javawrappers.java.lang.String, ) -> None: ...
	def notifyAll(self, ) -> None: ...
	@staticmethod
	def filterFields(arg0: javawrappers.java.lang.Class, arg1: JArray(javawrappers.java.lang.reflect.Field, 1), ) -> JArray(javawrappers.java.lang.reflect.Field, 1): ...
	def notify(self, ) -> None: ...
	@staticmethod
	def getCallerClass() -> javawrappers.java.lang.Class: ...
	@staticmethod
	def newIllegalAccessException(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.Class, arg3: Union[int, JInt], ) -> javawrappers.java.lang.IllegalAccessException: ...
	def hashCode(self, ) -> Union[int, JInt]: ...
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def areNestMates(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@staticmethod
	def verifyMemberAccess(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.Class, arg2: javawrappers.java.lang.Class, arg3: Union[int, JInt], ) -> Union[int, JBoolean]: ...
	@staticmethod
	def verifyModuleAccess(arg0: javawrappers.java.lang.Module, arg1: javawrappers.java.lang.Class, ) -> Union[int, JBoolean]: ...
	@staticmethod
	def filterMethods(arg0: javawrappers.java.lang.Class, arg1: JArray(javawrappers.java.lang.reflect.Method, 1), ) -> JArray(javawrappers.java.lang.reflect.Method, 1): ...
	@staticmethod
	def isCallerSensitive(arg0: javawrappers.java.lang.reflect.Method, ) -> Union[int, JBoolean]: ...


class ConstructorAccessor:
	def newInstance(self, arg0: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...


class FieldAccessor:
	def setFloat(self, arg0: javawrappers.java.lang.Object, arg1: Union[float, JFloat], ) -> None: ...
	def setByte(self, arg0: javawrappers.java.lang.Object, arg1: JByte, ) -> None: ...
	def set(self, arg0: javawrappers.java.lang.Object, arg1: javawrappers.java.lang.Object, ) -> None: ...
	def getByte(self, arg0: javawrappers.java.lang.Object, ) -> JByte: ...
	def getShort(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JShort]: ...
	def getDouble(self, arg0: javawrappers.java.lang.Object, ) -> Union[float, JDouble]: ...
	def setShort(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JShort], ) -> None: ...
	def getFloat(self, arg0: javawrappers.java.lang.Object, ) -> Union[float, JFloat]: ...
	def setInt(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JInt], ) -> None: ...
	def setDouble(self, arg0: javawrappers.java.lang.Object, arg1: Union[float, JDouble], ) -> None: ...
	def setChar(self, arg0: javawrappers.java.lang.Object, arg1: Union[string, JString], ) -> None: ...
	def getLong(self, arg0: javawrappers.java.lang.Object, ) -> Union[long, JLong]: ...
	def getInt(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	def getChar(self, arg0: javawrappers.java.lang.Object, ) -> Union[string, JString]: ...
	def setLong(self, arg0: javawrappers.java.lang.Object, arg1: Union[long, JLong], ) -> None: ...
	def get(self, arg0: javawrappers.java.lang.Object, ) -> javawrappers.java.lang.Object: ...
	def getBoolean(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def setBoolean(self, arg0: javawrappers.java.lang.Object, arg1: Union[int, JBoolean], ) -> None: ...


class MethodAccessor:
	def invoke(self, arg0: javawrappers.java.lang.Object, arg1: JArray(javawrappers.java.lang.Object, 1), ) -> javawrappers.java.lang.Object: ...


class ConstantPool:
	def __init__(self, ): ...
	class Tag:
		UTF8: ConstantPool.Tag = ...
		INTEGER: ConstantPool.Tag = ...
		FLOAT: ConstantPool.Tag = ...
		LONG: ConstantPool.Tag = ...
		DOUBLE: ConstantPool.Tag = ...
		CLASS: ConstantPool.Tag = ...
		STRING: ConstantPool.Tag = ...
		FIELDREF: ConstantPool.Tag = ...
		METHODREF: ConstantPool.Tag = ...
		INTERFACEMETHODREF: ConstantPool.Tag = ...
		NAMEANDTYPE: ConstantPool.Tag = ...
		METHODHANDLE: ConstantPool.Tag = ...
		METHODTYPE: ConstantPool.Tag = ...
		INVOKEDYNAMIC: ConstantPool.Tag = ...
		INVALID: ConstantPool.Tag = ...
		def getClass(self, ) -> javawrappers.java.lang.Class: ...
		def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
		@overload
		def wait(self, arg0: Union[long, JLong], ) -> None: ...
		@overload
		def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
		@overload
		def wait(self, ) -> None: ...
		def hashCode(self, ) -> Union[int, JInt]: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
		@overload
		@staticmethod
		def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.reflect.ConstantPool.Tag: ...
		def notifyAll(self, ) -> None: ...
		def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
		@staticmethod
		def values() -> JArray(javawrappers.jdk.internal.reflect.ConstantPool.Tag, 1): ...
		def name(self, ) -> javawrappers.java.lang.String: ...
		def toString(self, ) -> javawrappers.java.lang.String: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
		@overload
		def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
		def notify(self, ) -> None: ...
		def ordinal(self, ) -> Union[int, JInt]: ...


	def getClass(self, ) -> javawrappers.java.lang.Class: ...
	@overload
	def wait(self, arg0: Union[long, JLong], ) -> None: ...
	@overload
	def wait(self, arg0: Union[long, JLong], arg1: Union[int, JInt], ) -> None: ...
	@overload
	def wait(self, ) -> None: ...
	def getUTF8At(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def getMethodAt(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.reflect.Member: ...
	@staticmethod
	def values() -> JArray(javawrappers.jdk.internal.reflect.ConstantPool.Tag, 1): ...
	def notifyAll(self, ) -> None: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JInt]: ...
	@overload
	def compareTo(self, arg0: javawrappers.java.lang.Enum, ) -> Union[int, JInt]: ...
	def getStringAt(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.String: ...
	def notify(self, ) -> None: ...
	def getDeclaringClass(self, ) -> javawrappers.java.lang.Class: ...
	def getMemberRefInfoAt(self, arg0: Union[int, JInt], ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getIntAt(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	@overload
	def hashCode(self, ) -> Union[int, JInt]: ...
	def getTagAt(self, arg0: Union[int, JInt], ) -> javawrappers.jdk.internal.reflect.ConstantPool.Tag: ...
	def getFieldAt(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.reflect.Field: ...
	def getNameAndTypeRefInfoAt(self, arg0: Union[int, JInt], ) -> JArray(javawrappers.java.lang.String, 1): ...
	def getMethodAtIfLoaded(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.reflect.Member: ...
	def getNameAndTypeRefIndexAt(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.Class, arg1: javawrappers.java.lang.String, ) -> javawrappers.java.lang.Enum: ...
	@overload
	@staticmethod
	def valueOf(arg0: javawrappers.java.lang.String, ) -> javawrappers.jdk.internal.reflect.ConstantPool.Tag: ...
	def getFloatAt(self, arg0: Union[int, JInt], ) -> Union[float, JFloat]: ...
	def getFieldAtIfLoaded(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.reflect.Field: ...
	def getClassRefIndexAt(self, arg0: Union[int, JInt], ) -> Union[int, JInt]: ...
	def getSize(self, ) -> Union[int, JInt]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	@overload
	def equals(self, arg0: javawrappers.java.lang.Object, ) -> Union[int, JBoolean]: ...
	def getLongAt(self, arg0: Union[int, JInt], ) -> Union[long, JLong]: ...
	def name(self, ) -> javawrappers.java.lang.String: ...
	def getDoubleAt(self, arg0: Union[int, JInt], ) -> Union[float, JDouble]: ...
	def getClassAtIfLoaded(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Class: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	@overload
	def toString(self, ) -> javawrappers.java.lang.String: ...
	def getClassAt(self, arg0: Union[int, JInt], ) -> javawrappers.java.lang.Class: ...
	def ordinal(self, ) -> Union[int, JInt]: ...


