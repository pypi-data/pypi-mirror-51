####################################################################
## This file is automatically generated
## Do not edit manually
####################################################################

import ipywidgets as widgets
from traitlets import Unicode, Dict
import json
import simplejson

from .widgets import PlaceField as PlaceFieldOrig
from .widgets import Autocorrelograms as AutocorrelogramsOrig
from .widgets import NWBView as NWBViewOrig
from .widgets import AnimalPosition as AnimalPositionOrig
from .widgets import NWBBrowser as NWBBrowserOrig
from .widgets import AnimalPosition2 as AnimalPosition2Orig
from .widgets import ElectrodeGeometry as ElectrodeGeometryOrig
from .widgets import TimeseriesView as TimeseriesViewOrig
from .widgets import SpikeForestAnalysis as SpikeForestAnalysisOrig


def _json_parse(x):
    try:
        return json.loads(x)
    except:
        return None

def _json_stringify(x):
    try:
        return simplejson.dumps(x, ignore_nan=True)
    except:
        return ''


@widgets.register
class PlaceField(widgets.DOMWidget):
    """Jupyter widget for PlaceField"""
    _view_name = Unicode('PlaceFieldView').tag(sync=True)
    _model_name = Unicode('PlaceFieldModel').tag(sync=True)
    _view_module = Unicode('ephys_viz_jup').tag(sync=True)
    _model_module = Unicode('ephys_viz_jup').tag(sync=True)
    _view_module_version = Unicode('^0.2.6').tag(sync=True)
    _model_module_version = Unicode('^0.2.6').tag(sync=True)

    # props
    _props = Dict({}).tag(sync=True)

    # python state
    positions= Unicode('').tag(sync=True)
    timestamps= Unicode('').tag(sync=True)
    spike_time_indices= Unicode('').tag(sync=True)
    spike_labels= Unicode('').tag(sync=True)
    all_unit_ids= Unicode('').tag(sync=True)
    cluster_names= Unicode('').tag(sync=True)
    status= Unicode('').tag(sync=True)
    status_message= Unicode('').tag(sync=True)
    

    # javascript state
    nwb_query= Unicode('').tag(sync=True)
    download_from= Unicode('').tag(sync=True)
    downsample_factor= Unicode('').tag(sync=True)
    

    def __init__(self, **kwargs):
        super().__init__()
        self._X = PlaceFieldOrig()
        self._X.on_python_state_changed(self._handle_python_state_changed)
        self.observe(self._on_change)
        self.set_trait('_props', dict(**kwargs))
        self._X.init_jupyter()

    def show(self):
        display(self)

    def _handle_python_state_changed(self):
        for key in ['positions', 'timestamps', 'spike_time_indices', 'spike_labels', 'all_unit_ids', 'cluster_names', 'status', 'status_message']:
            val = self._X.get_python_state(key, None)
            self.set_trait(key, _json_stringify(val))

    def _on_change(self, change):
        if change.type == 'change':
            if change.name in ['nwb_query', 'download_from', 'downsample_factor']:
                state0 = dict()
                state0[change.name] = _json_parse(change.new)
                self._X._handle_javascript_state_changed(state0)

@widgets.register
class Autocorrelograms(widgets.DOMWidget):
    """Jupyter widget for Autocorrelograms"""
    _view_name = Unicode('AutocorrelogramsView').tag(sync=True)
    _model_name = Unicode('AutocorrelogramsModel').tag(sync=True)
    _view_module = Unicode('ephys_viz_jup').tag(sync=True)
    _model_module = Unicode('ephys_viz_jup').tag(sync=True)
    _view_module_version = Unicode('^0.2.6').tag(sync=True)
    _model_module_version = Unicode('^0.2.6').tag(sync=True)

    # props
    _props = Dict({}).tag(sync=True)

    # python state
    output= Unicode('').tag(sync=True)
    status= Unicode('').tag(sync=True)
    status_message= Unicode('').tag(sync=True)
    

    # javascript state
    firingsPath= Unicode('').tag(sync=True)
    samplerate= Unicode('').tag(sync=True)
    download_from= Unicode('').tag(sync=True)
    max_samples= Unicode('').tag(sync=True)
    bin_size_msec= Unicode('').tag(sync=True)
    max_dt_msec= Unicode('').tag(sync=True)
    

    def __init__(self, **kwargs):
        super().__init__()
        self._X = AutocorrelogramsOrig()
        self._X.on_python_state_changed(self._handle_python_state_changed)
        self.observe(self._on_change)
        self.set_trait('_props', dict(**kwargs))
        self._X.init_jupyter()

    def show(self):
        display(self)

    def _handle_python_state_changed(self):
        for key in ['output', 'status', 'status_message']:
            val = self._X.get_python_state(key, None)
            self.set_trait(key, _json_stringify(val))

    def _on_change(self, change):
        if change.type == 'change':
            if change.name in ['firingsPath', 'samplerate', 'download_from', 'max_samples', 'bin_size_msec', 'max_dt_msec']:
                state0 = dict()
                state0[change.name] = _json_parse(change.new)
                self._X._handle_javascript_state_changed(state0)

@widgets.register
class NWBView(widgets.DOMWidget):
    """Jupyter widget for NWBView"""
    _view_name = Unicode('NWBViewView').tag(sync=True)
    _model_name = Unicode('NWBViewModel').tag(sync=True)
    _view_module = Unicode('ephys_viz_jup').tag(sync=True)
    _model_module = Unicode('ephys_viz_jup').tag(sync=True)
    _view_module_version = Unicode('^0.2.6').tag(sync=True)
    _model_module_version = Unicode('^0.2.6').tag(sync=True)

    # props
    _props = Dict({}).tag(sync=True)

    # python state
    object= Unicode('').tag(sync=True)
    status= Unicode('').tag(sync=True)
    status_message= Unicode('').tag(sync=True)
    

    # javascript state
    path= Unicode('').tag(sync=True)
    download_from= Unicode('').tag(sync=True)
    

    def __init__(self, **kwargs):
        super().__init__()
        self._X = NWBViewOrig()
        self._X.on_python_state_changed(self._handle_python_state_changed)
        self.observe(self._on_change)
        self.set_trait('_props', dict(**kwargs))
        self._X.init_jupyter()

    def show(self):
        display(self)

    def _handle_python_state_changed(self):
        for key in ['object', 'status', 'status_message']:
            val = self._X.get_python_state(key, None)
            self.set_trait(key, _json_stringify(val))

    def _on_change(self, change):
        if change.type == 'change':
            if change.name in ['path', 'download_from']:
                state0 = dict()
                state0[change.name] = _json_parse(change.new)
                self._X._handle_javascript_state_changed(state0)

@widgets.register
class AnimalPosition(widgets.DOMWidget):
    """Jupyter widget for AnimalPosition"""
    _view_name = Unicode('AnimalPositionView').tag(sync=True)
    _model_name = Unicode('AnimalPositionModel').tag(sync=True)
    _view_module = Unicode('ephys_viz_jup').tag(sync=True)
    _model_module = Unicode('ephys_viz_jup').tag(sync=True)
    _view_module_version = Unicode('^0.2.6').tag(sync=True)
    _model_module_version = Unicode('^0.2.6').tag(sync=True)

    # props
    _props = Dict({}).tag(sync=True)

    # python state
    positions= Unicode('').tag(sync=True)
    timestamps= Unicode('').tag(sync=True)
    status= Unicode('').tag(sync=True)
    status_message= Unicode('').tag(sync=True)
    

    # javascript state
    nwb_path= Unicode('').tag(sync=True)
    download_from= Unicode('').tag(sync=True)
    downsample_factor= Unicode('').tag(sync=True)
    

    def __init__(self, **kwargs):
        super().__init__()
        self._X = AnimalPositionOrig()
        self._X.on_python_state_changed(self._handle_python_state_changed)
        self.observe(self._on_change)
        self.set_trait('_props', dict(**kwargs))
        self._X.init_jupyter()

    def show(self):
        display(self)

    def _handle_python_state_changed(self):
        for key in ['positions', 'timestamps', 'status', 'status_message']:
            val = self._X.get_python_state(key, None)
            self.set_trait(key, _json_stringify(val))

    def _on_change(self, change):
        if change.type == 'change':
            if change.name in ['nwb_path', 'download_from', 'downsample_factor']:
                state0 = dict()
                state0[change.name] = _json_parse(change.new)
                self._X._handle_javascript_state_changed(state0)

@widgets.register
class NWBBrowser(widgets.DOMWidget):
    """Jupyter widget for NWBBrowser"""
    _view_name = Unicode('NWBBrowserView').tag(sync=True)
    _model_name = Unicode('NWBBrowserModel').tag(sync=True)
    _view_module = Unicode('ephys_viz_jup').tag(sync=True)
    _model_module = Unicode('ephys_viz_jup').tag(sync=True)
    _view_module_version = Unicode('^0.2.6').tag(sync=True)
    _model_module_version = Unicode('^0.2.6').tag(sync=True)

    # props
    _props = Dict({}).tag(sync=True)

    # python state
    object= Unicode('').tag(sync=True)
    status= Unicode('').tag(sync=True)
    status_message= Unicode('').tag(sync=True)
    

    # javascript state
    path= Unicode('').tag(sync=True)
    download_from= Unicode('').tag(sync=True)
    

    def __init__(self, **kwargs):
        super().__init__()
        self._X = NWBBrowserOrig()
        self._X.on_python_state_changed(self._handle_python_state_changed)
        self.observe(self._on_change)
        self.set_trait('_props', dict(**kwargs))
        self._X.init_jupyter()

    def show(self):
        display(self)

    def _handle_python_state_changed(self):
        for key in ['object', 'status', 'status_message']:
            val = self._X.get_python_state(key, None)
            self.set_trait(key, _json_stringify(val))

    def _on_change(self, change):
        if change.type == 'change':
            if change.name in ['path', 'download_from']:
                state0 = dict()
                state0[change.name] = _json_parse(change.new)
                self._X._handle_javascript_state_changed(state0)

@widgets.register
class AnimalPosition2(widgets.DOMWidget):
    """Jupyter widget for AnimalPosition2"""
    _view_name = Unicode('AnimalPosition2View').tag(sync=True)
    _model_name = Unicode('AnimalPosition2Model').tag(sync=True)
    _view_module = Unicode('ephys_viz_jup').tag(sync=True)
    _model_module = Unicode('ephys_viz_jup').tag(sync=True)
    _view_module_version = Unicode('^0.2.6').tag(sync=True)
    _model_module_version = Unicode('^0.2.6').tag(sync=True)

    # props
    _props = Dict({}).tag(sync=True)

    # python state
    positions= Unicode('').tag(sync=True)
    timestamps= Unicode('').tag(sync=True)
    status= Unicode('').tag(sync=True)
    status_message= Unicode('').tag(sync=True)
    

    # javascript state
    nwb_path= Unicode('').tag(sync=True)
    download_from= Unicode('').tag(sync=True)
    downsample_factor= Unicode('').tag(sync=True)
    

    def __init__(self, **kwargs):
        super().__init__()
        self._X = AnimalPosition2Orig()
        self._X.on_python_state_changed(self._handle_python_state_changed)
        self.observe(self._on_change)
        self.set_trait('_props', dict(**kwargs))
        self._X.init_jupyter()

    def show(self):
        display(self)

    def _handle_python_state_changed(self):
        for key in ['positions', 'timestamps', 'status', 'status_message']:
            val = self._X.get_python_state(key, None)
            self.set_trait(key, _json_stringify(val))

    def _on_change(self, change):
        if change.type == 'change':
            if change.name in ['nwb_path', 'download_from', 'downsample_factor']:
                state0 = dict()
                state0[change.name] = _json_parse(change.new)
                self._X._handle_javascript_state_changed(state0)

@widgets.register
class ElectrodeGeometry(widgets.DOMWidget):
    """Jupyter widget for ElectrodeGeometry"""
    _view_name = Unicode('ElectrodeGeometryView').tag(sync=True)
    _model_name = Unicode('ElectrodeGeometryModel').tag(sync=True)
    _view_module = Unicode('ephys_viz_jup').tag(sync=True)
    _model_module = Unicode('ephys_viz_jup').tag(sync=True)
    _view_module_version = Unicode('^0.2.6').tag(sync=True)
    _model_module_version = Unicode('^0.2.6').tag(sync=True)

    # props
    _props = Dict({}).tag(sync=True)

    # python state
    locations= Unicode('').tag(sync=True)
    labels= Unicode('').tag(sync=True)
    status= Unicode('').tag(sync=True)
    status_message= Unicode('').tag(sync=True)
    

    # javascript state
    path= Unicode('').tag(sync=True)
    download_from= Unicode('').tag(sync=True)
    

    def __init__(self, **kwargs):
        super().__init__()
        self._X = ElectrodeGeometryOrig()
        self._X.on_python_state_changed(self._handle_python_state_changed)
        self.observe(self._on_change)
        self.set_trait('_props', dict(**kwargs))
        self._X.init_jupyter()

    def show(self):
        display(self)

    def _handle_python_state_changed(self):
        for key in ['locations', 'labels', 'status', 'status_message']:
            val = self._X.get_python_state(key, None)
            self.set_trait(key, _json_stringify(val))

    def _on_change(self, change):
        if change.type == 'change':
            if change.name in ['path', 'download_from']:
                state0 = dict()
                state0[change.name] = _json_parse(change.new)
                self._X._handle_javascript_state_changed(state0)

@widgets.register
class TimeseriesView(widgets.DOMWidget):
    """Jupyter widget for TimeseriesView"""
    _view_name = Unicode('TimeseriesViewView').tag(sync=True)
    _model_name = Unicode('TimeseriesViewModel').tag(sync=True)
    _view_module = Unicode('ephys_viz_jup').tag(sync=True)
    _model_module = Unicode('ephys_viz_jup').tag(sync=True)
    _view_module_version = Unicode('^0.2.6').tag(sync=True)
    _model_module_version = Unicode('^0.2.6').tag(sync=True)

    # props
    _props = Dict({}).tag(sync=True)

    # python state
    status= Unicode('').tag(sync=True)
    statusMessage= Unicode('').tag(sync=True)
    numChannels= Unicode('').tag(sync=True)
    numTimepoints= Unicode('').tag(sync=True)
    samplerate= Unicode('').tag(sync=True)
    

    # javascript state
    recordingPath= Unicode('').tag(sync=True)
    download_from= Unicode('').tag(sync=True)
    segmentSize= Unicode('').tag(sync=True)
    segmentsRequested= Unicode('').tag(sync=True)
    

    def __init__(self, **kwargs):
        super().__init__()
        self._X = TimeseriesViewOrig()
        self._X.on_python_state_changed(self._handle_python_state_changed)
        self.observe(self._on_change)
        self.set_trait('_props', dict(**kwargs))
        self._X.init_jupyter()

    def show(self):
        display(self)

    def _handle_python_state_changed(self):
        for key in ['status', 'statusMessage', 'numChannels', 'numTimepoints', 'samplerate']:
            val = self._X.get_python_state(key, None)
            self.set_trait(key, _json_stringify(val))

    def _on_change(self, change):
        if change.type == 'change':
            if change.name in ['recordingPath', 'download_from', 'segmentSize', 'segmentsRequested']:
                state0 = dict()
                state0[change.name] = _json_parse(change.new)
                self._X._handle_javascript_state_changed(state0)

@widgets.register
class SpikeForestAnalysis(widgets.DOMWidget):
    """Jupyter widget for SpikeForestAnalysis"""
    _view_name = Unicode('SpikeForestAnalysisView').tag(sync=True)
    _model_name = Unicode('SpikeForestAnalysisModel').tag(sync=True)
    _view_module = Unicode('ephys_viz_jup').tag(sync=True)
    _model_module = Unicode('ephys_viz_jup').tag(sync=True)
    _view_module_version = Unicode('^0.2.6').tag(sync=True)
    _model_module_version = Unicode('^0.2.6').tag(sync=True)

    # props
    _props = Dict({}).tag(sync=True)

    # python state
    object= Unicode('').tag(sync=True)
    status= Unicode('').tag(sync=True)
    status_message= Unicode('').tag(sync=True)
    

    # javascript state
    path= Unicode('').tag(sync=True)
    download_from= Unicode('').tag(sync=True)
    

    def __init__(self, **kwargs):
        super().__init__()
        self._X = SpikeForestAnalysisOrig()
        self._X.on_python_state_changed(self._handle_python_state_changed)
        self.observe(self._on_change)
        self.set_trait('_props', dict(**kwargs))
        self._X.init_jupyter()

    def show(self):
        display(self)

    def _handle_python_state_changed(self):
        for key in ['object', 'status', 'status_message']:
            val = self._X.get_python_state(key, None)
            self.set_trait(key, _json_stringify(val))

    def _on_change(self, change):
        if change.type == 'change':
            if change.name in ['path', 'download_from']:
                state0 = dict()
                state0[change.name] = _json_parse(change.new)
                self._X._handle_javascript_state_changed(state0)
