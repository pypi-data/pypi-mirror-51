####################################################################
## This file is automatically generated
## Do not edit manually
####################################################################

from reactopya_jup import ReactopyaWidget

from .widgets import PlaceField as PlaceFieldOrig
from .widgets import Accordion as AccordionOrig
from .widgets import Autocorrelograms as AutocorrelogramsOrig
from .widgets import NWBView as NWBViewOrig
from .widgets import AnimalPosition as AnimalPositionOrig
from .widgets import VBox as VBoxOrig
from .widgets import NWBBrowser as NWBBrowserOrig
from .widgets import AnimalPosition2 as AnimalPosition2Orig
from .widgets import HBox as HBoxOrig
from .widgets import ElectrodeGeometry as ElectrodeGeometryOrig
from .widgets import TimeseriesView as TimeseriesViewOrig
from .widgets import SpikeForestAnalysis as SpikeForestAnalysisOrig
from .widgets import Tabs as TabsOrig



class PlaceField:
    """Jupyter widget for PlaceField"""

    def __init__(self, *args, **kwargs):
        super().__init__()
        self._props = dict(**kwargs)
        self._children = list(args)
        self._component = PlaceFieldOrig()
        self._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, []))
        self._connect_children(self._children, [])
        self._reactopya_widget = None
        self._component.init_jupyter()
    
    def _connect_children(self, children, child_indices):
        for i, ch in enumerate(children):
            self._connect_child(ch, child_indices + [i])
            self._connect_children(ch._children, child_indices + [i])
    
    def _connect_child(self, child, child_indices):
        child._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, child_indices))
    
    def _handle_python_state_changed(self, state, child_indices):
        if self._reactopya_widget:
            self._reactopya_widget.set_python_state(state, child_indices)

    def _handle_javascript_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        ptr._component._handle_javascript_state_changed(state)

    def _serialize(self):
        return dict(
            type='PlaceField',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )

    def _reactopya_widget(self):
        return self._reactopya_widget

    def show(self):
        self._reactopya_widget = ReactopyaWidget(
            type='PlaceField',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )
        self._reactopya_widget.on_javascript_state_changed(self._handle_javascript_state_changed)

        self._reactopya_widget.show()

class Accordion:
    """Jupyter widget for Accordion"""

    def __init__(self, *args, **kwargs):
        super().__init__()
        self._props = dict(**kwargs)
        self._children = list(args)
        self._component = AccordionOrig()
        self._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, []))
        self._connect_children(self._children, [])
        self._reactopya_widget = None
        self._component.init_jupyter()
    
    def _connect_children(self, children, child_indices):
        for i, ch in enumerate(children):
            self._connect_child(ch, child_indices + [i])
            self._connect_children(ch._children, child_indices + [i])
    
    def _connect_child(self, child, child_indices):
        child._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, child_indices))
    
    def _handle_python_state_changed(self, state, child_indices):
        if self._reactopya_widget:
            self._reactopya_widget.set_python_state(state, child_indices)

    def _handle_javascript_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        ptr._component._handle_javascript_state_changed(state)

    def _serialize(self):
        return dict(
            type='Accordion',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )

    def _reactopya_widget(self):
        return self._reactopya_widget

    def show(self):
        self._reactopya_widget = ReactopyaWidget(
            type='Accordion',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )
        self._reactopya_widget.on_javascript_state_changed(self._handle_javascript_state_changed)

        self._reactopya_widget.show()

class Autocorrelograms:
    """Jupyter widget for Autocorrelograms"""

    def __init__(self, *args, **kwargs):
        super().__init__()
        self._props = dict(**kwargs)
        self._children = list(args)
        self._component = AutocorrelogramsOrig()
        self._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, []))
        self._connect_children(self._children, [])
        self._reactopya_widget = None
        self._component.init_jupyter()
    
    def _connect_children(self, children, child_indices):
        for i, ch in enumerate(children):
            self._connect_child(ch, child_indices + [i])
            self._connect_children(ch._children, child_indices + [i])
    
    def _connect_child(self, child, child_indices):
        child._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, child_indices))
    
    def _handle_python_state_changed(self, state, child_indices):
        if self._reactopya_widget:
            self._reactopya_widget.set_python_state(state, child_indices)

    def _handle_javascript_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        ptr._component._handle_javascript_state_changed(state)

    def _serialize(self):
        return dict(
            type='Autocorrelograms',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )

    def _reactopya_widget(self):
        return self._reactopya_widget

    def show(self):
        self._reactopya_widget = ReactopyaWidget(
            type='Autocorrelograms',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )
        self._reactopya_widget.on_javascript_state_changed(self._handle_javascript_state_changed)

        self._reactopya_widget.show()

class NWBView:
    """Jupyter widget for NWBView"""

    def __init__(self, *args, **kwargs):
        super().__init__()
        self._props = dict(**kwargs)
        self._children = list(args)
        self._component = NWBViewOrig()
        self._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, []))
        self._connect_children(self._children, [])
        self._reactopya_widget = None
        self._component.init_jupyter()
    
    def _connect_children(self, children, child_indices):
        for i, ch in enumerate(children):
            self._connect_child(ch, child_indices + [i])
            self._connect_children(ch._children, child_indices + [i])
    
    def _connect_child(self, child, child_indices):
        child._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, child_indices))
    
    def _handle_python_state_changed(self, state, child_indices):
        if self._reactopya_widget:
            self._reactopya_widget.set_python_state(state, child_indices)

    def _handle_javascript_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        ptr._component._handle_javascript_state_changed(state)

    def _serialize(self):
        return dict(
            type='NWBView',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )

    def _reactopya_widget(self):
        return self._reactopya_widget

    def show(self):
        self._reactopya_widget = ReactopyaWidget(
            type='NWBView',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )
        self._reactopya_widget.on_javascript_state_changed(self._handle_javascript_state_changed)

        self._reactopya_widget.show()

class AnimalPosition:
    """Jupyter widget for AnimalPosition"""

    def __init__(self, *args, **kwargs):
        super().__init__()
        self._props = dict(**kwargs)
        self._children = list(args)
        self._component = AnimalPositionOrig()
        self._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, []))
        self._connect_children(self._children, [])
        self._reactopya_widget = None
        self._component.init_jupyter()
    
    def _connect_children(self, children, child_indices):
        for i, ch in enumerate(children):
            self._connect_child(ch, child_indices + [i])
            self._connect_children(ch._children, child_indices + [i])
    
    def _connect_child(self, child, child_indices):
        child._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, child_indices))
    
    def _handle_python_state_changed(self, state, child_indices):
        if self._reactopya_widget:
            self._reactopya_widget.set_python_state(state, child_indices)

    def _handle_javascript_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        ptr._component._handle_javascript_state_changed(state)

    def _serialize(self):
        return dict(
            type='AnimalPosition',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )

    def _reactopya_widget(self):
        return self._reactopya_widget

    def show(self):
        self._reactopya_widget = ReactopyaWidget(
            type='AnimalPosition',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )
        self._reactopya_widget.on_javascript_state_changed(self._handle_javascript_state_changed)

        self._reactopya_widget.show()

class VBox:
    """Jupyter widget for VBox"""

    def __init__(self, *args, **kwargs):
        super().__init__()
        self._props = dict(**kwargs)
        self._children = list(args)
        self._component = VBoxOrig()
        self._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, []))
        self._connect_children(self._children, [])
        self._reactopya_widget = None
        self._component.init_jupyter()
    
    def _connect_children(self, children, child_indices):
        for i, ch in enumerate(children):
            self._connect_child(ch, child_indices + [i])
            self._connect_children(ch._children, child_indices + [i])
    
    def _connect_child(self, child, child_indices):
        child._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, child_indices))
    
    def _handle_python_state_changed(self, state, child_indices):
        if self._reactopya_widget:
            self._reactopya_widget.set_python_state(state, child_indices)

    def _handle_javascript_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        ptr._component._handle_javascript_state_changed(state)

    def _serialize(self):
        return dict(
            type='VBox',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )

    def _reactopya_widget(self):
        return self._reactopya_widget

    def show(self):
        self._reactopya_widget = ReactopyaWidget(
            type='VBox',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )
        self._reactopya_widget.on_javascript_state_changed(self._handle_javascript_state_changed)

        self._reactopya_widget.show()

class NWBBrowser:
    """Jupyter widget for NWBBrowser"""

    def __init__(self, *args, **kwargs):
        super().__init__()
        self._props = dict(**kwargs)
        self._children = list(args)
        self._component = NWBBrowserOrig()
        self._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, []))
        self._connect_children(self._children, [])
        self._reactopya_widget = None
        self._component.init_jupyter()
    
    def _connect_children(self, children, child_indices):
        for i, ch in enumerate(children):
            self._connect_child(ch, child_indices + [i])
            self._connect_children(ch._children, child_indices + [i])
    
    def _connect_child(self, child, child_indices):
        child._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, child_indices))
    
    def _handle_python_state_changed(self, state, child_indices):
        if self._reactopya_widget:
            self._reactopya_widget.set_python_state(state, child_indices)

    def _handle_javascript_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        ptr._component._handle_javascript_state_changed(state)

    def _serialize(self):
        return dict(
            type='NWBBrowser',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )

    def _reactopya_widget(self):
        return self._reactopya_widget

    def show(self):
        self._reactopya_widget = ReactopyaWidget(
            type='NWBBrowser',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )
        self._reactopya_widget.on_javascript_state_changed(self._handle_javascript_state_changed)

        self._reactopya_widget.show()

class AnimalPosition2:
    """Jupyter widget for AnimalPosition2"""

    def __init__(self, *args, **kwargs):
        super().__init__()
        self._props = dict(**kwargs)
        self._children = list(args)
        self._component = AnimalPosition2Orig()
        self._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, []))
        self._connect_children(self._children, [])
        self._reactopya_widget = None
        self._component.init_jupyter()
    
    def _connect_children(self, children, child_indices):
        for i, ch in enumerate(children):
            self._connect_child(ch, child_indices + [i])
            self._connect_children(ch._children, child_indices + [i])
    
    def _connect_child(self, child, child_indices):
        child._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, child_indices))
    
    def _handle_python_state_changed(self, state, child_indices):
        if self._reactopya_widget:
            self._reactopya_widget.set_python_state(state, child_indices)

    def _handle_javascript_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        ptr._component._handle_javascript_state_changed(state)

    def _serialize(self):
        return dict(
            type='AnimalPosition2',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )

    def _reactopya_widget(self):
        return self._reactopya_widget

    def show(self):
        self._reactopya_widget = ReactopyaWidget(
            type='AnimalPosition2',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )
        self._reactopya_widget.on_javascript_state_changed(self._handle_javascript_state_changed)

        self._reactopya_widget.show()

class HBox:
    """Jupyter widget for HBox"""

    def __init__(self, *args, **kwargs):
        super().__init__()
        self._props = dict(**kwargs)
        self._children = list(args)
        self._component = HBoxOrig()
        self._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, []))
        self._connect_children(self._children, [])
        self._reactopya_widget = None
        self._component.init_jupyter()
    
    def _connect_children(self, children, child_indices):
        for i, ch in enumerate(children):
            self._connect_child(ch, child_indices + [i])
            self._connect_children(ch._children, child_indices + [i])
    
    def _connect_child(self, child, child_indices):
        child._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, child_indices))
    
    def _handle_python_state_changed(self, state, child_indices):
        if self._reactopya_widget:
            self._reactopya_widget.set_python_state(state, child_indices)

    def _handle_javascript_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        ptr._component._handle_javascript_state_changed(state)

    def _serialize(self):
        return dict(
            type='HBox',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )

    def _reactopya_widget(self):
        return self._reactopya_widget

    def show(self):
        self._reactopya_widget = ReactopyaWidget(
            type='HBox',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )
        self._reactopya_widget.on_javascript_state_changed(self._handle_javascript_state_changed)

        self._reactopya_widget.show()

class ElectrodeGeometry:
    """Jupyter widget for ElectrodeGeometry"""

    def __init__(self, *args, **kwargs):
        super().__init__()
        self._props = dict(**kwargs)
        self._children = list(args)
        self._component = ElectrodeGeometryOrig()
        self._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, []))
        self._connect_children(self._children, [])
        self._reactopya_widget = None
        self._component.init_jupyter()
    
    def _connect_children(self, children, child_indices):
        for i, ch in enumerate(children):
            self._connect_child(ch, child_indices + [i])
            self._connect_children(ch._children, child_indices + [i])
    
    def _connect_child(self, child, child_indices):
        child._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, child_indices))
    
    def _handle_python_state_changed(self, state, child_indices):
        if self._reactopya_widget:
            self._reactopya_widget.set_python_state(state, child_indices)

    def _handle_javascript_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        ptr._component._handle_javascript_state_changed(state)

    def _serialize(self):
        return dict(
            type='ElectrodeGeometry',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )

    def _reactopya_widget(self):
        return self._reactopya_widget

    def show(self):
        self._reactopya_widget = ReactopyaWidget(
            type='ElectrodeGeometry',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )
        self._reactopya_widget.on_javascript_state_changed(self._handle_javascript_state_changed)

        self._reactopya_widget.show()

class TimeseriesView:
    """Jupyter widget for TimeseriesView"""

    def __init__(self, *args, **kwargs):
        super().__init__()
        self._props = dict(**kwargs)
        self._children = list(args)
        self._component = TimeseriesViewOrig()
        self._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, []))
        self._connect_children(self._children, [])
        self._reactopya_widget = None
        self._component.init_jupyter()
    
    def _connect_children(self, children, child_indices):
        for i, ch in enumerate(children):
            self._connect_child(ch, child_indices + [i])
            self._connect_children(ch._children, child_indices + [i])
    
    def _connect_child(self, child, child_indices):
        child._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, child_indices))
    
    def _handle_python_state_changed(self, state, child_indices):
        if self._reactopya_widget:
            self._reactopya_widget.set_python_state(state, child_indices)

    def _handle_javascript_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        ptr._component._handle_javascript_state_changed(state)

    def _serialize(self):
        return dict(
            type='TimeseriesView',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )

    def _reactopya_widget(self):
        return self._reactopya_widget

    def show(self):
        self._reactopya_widget = ReactopyaWidget(
            type='TimeseriesView',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )
        self._reactopya_widget.on_javascript_state_changed(self._handle_javascript_state_changed)

        self._reactopya_widget.show()

class SpikeForestAnalysis:
    """Jupyter widget for SpikeForestAnalysis"""

    def __init__(self, *args, **kwargs):
        super().__init__()
        self._props = dict(**kwargs)
        self._children = list(args)
        self._component = SpikeForestAnalysisOrig()
        self._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, []))
        self._connect_children(self._children, [])
        self._reactopya_widget = None
        self._component.init_jupyter()
    
    def _connect_children(self, children, child_indices):
        for i, ch in enumerate(children):
            self._connect_child(ch, child_indices + [i])
            self._connect_children(ch._children, child_indices + [i])
    
    def _connect_child(self, child, child_indices):
        child._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, child_indices))
    
    def _handle_python_state_changed(self, state, child_indices):
        if self._reactopya_widget:
            self._reactopya_widget.set_python_state(state, child_indices)

    def _handle_javascript_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        ptr._component._handle_javascript_state_changed(state)

    def _serialize(self):
        return dict(
            type='SpikeForestAnalysis',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )

    def _reactopya_widget(self):
        return self._reactopya_widget

    def show(self):
        self._reactopya_widget = ReactopyaWidget(
            type='SpikeForestAnalysis',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )
        self._reactopya_widget.on_javascript_state_changed(self._handle_javascript_state_changed)

        self._reactopya_widget.show()

class Tabs:
    """Jupyter widget for Tabs"""

    def __init__(self, *args, **kwargs):
        super().__init__()
        self._props = dict(**kwargs)
        self._children = list(args)
        self._component = TabsOrig()
        self._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, []))
        self._connect_children(self._children, [])
        self._reactopya_widget = None
        self._component.init_jupyter()
    
    def _connect_children(self, children, child_indices):
        for i, ch in enumerate(children):
            self._connect_child(ch, child_indices + [i])
            self._connect_children(ch._children, child_indices + [i])
    
    def _connect_child(self, child, child_indices):
        child._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, child_indices))
    
    def _handle_python_state_changed(self, state, child_indices):
        if self._reactopya_widget:
            self._reactopya_widget.set_python_state(state, child_indices)

    def _handle_javascript_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        ptr._component._handle_javascript_state_changed(state)

    def _serialize(self):
        return dict(
            type='Tabs',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )

    def _reactopya_widget(self):
        return self._reactopya_widget

    def show(self):
        self._reactopya_widget = ReactopyaWidget(
            type='Tabs',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )
        self._reactopya_widget.on_javascript_state_changed(self._handle_javascript_state_changed)

        self._reactopya_widget.show()
