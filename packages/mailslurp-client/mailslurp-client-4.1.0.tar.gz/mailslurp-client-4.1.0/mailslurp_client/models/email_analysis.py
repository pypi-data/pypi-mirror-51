# coding: utf-8

"""
    MailSlurp API

    For documentation see [developer guide](https://www.mailslurp.com/developers). [Create an account](https://app.mailslurp.com) in the MailSlurp Dashboard to [view your API Key](https://app). For all bugs, feature requests, or help please [see support](https://www.mailslurp.com/support/).  # noqa: E501

    OpenAPI spec version: 0.0.1-alpha
    Contact: contact@mailslurp.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EmailAnalysis(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dkim_verdict': 'str',
        'dmarc_verdict': 'str',
        'spam_verdict': 'str',
        'spf_verdict': 'str',
        'virus_verdict': 'str'
    }

    attribute_map = {
        'dkim_verdict': 'dkimVerdict',
        'dmarc_verdict': 'dmarcVerdict',
        'spam_verdict': 'spamVerdict',
        'spf_verdict': 'spfVerdict',
        'virus_verdict': 'virusVerdict'
    }

    def __init__(self, dkim_verdict=None, dmarc_verdict=None, spam_verdict=None, spf_verdict=None, virus_verdict=None):  # noqa: E501
        """EmailAnalysis - a model defined in OpenAPI"""  # noqa: E501

        self._dkim_verdict = None
        self._dmarc_verdict = None
        self._spam_verdict = None
        self._spf_verdict = None
        self._virus_verdict = None
        self.discriminator = None

        self.dkim_verdict = dkim_verdict
        self.dmarc_verdict = dmarc_verdict
        self.spam_verdict = spam_verdict
        self.spf_verdict = spf_verdict
        self.virus_verdict = virus_verdict

    @property
    def dkim_verdict(self):
        """Gets the dkim_verdict of this EmailAnalysis.  # noqa: E501


        :return: The dkim_verdict of this EmailAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._dkim_verdict

    @dkim_verdict.setter
    def dkim_verdict(self, dkim_verdict):
        """Sets the dkim_verdict of this EmailAnalysis.


        :param dkim_verdict: The dkim_verdict of this EmailAnalysis.  # noqa: E501
        :type: str
        """
        if dkim_verdict is None:
            raise ValueError("Invalid value for `dkim_verdict`, must not be `None`")  # noqa: E501

        self._dkim_verdict = dkim_verdict

    @property
    def dmarc_verdict(self):
        """Gets the dmarc_verdict of this EmailAnalysis.  # noqa: E501


        :return: The dmarc_verdict of this EmailAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._dmarc_verdict

    @dmarc_verdict.setter
    def dmarc_verdict(self, dmarc_verdict):
        """Sets the dmarc_verdict of this EmailAnalysis.


        :param dmarc_verdict: The dmarc_verdict of this EmailAnalysis.  # noqa: E501
        :type: str
        """
        if dmarc_verdict is None:
            raise ValueError("Invalid value for `dmarc_verdict`, must not be `None`")  # noqa: E501

        self._dmarc_verdict = dmarc_verdict

    @property
    def spam_verdict(self):
        """Gets the spam_verdict of this EmailAnalysis.  # noqa: E501


        :return: The spam_verdict of this EmailAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._spam_verdict

    @spam_verdict.setter
    def spam_verdict(self, spam_verdict):
        """Sets the spam_verdict of this EmailAnalysis.


        :param spam_verdict: The spam_verdict of this EmailAnalysis.  # noqa: E501
        :type: str
        """
        if spam_verdict is None:
            raise ValueError("Invalid value for `spam_verdict`, must not be `None`")  # noqa: E501

        self._spam_verdict = spam_verdict

    @property
    def spf_verdict(self):
        """Gets the spf_verdict of this EmailAnalysis.  # noqa: E501


        :return: The spf_verdict of this EmailAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._spf_verdict

    @spf_verdict.setter
    def spf_verdict(self, spf_verdict):
        """Sets the spf_verdict of this EmailAnalysis.


        :param spf_verdict: The spf_verdict of this EmailAnalysis.  # noqa: E501
        :type: str
        """
        if spf_verdict is None:
            raise ValueError("Invalid value for `spf_verdict`, must not be `None`")  # noqa: E501

        self._spf_verdict = spf_verdict

    @property
    def virus_verdict(self):
        """Gets the virus_verdict of this EmailAnalysis.  # noqa: E501


        :return: The virus_verdict of this EmailAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._virus_verdict

    @virus_verdict.setter
    def virus_verdict(self, virus_verdict):
        """Sets the virus_verdict of this EmailAnalysis.


        :param virus_verdict: The virus_verdict of this EmailAnalysis.  # noqa: E501
        :type: str
        """
        if virus_verdict is None:
            raise ValueError("Invalid value for `virus_verdict`, must not be `None`")  # noqa: E501

        self._virus_verdict = virus_verdict

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailAnalysis):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
