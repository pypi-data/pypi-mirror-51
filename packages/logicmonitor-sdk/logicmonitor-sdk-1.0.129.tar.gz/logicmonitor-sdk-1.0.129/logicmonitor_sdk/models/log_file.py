# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from logicmonitor_sdk.models.match_pattern import MatchPattern  # noqa: F401,E501


class LogFile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'encoding': 'str',
        'excludes': 'list[str]',
        'matches': 'list[MatchPattern]',
        'path': 'str',
        'use_glob': 'bool'
    }

    attribute_map = {
        'encoding': 'encoding',
        'excludes': 'excludes',
        'matches': 'matches',
        'path': 'path',
        'use_glob': 'useGlob'
    }

    def __init__(self, encoding=None, excludes=None, matches=None, path=None, use_glob=None):  # noqa: E501
        """LogFile - a model defined in Swagger"""  # noqa: E501

        self._encoding = None
        self._excludes = None
        self._matches = None
        self._path = None
        self._use_glob = None
        self.discriminator = None

        if encoding is not None:
            self.encoding = encoding
        if excludes is not None:
            self.excludes = excludes
        if matches is not None:
            self.matches = matches
        if path is not None:
            self.path = path
        if use_glob is not None:
            self.use_glob = use_glob

    @property
    def encoding(self):
        """Gets the encoding of this LogFile.  # noqa: E501

        The file encoding: default | auto | UTF-8 | UTF-16  # noqa: E501

        :return: The encoding of this LogFile.  # noqa: E501
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this LogFile.

        The file encoding: default | auto | UTF-8 | UTF-16  # noqa: E501

        :param encoding: The encoding of this LogFile.  # noqa: E501
        :type: str
        """

        self._encoding = encoding

    @property
    def excludes(self):
        """Gets the excludes of this LogFile.  # noqa: E501

        The regex or plain text to look for in the file and not trigger alert if found  # noqa: E501

        :return: The excludes of this LogFile.  # noqa: E501
        :rtype: list[str]
        """
        return self._excludes

    @excludes.setter
    def excludes(self, excludes):
        """Sets the excludes of this LogFile.

        The regex or plain text to look for in the file and not trigger alert if found  # noqa: E501

        :param excludes: The excludes of this LogFile.  # noqa: E501
        :type: list[str]
        """

        self._excludes = excludes

    @property
    def matches(self):
        """Gets the matches of this LogFile.  # noqa: E501


        :return: The matches of this LogFile.  # noqa: E501
        :rtype: list[MatchPattern]
        """
        return self._matches

    @matches.setter
    def matches(self, matches):
        """Sets the matches of this LogFile.


        :param matches: The matches of this LogFile.  # noqa: E501
        :type: list[MatchPattern]
        """

        self._matches = matches

    @property
    def path(self):
        """Gets the path of this LogFile.  # noqa: E501

        The path of the log file to monitor  # noqa: E501

        :return: The path of this LogFile.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this LogFile.

        The path of the log file to monitor  # noqa: E501

        :param path: The path of this LogFile.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def use_glob(self):
        """Gets the use_glob of this LogFile.  # noqa: E501

        Whether or not glob is used in the path  # noqa: E501

        :return: The use_glob of this LogFile.  # noqa: E501
        :rtype: bool
        """
        return self._use_glob

    @use_glob.setter
    def use_glob(self, use_glob):
        """Sets the use_glob of this LogFile.

        Whether or not glob is used in the path  # noqa: E501

        :param use_glob: The use_glob of this LogFile.  # noqa: E501
        :type: bool
        """

        self._use_glob = use_glob

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LogFile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogFile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
