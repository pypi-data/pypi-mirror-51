# coding: utf-8

"""
    LogicMonitor REST API

    LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from logicmonitor_sdk.models.color_threshold import ColorThreshold  # noqa: F401,E501
from logicmonitor_sdk.models.website_item_config import WebsiteItemConfig  # noqa: F401,E501
from logicmonitor_sdk.models.widget import Widget  # noqa: F401,E501


class WebsiteSLAWidget(Widget):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dashboard_id': 'int',
        'description': 'str',
        'id': 'int',
        'interval': 'int',
        'last_updated_by': 'str',
        'last_updated_on': 'int',
        'name': 'str',
        'theme': 'str',
        'timescale': 'str',
        'type': 'str',
        'user_permission': 'str',
        'color_thresholds': 'list[ColorThreshold]',
        'days_in_week': 'str',
        'items': 'list[WebsiteItemConfig]',
        'period_in_one_day': 'str',
        'timezone': 'str'
    }

    attribute_map = {
        'dashboard_id': 'dashboardId',
        'description': 'description',
        'id': 'id',
        'interval': 'interval',
        'last_updated_by': 'lastUpdatedBy',
        'last_updated_on': 'lastUpdatedOn',
        'name': 'name',
        'theme': 'theme',
        'timescale': 'timescale',
        'type': 'type',
        'user_permission': 'userPermission',
        'color_thresholds': 'colorThresholds',
        'days_in_week': 'daysInWeek',
        'items': 'items',
        'period_in_one_day': 'periodInOneDay',
        'timezone': 'timezone'
    }

    def __init__(self, dashboard_id=None, description=None, id=None, interval=None, last_updated_by=None, last_updated_on=None, name=None, theme=None, timescale=None, type=None, user_permission=None, color_thresholds=None, days_in_week=None, items=None, period_in_one_day=None, timezone=None):  # noqa: E501
        """WebsiteSLAWidget - a model defined in Swagger"""  # noqa: E501

        self._dashboard_id = None
        self._description = None
        self._id = None
        self._interval = None
        self._last_updated_by = None
        self._last_updated_on = None
        self._name = None
        self._theme = None
        self._timescale = None
        self._type = None
        self._user_permission = None
        self._color_thresholds = None
        self._days_in_week = None
        self._items = None
        self._period_in_one_day = None
        self._timezone = None
        self.discriminator = None

        self.dashboard_id = dashboard_id
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if interval is not None:
            self.interval = interval
        if last_updated_by is not None:
            self.last_updated_by = last_updated_by
        if last_updated_on is not None:
            self.last_updated_on = last_updated_on
        self.name = name
        if theme is not None:
            self.theme = theme
        if timescale is not None:
            self.timescale = timescale
        self.type = type
        if user_permission is not None:
            self.user_permission = user_permission
        if color_thresholds is not None:
            self.color_thresholds = color_thresholds
        if days_in_week is not None:
            self.days_in_week = days_in_week
        self.items = items
        if period_in_one_day is not None:
            self.period_in_one_day = period_in_one_day
        if timezone is not None:
            self.timezone = timezone

    @property
    def dashboard_id(self):
        """Gets the dashboard_id of this WebsiteSLAWidget.  # noqa: E501

        The id of the dashboard the widget belongs to  # noqa: E501

        :return: The dashboard_id of this WebsiteSLAWidget.  # noqa: E501
        :rtype: int
        """
        return self._dashboard_id

    @dashboard_id.setter
    def dashboard_id(self, dashboard_id):
        """Sets the dashboard_id of this WebsiteSLAWidget.

        The id of the dashboard the widget belongs to  # noqa: E501

        :param dashboard_id: The dashboard_id of this WebsiteSLAWidget.  # noqa: E501
        :type: int
        """
        if dashboard_id is None:
            raise ValueError("Invalid value for `dashboard_id`, must not be `None`")  # noqa: E501

        self._dashboard_id = dashboard_id

    @property
    def description(self):
        """Gets the description of this WebsiteSLAWidget.  # noqa: E501

        The description of the widget  # noqa: E501

        :return: The description of this WebsiteSLAWidget.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WebsiteSLAWidget.

        The description of the widget  # noqa: E501

        :param description: The description of this WebsiteSLAWidget.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this WebsiteSLAWidget.  # noqa: E501

        The Id of the widget  # noqa: E501

        :return: The id of this WebsiteSLAWidget.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WebsiteSLAWidget.

        The Id of the widget  # noqa: E501

        :param id: The id of this WebsiteSLAWidget.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def interval(self):
        """Gets the interval of this WebsiteSLAWidget.  # noqa: E501

        The refresh interval of the widget, in minutes  # noqa: E501

        :return: The interval of this WebsiteSLAWidget.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this WebsiteSLAWidget.

        The refresh interval of the widget, in minutes  # noqa: E501

        :param interval: The interval of this WebsiteSLAWidget.  # noqa: E501
        :type: int
        """

        self._interval = interval

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this WebsiteSLAWidget.  # noqa: E501

        The user that last updated the widget  # noqa: E501

        :return: The last_updated_by of this WebsiteSLAWidget.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this WebsiteSLAWidget.

        The user that last updated the widget  # noqa: E501

        :param last_updated_by: The last_updated_by of this WebsiteSLAWidget.  # noqa: E501
        :type: str
        """

        self._last_updated_by = last_updated_by

    @property
    def last_updated_on(self):
        """Gets the last_updated_on of this WebsiteSLAWidget.  # noqa: E501

        The time that corresponds to when the widget was last updated, in epoch format  # noqa: E501

        :return: The last_updated_on of this WebsiteSLAWidget.  # noqa: E501
        :rtype: int
        """
        return self._last_updated_on

    @last_updated_on.setter
    def last_updated_on(self, last_updated_on):
        """Sets the last_updated_on of this WebsiteSLAWidget.

        The time that corresponds to when the widget was last updated, in epoch format  # noqa: E501

        :param last_updated_on: The last_updated_on of this WebsiteSLAWidget.  # noqa: E501
        :type: int
        """

        self._last_updated_on = last_updated_on

    @property
    def name(self):
        """Gets the name of this WebsiteSLAWidget.  # noqa: E501

        The name of the widget  # noqa: E501

        :return: The name of this WebsiteSLAWidget.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WebsiteSLAWidget.

        The name of the widget  # noqa: E501

        :param name: The name of this WebsiteSLAWidget.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def theme(self):
        """Gets the theme of this WebsiteSLAWidget.  # noqa: E501

        The color scheme of the widget. Options are: borderPurple | borderGray | borderBlue | solidPurple | solidGray | solidBlue | simplePurple | simpleBlue | simpleGray | newBorderGray | newBorderBlue | newBorderDarkBlue | newSolidGray | newSolidBlue | newSolidDarkBlue | newSimpleGray | newSimpleBlue |newSimpleDarkBlue  # noqa: E501

        :return: The theme of this WebsiteSLAWidget.  # noqa: E501
        :rtype: str
        """
        return self._theme

    @theme.setter
    def theme(self, theme):
        """Sets the theme of this WebsiteSLAWidget.

        The color scheme of the widget. Options are: borderPurple | borderGray | borderBlue | solidPurple | solidGray | solidBlue | simplePurple | simpleBlue | simpleGray | newBorderGray | newBorderBlue | newBorderDarkBlue | newSolidGray | newSolidBlue | newSolidDarkBlue | newSimpleGray | newSimpleBlue |newSimpleDarkBlue  # noqa: E501

        :param theme: The theme of this WebsiteSLAWidget.  # noqa: E501
        :type: str
        """

        self._theme = theme

    @property
    def timescale(self):
        """Gets the timescale of this WebsiteSLAWidget.  # noqa: E501

        The default timescale of the widget  # noqa: E501

        :return: The timescale of this WebsiteSLAWidget.  # noqa: E501
        :rtype: str
        """
        return self._timescale

    @timescale.setter
    def timescale(self, timescale):
        """Sets the timescale of this WebsiteSLAWidget.

        The default timescale of the widget  # noqa: E501

        :param timescale: The timescale of this WebsiteSLAWidget.  # noqa: E501
        :type: str
        """

        self._timescale = timescale

    @property
    def type(self):
        """Gets the type of this WebsiteSLAWidget.  # noqa: E501

        alert | batchjob | flash | gmap | ngraph | ograph | cgraph | sgraph | netflowgraph | groupNetflowGraph | netflow | groupNetflow | html | bigNumber | gauge | pieChart | table | dynamicTable | deviceSLA | text | statsd | deviceStatus | serviceAlert | noc | websiteOverview | websiteOverallStatus | websiteIndividualStatus | websiteSLA  # noqa: E501

        :return: The type of this WebsiteSLAWidget.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WebsiteSLAWidget.

        alert | batchjob | flash | gmap | ngraph | ograph | cgraph | sgraph | netflowgraph | groupNetflowGraph | netflow | groupNetflow | html | bigNumber | gauge | pieChart | table | dynamicTable | deviceSLA | text | statsd | deviceStatus | serviceAlert | noc | websiteOverview | websiteOverallStatus | websiteIndividualStatus | websiteSLA  # noqa: E501

        :param type: The type of this WebsiteSLAWidget.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def user_permission(self):
        """Gets the user_permission of this WebsiteSLAWidget.  # noqa: E501

        The permission level of the user who last modified the widget  # noqa: E501

        :return: The user_permission of this WebsiteSLAWidget.  # noqa: E501
        :rtype: str
        """
        return self._user_permission

    @user_permission.setter
    def user_permission(self, user_permission):
        """Sets the user_permission of this WebsiteSLAWidget.

        The permission level of the user who last modified the widget  # noqa: E501

        :param user_permission: The user_permission of this WebsiteSLAWidget.  # noqa: E501
        :type: str
        """

        self._user_permission = user_permission

    @property
    def color_thresholds(self):
        """Gets the color_thresholds of this WebsiteSLAWidget.  # noqa: E501

        The threshold of color changes  # noqa: E501

        :return: The color_thresholds of this WebsiteSLAWidget.  # noqa: E501
        :rtype: list[ColorThreshold]
        """
        return self._color_thresholds

    @color_thresholds.setter
    def color_thresholds(self, color_thresholds):
        """Sets the color_thresholds of this WebsiteSLAWidget.

        The threshold of color changes  # noqa: E501

        :param color_thresholds: The color_thresholds of this WebsiteSLAWidget.  # noqa: E501
        :type: list[ColorThreshold]
        """

        self._color_thresholds = color_thresholds

    @property
    def days_in_week(self):
        """Gets the days_in_week of this WebsiteSLAWidget.  # noqa: E501

        The days that SLA should be computed for, separated by commas. 1=Sunday, 2=Monday, 3=Tuesday, 4=Wednesday, 5=Thursday, 6=Friday, 7=Saturday  # noqa: E501

        :return: The days_in_week of this WebsiteSLAWidget.  # noqa: E501
        :rtype: str
        """
        return self._days_in_week

    @days_in_week.setter
    def days_in_week(self, days_in_week):
        """Sets the days_in_week of this WebsiteSLAWidget.

        The days that SLA should be computed for, separated by commas. 1=Sunday, 2=Monday, 3=Tuesday, 4=Wednesday, 5=Thursday, 6=Friday, 7=Saturday  # noqa: E501

        :param days_in_week: The days_in_week of this WebsiteSLAWidget.  # noqa: E501
        :type: str
        """

        self._days_in_week = days_in_week

    @property
    def items(self):
        """Gets the items of this WebsiteSLAWidget.  # noqa: E501

        The websites that should be used to compute the SLA  # noqa: E501

        :return: The items of this WebsiteSLAWidget.  # noqa: E501
        :rtype: list[WebsiteItemConfig]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this WebsiteSLAWidget.

        The websites that should be used to compute the SLA  # noqa: E501

        :param items: The items of this WebsiteSLAWidget.  # noqa: E501
        :type: list[WebsiteItemConfig]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")  # noqa: E501

        self._items = items

    @property
    def period_in_one_day(self):
        """Gets the period_in_one_day of this WebsiteSLAWidget.  # noqa: E501

        The period during the selected days that the SLA should be computed for. * = all day, or a time range can be specified in the format of \"hh:mm TO hh:mm\", e.g. \"01:15 TO 17:15\"  # noqa: E501

        :return: The period_in_one_day of this WebsiteSLAWidget.  # noqa: E501
        :rtype: str
        """
        return self._period_in_one_day

    @period_in_one_day.setter
    def period_in_one_day(self, period_in_one_day):
        """Sets the period_in_one_day of this WebsiteSLAWidget.

        The period during the selected days that the SLA should be computed for. * = all day, or a time range can be specified in the format of \"hh:mm TO hh:mm\", e.g. \"01:15 TO 17:15\"  # noqa: E501

        :param period_in_one_day: The period_in_one_day of this WebsiteSLAWidget.  # noqa: E501
        :type: str
        """

        self._period_in_one_day = period_in_one_day

    @property
    def timezone(self):
        """Gets the timezone of this WebsiteSLAWidget.  # noqa: E501

        The specific timezone for the widget  # noqa: E501

        :return: The timezone of this WebsiteSLAWidget.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this WebsiteSLAWidget.

        The specific timezone for the widget  # noqa: E501

        :param timezone: The timezone of this WebsiteSLAWidget.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebsiteSLAWidget, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebsiteSLAWidget):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
