# Generated by Django 2.2.3 on 2019-08-29 14:32

import _socket
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_audit_fields.fields.hostname_modification_field
import django_audit_fields.fields.userfield
import django_audit_fields.fields.uuid_auto_field
import django_audit_fields.models.audit_model_mixin
import django_revision.revision_field
import edc_sites.models
import edc_utils.date
import simple_history.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("sites", "0002_alter_domain_unique"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="SubjectScreening",
            fields=[
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        blank=True,
                        default=django_audit_fields.models.audit_model_mixin.utcnow,
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        blank=True,
                        default=django_audit_fields.models.audit_model_mixin.utcnow,
                    ),
                ),
                (
                    "user_created",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    django_audit_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    django_audit_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "subject_identifier",
                    models.CharField(max_length=50, verbose_name="Subject Identifier"),
                ),
                (
                    "subject_identifier_as_pk",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "subject_identifier_aka",
                    models.CharField(
                        editable=False,
                        help_text="track a previously allocated identifier.",
                        max_length=50,
                        null=True,
                        verbose_name="Subject Identifier a.k.a",
                    ),
                ),
                (
                    "slug",
                    models.CharField(
                        db_index=True,
                        default="",
                        editable=False,
                        help_text="a field used for quick search",
                        max_length=250,
                        null=True,
                    ),
                ),
                (
                    "reference",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="Reference",
                    ),
                ),
                (
                    "screening_identifier",
                    models.CharField(
                        blank=True,
                        editable=False,
                        max_length=50,
                        unique=True,
                        verbose_name="Screening ID",
                    ),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="Date and time of report.",
                        verbose_name="Report Date and Time",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[("M", "Male"), ("F", "Female")], max_length=10
                    ),
                ),
                ("age_in_years", models.IntegerField()),
                (
                    "consent_ability",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Participant or legal guardian/representative able and willing to give informed consent.",
                    ),
                ),
                ("eligible", models.BooleanField(default=False, editable=False)),
                (
                    "reasons_ineligible",
                    models.TextField(
                        editable=False,
                        max_length=150,
                        null=True,
                        verbose_name="Reason not eligible",
                    ),
                ),
                ("consented", models.BooleanField(default=False, editable=False)),
                ("hospital_identifier", models.CharField(max_length=25, unique=True)),
                (
                    "hiv_pos",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Is the patient HIV positive",
                    ),
                ),
                (
                    "art_six_months",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=10,
                        verbose_name="Has the patient been on anti-retroviral therapy for at least 6 months",
                    ),
                ),
                (
                    "on_rx_stable",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=10,
                        verbose_name="Is the patient considered to be stable on treatment (in regular attendance for care)",
                    ),
                ),
                (
                    "lives_nearby",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=10,
                        verbose_name="Is the patient living within the catchment population of the facility",
                    ),
                ),
                (
                    "staying_nearby",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=10,
                        verbose_name="Is the patient planning to remain in the catchment area for at least 6 months",
                    ),
                ),
                (
                    "pregnancy",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not Applicable: e.g. male, post-menopausal"),
                        ],
                        max_length=15,
                        verbose_name="Is the patient pregnant?",
                    ),
                ),
                (
                    "preg_test_date",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Pregnancy test (Urine or serum Î²hCG) date",
                    ),
                ),
                (
                    "congestive_heart_failure",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=15,
                        verbose_name="Does the patient have congestive heart failure requiring pharmacologic therapy",
                    ),
                ),
                (
                    "liver_disease",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="Evidence of chronic liver disease: Jaundice, pruritus, hepatomegaly, ascites, spider naevi and flapping tremors.",
                        max_length=15,
                        verbose_name="Is there clinical evidence of liver disease",
                    ),
                ),
                (
                    "alcoholism",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="Evidence of alcoholism or acute alcohol intoxication: flushing, amnesia, mental confusion, nausea or vomiting, slurred speech, dehydration, dry skin and brittle hair.",
                        max_length=15,
                        verbose_name="Does the patient have any evidence of alcoholism or acute alcohol intoxication",
                    ),
                ),
                (
                    "acute_metabolic_acidosis",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=15,
                        verbose_name="Does the patient have any signs or symptoms of acute metabolic acidosis (lactic acidosis and/or diabetic ketoacidosis)",
                    ),
                ),
                (
                    "renal_function_condition",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=15,
                        verbose_name="Does the patient have any acute condition which can alter renal function including: dehydration, severe infection or shock",
                    ),
                ),
                (
                    "tissue_hypoxia_condition",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="Including: decompensated heart failure, respiratory failure, recent myocardial infarction or shock",
                        max_length=15,
                        verbose_name="Does the patient have any acute condition which can cause tissue hypoxia",
                    ),
                ),
                (
                    "acute_condition",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=15,
                        verbose_name="Does the patient have any acute condition requiring immediate hospital care/admission",
                    ),
                ),
                (
                    "metformin_sensitivity",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="For example: Magnesium stearate, sodium carboxymethylcellulose, hypromellose",
                        max_length=15,
                        verbose_name="Does the patient have any known hypersensitivity to metformin or any excipients associated with its preparation",
                    ),
                ),
                ("bmi", models.IntegerField(null=True, verbose_name="BMI")),
                (
                    "glucose_fast",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        max_digits=5,
                        null=True,
                        verbose_name="Fasting blood glucose in mmol/L",
                    ),
                ),
                (
                    "glucose_2hr",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        help_text="7.0 to 11.10",
                        max_digits=5,
                        null=True,
                        verbose_name="Blood glucose level at 2 hours in mmol/L",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="sites.Site",
                    ),
                ),
            ],
            options={"abstract": False},
            managers=[("on_site", edc_sites.models.CurrentSiteManager())],
        ),
        migrations.CreateModel(
            name="HistoricalSubjectScreening",
            fields=[
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        blank=True,
                        default=django_audit_fields.models.audit_model_mixin.utcnow,
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        blank=True,
                        default=django_audit_fields.models.audit_model_mixin.utcnow,
                    ),
                ),
                (
                    "user_created",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    django_audit_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    django_audit_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                (
                    "subject_identifier",
                    models.CharField(max_length=50, verbose_name="Subject Identifier"),
                ),
                (
                    "subject_identifier_as_pk",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "subject_identifier_aka",
                    models.CharField(
                        editable=False,
                        help_text="track a previously allocated identifier.",
                        max_length=50,
                        null=True,
                        verbose_name="Subject Identifier a.k.a",
                    ),
                ),
                (
                    "slug",
                    models.CharField(
                        db_index=True,
                        default="",
                        editable=False,
                        help_text="a field used for quick search",
                        max_length=250,
                        null=True,
                    ),
                ),
                (
                    "reference",
                    models.UUIDField(
                        db_index=True,
                        default=uuid.uuid4,
                        editable=False,
                        verbose_name="Reference",
                    ),
                ),
                (
                    "screening_identifier",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        max_length=50,
                        verbose_name="Screening ID",
                    ),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="Date and time of report.",
                        verbose_name="Report Date and Time",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[("M", "Male"), ("F", "Female")], max_length=10
                    ),
                ),
                ("age_in_years", models.IntegerField()),
                (
                    "consent_ability",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Participant or legal guardian/representative able and willing to give informed consent.",
                    ),
                ),
                ("eligible", models.BooleanField(default=False, editable=False)),
                (
                    "reasons_ineligible",
                    models.TextField(
                        editable=False,
                        max_length=150,
                        null=True,
                        verbose_name="Reason not eligible",
                    ),
                ),
                ("consented", models.BooleanField(default=False, editable=False)),
                (
                    "history_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("hospital_identifier", models.CharField(db_index=True, max_length=25)),
                (
                    "hiv_pos",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=5,
                        verbose_name="Is the patient HIV positive",
                    ),
                ),
                (
                    "art_six_months",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=10,
                        verbose_name="Has the patient been on anti-retroviral therapy for at least 6 months",
                    ),
                ),
                (
                    "on_rx_stable",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=10,
                        verbose_name="Is the patient considered to be stable on treatment (in regular attendance for care)",
                    ),
                ),
                (
                    "lives_nearby",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=10,
                        verbose_name="Is the patient living within the catchment population of the facility",
                    ),
                ),
                (
                    "staying_nearby",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=10,
                        verbose_name="Is the patient planning to remain in the catchment area for at least 6 months",
                    ),
                ),
                (
                    "pregnancy",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not Applicable: e.g. male, post-menopausal"),
                        ],
                        max_length=15,
                        verbose_name="Is the patient pregnant?",
                    ),
                ),
                (
                    "preg_test_date",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Pregnancy test (Urine or serum Î²hCG) date",
                    ),
                ),
                (
                    "congestive_heart_failure",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=15,
                        verbose_name="Does the patient have congestive heart failure requiring pharmacologic therapy",
                    ),
                ),
                (
                    "liver_disease",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="Evidence of chronic liver disease: Jaundice, pruritus, hepatomegaly, ascites, spider naevi and flapping tremors.",
                        max_length=15,
                        verbose_name="Is there clinical evidence of liver disease",
                    ),
                ),
                (
                    "alcoholism",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="Evidence of alcoholism or acute alcohol intoxication: flushing, amnesia, mental confusion, nausea or vomiting, slurred speech, dehydration, dry skin and brittle hair.",
                        max_length=15,
                        verbose_name="Does the patient have any evidence of alcoholism or acute alcohol intoxication",
                    ),
                ),
                (
                    "acute_metabolic_acidosis",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=15,
                        verbose_name="Does the patient have any signs or symptoms of acute metabolic acidosis (lactic acidosis and/or diabetic ketoacidosis)",
                    ),
                ),
                (
                    "renal_function_condition",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=15,
                        verbose_name="Does the patient have any acute condition which can alter renal function including: dehydration, severe infection or shock",
                    ),
                ),
                (
                    "tissue_hypoxia_condition",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="Including: decompensated heart failure, respiratory failure, recent myocardial infarction or shock",
                        max_length=15,
                        verbose_name="Does the patient have any acute condition which can cause tissue hypoxia",
                    ),
                ),
                (
                    "acute_condition",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=15,
                        verbose_name="Does the patient have any acute condition requiring immediate hospital care/admission",
                    ),
                ),
                (
                    "metformin_sensitivity",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="For example: Magnesium stearate, sodium carboxymethylcellulose, hypromellose",
                        max_length=15,
                        verbose_name="Does the patient have any known hypersensitivity to metformin or any excipients associated with its preparation",
                    ),
                ),
                ("bmi", models.IntegerField(null=True, verbose_name="BMI")),
                (
                    "glucose_fast",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        max_digits=5,
                        null=True,
                        verbose_name="Fasting blood glucose in mmol/L",
                    ),
                ),
                (
                    "glucose_2hr",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        help_text="7.0 to 11.10",
                        max_digits=5,
                        null=True,
                        verbose_name="Blood glucose level at 2 hours in mmol/L",
                    ),
                ),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="sites.Site",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical subject screening",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
