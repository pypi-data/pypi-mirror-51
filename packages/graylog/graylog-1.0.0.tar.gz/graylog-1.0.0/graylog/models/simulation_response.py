# coding: utf-8

"""

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.1.1+01d50e5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SimulationResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, messages=None, simulation_trace=None, took_microseconds=None):
        """
        SimulationResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'messages': 'list[object]',
            'simulation_trace': 'list[object]',
            'took_microseconds': 'int'
        }

        self.attribute_map = {
            'messages': 'messages',
            'simulation_trace': 'simulation_trace',
            'took_microseconds': 'took_microseconds'
        }

        self._messages = messages
        self._simulation_trace = simulation_trace
        self._took_microseconds = took_microseconds

    @property
    def messages(self):
        """
        Gets the messages of this SimulationResponse.


        :return: The messages of this SimulationResponse.
        :rtype: list[object]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """
        Sets the messages of this SimulationResponse.


        :param messages: The messages of this SimulationResponse.
        :type: list[object]
        """

        self._messages = messages

    @property
    def simulation_trace(self):
        """
        Gets the simulation_trace of this SimulationResponse.


        :return: The simulation_trace of this SimulationResponse.
        :rtype: list[object]
        """
        return self._simulation_trace

    @simulation_trace.setter
    def simulation_trace(self, simulation_trace):
        """
        Sets the simulation_trace of this SimulationResponse.


        :param simulation_trace: The simulation_trace of this SimulationResponse.
        :type: list[object]
        """

        self._simulation_trace = simulation_trace

    @property
    def took_microseconds(self):
        """
        Gets the took_microseconds of this SimulationResponse.


        :return: The took_microseconds of this SimulationResponse.
        :rtype: int
        """
        return self._took_microseconds

    @took_microseconds.setter
    def took_microseconds(self, took_microseconds):
        """
        Sets the took_microseconds of this SimulationResponse.


        :param took_microseconds: The took_microseconds of this SimulationResponse.
        :type: int
        """

        self._took_microseconds = took_microseconds

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
