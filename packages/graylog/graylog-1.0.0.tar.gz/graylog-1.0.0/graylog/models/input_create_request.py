# coding: utf-8

"""

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.1.1+01d50e5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class InputCreateRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, title=None, type=None, _global=None, configuration=None, node=None):
        """
        InputCreateRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'title': 'str',
            'type': 'str',
            '_global': 'bool',
            'configuration': 'object',
            'node': 'str'
        }

        self.attribute_map = {
            'title': 'title',
            'type': 'type',
            '_global': 'global',
            'configuration': 'configuration',
            'node': 'node'
        }

        self._title = title
        self._type = type
        self.__global = _global
        self._configuration = configuration
        self._node = node

    @property
    def title(self):
        """
        Gets the title of this InputCreateRequest.


        :return: The title of this InputCreateRequest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this InputCreateRequest.


        :param title: The title of this InputCreateRequest.
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """
        Gets the type of this InputCreateRequest.


        :return: The type of this InputCreateRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this InputCreateRequest.


        :param type: The type of this InputCreateRequest.
        :type: str
        """

        self._type = type

    @property
    def _global(self):
        """
        Gets the _global of this InputCreateRequest.


        :return: The _global of this InputCreateRequest.
        :rtype: bool
        """
        return self.__global

    @_global.setter
    def _global(self, _global):
        """
        Sets the _global of this InputCreateRequest.


        :param _global: The _global of this InputCreateRequest.
        :type: bool
        """

        self.__global = _global

    @property
    def configuration(self):
        """
        Gets the configuration of this InputCreateRequest.


        :return: The configuration of this InputCreateRequest.
        :rtype: object
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """
        Sets the configuration of this InputCreateRequest.


        :param configuration: The configuration of this InputCreateRequest.
        :type: object
        """

        self._configuration = configuration

    @property
    def node(self):
        """
        Gets the node of this InputCreateRequest.


        :return: The node of this InputCreateRequest.
        :rtype: str
        """
        return self._node

    @node.setter
    def node(self, node):
        """
        Sets the node of this InputCreateRequest.


        :param node: The node of this InputCreateRequest.
        :type: str
        """

        self._node = node

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
