# coding: utf-8

"""

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.1.1+01d50e5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SystemStats(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, os=None, jvm=None, process=None, network=None, fs=None):
        """
        SystemStats - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'os': 'object',
            'jvm': 'object',
            'process': 'object',
            'network': 'object',
            'fs': 'object'
        }

        self.attribute_map = {
            'os': 'os',
            'jvm': 'jvm',
            'process': 'process',
            'network': 'network',
            'fs': 'fs'
        }

        self._os = os
        self._jvm = jvm
        self._process = process
        self._network = network
        self._fs = fs

    @property
    def os(self):
        """
        Gets the os of this SystemStats.


        :return: The os of this SystemStats.
        :rtype: object
        """
        return self._os

    @os.setter
    def os(self, os):
        """
        Sets the os of this SystemStats.


        :param os: The os of this SystemStats.
        :type: object
        """

        self._os = os

    @property
    def jvm(self):
        """
        Gets the jvm of this SystemStats.


        :return: The jvm of this SystemStats.
        :rtype: object
        """
        return self._jvm

    @jvm.setter
    def jvm(self, jvm):
        """
        Sets the jvm of this SystemStats.


        :param jvm: The jvm of this SystemStats.
        :type: object
        """

        self._jvm = jvm

    @property
    def process(self):
        """
        Gets the process of this SystemStats.


        :return: The process of this SystemStats.
        :rtype: object
        """
        return self._process

    @process.setter
    def process(self, process):
        """
        Sets the process of this SystemStats.


        :param process: The process of this SystemStats.
        :type: object
        """

        self._process = process

    @property
    def network(self):
        """
        Gets the network of this SystemStats.


        :return: The network of this SystemStats.
        :rtype: object
        """
        return self._network

    @network.setter
    def network(self, network):
        """
        Sets the network of this SystemStats.


        :param network: The network of this SystemStats.
        :type: object
        """

        self._network = network

    @property
    def fs(self):
        """
        Gets the fs of this SystemStats.


        :return: The fs of this SystemStats.
        :rtype: object
        """
        return self._fs

    @fs.setter
    def fs(self, fs):
        """
        Sets the fs of this SystemStats.


        :param fs: The fs of this SystemStats.
        :type: object
        """

        self._fs = fs

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
