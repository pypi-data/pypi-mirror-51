# coding: utf-8

"""

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.1.1+01d50e5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class SystemgrokApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def bulk_update_patterns(self, patterns, **kwargs):
        """
        Add a list of new patterns
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.bulk_update_patterns(patterns, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param GrokPatternList patterns:  (required)
        :param Object replace: Replace all patterns with the new ones.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.bulk_update_patterns_with_http_info(patterns, **kwargs)
        else:
            (data) = self.bulk_update_patterns_with_http_info(patterns, **kwargs)
            return data

    def bulk_update_patterns_with_http_info(self, patterns, **kwargs):
        """
        Add a list of new patterns
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.bulk_update_patterns_with_http_info(patterns, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param GrokPatternList patterns:  (required)
        :param Object replace: Replace all patterns with the new ones.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['patterns', 'replace']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_update_patterns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'patterns' is set
        if ('patterns' not in params) or (params['patterns'] is None):
            raise ValueError("Missing the required parameter `patterns` when calling `bulk_update_patterns`")

        resource_path = '/system/grok'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'replace' in params:
            query_params['replace'] = params['replace']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'patterns' in params:
            body_params = params['patterns']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def create_pattern(self, pattern, **kwargs):
        """
        Add a new named pattern
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_pattern(pattern, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param GrokPatternSummary pattern:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_pattern_with_http_info(pattern, **kwargs)
        else:
            (data) = self.create_pattern_with_http_info(pattern, **kwargs)
            return data

    def create_pattern_with_http_info(self, pattern, **kwargs):
        """
        Add a new named pattern
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_pattern_with_http_info(pattern, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param GrokPatternSummary pattern:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pattern']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_pattern" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pattern' is set
        if ('pattern' not in params) or (params['pattern'] is None):
            raise ValueError("Missing the required parameter `pattern` when calling `create_pattern`")

        resource_path = '/system/grok'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pattern' in params:
            body_params = params['pattern']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def list_grok_patterns(self, **kwargs):
        """
        Get all existing grok patterns
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_grok_patterns(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: GrokPatternList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_grok_patterns_with_http_info(**kwargs)
        else:
            (data) = self.list_grok_patterns_with_http_info(**kwargs)
            return data

    def list_grok_patterns_with_http_info(self, **kwargs):
        """
        Get all existing grok patterns
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_grok_patterns_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: GrokPatternList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_grok_patterns" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/system/grok'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='GrokPatternList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def list_pattern(self, pattern_id, **kwargs):
        """
        Get the existing grok pattern
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_pattern(pattern_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Object pattern_id:  (required)
        :return: GrokPattern
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_pattern_with_http_info(pattern_id, **kwargs)
        else:
            (data) = self.list_pattern_with_http_info(pattern_id, **kwargs)
            return data

    def list_pattern_with_http_info(self, pattern_id, **kwargs):
        """
        Get the existing grok pattern
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_pattern_with_http_info(pattern_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Object pattern_id:  (required)
        :return: GrokPattern
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pattern_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_pattern" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pattern_id' is set
        if ('pattern_id' not in params) or (params['pattern_id'] is None):
            raise ValueError("Missing the required parameter `pattern_id` when calling `list_pattern`")

        resource_path = '/system/grok/{patternId}'.replace('{format}', 'json')
        path_params = {}
        if 'pattern_id' in params:
            path_params['patternId'] = params['pattern_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='GrokPattern',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def remove_pattern(self, **kwargs):
        """
        Remove an existing pattern by id
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_pattern(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.remove_pattern_with_http_info(**kwargs)
        else:
            (data) = self.remove_pattern_with_http_info(**kwargs)
            return data

    def remove_pattern_with_http_info(self, **kwargs):
        """
        Remove an existing pattern by id
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_pattern_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_pattern" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/system/grok/{patternId}'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_pattern(self, pattern_id, pattern, **kwargs):
        """
        Update an existing pattern
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_pattern(pattern_id, pattern, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Object pattern_id:  (required)
        :param GrokPatternSummary pattern:  (required)
        :return: GrokPattern
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_pattern_with_http_info(pattern_id, pattern, **kwargs)
        else:
            (data) = self.update_pattern_with_http_info(pattern_id, pattern, **kwargs)
            return data

    def update_pattern_with_http_info(self, pattern_id, pattern, **kwargs):
        """
        Update an existing pattern
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_pattern_with_http_info(pattern_id, pattern, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Object pattern_id:  (required)
        :param GrokPatternSummary pattern:  (required)
        :return: GrokPattern
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pattern_id', 'pattern']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_pattern" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pattern_id' is set
        if ('pattern_id' not in params) or (params['pattern_id'] is None):
            raise ValueError("Missing the required parameter `pattern_id` when calling `update_pattern`")
        # verify the required parameter 'pattern' is set
        if ('pattern' not in params) or (params['pattern'] is None):
            raise ValueError("Missing the required parameter `pattern` when calling `update_pattern`")

        resource_path = '/system/grok/{patternId}'.replace('{format}', 'json')
        path_params = {}
        if 'pattern_id' in params:
            path_params['patternId'] = params['pattern_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pattern' in params:
            body_params = params['pattern']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='GrokPattern',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
