// GraphQL Schema Definition Language (SDL) Grammar rules.
// Closely mirrored on the official grammar specs located at
// https://github.com/facebook/graphql/blob/master/spec/Appendix%20B%20--%20Grammar%20Summary.md
//
// All the "executable" part (query grammar) has been omitted.
// This is only for a server-side type system schema definition SDL.
// The current grammar is optimized for fast parsing without ambiguity. The
// main issue is with the custom directives and named_type that can have
// any string as valid. Therefore, the below schema is theoretically correct:
//
//     schema @schema(implements: enum) {
//         query: directive
//     }
//     type directive @union {
//         Int: [extend]
//     }
//
// Such syntax forces us to declare tokens such as `DIRECTIVE: "directive"`
// and declare it as accepted for a `named_type`.

//
// Entrypoint
//
document: _UNICODEBOM? definition+

?definition: type_system_definition

type_system_definition: schema_definition
                      | type_definition
                      | type_extension
                      | directive_definition

//
// SCHEMA DEFINITION
//
schema_definition: SCHEMA directives? "{" operation_type_definition+ "}"

operation_type_definition: QUERY ":" named_type                -> query_operation_type_definition
                         | MUTATION ":" named_type             -> mutation_operation_type_definition
                         | SUBSCRIPTION ":" named_type         -> subscription_operation_type_definition

//
// CUSTOM TYPE DEFINITIONS
//
type_definition: scalar_type_definition
               | object_type_definition
               | interface_type_definition
               | union_type_definition
               | enum_type_definition
               | input_object_type_definition

type_extension: scalar_type_extension
              | object_type_extension
              | interface_type_extension
              | union_type_extension
              | enum_type_extension
              | input_object_type_extension

scalar_type_definition: description? SCALAR name directives?

scalar_type_extension: EXTEND SCALAR name directives?

object_type_definition: description? TYPE name implements_interfaces? directives? fields_definition?

object_type_extension: (EXTEND TYPE name implements_interfaces? directives? fields_definition)
                     | (EXTEND TYPE name implements_interfaces? directives)
                     | (EXTEND TYPE name implements_interfaces)

implements_interfaces: IMPLEMENTS named_type ("&" named_type)*

interface_type_definition: description? INTERFACE name directives? fields_definition?

interface_type_extension: (EXTEND INTERFACE name directives? fields_definition)
                        | (EXTEND INTERFACE name directives)

union_type_definition: description? UNION name directives? union_member_types?

union_member_types: "=" "|"? named_type ("|" named_type)*

union_type_extension: (EXTEND UNION name directives? union_member_types)
                    | (EXTEND UNION name directives)

enum_type_definition: description? ENUM name directives? enum_values_definition?

enum_type_extension: (EXTEND ENUM name directives? enum_values_definition)
                   | (EXTEND ENUM name directives)

input_object_type_definition: description? INPUT name directives? input_fields_definition?

input_object_type_extension: (EXTEND INPUT name directives? input_fields_definition)
                           | (EXTEND INPUT name directives)

//
// FIELD & ARGUMENTS DEFINITIONS
//
object_field: name ":" value

fields_definition: "{" field_definition+ "}"

field_definition: description? name arguments_definition? ":" type directives?

input_value_definition: description? name ":" type default_value? directives?

enum_values_definition: "{" enum_value_definition+ "}"

enum_value_definition: description? enum_value directives?

input_fields_definition: "{" input_value_definition+ "}"

arguments_definition: "(" input_value_definition+ ")"

arguments: "(" argument+ ")"

argument: name ":" value

//
// DIRECTIVES
//
directives: directive+

directive: "@" name arguments?

directive_definition: description? DIRECTIVE "@" name arguments_definition? ON directive_locations

directive_locations: "|"? TYPE_SYSTEM_DIRECTIVE_LOCATION ("|" TYPE_SYSTEM_DIRECTIVE_LOCATION)*

//
// VALUES
//
value: int_value
     | float_value
     | string_value
     | true_value
     | false_value
     | null_value
     | enum_value
     | list_value
     | object_value

int_value: SIGNED_INT
float_value: SIGNED_FLOAT
string_value: STRING
true_value: TRUE
false_value: FALSE
null_value: NULL
enum_value: name
list_value: "[" value* "]"
object_value: "{" object_field* "}"

default_value: "=" value

//
// MISC TYPE
//
type: named_type
    | list_type
    | non_null_type

named_type: name

list_type: "[" type "]"

non_null_type: named_type "!"
             | list_type "!"

description: STRING | LONG_STRING

//
// GRAPHQL KEYWORD TOKENS
//
// We have to do this because keyword tokens can be used for other things,
// they are not reserved: they can be used for directive names ! See header
// explanation. Also, the non-ambiguous situation makes the LALR(1) parser
// very fast. A previous draft was more concise but neede to use the
// Earley parser of Python Lark library and was getting too slow (~30-40s) on
// medium schemas (~5k loc).

SCHEMA: "schema"
QUERY: "query"
MUTATION: "mutation"
SUBSCRIPTION: "subscription"

SCALAR: "scalar"
TYPE: "type"
INTERFACE: "interface"
IMPLEMENTS: "implements"
UNION: "union"
ENUM: "enum"
INPUT: "input"

EXTEND: "extend"
DIRECTIVE: "directive"
ON: "on"

TRUE: "true"
FALSE: "false"
NULL: "null"

_keyword_tokens: SCHEMA
               | QUERY
               | MUTATION
               | SUBSCRIPTION
               | SCALAR
               | TYPE
               | INTERFACE
               | IMPLEMENTS
               | UNION
               | ENUM
               | INPUT
               | EXTEND
               | DIRECTIVE
               | ON
               | TYPE_SYSTEM_DIRECTIVE_LOCATION

TYPE_SYSTEM_DIRECTIVE_LOCATION: "SCHEMA"
                              | "SCALAR"
                              | "OBJECT"
                              | "FIELD_DEFINITION"
                              | "ARGUMENT_DEFINITION"
                              | "INTERFACE"
                              | "UNION"
                              | "ENUM_VALUE"
                              | "ENUM"
                              | "INPUT_OBJECT"
                              | "INPUT_FIELD_DEFINITION"
                              | "FIELD"
                              | "FRAGMENT_SPREAD"
                              | "INLINE_FRAGMENT"

//
// TEXT TOKENS
//
name: _keyword_tokens
    | IDENT

// Generic identifier
IDENT: /[_A-Za-z][_0-9A-Za-z]*/

STRING : /("(?!"").*?(?<!\\)(\\\\)*?")/i
LONG_STRING: /(""".*?(?<!\\)(\\\\)*?""")/is

//
// NUMERAL TOKENS
//
DIGIT: "0".."9"
INT: DIGIT+
SIGNED_INT: ["+"|"-"] INT
DECIMAL: INT "." INT? | "." INT

// float = /-?\d+(\.\d+)?([eE][+-]?\d+)?/
_EXP: ("e"|"E") SIGNED_INT
FLOAT: INT _EXP | DECIMAL _EXP?
SIGNED_FLOAT.2: ["+"|"-"] FLOAT

//
// IGNORED TOKENS
//
// Ignored at start of file (see "document" rule), "Byte Order Mark (U+FEFF)"
_UNICODEBOM.2: /\ufeff/
WHITESPACE: /[ \t\f\r\n]/+

COMMENT: /#[^\n\r]*/
COMMA: ","

%ignore COMMENT
%ignore COMMA
%ignore WHITESPACE
