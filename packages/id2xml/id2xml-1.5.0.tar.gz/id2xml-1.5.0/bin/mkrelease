#!/bin/bash

version=0.10
program=${0##*/}
progdir=${0%/*}
if [ "$progdir" = "$program" ]; then progdir="."; fi
PATH="$PATH:$progdir"

# ----------------------------------------------------------------------
function usage() {
    cat <<EOF
NAME
	$program - Make a release

SYNOPSIS
	$program [OPTIONS] VERSION

DESCRIPTION

	Do the sequence of actions necessary to properly produce a release
	branch. This includes updating the project version and committing that
	to the repository, creating a release tag and a release branch if
	needed, and updating the project version again to indicate that any
	further commits are development work. Requires 1 argument: the VERSION
	number (e.g., 1.23).

	The script uses svn info to retrieve information about the repository
	and path of the current directory, and inspects that to determine
	exactly what to do. If the current path relative to the repository root
	starts with 'trunk', then a new branch is created named
	branch/\$VERSION. If the current path starts with something else 
	than 'trunk', it is assumed to be a working branch, and no new branch is
	created. In either case, a copy of the current working copy is created
	in tags/\$VERSION.

EOF
    echo -e "OPTIONS"
    if   [ "$(uname)" = "Linux" ]; then
        egrep "^[	]+[-][A-Za-z| -]+\*?\)[	]+[A-Za-z].+#" $0 | tr -s "\t|" "\t," | sed -r -e 's/\)[ \t]+([A-Z]+)=\$2[^#]*#/=\\1\t/' -e 's/\)[^#]*#/\t/'
    else
        egrep "^[	]+[-][A-Za-z| -]+\*?\)[	]+[A-Za-z].+#" $0 | sed 's/\|.*\$2[^#]*#/	/'| sed -E 's/\|.*\)[^#]*#/	/'
    fi
    cat <<EOF

AUTHOR
	Written by Henrik Levkowetz, <henrik@levkowetz.com>

COPYRIGHT
	Copyright 2007 The IETF Trust.

EOF

}

# ----------------------------------------------------------------------
function die() {
    echo -e "\n$program: error: $*" > /dev/stderr
    exit 1
}

function say() { 
	if [ -n "$VERBOSE" ]; then echo -e "$*"; fi
}

function note() { 
	if [ -n "$VERBOSE" ]; then echo -e "\n$*"; fi
}

# ----------------------------------------------------------------------
function version() {
	echo -e "$program $version"
}

# ----------------------------------------------------------------------
trap 'echo "$program($LINENO): Command failed with error code $? ([$$] $0 $*)"; exit 1' ERR


# ----------------------------------------------------------------------
# Option parsing

# Options
shortopts=hmnpvV
longopts=help,message,dry-run,permit-migr-mix,verbose,version

# Default values
MSG=""
PROJ=id2xml
TAGS=tags/$PROJ
VERFILE=id2xml/__init__.py
VERBOSE=1
do=""

if   [ "$(uname)" = "Linux" ]; then
    args=$(getopt -o "$shortopts" --long "$longopts" -n '$program' -- $SV "$@")
    if [ $? != 0 ] ; then die "Terminating..." >&2 ; exit 1 ; fi
    eval set -- "$args"
    sed="sed -r"
else
    # Darwin, BSDs
    args=$(getopt -o$shortopts $SV $*)
    if [ $? != 0 ] ; then die "Terminating..." >&2 ; exit 1 ; fi
    set -- $args
    sed="sed -E"
fi

while true ; do
    case "$1" in
	-h| --help)		usage; exit;;	#	 Show this help, then exit
	-m| --message)		MSG=$2; shift;;		# Specify a commit message
	-n| --dry-run)		do="echo ==>";;	#	 Show what would be done	
	-p| --permit-migr-mix)	PERMIT_MIGR_MIX=1;; # Permit mixed schema and data migrations
	-q| --quiet)		VERBOSE="";;	#	 Be more talkative
	-v| --verbose)		VERBOSE=1;;	#	 Be more talkative
	-V| --version)		version; exit;;	#	 Show program version, then exit
	--)			shift; break;;
	*) die "Internal error, inconsistent option specification: '$1'";;
    esac
    shift
done

# ----------------------------------------------------------------------
# The program itself

ARGMIN=1

if [ $# -lt $ARGMIN ]; then
    usage
    die "$# arguments found, $ARGMIN required"
fi

VER=$1

REPO=$(svn info | grep "^Repository Root:" | awk '{ print $3 }')
RDATE=$(svn info | grep "^Last Changed Date:" | awk '{ print $4 "T" $5 $6 }')
RURL=$(svn info | grep "^URL:" | awk '{ print $2 }')
RDIR=${RURL#$REPO}

DIR=${RDIR#/}
if   [ -z "$DIR" ]; then
    die "Couldn't find anything to release here"
elif [ "${DIR%%/*}" = "trunk" ]; then
    SRC="trunk"
elif [ "${DIR%%/*}" = "branch" ]; then
    tmp=${DIR#*/}		# peel one directory from front ('branch/')
    group=${tmp%%/*}		# first dir under branch
    tmp=${tmp#*/}		# peel second directory from front
    tool=${tmp%%/*}		# second subdir
    SRC="branch/$group/$tool"	# keep second subdir under branch/
fi

note "Releasing from $SRC"

note "Locating the root of the working copy ..."
while [ "${#DIR}" -gt "${#SRC}" ]; do
    [ "$DIR" = "$prev" ] && die "Internal error"
    cd ..
    note "  now at $PWD"
    prev=$DIR
    DIR=${DIR%/*}
done
if [ "$DIR" != "$SRC" ]; then
    die "Couldn't find the root of your '$SRC' working copy"
fi
say "  $DIR"

REPO=${REPO%/}				# remove trailing slash
SRC=${SRC#/}				# remove leading slash

MAJOR=${VER%%.*}
REST=${VER#*.}
MINOR=${REST%%.*}
MAINT=${REST#*.}
VER="$(printf %d.%d.%d $MAJOR $MINOR $MAINT)"
NEXT=$(( $MAINT + 1 ))
DEV="$(printf %d.%d.%d.dev0 $MAJOR $MINOR $NEXT)"

#cd $DIR ??
note "Checking that changelog information is available ..."
changes=$( sed -n "/^$PROJ ($VER)/,/^ -- /p" changelog )
[ "$changes" ] || die "No changelog information for $VER found"
note "$changes"

note "Upgrading the python library modules before checking migrations and running tests ..."
$do pip install --upgrade -r requirements.txt

note "Running the tests suite ..."
$do make test

contributors=$(echo "$changes" | sed 's/\.[ \t\n]/ /'| tr -c "a-z0-9.@-" "\n" | sort | uniq | grep '@' | sed -r -e 's/^\.+//' -e 's/\.+$//' -e 's/^/-c /' || true)

note "Verifying that version $VER doesn't already exist ..."
$do svn info $REPO/$TAGS/$VER 2>&1 | $do egrep -q "(Not a valid URL|URL .* non-existent)" || die "The tag '$VER' already exists (or there was an error testing for it)."
say "  Ok"

note "Setting the current time on the release notes in the changelog file ..."
$do sed -r -i -e "1,/^ -- /s/([A-Za-z-]+ <[a-z0-9.-]+@[a-z0-9.-]+>  ).*$/\1$(TZ=UTC date +'%d %b %Y %H:%M:%S %z')/" changelog
say " $(grep -m1 "^ -- " changelog)"

note "Committing the changelog ..."
$do svn commit changelog -m "Changelog entry for $VER"

note "Verifying there's no uncommitted changes ..."
$do svn st | grep "^[AMGRD] " && die "There seems to be uncommitted changes in this working copy"

note "Updating the version info in $VERFILE and making sure'\$Rev\$' is Ok ..."
$do sed -i -r -e "/^__version__/s/\"[.0-9]+((dev|rc)[0-9]+)?\"/\"$VER\"/" \
	  -e "/^__rev__/s/\".*\"/\"\$Rev:\$\"/" \
	$VERFILE

note "Committing version information for version $VER: $MSG ..."
$do svn commit $VERFILE -m "Set version info to release version $VER before branching. $MSG"

note "Creating distribution files"
$do make install
$do make dist

note "Uploading distribution files"
$do make upload

note "Creating new tag '$TAGS/$VER' from $SRC ..."
$do svn cp $REPO/$SRC $REPO/$TAGS/$VER -m "Creating new tag '$TAGS/$VER' from $SRC"


note "Updating version and revision info to indicate that the source and branch aren't releases ..."
$do sed -i -r -e "/^__version__/s/\"[0-9.]*\"/\"$DEV\"/" \
	      -e "/^__rev__/s/\"\\\$Rev: (.*) \\\$\"/\"\$Rev:\$ (dev) Latest release: Rev. \1 \"/" \
	$VERFILE

note "Committing the updated version ..."
$do svn commit $VERFILE -m "Set version info back to development mode"

note "Creating new tag '$TAGS/dev/$DEV' from $SRC ..."
$do svn cp $REPO/$SRC $REPO/$TAGS/dev/$DEV -m "Creating new tag '$TAGS/dev/$DEV' from $SRC"

$do svn update -q

[ -d ~/src/db/mail ] || mkdir ~/src/db/mail
echo "
Hi,

This is an automatic notification about a new $PROJ release, 
v$VER, generated when running the mkrelease script.

Release notes:

$changes

The new version is available for installation with the python installation
program, pip:
  'pip install $PROJ'

Regards,

	Henrik
	(via the mkrelease script)
" > $progdir/../mail/release-mail-v$VER.txt

cat $progdir/../mail/release-mail-v$VER.txt | $do mail -s "New $PROJ release: v$VER" housley@vigilsec.com rjs@nostrum.com henrik@levkowetz.com -c arusso@amsl.com -c rse@rfc-editor.org -c sginoza@amsl.com -c mferguson@amsl.com -c glen@amsl.com -c priyanka@amsl.com $contributors

#$do toolsfeed control changelog /www/tools.ietf.org/tools/atomfeed.xml
#$do toolpush /www/tools.ietf.org/tools/atomfeed.xml

