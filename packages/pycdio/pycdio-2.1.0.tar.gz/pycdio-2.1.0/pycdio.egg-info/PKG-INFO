Metadata-Version: 1.1
Name: pycdio
Version: 2.1.0
Summary: Python OO interface to libcdio (CD Input and Control library)
Home-page: http://www.gnu.org/software/libcdio
Author: Rocky Bernstein
Author-email: rocky@gnu.org
License: GPL
Description: Introduction
        ==============
        
        pycdio is a Python interface to the *libcdio*, the CD Input and
        Control library http://www.gnu.org/software/libcdio
        
        
        You can get the source at the same place as libcdio:
        ftp://ftp.gnu.org:/pub/gnu/libcdio/
        
        The *pycdio* and *libcdio* libraries encapsulate CD-ROM reading and
        control. Python programs wishing to be oblivious of the OS- and
        device-dependent properties of a CD-ROM can use this library.
        
        
        Sample Usage
        ============
        
        Getting CD-ROM Drive Information
        --------------------------------
        
        .. code-block:: python
        
            import sys
            import cdio, pycdio
        
            try:
                d = cdio.Device(driver_id=pycdio.DRIVER_UNKNOWN)
                drive_name = d.get_device()
            except IOError:
                print("Problem finding a CD-ROM")
                sys.exit(1)
        
            ok, vendor, model, release = d.get_hwinfo()
            print("drive: %s, vendor: %s, model: %s, release: %s" \
              % (drive_name, vendor, model, release))
        
            # Show CD-Text for an audio CD
            cdt = d.get_cdtext()
            i_tracks = d.get_num_tracks()
            i_first_track = pycdio.get_first_track_num(d.cd)
        
            for t in range(i_first_track, i_tracks + i_first_track):
                for i in range(pycdio.MIN_CDTEXT_FIELD, pycdio.MAX_CDTEXT_FIELDS):
                    value = cdt.get(i, t)
                    # value can be empty but exist, compared to NULL values
                    if value is not None:
                        print("\t%s: %s" % (pycdio.cdtext_field2str(i), value))
                        pass
                    pass
                pass
            return
            d.close()
        
        Other sample code can be found in the *example* directory of the distribution.
        
        Requirements
        =============
        
        * A C compiler so the extension can be compiled when it is installed.
        * libcdio (http://www.gnu.org/software/libcdio) and it's header files installed.
        * SWIG http://www.swig.org
        * pkg-config http://pkg-config.freedesktop.org
        
        To build on Debian (e.g. Ubuntu):
        -------------------------------------
        
        ::
        
            $ apt-get install python-dev
            $ apt-get install libcdio-dev
            $ apt-get install libiso9660-dev
            $ apt-get install swig pkg-config
            $ pip install -e .
            $ make check
        
        SWIG Problems
        ===============
        
        I've tried to make this work back to Python 2.3 or so.
        
        I've noticed however problems in various distutils.
        
        If you see a message like this when running `make check`:
        
        ::
        
             File "/home/rocky/.pyenv/versions/3.5.6/lib/python3.5/distutils/unixccompiler.py", line 207, in library_dir_option
              return "-L" + dir
             TypeError: Can't convert 'bytes' object to str implicitly
        
        
        Copy in a recent ditutils `unixccompiler.py` like this:
        
        ::
        
           $ cp admin-tools/unixccompiler.py /home/rocky/.pyenv/versions/3.5.6/lib/python3.5/distutils/unixccompiler.py
        
        The distutils distribution says that it tries to be compatible with all Python versions from 2.3. The
        `unixccompiler.py` in `admin_tools` is from the Python 3.7.4 distribution.
        
        Completeness
        =============
        
        *libcdio* is rather large and yet may still grow a bit.
        
        What is in *pycdio* is incomplete; over time it may grow to completion
        depending on various factors: e.g. interest, whether others help
        out.
        
        Sections of *libcdio* that are currently missing are the (SCSI) MMC
        commands, and the cdparanoia library. Of the audio controls, I put in
        those things that didn't require any thought. The ISO 9660 library is
        pretty complete, except file *stat()* information which is at present is
        pretty minimal.
        
        That said, what's in there is very usable. It contains probably more
        access capabilities than what most media players that don't use
        libcdio have.
        
        The encapsulation by SWIG is done in two parts. The lower-level python
        interface is called pycdio and is generated by SWIG.
        
        The more object-oriented module is *cdio*; it is a Python class that
        uses pycdio. Although pycdio is perfectly usable on its own, it is
        expected that *cdio* is what most people will use. As *pycdio* more
        closely models the C interface, it is conceivable (if unlikely) that
        diehard libcdio C users who are very familiar with that interface
        could prefer that.
        
        It is probably possible to change the SWIG in such a way to combine
        these pieces. However there are the problems. First, I'm not that much
        of a SWIG expert. Second it looks as though the resulting SWIG code
        would be more complex. Third the separation makes translation very
        straight forward to understand and maintain: first get what's in C
        into Python as a one-to-one translation. Then we implement some nice
        abstraction off of that. The abstraction can be modified without
        having to redo the underlying translation. (But the reverse is
        generally not true: usually changes to the C-to-python translation,
        pycdio, do result in small, but obvious and straightforward changes to
        the abstraction layer cdio.)
        
        There is much to be done - you want to help out, please do so!
        
        Standalone documentation is missing although many of the methods,
        classes and functions have some document strings. See also the
        programs in the example directory.
        
        
        
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: GNU General Public License (GPL)
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.4
Classifier: Programming Language :: Python :: 2.5
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.2
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
