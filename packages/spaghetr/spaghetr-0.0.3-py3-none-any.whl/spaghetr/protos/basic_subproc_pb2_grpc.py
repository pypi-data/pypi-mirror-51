# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from spaghetr.protos import basic_subproc_pb2 as spaghetr_dot_protos_dot_basic__subproc__pb2


class SubprocessStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Run = channel.unary_unary(
        '/status.Subprocess/Run',
        request_serializer=spaghetr_dot_protos_dot_basic__subproc__pb2.ArgsRequest.SerializeToString,
        response_deserializer=spaghetr_dot_protos_dot_basic__subproc__pb2.StdReply.FromString,
        )
    self.Popen = channel.unary_unary(
        '/status.Subprocess/Popen',
        request_serializer=spaghetr_dot_protos_dot_basic__subproc__pb2.ArgsRequest.SerializeToString,
        response_deserializer=spaghetr_dot_protos_dot_basic__subproc__pb2.StdReply.FromString,
        )


class SubprocessServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Run(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Popen(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SubprocessServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Run': grpc.unary_unary_rpc_method_handler(
          servicer.Run,
          request_deserializer=spaghetr_dot_protos_dot_basic__subproc__pb2.ArgsRequest.FromString,
          response_serializer=spaghetr_dot_protos_dot_basic__subproc__pb2.StdReply.SerializeToString,
      ),
      'Popen': grpc.unary_unary_rpc_method_handler(
          servicer.Popen,
          request_deserializer=spaghetr_dot_protos_dot_basic__subproc__pb2.ArgsRequest.FromString,
          response_serializer=spaghetr_dot_protos_dot_basic__subproc__pb2.StdReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'status.Subprocess', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
