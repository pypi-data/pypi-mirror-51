# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pywrap_tensorflow_data_validation', [dirname(__file__)])
        except ImportError:
            import _pywrap_tensorflow_data_validation
            return _pywrap_tensorflow_data_validation
        if fp is not None:
            try:
                _mod = imp.load_module('_pywrap_tensorflow_data_validation', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pywrap_tensorflow_data_validation = swig_import_helper()
    del swig_import_helper
else:
    import _pywrap_tensorflow_data_validation
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def InferSchema(statistics_proto_string, max_string_domain_size):
    return _pywrap_tensorflow_data_validation.InferSchema(statistics_proto_string, max_string_domain_size)
InferSchema = _pywrap_tensorflow_data_validation.InferSchema

def UpdateSchema(schema_proto_string, statistics_proto_string, max_string_domain_size):
    return _pywrap_tensorflow_data_validation.UpdateSchema(schema_proto_string, statistics_proto_string, max_string_domain_size)
UpdateSchema = _pywrap_tensorflow_data_validation.UpdateSchema

def ValidateFeatureStatistics(statistics_proto_string, schema_proto_string, environment, previous_span_statistics_proto_string, serving_statistics_proto_string, previous_version_statistics_proto_string):
    return _pywrap_tensorflow_data_validation.ValidateFeatureStatistics(statistics_proto_string, schema_proto_string, environment, previous_span_statistics_proto_string, serving_statistics_proto_string, previous_version_statistics_proto_string)
ValidateFeatureStatistics = _pywrap_tensorflow_data_validation.ValidateFeatureStatistics

def TFDV_Arrow_ListLengthsFromListArray(py_list_array):
    return _pywrap_tensorflow_data_validation.TFDV_Arrow_ListLengthsFromListArray(py_list_array)
TFDV_Arrow_ListLengthsFromListArray = _pywrap_tensorflow_data_validation.TFDV_Arrow_ListLengthsFromListArray

def TFDV_Arrow_GetFlattenedArrayParentIndices(py_list_array):
    return _pywrap_tensorflow_data_validation.TFDV_Arrow_GetFlattenedArrayParentIndices(py_list_array)
TFDV_Arrow_GetFlattenedArrayParentIndices = _pywrap_tensorflow_data_validation.TFDV_Arrow_GetFlattenedArrayParentIndices

def TFDV_Arrow_GetArrayNullBitmapAsByteArray(array):
    return _pywrap_tensorflow_data_validation.TFDV_Arrow_GetArrayNullBitmapAsByteArray(array)
TFDV_Arrow_GetArrayNullBitmapAsByteArray = _pywrap_tensorflow_data_validation.TFDV_Arrow_GetArrayNullBitmapAsByteArray

def TFDV_Arrow_GetBinaryArrayTotalByteSize(py_binary_array):
    return _pywrap_tensorflow_data_validation.TFDV_Arrow_GetBinaryArrayTotalByteSize(py_binary_array)
TFDV_Arrow_GetBinaryArrayTotalByteSize = _pywrap_tensorflow_data_validation.TFDV_Arrow_GetBinaryArrayTotalByteSize

def TFDV_Arrow_ValueCounts(array):
    return _pywrap_tensorflow_data_validation.TFDV_Arrow_ValueCounts(array)
TFDV_Arrow_ValueCounts = _pywrap_tensorflow_data_validation.TFDV_Arrow_ValueCounts

def TFDV_Arrow_MakeListArrayFromParentIndicesAndValues(num_parents, parent_indices, values_array):
    return _pywrap_tensorflow_data_validation.TFDV_Arrow_MakeListArrayFromParentIndicesAndValues(num_parents, parent_indices, values_array)
TFDV_Arrow_MakeListArrayFromParentIndicesAndValues = _pywrap_tensorflow_data_validation.TFDV_Arrow_MakeListArrayFromParentIndicesAndValues

def TFDV_Arrow_DecodedExamplesToTable(list_of_decoded_examples):
    return _pywrap_tensorflow_data_validation.TFDV_Arrow_DecodedExamplesToTable(list_of_decoded_examples)
TFDV_Arrow_DecodedExamplesToTable = _pywrap_tensorflow_data_validation.TFDV_Arrow_DecodedExamplesToTable

def TFDV_Arrow_MergeTables(list_of_tables):
    return _pywrap_tensorflow_data_validation.TFDV_Arrow_MergeTables(list_of_tables)
TFDV_Arrow_MergeTables = _pywrap_tensorflow_data_validation.TFDV_Arrow_MergeTables

def TFDV_Arrow_CompactTable(table):
    return _pywrap_tensorflow_data_validation.TFDV_Arrow_CompactTable(table)
TFDV_Arrow_CompactTable = _pywrap_tensorflow_data_validation.TFDV_Arrow_CompactTable

def TFDV_Arrow_SliceTableByRowIndices(table, row_indices):
    return _pywrap_tensorflow_data_validation.TFDV_Arrow_SliceTableByRowIndices(table, row_indices)
TFDV_Arrow_SliceTableByRowIndices = _pywrap_tensorflow_data_validation.TFDV_Arrow_SliceTableByRowIndices

def TFDV_DecodeExample(serialized_proto):
    return _pywrap_tensorflow_data_validation.TFDV_DecodeExample(serialized_proto)
TFDV_DecodeExample = _pywrap_tensorflow_data_validation.TFDV_DecodeExample
# This file is compatible with both classic and new-style classes.


