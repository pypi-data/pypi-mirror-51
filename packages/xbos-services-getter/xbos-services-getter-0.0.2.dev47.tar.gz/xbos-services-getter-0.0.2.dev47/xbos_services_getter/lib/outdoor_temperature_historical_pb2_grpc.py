# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import outdoor_temperature_historical_pb2 as outdoor__temperature__historical__pb2


class OutdoorTemperatureStub(object):
  """The temperature service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetPreprocessedTemperature = channel.unary_stream(
        '/outdoor_temperature_historical.OutdoorTemperature/GetPreprocessedTemperature',
        request_serializer=outdoor__temperature__historical__pb2.TemperatureRequest.SerializeToString,
        response_deserializer=outdoor__temperature__historical__pb2.TemperaturePoint.FromString,
        )
    self.GetRawTemperature = channel.unary_stream(
        '/outdoor_temperature_historical.OutdoorTemperature/GetRawTemperature',
        request_serializer=outdoor__temperature__historical__pb2.TemperatureRequest.SerializeToString,
        response_deserializer=outdoor__temperature__historical__pb2.TemperaturePoint.FromString,
        )


class OutdoorTemperatureServicer(object):
  """The temperature service definition.
  """

  def GetPreprocessedTemperature(self, request, context):
    """A simple RPC.

    Sends the outside temperature for a given building, within a duration (start, end), and a requested window
    An error  is returned if there are no temperature for the given request
    GetPreprocessedTemperature uses Facebook Prophet to return interpolated historical data or predict future data
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetRawTemperature(self, request, context):
    """GetRawTemperature uses pymortar to return historical data only
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_OutdoorTemperatureServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetPreprocessedTemperature': grpc.unary_stream_rpc_method_handler(
          servicer.GetPreprocessedTemperature,
          request_deserializer=outdoor__temperature__historical__pb2.TemperatureRequest.FromString,
          response_serializer=outdoor__temperature__historical__pb2.TemperaturePoint.SerializeToString,
      ),
      'GetRawTemperature': grpc.unary_stream_rpc_method_handler(
          servicer.GetRawTemperature,
          request_deserializer=outdoor__temperature__historical__pb2.TemperatureRequest.FromString,
          response_serializer=outdoor__temperature__historical__pb2.TemperaturePoint.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'outdoor_temperature_historical.OutdoorTemperature', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
