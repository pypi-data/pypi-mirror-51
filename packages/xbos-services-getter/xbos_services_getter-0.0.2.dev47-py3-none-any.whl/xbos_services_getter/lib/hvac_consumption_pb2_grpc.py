# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import hvac_consumption_pb2 as hvac__consumption__pb2


class ConsumptionHVACStub(object):
  """The temperature service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetConsumption = channel.unary_unary(
        '/hvac_consumption.ConsumptionHVAC/GetConsumption',
        request_serializer=hvac__consumption__pb2.Request.SerializeToString,
        response_deserializer=hvac__consumption__pb2.ConsumptionPoint.FromString,
        )


class ConsumptionHVACServicer(object):
  """The temperature service definition.
  """

  def GetConsumption(self, request, context):
    """A simple RPC.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ConsumptionHVACServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetConsumption': grpc.unary_unary_rpc_method_handler(
          servicer.GetConsumption,
          request_deserializer=hvac__consumption__pb2.Request.FromString,
          response_serializer=hvac__consumption__pb2.ConsumptionPoint.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'hvac_consumption.ConsumptionHVAC', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
