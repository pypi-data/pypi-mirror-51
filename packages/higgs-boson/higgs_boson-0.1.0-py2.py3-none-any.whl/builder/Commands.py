# This file is part of Higgs Boson.
#
# Copyright (c) BitBoson
#
# Higgs Boson is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Higgs Boson is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Higgs Boson.  If not, see <https://www.gnu.org/licenses/>.
#
# Written by:
#     - Tyler Parcell <OriginLegend>
#

import os
import shutil
import higgs_boson
from builder import Utils
from builder import Dockerfile
from builder import HiggsBuilder


def handle_init_command(project_dir: str, cache_dir: str) -> None:
    """
    Function used to handle the init sub-command for the CLI tool execution
    :param project_dir: String representing the project directory to initialize
    :param cache_dir: String representing the project cache directory to use
    :return: None
    """

    # If the provided path is None, get the current working directory
    if project_dir is None:
        project_dir = os.getcwd()

    # If the cache-directory is None, then use the default directory
    if cache_dir is None:
        cache_dir = Utils.Constants.HIGGS_TEMP_DIR

    # Normalize the input path and setup the dockerfile path
    project_dir = os.path.normpath(project_dir)
    project_cache_dir = os.path.join(project_dir, cache_dir)
    docker_file_path = os.path.join(project_cache_dir, 'Dockerfile')

    # Ensure that the temporary path for the project exists
    if not os.path.exists(project_cache_dir):
        os.makedirs(project_cache_dir)

    # Copy the local (host) higgs installation into the temporary directory
    # This will ultimately be used in docker-related builds/operations
    higgs_main_path = os.path.abspath(higgs_boson.__file__)
    higgs_module_path = os.path.abspath(os.path.join(higgs_main_path,
                                                     os.pardir))
    if os.path.exists(os.path.join(project_cache_dir, 'higgs-boson')):
        shutil.rmtree(os.path.join(project_cache_dir, 'higgs-boson'))
    shutil.copytree(higgs_module_path, os.path.join(project_cache_dir,
                                                    'higgs-boson'))

    # Open the dockerfile and setup the initialization information
    with open(docker_file_path, 'w') as docker_file:

        # Write in the edit/auto-generation warning
        docker_file.write('# THIS IS AN AUTOGENERATED FILE USING HIGGS\n')
        docker_file.write('# DO NOT EDIT (UNLESS YOU KNOW WHAT\'S UP)\n')
        docker_file.write('\n')

        # Write the image details for the dockerfile
        docker_file.write('# Use Ubuntu Linux (18.04) as the image\n')
        docker_file.write('FROM ubuntu:18.04\n')
        docker_file.write('\n')

        # Write the image update details for the dockerfile
        docker_file.write('# Update/Upgrade the image\n')
        docker_file.write('RUN apt-get update -y\n')
        docker_file.write('RUN apt-get upgrade -y\n')
        docker_file.write('\n')

        # Write the APK dependencies for the dockerfile
        docker_file.write('# Install all dependencies from APT-GET\n')
        docker_file.write('RUN apt-get install -y cmake\n')
        docker_file.write('RUN apt-get install -y gcc g++\n')
        docker_file.write('RUN apt-get install -y make\n')
        docker_file.write('RUN apt-get install -y git\n')
        docker_file.write('RUN apt-get install -y libc-dev\n')
        docker_file.write('RUN apt-get install -y autoconf\n')
        docker_file.write('RUN apt-get install -y libtool\n')
        docker_file.write('RUN apt-get install -y linux-headers-generic\n')
        docker_file.write('RUN apt-get install -y python3\n')
        docker_file.write('RUN apt-get install -y python3-pip\n')
        docker_file.write('\n')

        # Write the PIP dependencies for the dockerfile
        docker_file.write('# Install all dependencies from pip\n')
        docker_file.write('RUN pip3 install --upgrade pip\n')
        docker_file.write('RUN pip3 install peru\n')

        # Copy the local installation of the higgs builder into the docker
        # image as we are building it (when we build it that is)
        docker_file.write('# Copy-in the local installation of higgs\n')
        docker_file.write('COPY ./' + str(cache_dir) + '/higgs-boson '
                          + '/higgs-boson\n')


def handle_deps_command(project_dir: str, higgs_file: str,
                        cache_dir: str, use_docker: bool,
                        build_os: str, build_arch: str) -> None:
    """
    Function used to handle the deps sub-command for the CLI tool execution
    :param project_dir: String representing the project directory to download
                        the dependencies into
    :param higgs_file: String representing the project higgs file to use
    :param cache_dir: String representing the project cache directory to use
    :param use_docker: Boolean flag indicating whether to use Docker or not
    :param build_os: String representing the desired build Operating System
    :param build_arch: String representing the desired build Architecture
    :return: None
    """

    # If the provided path is None, get the current working directory
    if project_dir is None:
        project_dir = os.getcwd()

    # If the cache-directory is None, then use the default directory
    if higgs_file is None:
        higgs_file = Utils.Constants.HIGGS_FILENAME

    # If the cache-directory is None, then use the default directory
    if cache_dir is None:
        cache_dir = Utils.Constants.HIGGS_TEMP_DIR

    # Normalize the input path and setup the dockerfile path
    project_dir = os.path.normpath(project_dir)
    project_cache_dir = os.path.join(project_dir, cache_dir)

    # Ensure that the temporary path for the project exists
    if not os.path.exists(project_cache_dir):
        os.makedirs(project_cache_dir)

    # If we are NOT using docker, then process with the dependencies related
    # processes using the local directories and the installed Higgs tool
    if not use_docker:

        # Create a Higgs Builder object
        builder = HiggsBuilder.HiggsBuilder(base_project_dir=project_dir,
                                            yaml_file=higgs_file,
                                            temp_dir=cache_dir)

        # Download all external dependencies
        # TODO - Skip based on if they are already downloaded
        builder.download_deps()

        # Setup output directories references for later use
        outputs_dir = os.path.join(project_cache_dir,
                                   Utils.Constants.HIGGS_DEPS_DIR,
                                   Utils.Constants.HIGGS_OUT_DIR)
        output_libs_dir = os.path.join(outputs_dir,
                                       Utils.Constants.HIGGS_LIB_DIR)
        output_includes_dir = os.path.join(outputs_dir,
                                           Utils.Constants.HIGGS_INC_DIR)

        # Next, define all corresponding project directory and output
        # environment variables for use in the build scripts
        for lib_dir in os.listdir(output_libs_dir):
            if not os.path.isfile(lib_dir):
                lib_env_name = '_'.join(['HIGGS', str(lib_dir.upper())])
                os.environ['_'.join([lib_env_name, 'DIR'])]\
                    = os.path.join(outputs_dir, lib_dir)
                os.environ['_'.join([lib_env_name, 'LIBS'])]\
                    = os.path.join(output_libs_dir, lib_dir)
                os.environ['_'.join([lib_env_name, 'INCLUDES'])]\
                    = os.path.join(output_includes_dir, lib_dir)

        # Actually build all of the external dependencies
        builder.build_external_deps()

        # Generate the project's CMake file
        builder.create_external_cmake_lists()

    # If we are using docker, then handle the dependencies process in docker
    else:

        # Build the docker image (if needed)
        docker_file_path = os.path.join(project_dir, cache_dir, 'Dockerfile')
        if Dockerfile.build_docker_image(project_dir, docker_file_path,
                                         cache_dir, 'higgs-builder'):

            # If the docker image build was successful, execute the build
            # command using the built image
            Dockerfile.execute_docker_image_command('higgs-builder',
                                                    'python3'
                                                    ' /higgs-boson/higgs_boson.py'
                                                    ' deps')


def handle_build_command(project_dir: str, higgs_file: str, cache_dir: str,
                         use_docker: bool, build_os: str,
                         build_arch: str) -> None:
    """
    Function used to handle the build sub-command for the CLI tool execution
    :param project_dir: String representing the project directory to download
                        the dependencies into
    :param higgs_file: String representing the project higgs file to use
    :param cache_dir: String representing the project cache directory to use
    :param use_docker: Boolean flag indicating whether to use Docker or not
    :param build_os: String representing the desired build Operating System
    :param build_arch: String representing the desired build Architecture
    :return: None
    """

    # If the provided path is None, get the current working directory
    if project_dir is None:
        project_dir = os.getcwd()

    # If the cache-directory is None, then use the default directory
    if higgs_file is None:
        higgs_file = Utils.Constants.HIGGS_FILENAME

    # If the cache-directory is None, then use the default directory
    if cache_dir is None:
        cache_dir = Utils.Constants.HIGGS_TEMP_DIR

    # Normalize the input path and setup the dockerfile path
    project_dir = os.path.normpath(project_dir)
    project_cache_dir = os.path.join(project_dir, cache_dir)

    # Ensure that the temporary path for the project exists
    if not os.path.exists(project_cache_dir):
        os.makedirs(project_cache_dir)

    # If we are NOT using docker, then process with the dependencies related
    # processes using the local directories and the installed Higgs tool
    if not use_docker:

        # Create a Higgs Builder object
        builder = HiggsBuilder.HiggsBuilder(base_project_dir=project_dir,
                                            yaml_file=higgs_file,
                                            temp_dir=cache_dir)

        # Setup output directories references for later use
        outputs_dir = os.path.join(project_cache_dir,
                                   Utils.Constants.HIGGS_DEPS_DIR,
                                   Utils.Constants.HIGGS_OUT_DIR)
        output_libs_dir = os.path.join(outputs_dir,
                                       Utils.Constants.HIGGS_LIB_DIR)

        # Get a list of all of the LD paths for output shared libraries
        higgs_libraries_paths = []
        for lib_dir in os.listdir(output_libs_dir):
            if not os.path.isfile(lib_dir):
                higgs_libraries_paths.append(os.path.join(output_libs_dir,
                                                           lib_dir))
        higgs_libraries_path_var = ':'.join(higgs_libraries_paths)

        # Setup the linker environment variable for the instance
        exiting_ld_path = os.environ.get('LD_LIBRARY_PATH', None)
        if exiting_ld_path is not None:
            higgs_libraries_path_var = exiting_ld_path + ':'\
                                        + higgs_libraries_path_var
        os.environ['LD_LIBRARY_PATH'] = higgs_libraries_path_var

        # Run the underlying build command
        builder.run_higgs_build()

    # If we are using docker, then handle the dependencies process in docker
    else:

        # Build the docker image (if needed)
        docker_file_path = os.path.join(project_dir, cache_dir, 'Dockerfile')
        if Dockerfile.build_docker_image(project_dir, docker_file_path,
                                         cache_dir, 'higgs-builder'):

            # If the docker image build was successful, execute the build
            # command using the built image
            Dockerfile.execute_docker_image_command('higgs-builder',
                                                    'python3'
                                                    ' /higgs-boson/higgs_boson.py'
                                                    ' build')


def handle_test_command(project_dir: str, higgs_file: str, cache_dir: str,
                        use_docker: bool) -> None:
    """
    Function used to handle the test sub-command for the CLI tool execution
    :param project_dir: String representing the project directory to download
                        the dependencies into
    :param higgs_file: String representing the project higgs file to use
    :param cache_dir: String representing the project cache directory to use
    :param use_docker: Boolean flag indicating whether to use Docker or not
    :return: None
    """

    # If the provided path is None, get the current working directory
    if project_dir is None:
        project_dir = os.getcwd()

    # If the cache-directory is None, then use the default directory
    if higgs_file is None:
        higgs_file = Utils.Constants.HIGGS_FILENAME

    # If the cache-directory is None, then use the default directory
    if cache_dir is None:
        cache_dir = Utils.Constants.HIGGS_TEMP_DIR

    # Normalize the input path and setup the dockerfile path
    project_dir = os.path.normpath(project_dir)
    project_cache_dir = os.path.join(project_dir, cache_dir)

    # Ensure that the temporary path for the project exists
    if not os.path.exists(project_cache_dir):
        os.makedirs(project_cache_dir)

    # If we are NOT using docker, then process with the dependencies related
    # processes using the local directories and the installed Higgs tool
    if not use_docker:

        # Create a Higgs Builder object
        builder = HiggsBuilder.HiggsBuilder(base_project_dir=project_dir,
                                            yaml_file=higgs_file,
                                            temp_dir=cache_dir)

        # Setup output directories references for later use
        outputs_dir = os.path.join(project_cache_dir,
                                   Utils.Constants.HIGGS_DEPS_DIR,
                                   Utils.Constants.HIGGS_OUT_DIR)
        output_libs_dir = os.path.join(outputs_dir,
                                       Utils.Constants.HIGGS_LIB_DIR)

        # Get a list of all of the LD paths for output shared libraries
        higgs_libraries_paths = []
        for lib_dir in os.listdir(output_libs_dir):
            if not os.path.isfile(lib_dir):
                higgs_libraries_paths.append(os.path.join(output_libs_dir,
                                                           lib_dir))
        higgs_libraries_path_var = ':'.join(higgs_libraries_paths)

        # Setup the linker environment variable for the instance
        exiting_ld_path = os.environ.get('LD_LIBRARY_PATH', None)
        if exiting_ld_path is not None:
            higgs_libraries_path_var = exiting_ld_path + ':'\
                                        + higgs_libraries_path_var
        os.environ['LD_LIBRARY_PATH'] = higgs_libraries_path_var

        # Run the underlying test command
        builder.run_higgs_test()

    # If we are using docker, then handle the dependencies process in docker
    else:

        # Build the docker image (if needed)
        docker_file_path = os.path.join(project_dir, cache_dir, 'Dockerfile')
        if Dockerfile.build_docker_image(project_dir, docker_file_path,
                                         cache_dir, 'higgs-builder'):

            # If the docker image build was successful, execute the build
            # command using the built image
            Dockerfile.execute_docker_image_command('higgs-builder',
                                                    'python3'
                                                    '/higgs-boson/higgs_boson.py'
                                                    ' test')


def handle_coverage_command(project_dir: str, higgs_file: str, cache_dir: str,
                            use_docker: bool) -> None:
    """
    Function used to handle the coverage sub-command for the CLI tool execution
    :param project_dir: String representing the project directory to download
                        the dependencies into
    :param higgs_file: String representing the project higgs file to use
    :param cache_dir: String representing the project cache directory to use
    :param use_docker: Boolean flag indicating whether to use Docker or not
    :return: None
    """

    # If the provided path is None, get the current working directory
    if project_dir is None:
        project_dir = os.getcwd()

    # If the cache-directory is None, then use the default directory
    if higgs_file is None:
        higgs_file = Utils.Constants.HIGGS_FILENAME

    # If the cache-directory is None, then use the default directory
    if cache_dir is None:
        cache_dir = Utils.Constants.HIGGS_TEMP_DIR

    # Normalize the input path and setup the dockerfile path
    project_dir = os.path.normpath(project_dir)
    project_cache_dir = os.path.join(project_dir, cache_dir)

    # Ensure that the temporary path for the project exists
    if not os.path.exists(project_cache_dir):
        os.makedirs(project_cache_dir)

    # If we are NOT using docker, then process with the dependencies related
    # processes using the local directories and the installed Higgs tool
    if not use_docker:

        # Create a Higgs Builder object
        builder = HiggsBuilder.HiggsBuilder(base_project_dir=project_dir,
                                            yaml_file=higgs_file,
                                            temp_dir=cache_dir)

        # Setup output directories references for later use
        outputs_dir = os.path.join(project_cache_dir,
                                   Utils.Constants.HIGGS_DEPS_DIR,
                                   Utils.Constants.HIGGS_OUT_DIR)
        output_libs_dir = os.path.join(outputs_dir,
                                       Utils.Constants.HIGGS_LIB_DIR)

        # Get a list of all of the LD paths for output shared libraries
        higgs_libraries_paths = []
        for lib_dir in os.listdir(output_libs_dir):
            if not os.path.isfile(lib_dir):
                higgs_libraries_paths.append(os.path.join(output_libs_dir,
                                                           lib_dir))
        higgs_libraries_path_var = ':'.join(higgs_libraries_paths)

        # Setup the linker environment variable for the instance
        exiting_ld_path = os.environ.get('LD_LIBRARY_PATH', None)
        if exiting_ld_path is not None:
            higgs_libraries_path_var = exiting_ld_path + ':'\
                                        + higgs_libraries_path_var
        os.environ['LD_LIBRARY_PATH'] = higgs_libraries_path_var

        # Run the underlying coverage command
        builder.run_higgs_coverage()

    # If we are using docker, then handle the dependencies process in docker
    else:

        # Build the docker image (if needed)
        docker_file_path = os.path.join(project_dir, cache_dir, 'Dockerfile')
        if Dockerfile.build_docker_image(project_dir, docker_file_path,
                                         cache_dir, 'higgs-builder'):

            # If the docker image build was successful, execute the build
            # command using the built image
            Dockerfile.execute_docker_image_command('higgs-builder',
                                                    'python3'
                                                    ' /higgs-boson/higgs_boson.py'
                                                    ' coverage')
