# This file is part of Higgs Boson.
#
# Copyright (c) BitBoson
#
# Higgs Boson is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Higgs Boson is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Higgs Boson.  If not, see <https://www.gnu.org/licenses/>.
#
# Written by:
#     - Tyler Parcell <OriginLegend>
#

import os
import subprocess
from builder import Utils
from builder import YamlParser


class PeruConstants:
    PERU_MAIN_DIR = 'peru'
    STATE_DIR = 'state'
    CACHE_DIR = 'cache'
    YAML_FILE = 'peru.yaml'
    SYNC_DIR = Utils.Constants.HIGGS_DEPS_DIR


class PeruManager:

    def __init__(self, yaml_info: YamlParser,
                 base_project_dir=Utils.Constants.PROJECT_DIR,
                 temp_directory=Utils.Constants.HIGGS_TEMP_DIR):
        """
        Constructor used to initialize the Peru Build Manager
        :param yaml_info: Yaml Parser representing the YAML file contents
        :param base_project_dir: String representing the project directory
        :param temp_directory: String representing the temp Higgs location
        """

        # Create the output directory if it doesn't already exist
        if not os.path.exists(temp_directory):
            os.makedirs(temp_directory)

        # Setup the directory location references
        self.__base_project_dir = base_project_dir
        self.__peru_yaml = os.path.join(base_project_dir, temp_directory,
                                        PeruConstants.YAML_FILE)
        self.__sync_dir = os.path.join(base_project_dir, temp_directory,
                                       PeruConstants.SYNC_DIR)
        self.__state_dir = os.path.join(base_project_dir, temp_directory,
                                        PeruConstants.PERU_MAIN_DIR,
                                        PeruConstants.STATE_DIR)
        self.__cache_dir = os.path.join(base_project_dir, temp_directory,
                                        PeruConstants.PERU_MAIN_DIR,
                                        PeruConstants.CACHE_DIR)

        # Save the YAML Parser reference for use later
        self.__yaml_parser = yaml_info

    def write_peru_file(self):

        # Get all external dependencies from the builder and
        # keep track of the import-module pairs for writing later
        peru_config = []
        for external_dep in self.__yaml_parser.get_external_deps():
            peru_config.append([external_dep.get_peru_import_entry(),
                                external_dep.get_peru_module_entry()])

        # Get all external dependencies from the builder and
        # keep track of the import-module pairs for writing later
        # NOTE: This uses the same config as the external one
        # TODO - Implement

        # Write the peru configuration to the peru.yaml file
        with open(self.__peru_yaml, 'w') as peru_yaml:

            # Write the standard header information for the Peru YAML file
            peru_yaml.write("# THIS IS AN AUTOGENERATED FILE USING HIGGS\n")
            peru_yaml.write("# DO NOT EDIT (UNLESS YOU KNOW WHAT'S UP)\n")
            peru_yaml.write("\n")

            # Write all of the import information to the peru YAML file first
            peru_yaml.write('# peru import information\n')
            peru_yaml.write('imports:\n')
            for item_pair in peru_config:
                peru_yaml.write(item_pair[0])

            # Write-in the required import dependencies (i.e. Catch2)
            peru_yaml.write(' catch2: catch2\n')

            # Next write all of the module information to the peru YAML file
            peru_yaml.write('\n\n#\n# peru module information\n#\n\n')
            for item_pair in peru_config:
                peru_yaml.write(item_pair[1] + str('\n'))

            # Write-in the required module dependencies (i.e. Catch2)
            peru_yaml.write('# Setup the import for catch2\n')
            peru_yaml.write('git module catch2:\n')
            peru_yaml.write('  url: https://github.com/catchorg/Catch2.git\n')
            peru_yaml.write('  rev: v2.9.1\n')

    def peru_sync(self) -> bool:
        """
        Function used to call the peru sync operation on the setup
        YAML file from the construction of the instance
        :return: Boolean indicating whether the process was successful or not
        """

        # Create a return flag
        ret_flag = False

        # Call peru sync in the most cross-platform way possible
        error_msg = None
        try:
            subprocess.check_output(['peru', '--file=' + str(self.__peru_yaml),
                                     '--sync-dir=' + str(self.__sync_dir),
                                     '--state-dir=' + str(self.__state_dir),
                                     '--cache-dir=' + str(self.__cache_dir),
                                     'sync', '--force'],
                                    stderr=error_msg)
            ret_flag = True
        except Exception:
            Utils.tprint('\n' + str(error_msg), newline=True)

        # Return the return flag
        return ret_flag
