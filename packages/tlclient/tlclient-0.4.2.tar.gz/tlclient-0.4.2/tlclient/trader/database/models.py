# auto generated by update_py.py
import datetime
import json

from sqlalchemy import CHAR, JSON, Boolean, Column, DateTime, Integer
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()


class Account(Base):

    __tablename__ = 'accounts'

    id = Column(Integer, primary_key=True)

    acc_tag = Column(CHAR(100), unique=True)
    acc_config = Column(JSON)
    key_name = Column(CHAR(100))

    create_time = Column(DateTime)
    update_time = Column(DateTime)

    def get_decrypted_acc_config(self):
        from linker import rsa_encrypter as rsa
        from ..helpers import KeyHelper

        config = self.acc_config.copy()
        # to decrypt
        if self.key_name is not None:
            assert KeyHelper.key_exists(self.key_name), 'failed to decrypt, key "{}" missing'.format(self.key_name)
            private_key_path, _ = KeyHelper.get_key_paths(self.key_name)
            for field in ['secret_key', 'password']:
                encrypted_data = config.get(field)
                if encrypted_data is not None:
                    data = rsa.decode_msg(encrypted_data, private_pem_file=private_key_path)
                    config[field] = data

        return config

    def set_update_time(self):
        self.update_time = datetime.datetime.now()

    def set_create_time(self):
        self.create_time = datetime.datetime.now()
