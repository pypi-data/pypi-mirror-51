# auto generated by update_py.py
# encoding=utf8

import Crypto.Random
import Crypto.PublicKey.RSA
import Crypto.Cipher.PKCS1_v1_5
import base64
import sys

def gen_rsa_keys(fmt='PEM'):
    random_generator = Crypto.Random.new().read
    # rsa算法生成实例
    rsa = Crypto.PublicKey.RSA.generate(1024, random_generator)
    # master的秘钥对的生成
    private_pem = rsa.exportKey(fmt)
    public_pem = rsa.publickey().exportKey(fmt)
    return (private_pem, public_pem)

def write_pem_rsa_keys(private_pem_file, public_pem_file):
    (private_pem, public_pem) = gen_rsa_keys()
    with open(private_pem_file, 'wb') as f:
        f.write(private_pem)
    with open(public_pem_file, 'wb') as f:
        f.write(public_pem)

def encode_msg(msg, public_pem_file=None, public_pem=None):
    if public_pem is None:
        if public_pem_file is None:
            return None
        else:
            with open(public_pem_file, 'r') as f:
                public_pem = f.read()
    rsakey = Crypto.PublicKey.RSA.importKey(public_pem)
    cipher = Crypto.Cipher.PKCS1_v1_5.new(rsakey)
    if sys.version_info[0] == 3:
        msg = msg.encode(encoding="utf-8")
    cipher_text = base64.b64encode(cipher.encrypt(msg))
    if sys.version_info[0] == 3:
        cipher_text = str(cipher_text, encoding='utf-8')
    return cipher_text

def decode_msg(msg, private_pem_file=None, private_pem=None):
    if private_pem is None:
        if private_pem_file is None:
            return None
        else:
            with open(private_pem_file, 'r') as f:
                private_pem = f.read()
    rsakey = Crypto.PublicKey.RSA.importKey(private_pem)
    cipher = Crypto.Cipher.PKCS1_v1_5.new(rsakey)
    text = cipher.decrypt(base64.b64decode(msg), None)
    if sys.version_info[0] == 3:
        text = str(text, encoding='utf-8')
    return text

if __name__ == '__main__':
    (private_key, public_key) = gen_rsa_keys()
    print('--------------private key-------------')
    print(private_key)
    print('--------------public key-------------')
    print(public_key)
    print('--------------original msg-------------')
    original = '我靠，这个加密到底好不好使？welcome to the world'
    #original = 'helloworld,thisisfine'
    print(original)
    print('--------------encrypted msg-------------')
    encrypted = encode_msg(original, public_pem=public_key)
    print(encrypted)
    print('--------------decrypted msg-------------')
    decrypted = decode_msg(encrypted, private_pem=private_key)
    print(decrypted)