####################################################################
## This file is automatically generated
## Do not edit manually
####################################################################

import IPython
import json
import simplejson
import uuid
import base64
import os

from .widgets import PlaceField as PlaceFieldOrig
from .widgets import Autocorrelograms as AutocorrelogramsOrig
from .widgets import NWBView as NWBViewOrig
from .widgets import AnimalPosition as AnimalPositionOrig
from .widgets import NWBBrowser as NWBBrowserOrig
from .widgets import AnimalPosition2 as AnimalPosition2Orig
from .widgets import ElectrodeGeometry as ElectrodeGeometryOrig
from .widgets import TimeseriesView as TimeseriesViewOrig
from .widgets import SpikeForestAnalysis as SpikeForestAnalysisOrig


def _json_parse(x):
    try:
        return json.loads(x)
    except:
        return None

def _json_stringify(x):
    try:
        return simplejson.dumps(x, ignore_nan=True)
    except:
        return ''


class PlaceField:
    """Colab widget for PlaceField"""

    def __init__(self, **kwargs):
        super().__init__()
        self._model_id = uuid.uuid4().hex.upper()
        self._X = PlaceFieldOrig()
        self._X.on_python_state_changed(self._handle_python_state_changed)
        self._model = ReactopyaColabWidgetModelPy(self._model_id)
        self._props = dict(**kwargs)

    def _handle_python_state_changed(self):
        for key in ['positions', 'timestamps', 'spike_time_indices', 'spike_labels', 'all_unit_ids', 'cluster_names', 'status', 'status_message']:
            val = self._X.get_python_state(key, None)
            self._model.set(key, _json_stringify(val), sync=True)

    def _handle_callback(self, command, *, changes=None):
        if command == 'save_changes':
            state = dict()
            for key, val in changes.items():
                self._model.set(key, val)
                state[key] = simplejson.loads(val)
            self._X._handle_javascript_state_changed(state)
        elif command == 'load_bundle_and_show':
            dirname = os.path.dirname(os.path.realpath(__file__))
            fname = os.path.join(dirname, 'dist', 'bundle.js')
            with open(fname, 'r') as f:
                js = f.read()
            display(IPython.display.Javascript(js))
            self._handle_callback('show')
        elif command == 'show':
            js_code = '''
            {
                window.reactopya_bundle_status = 'loaded';
                let props0 = [props];
                function onSaveChanges(changes) {
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['save_changes'], {changes: changes});
                }
                let model = window.reactopya_colab.widgets.PlaceField.render(props0, onSaveChanges);
                if (!window.reactopya_colab_widget_models)
                    window.reactopya_colab_widget_models = {};
                window.reactopya_colab_widget_models['[model_id]'] = model;
            }
            '''
            js_code = js_code.replace('[model_id]', self._model_id)
            js_code = js_code.replace('[props]', simplejson.dumps(self._props))
            display(IPython.display.Javascript(js_code))


    def show(self):
        from google.colab import output as colab_output  # pylint: disable=import-error
        colab_output.register_callback('reactopya.{}'.format(self._model_id), self._handle_callback)

        js_code = '''
        {
            function try_show() {
                if (window.reactopya_bundle_status == 'loaded') {
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['show'], {});
                    return;
                }
                else if (window.reactopya_bundle_status == 'loading') {
                    setTimeout(try_show ,1000);
                    return;
                }
                else {
                    window.reactopya_bundle_status = 'loading';
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['load_bundle_and_show'], {});
                }
            }
            try_show();
        }
        '''
        js_code = js_code.replace('[model_id]', self._model_id)
        display(IPython.display.Javascript(js_code))


class Autocorrelograms:
    """Colab widget for Autocorrelograms"""

    def __init__(self, **kwargs):
        super().__init__()
        self._model_id = uuid.uuid4().hex.upper()
        self._X = AutocorrelogramsOrig()
        self._X.on_python_state_changed(self._handle_python_state_changed)
        self._model = ReactopyaColabWidgetModelPy(self._model_id)
        self._props = dict(**kwargs)

    def _handle_python_state_changed(self):
        for key in ['output', 'status', 'status_message']:
            val = self._X.get_python_state(key, None)
            self._model.set(key, _json_stringify(val), sync=True)

    def _handle_callback(self, command, *, changes=None):
        if command == 'save_changes':
            state = dict()
            for key, val in changes.items():
                self._model.set(key, val)
                state[key] = simplejson.loads(val)
            self._X._handle_javascript_state_changed(state)
        elif command == 'load_bundle_and_show':
            dirname = os.path.dirname(os.path.realpath(__file__))
            fname = os.path.join(dirname, 'dist', 'bundle.js')
            with open(fname, 'r') as f:
                js = f.read()
            display(IPython.display.Javascript(js))
            self._handle_callback('show')
        elif command == 'show':
            js_code = '''
            {
                window.reactopya_bundle_status = 'loaded';
                let props0 = [props];
                function onSaveChanges(changes) {
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['save_changes'], {changes: changes});
                }
                let model = window.reactopya_colab.widgets.Autocorrelograms.render(props0, onSaveChanges);
                if (!window.reactopya_colab_widget_models)
                    window.reactopya_colab_widget_models = {};
                window.reactopya_colab_widget_models['[model_id]'] = model;
            }
            '''
            js_code = js_code.replace('[model_id]', self._model_id)
            js_code = js_code.replace('[props]', simplejson.dumps(self._props))
            display(IPython.display.Javascript(js_code))


    def show(self):
        from google.colab import output as colab_output  # pylint: disable=import-error
        colab_output.register_callback('reactopya.{}'.format(self._model_id), self._handle_callback)

        js_code = '''
        {
            function try_show() {
                if (window.reactopya_bundle_status == 'loaded') {
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['show'], {});
                    return;
                }
                else if (window.reactopya_bundle_status == 'loading') {
                    setTimeout(try_show ,1000);
                    return;
                }
                else {
                    window.reactopya_bundle_status = 'loading';
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['load_bundle_and_show'], {});
                }
            }
            try_show();
        }
        '''
        js_code = js_code.replace('[model_id]', self._model_id)
        display(IPython.display.Javascript(js_code))


class NWBView:
    """Colab widget for NWBView"""

    def __init__(self, **kwargs):
        super().__init__()
        self._model_id = uuid.uuid4().hex.upper()
        self._X = NWBViewOrig()
        self._X.on_python_state_changed(self._handle_python_state_changed)
        self._model = ReactopyaColabWidgetModelPy(self._model_id)
        self._props = dict(**kwargs)

    def _handle_python_state_changed(self):
        for key in ['object', 'status', 'status_message']:
            val = self._X.get_python_state(key, None)
            self._model.set(key, _json_stringify(val), sync=True)

    def _handle_callback(self, command, *, changes=None):
        if command == 'save_changes':
            state = dict()
            for key, val in changes.items():
                self._model.set(key, val)
                state[key] = simplejson.loads(val)
            self._X._handle_javascript_state_changed(state)
        elif command == 'load_bundle_and_show':
            dirname = os.path.dirname(os.path.realpath(__file__))
            fname = os.path.join(dirname, 'dist', 'bundle.js')
            with open(fname, 'r') as f:
                js = f.read()
            display(IPython.display.Javascript(js))
            self._handle_callback('show')
        elif command == 'show':
            js_code = '''
            {
                window.reactopya_bundle_status = 'loaded';
                let props0 = [props];
                function onSaveChanges(changes) {
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['save_changes'], {changes: changes});
                }
                let model = window.reactopya_colab.widgets.NWBView.render(props0, onSaveChanges);
                if (!window.reactopya_colab_widget_models)
                    window.reactopya_colab_widget_models = {};
                window.reactopya_colab_widget_models['[model_id]'] = model;
            }
            '''
            js_code = js_code.replace('[model_id]', self._model_id)
            js_code = js_code.replace('[props]', simplejson.dumps(self._props))
            display(IPython.display.Javascript(js_code))


    def show(self):
        from google.colab import output as colab_output  # pylint: disable=import-error
        colab_output.register_callback('reactopya.{}'.format(self._model_id), self._handle_callback)

        js_code = '''
        {
            function try_show() {
                if (window.reactopya_bundle_status == 'loaded') {
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['show'], {});
                    return;
                }
                else if (window.reactopya_bundle_status == 'loading') {
                    setTimeout(try_show ,1000);
                    return;
                }
                else {
                    window.reactopya_bundle_status = 'loading';
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['load_bundle_and_show'], {});
                }
            }
            try_show();
        }
        '''
        js_code = js_code.replace('[model_id]', self._model_id)
        display(IPython.display.Javascript(js_code))


class AnimalPosition:
    """Colab widget for AnimalPosition"""

    def __init__(self, **kwargs):
        super().__init__()
        self._model_id = uuid.uuid4().hex.upper()
        self._X = AnimalPositionOrig()
        self._X.on_python_state_changed(self._handle_python_state_changed)
        self._model = ReactopyaColabWidgetModelPy(self._model_id)
        self._props = dict(**kwargs)

    def _handle_python_state_changed(self):
        for key in ['positions', 'timestamps', 'status', 'status_message']:
            val = self._X.get_python_state(key, None)
            self._model.set(key, _json_stringify(val), sync=True)

    def _handle_callback(self, command, *, changes=None):
        if command == 'save_changes':
            state = dict()
            for key, val in changes.items():
                self._model.set(key, val)
                state[key] = simplejson.loads(val)
            self._X._handle_javascript_state_changed(state)
        elif command == 'load_bundle_and_show':
            dirname = os.path.dirname(os.path.realpath(__file__))
            fname = os.path.join(dirname, 'dist', 'bundle.js')
            with open(fname, 'r') as f:
                js = f.read()
            display(IPython.display.Javascript(js))
            self._handle_callback('show')
        elif command == 'show':
            js_code = '''
            {
                window.reactopya_bundle_status = 'loaded';
                let props0 = [props];
                function onSaveChanges(changes) {
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['save_changes'], {changes: changes});
                }
                let model = window.reactopya_colab.widgets.AnimalPosition.render(props0, onSaveChanges);
                if (!window.reactopya_colab_widget_models)
                    window.reactopya_colab_widget_models = {};
                window.reactopya_colab_widget_models['[model_id]'] = model;
            }
            '''
            js_code = js_code.replace('[model_id]', self._model_id)
            js_code = js_code.replace('[props]', simplejson.dumps(self._props))
            display(IPython.display.Javascript(js_code))


    def show(self):
        from google.colab import output as colab_output  # pylint: disable=import-error
        colab_output.register_callback('reactopya.{}'.format(self._model_id), self._handle_callback)

        js_code = '''
        {
            function try_show() {
                if (window.reactopya_bundle_status == 'loaded') {
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['show'], {});
                    return;
                }
                else if (window.reactopya_bundle_status == 'loading') {
                    setTimeout(try_show ,1000);
                    return;
                }
                else {
                    window.reactopya_bundle_status = 'loading';
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['load_bundle_and_show'], {});
                }
            }
            try_show();
        }
        '''
        js_code = js_code.replace('[model_id]', self._model_id)
        display(IPython.display.Javascript(js_code))


class NWBBrowser:
    """Colab widget for NWBBrowser"""

    def __init__(self, **kwargs):
        super().__init__()
        self._model_id = uuid.uuid4().hex.upper()
        self._X = NWBBrowserOrig()
        self._X.on_python_state_changed(self._handle_python_state_changed)
        self._model = ReactopyaColabWidgetModelPy(self._model_id)
        self._props = dict(**kwargs)

    def _handle_python_state_changed(self):
        for key in ['object', 'status', 'status_message']:
            val = self._X.get_python_state(key, None)
            self._model.set(key, _json_stringify(val), sync=True)

    def _handle_callback(self, command, *, changes=None):
        if command == 'save_changes':
            state = dict()
            for key, val in changes.items():
                self._model.set(key, val)
                state[key] = simplejson.loads(val)
            self._X._handle_javascript_state_changed(state)
        elif command == 'load_bundle_and_show':
            dirname = os.path.dirname(os.path.realpath(__file__))
            fname = os.path.join(dirname, 'dist', 'bundle.js')
            with open(fname, 'r') as f:
                js = f.read()
            display(IPython.display.Javascript(js))
            self._handle_callback('show')
        elif command == 'show':
            js_code = '''
            {
                window.reactopya_bundle_status = 'loaded';
                let props0 = [props];
                function onSaveChanges(changes) {
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['save_changes'], {changes: changes});
                }
                let model = window.reactopya_colab.widgets.NWBBrowser.render(props0, onSaveChanges);
                if (!window.reactopya_colab_widget_models)
                    window.reactopya_colab_widget_models = {};
                window.reactopya_colab_widget_models['[model_id]'] = model;
            }
            '''
            js_code = js_code.replace('[model_id]', self._model_id)
            js_code = js_code.replace('[props]', simplejson.dumps(self._props))
            display(IPython.display.Javascript(js_code))


    def show(self):
        from google.colab import output as colab_output  # pylint: disable=import-error
        colab_output.register_callback('reactopya.{}'.format(self._model_id), self._handle_callback)

        js_code = '''
        {
            function try_show() {
                if (window.reactopya_bundle_status == 'loaded') {
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['show'], {});
                    return;
                }
                else if (window.reactopya_bundle_status == 'loading') {
                    setTimeout(try_show ,1000);
                    return;
                }
                else {
                    window.reactopya_bundle_status = 'loading';
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['load_bundle_and_show'], {});
                }
            }
            try_show();
        }
        '''
        js_code = js_code.replace('[model_id]', self._model_id)
        display(IPython.display.Javascript(js_code))


class AnimalPosition2:
    """Colab widget for AnimalPosition2"""

    def __init__(self, **kwargs):
        super().__init__()
        self._model_id = uuid.uuid4().hex.upper()
        self._X = AnimalPosition2Orig()
        self._X.on_python_state_changed(self._handle_python_state_changed)
        self._model = ReactopyaColabWidgetModelPy(self._model_id)
        self._props = dict(**kwargs)

    def _handle_python_state_changed(self):
        for key in ['positions', 'timestamps', 'status', 'status_message']:
            val = self._X.get_python_state(key, None)
            self._model.set(key, _json_stringify(val), sync=True)

    def _handle_callback(self, command, *, changes=None):
        if command == 'save_changes':
            state = dict()
            for key, val in changes.items():
                self._model.set(key, val)
                state[key] = simplejson.loads(val)
            self._X._handle_javascript_state_changed(state)
        elif command == 'load_bundle_and_show':
            dirname = os.path.dirname(os.path.realpath(__file__))
            fname = os.path.join(dirname, 'dist', 'bundle.js')
            with open(fname, 'r') as f:
                js = f.read()
            display(IPython.display.Javascript(js))
            self._handle_callback('show')
        elif command == 'show':
            js_code = '''
            {
                window.reactopya_bundle_status = 'loaded';
                let props0 = [props];
                function onSaveChanges(changes) {
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['save_changes'], {changes: changes});
                }
                let model = window.reactopya_colab.widgets.AnimalPosition2.render(props0, onSaveChanges);
                if (!window.reactopya_colab_widget_models)
                    window.reactopya_colab_widget_models = {};
                window.reactopya_colab_widget_models['[model_id]'] = model;
            }
            '''
            js_code = js_code.replace('[model_id]', self._model_id)
            js_code = js_code.replace('[props]', simplejson.dumps(self._props))
            display(IPython.display.Javascript(js_code))


    def show(self):
        from google.colab import output as colab_output  # pylint: disable=import-error
        colab_output.register_callback('reactopya.{}'.format(self._model_id), self._handle_callback)

        js_code = '''
        {
            function try_show() {
                if (window.reactopya_bundle_status == 'loaded') {
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['show'], {});
                    return;
                }
                else if (window.reactopya_bundle_status == 'loading') {
                    setTimeout(try_show ,1000);
                    return;
                }
                else {
                    window.reactopya_bundle_status = 'loading';
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['load_bundle_and_show'], {});
                }
            }
            try_show();
        }
        '''
        js_code = js_code.replace('[model_id]', self._model_id)
        display(IPython.display.Javascript(js_code))


class ElectrodeGeometry:
    """Colab widget for ElectrodeGeometry"""

    def __init__(self, **kwargs):
        super().__init__()
        self._model_id = uuid.uuid4().hex.upper()
        self._X = ElectrodeGeometryOrig()
        self._X.on_python_state_changed(self._handle_python_state_changed)
        self._model = ReactopyaColabWidgetModelPy(self._model_id)
        self._props = dict(**kwargs)

    def _handle_python_state_changed(self):
        for key in ['locations', 'labels', 'status', 'status_message']:
            val = self._X.get_python_state(key, None)
            self._model.set(key, _json_stringify(val), sync=True)

    def _handle_callback(self, command, *, changes=None):
        if command == 'save_changes':
            state = dict()
            for key, val in changes.items():
                self._model.set(key, val)
                state[key] = simplejson.loads(val)
            self._X._handle_javascript_state_changed(state)
        elif command == 'load_bundle_and_show':
            dirname = os.path.dirname(os.path.realpath(__file__))
            fname = os.path.join(dirname, 'dist', 'bundle.js')
            with open(fname, 'r') as f:
                js = f.read()
            display(IPython.display.Javascript(js))
            self._handle_callback('show')
        elif command == 'show':
            js_code = '''
            {
                window.reactopya_bundle_status = 'loaded';
                let props0 = [props];
                function onSaveChanges(changes) {
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['save_changes'], {changes: changes});
                }
                let model = window.reactopya_colab.widgets.ElectrodeGeometry.render(props0, onSaveChanges);
                if (!window.reactopya_colab_widget_models)
                    window.reactopya_colab_widget_models = {};
                window.reactopya_colab_widget_models['[model_id]'] = model;
            }
            '''
            js_code = js_code.replace('[model_id]', self._model_id)
            js_code = js_code.replace('[props]', simplejson.dumps(self._props))
            display(IPython.display.Javascript(js_code))


    def show(self):
        from google.colab import output as colab_output  # pylint: disable=import-error
        colab_output.register_callback('reactopya.{}'.format(self._model_id), self._handle_callback)

        js_code = '''
        {
            function try_show() {
                if (window.reactopya_bundle_status == 'loaded') {
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['show'], {});
                    return;
                }
                else if (window.reactopya_bundle_status == 'loading') {
                    setTimeout(try_show ,1000);
                    return;
                }
                else {
                    window.reactopya_bundle_status = 'loading';
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['load_bundle_and_show'], {});
                }
            }
            try_show();
        }
        '''
        js_code = js_code.replace('[model_id]', self._model_id)
        display(IPython.display.Javascript(js_code))


class TimeseriesView:
    """Colab widget for TimeseriesView"""

    def __init__(self, **kwargs):
        super().__init__()
        self._model_id = uuid.uuid4().hex.upper()
        self._X = TimeseriesViewOrig()
        self._X.on_python_state_changed(self._handle_python_state_changed)
        self._model = ReactopyaColabWidgetModelPy(self._model_id)
        self._props = dict(**kwargs)

    def _handle_python_state_changed(self):
        for key in ['status', 'statusMessage', 'numChannels', 'numTimepoints', 'samplerate']:
            val = self._X.get_python_state(key, None)
            self._model.set(key, _json_stringify(val), sync=True)

    def _handle_callback(self, command, *, changes=None):
        if command == 'save_changes':
            state = dict()
            for key, val in changes.items():
                self._model.set(key, val)
                state[key] = simplejson.loads(val)
            self._X._handle_javascript_state_changed(state)
        elif command == 'load_bundle_and_show':
            dirname = os.path.dirname(os.path.realpath(__file__))
            fname = os.path.join(dirname, 'dist', 'bundle.js')
            with open(fname, 'r') as f:
                js = f.read()
            display(IPython.display.Javascript(js))
            self._handle_callback('show')
        elif command == 'show':
            js_code = '''
            {
                window.reactopya_bundle_status = 'loaded';
                let props0 = [props];
                function onSaveChanges(changes) {
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['save_changes'], {changes: changes});
                }
                let model = window.reactopya_colab.widgets.TimeseriesView.render(props0, onSaveChanges);
                if (!window.reactopya_colab_widget_models)
                    window.reactopya_colab_widget_models = {};
                window.reactopya_colab_widget_models['[model_id]'] = model;
            }
            '''
            js_code = js_code.replace('[model_id]', self._model_id)
            js_code = js_code.replace('[props]', simplejson.dumps(self._props))
            display(IPython.display.Javascript(js_code))


    def show(self):
        from google.colab import output as colab_output  # pylint: disable=import-error
        colab_output.register_callback('reactopya.{}'.format(self._model_id), self._handle_callback)

        js_code = '''
        {
            function try_show() {
                if (window.reactopya_bundle_status == 'loaded') {
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['show'], {});
                    return;
                }
                else if (window.reactopya_bundle_status == 'loading') {
                    setTimeout(try_show ,1000);
                    return;
                }
                else {
                    window.reactopya_bundle_status = 'loading';
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['load_bundle_and_show'], {});
                }
            }
            try_show();
        }
        '''
        js_code = js_code.replace('[model_id]', self._model_id)
        display(IPython.display.Javascript(js_code))


class SpikeForestAnalysis:
    """Colab widget for SpikeForestAnalysis"""

    def __init__(self, **kwargs):
        super().__init__()
        self._model_id = uuid.uuid4().hex.upper()
        self._X = SpikeForestAnalysisOrig()
        self._X.on_python_state_changed(self._handle_python_state_changed)
        self._model = ReactopyaColabWidgetModelPy(self._model_id)
        self._props = dict(**kwargs)

    def _handle_python_state_changed(self):
        for key in ['object', 'status', 'status_message']:
            val = self._X.get_python_state(key, None)
            self._model.set(key, _json_stringify(val), sync=True)

    def _handle_callback(self, command, *, changes=None):
        if command == 'save_changes':
            state = dict()
            for key, val in changes.items():
                self._model.set(key, val)
                state[key] = simplejson.loads(val)
            self._X._handle_javascript_state_changed(state)
        elif command == 'load_bundle_and_show':
            dirname = os.path.dirname(os.path.realpath(__file__))
            fname = os.path.join(dirname, 'dist', 'bundle.js')
            with open(fname, 'r') as f:
                js = f.read()
            display(IPython.display.Javascript(js))
            self._handle_callback('show')
        elif command == 'show':
            js_code = '''
            {
                window.reactopya_bundle_status = 'loaded';
                let props0 = [props];
                function onSaveChanges(changes) {
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['save_changes'], {changes: changes});
                }
                let model = window.reactopya_colab.widgets.SpikeForestAnalysis.render(props0, onSaveChanges);
                if (!window.reactopya_colab_widget_models)
                    window.reactopya_colab_widget_models = {};
                window.reactopya_colab_widget_models['[model_id]'] = model;
            }
            '''
            js_code = js_code.replace('[model_id]', self._model_id)
            js_code = js_code.replace('[props]', simplejson.dumps(self._props))
            display(IPython.display.Javascript(js_code))


    def show(self):
        from google.colab import output as colab_output  # pylint: disable=import-error
        colab_output.register_callback('reactopya.{}'.format(self._model_id), self._handle_callback)

        js_code = '''
        {
            function try_show() {
                if (window.reactopya_bundle_status == 'loaded') {
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['show'], {});
                    return;
                }
                else if (window.reactopya_bundle_status == 'loading') {
                    setTimeout(try_show ,1000);
                    return;
                }
                else {
                    window.reactopya_bundle_status = 'loading';
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['load_bundle_and_show'], {});
                }
            }
            try_show();
        }
        '''
        js_code = js_code.replace('[model_id]', self._model_id)
        display(IPython.display.Javascript(js_code))



class ReactopyaColabWidgetModelPy:
    def __init__(self, model_id):
        self._model_id = model_id
        self._data = dict()  # values are all strings
        self._change_handlers = dict()
    def set(self, key, val, *, sync=False):
        if key in self._data:
            if self._data[key] == val:
                return
        self._data[key] = val
        if key in self._change_handlers:
            for handler in self._change_handlers[key]:
                handler()
        if sync:
            js_code = '''
            window.reactopya_colab_widget_models['[model_id]'].set('[key]', atob('[value_b64]'));
            '''
            value_b64 = base64.b64encode(val.encode('utf-8')).decode()
            js_code = js_code.replace('[model_id]', self._model_id)
            js_code = js_code.replace('[key]', key)
            js_code = js_code.replace('[value_b64]', value_b64)
            display(IPython.display.Javascript(js_code))
    def get(self, key, defaultval):
        if key not in self._data:
            return defaultval
        return self._data[key]
    def onChange(self, key, handler):
        if key not in self._change_handlers:
            self._change_handlers[key] = []
        self._change_handlers[key].append(handler)