# coding: utf-8

"""
    ACI Services API

    API for methods pertaining to all ACI services  # noqa: E501

    OpenAPI spec version: 2.0.7
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class VehicleOwnershipActivity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accident_event': 'bool',
        'duration': 'str',
        'end': 'date',
        'sequence_number': 'int',
        'start': 'date',
        'state': 'str',
        'year_purchased': 'int'
    }

    attribute_map = {
        'accident_event': 'accidentEvent',
        'duration': 'duration',
        'end': 'end',
        'sequence_number': 'sequenceNumber',
        'start': 'start',
        'state': 'state',
        'year_purchased': 'yearPurchased'
    }

    def __init__(self, accident_event=None, duration=None, end=None, sequence_number=None, start=None, state=None, year_purchased=None):  # noqa: E501
        """VehicleOwnershipActivity - a model defined in Swagger"""  # noqa: E501

        self._accident_event = None
        self._duration = None
        self._end = None
        self._sequence_number = None
        self._start = None
        self._state = None
        self._year_purchased = None
        self.discriminator = None

        if accident_event is not None:
            self.accident_event = accident_event
        if duration is not None:
            self.duration = duration
        if end is not None:
            self.end = end
        if sequence_number is not None:
            self.sequence_number = sequence_number
        if start is not None:
            self.start = start
        if state is not None:
            self.state = state
        if year_purchased is not None:
            self.year_purchased = year_purchased

    @property
    def accident_event(self):
        """Gets the accident_event of this VehicleOwnershipActivity.  # noqa: E501

        indicates if this owner had any accident related activity with this vehicle  # noqa: E501

        :return: The accident_event of this VehicleOwnershipActivity.  # noqa: E501
        :rtype: bool
        """
        return self._accident_event

    @accident_event.setter
    def accident_event(self, accident_event):
        """Sets the accident_event of this VehicleOwnershipActivity.

        indicates if this owner had any accident related activity with this vehicle  # noqa: E501

        :param accident_event: The accident_event of this VehicleOwnershipActivity.  # noqa: E501
        :type: bool
        """

        self._accident_event = accident_event

    @property
    def duration(self):
        """Gets the duration of this VehicleOwnershipActivity.  # noqa: E501

        the duration of ownership  # noqa: E501

        :return: The duration of this VehicleOwnershipActivity.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this VehicleOwnershipActivity.

        the duration of ownership  # noqa: E501

        :param duration: The duration of this VehicleOwnershipActivity.  # noqa: E501
        :type: str
        """

        self._duration = duration

    @property
    def end(self):
        """Gets the end of this VehicleOwnershipActivity.  # noqa: E501

        the date ownership ended  # noqa: E501

        :return: The end of this VehicleOwnershipActivity.  # noqa: E501
        :rtype: date
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this VehicleOwnershipActivity.

        the date ownership ended  # noqa: E501

        :param end: The end of this VehicleOwnershipActivity.  # noqa: E501
        :type: date
        """

        self._end = end

    @property
    def sequence_number(self):
        """Gets the sequence_number of this VehicleOwnershipActivity.  # noqa: E501

        the sequence number  # noqa: E501

        :return: The sequence_number of this VehicleOwnershipActivity.  # noqa: E501
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this VehicleOwnershipActivity.

        the sequence number  # noqa: E501

        :param sequence_number: The sequence_number of this VehicleOwnershipActivity.  # noqa: E501
        :type: int
        """

        self._sequence_number = sequence_number

    @property
    def start(self):
        """Gets the start of this VehicleOwnershipActivity.  # noqa: E501

        the date ownership started  # noqa: E501

        :return: The start of this VehicleOwnershipActivity.  # noqa: E501
        :rtype: date
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this VehicleOwnershipActivity.

        the date ownership started  # noqa: E501

        :param start: The start of this VehicleOwnershipActivity.  # noqa: E501
        :type: date
        """

        self._start = start

    @property
    def state(self):
        """Gets the state of this VehicleOwnershipActivity.  # noqa: E501

        the state in which the ownership occurred  # noqa: E501

        :return: The state of this VehicleOwnershipActivity.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this VehicleOwnershipActivity.

        the state in which the ownership occurred  # noqa: E501

        :param state: The state of this VehicleOwnershipActivity.  # noqa: E501
        :type: str
        """
        if state is not None and len(state) > 2:
            raise ValueError("Invalid value for `state`, length must be less than or equal to `2`")  # noqa: E501

        self._state = state

    @property
    def year_purchased(self):
        """Gets the year_purchased of this VehicleOwnershipActivity.  # noqa: E501

        the year this owner purchased the vehicle  # noqa: E501

        :return: The year_purchased of this VehicleOwnershipActivity.  # noqa: E501
        :rtype: int
        """
        return self._year_purchased

    @year_purchased.setter
    def year_purchased(self, year_purchased):
        """Sets the year_purchased of this VehicleOwnershipActivity.

        the year this owner purchased the vehicle  # noqa: E501

        :param year_purchased: The year_purchased of this VehicleOwnershipActivity.  # noqa: E501
        :type: int
        """

        self._year_purchased = year_purchased

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VehicleOwnershipActivity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
