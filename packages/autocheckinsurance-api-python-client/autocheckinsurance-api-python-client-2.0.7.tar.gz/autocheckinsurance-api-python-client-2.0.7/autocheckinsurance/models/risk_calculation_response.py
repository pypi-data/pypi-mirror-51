# coding: utf-8

"""
    ACI Services API

    API for methods pertaining to all ACI services  # noqa: E501

    OpenAPI spec version: 2.0.7
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from autocheckinsurance.models.unprocessed_risk_calculation_requests import UnprocessedRiskCalculationRequests  # noqa: F401,E501
from autocheckinsurance.models.vehicle_risk_result import VehicleRiskResult  # noqa: F401,E501


class RiskCalculationResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'unprocessed': 'UnprocessedRiskCalculationRequests',
        'vehicle_risk_results': 'list[VehicleRiskResult]'
    }

    attribute_map = {
        'type': 'type',
        'unprocessed': 'unprocessed',
        'vehicle_risk_results': 'vehicleRiskResults'
    }

    def __init__(self, type=None, unprocessed=None, vehicle_risk_results=None):  # noqa: E501
        """RiskCalculationResponse - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._unprocessed = None
        self._vehicle_risk_results = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if unprocessed is not None:
            self.unprocessed = unprocessed
        if vehicle_risk_results is not None:
            self.vehicle_risk_results = vehicle_risk_results

    @property
    def type(self):
        """Gets the type of this RiskCalculationResponse.  # noqa: E501

        The risk prediction type used  # noqa: E501

        :return: The type of this RiskCalculationResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RiskCalculationResponse.

        The risk prediction type used  # noqa: E501

        :param type: The type of this RiskCalculationResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["Default", "CA", "FL", "SC", "NM", "AZ"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def unprocessed(self):
        """Gets the unprocessed of this RiskCalculationResponse.  # noqa: E501


        :return: The unprocessed of this RiskCalculationResponse.  # noqa: E501
        :rtype: UnprocessedRiskCalculationRequests
        """
        return self._unprocessed

    @unprocessed.setter
    def unprocessed(self, unprocessed):
        """Sets the unprocessed of this RiskCalculationResponse.


        :param unprocessed: The unprocessed of this RiskCalculationResponse.  # noqa: E501
        :type: UnprocessedRiskCalculationRequests
        """

        self._unprocessed = unprocessed

    @property
    def vehicle_risk_results(self):
        """Gets the vehicle_risk_results of this RiskCalculationResponse.  # noqa: E501

        the list of results for each vehicle identification numbers/effective end date combination  # noqa: E501

        :return: The vehicle_risk_results of this RiskCalculationResponse.  # noqa: E501
        :rtype: list[VehicleRiskResult]
        """
        return self._vehicle_risk_results

    @vehicle_risk_results.setter
    def vehicle_risk_results(self, vehicle_risk_results):
        """Sets the vehicle_risk_results of this RiskCalculationResponse.

        the list of results for each vehicle identification numbers/effective end date combination  # noqa: E501

        :param vehicle_risk_results: The vehicle_risk_results of this RiskCalculationResponse.  # noqa: E501
        :type: list[VehicleRiskResult]
        """

        self._vehicle_risk_results = vehicle_risk_results

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RiskCalculationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
