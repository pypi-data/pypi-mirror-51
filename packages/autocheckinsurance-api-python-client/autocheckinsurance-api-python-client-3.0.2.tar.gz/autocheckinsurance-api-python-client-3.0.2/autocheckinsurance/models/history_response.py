# coding: utf-8

"""
    ACI Services API

    API for methods pertaining to all ACI services  # noqa: E501

    OpenAPI spec version: 3.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from autocheckinsurance.models.unprocessed_history_requests import UnprocessedHistoryRequests  # noqa: F401,E501
from autocheckinsurance.models.vehicle import Vehicle  # noqa: F401,E501


class HistoryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count': 'int',
        'level': 'str',
        'unprocessed': 'UnprocessedHistoryRequests',
        'vehicles': 'list[Vehicle]'
    }

    attribute_map = {
        'count': 'count',
        'level': 'level',
        'unprocessed': 'unprocessed',
        'vehicles': 'vehicles'
    }

    def __init__(self, count=None, level=None, unprocessed=None, vehicles=None):  # noqa: E501
        """HistoryResponse - a model defined in Swagger"""  # noqa: E501

        self._count = None
        self._level = None
        self._unprocessed = None
        self._vehicles = None
        self.discriminator = None

        if count is not None:
            self.count = count
        if level is not None:
            self.level = level
        if unprocessed is not None:
            self.unprocessed = unprocessed
        if vehicles is not None:
            self.vehicles = vehicles

    @property
    def count(self):
        """Gets the count of this HistoryResponse.  # noqa: E501

        the number of vehicles returned  # noqa: E501

        :return: The count of this HistoryResponse.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this HistoryResponse.

        the number of vehicles returned  # noqa: E501

        :param count: The count of this HistoryResponse.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def level(self):
        """Gets the level of this HistoryResponse.  # noqa: E501

        the history level returned  # noqa: E501

        :return: The level of this HistoryResponse.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this HistoryResponse.

        the history level returned  # noqa: E501

        :param level: The level of this HistoryResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["FULL"]  # noqa: E501
        if level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"  # noqa: E501
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def unprocessed(self):
        """Gets the unprocessed of this HistoryResponse.  # noqa: E501


        :return: The unprocessed of this HistoryResponse.  # noqa: E501
        :rtype: UnprocessedHistoryRequests
        """
        return self._unprocessed

    @unprocessed.setter
    def unprocessed(self, unprocessed):
        """Sets the unprocessed of this HistoryResponse.


        :param unprocessed: The unprocessed of this HistoryResponse.  # noqa: E501
        :type: UnprocessedHistoryRequests
        """

        self._unprocessed = unprocessed

    @property
    def vehicles(self):
        """Gets the vehicles of this HistoryResponse.  # noqa: E501

        the list of vehicles returned  # noqa: E501

        :return: The vehicles of this HistoryResponse.  # noqa: E501
        :rtype: list[Vehicle]
        """
        return self._vehicles

    @vehicles.setter
    def vehicles(self, vehicles):
        """Sets the vehicles of this HistoryResponse.

        the list of vehicles returned  # noqa: E501

        :param vehicles: The vehicles of this HistoryResponse.  # noqa: E501
        :type: list[Vehicle]
        """

        self._vehicles = vehicles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HistoryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
