# coding: utf-8

"""
    ACI Services API

    API for methods pertaining to all ACI services  # noqa: E501

    OpenAPI spec version: 3.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RecallRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'consequence': 'bool',
        '_date': 'date',
        'nhtsa_campaign_number': 'str',
        'remedy': 'str',
        'status': 'str',
        'summary': 'str',
        'title': 'str'
    }

    attribute_map = {
        'consequence': 'consequence',
        '_date': 'date',
        'nhtsa_campaign_number': 'nhtsaCampaignNumber',
        'remedy': 'remedy',
        'status': 'status',
        'summary': 'summary',
        'title': 'title'
    }

    def __init__(self, consequence=None, _date=None, nhtsa_campaign_number=None, remedy=None, status=None, summary=None, title=None):  # noqa: E501
        """RecallRecord - a model defined in Swagger"""  # noqa: E501

        self._consequence = None
        self.__date = None
        self._nhtsa_campaign_number = None
        self._remedy = None
        self._status = None
        self._summary = None
        self._title = None
        self.discriminator = None

        if consequence is not None:
            self.consequence = consequence
        if _date is not None:
            self._date = _date
        if nhtsa_campaign_number is not None:
            self.nhtsa_campaign_number = nhtsa_campaign_number
        if remedy is not None:
            self.remedy = remedy
        if status is not None:
            self.status = status
        if summary is not None:
            self.summary = summary
        if title is not None:
            self.title = title

    @property
    def consequence(self):
        """Gets the consequence of this RecallRecord.  # noqa: E501

        the consequence of the recall  # noqa: E501

        :return: The consequence of this RecallRecord.  # noqa: E501
        :rtype: bool
        """
        return self._consequence

    @consequence.setter
    def consequence(self, consequence):
        """Sets the consequence of this RecallRecord.

        the consequence of the recall  # noqa: E501

        :param consequence: The consequence of this RecallRecord.  # noqa: E501
        :type: bool
        """

        self._consequence = consequence

    @property
    def _date(self):
        """Gets the _date of this RecallRecord.  # noqa: E501

        the date of the recall  # noqa: E501

        :return: The _date of this RecallRecord.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this RecallRecord.

        the date of the recall  # noqa: E501

        :param _date: The _date of this RecallRecord.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def nhtsa_campaign_number(self):
        """Gets the nhtsa_campaign_number of this RecallRecord.  # noqa: E501

        the NHTSA compaign number  # noqa: E501

        :return: The nhtsa_campaign_number of this RecallRecord.  # noqa: E501
        :rtype: str
        """
        return self._nhtsa_campaign_number

    @nhtsa_campaign_number.setter
    def nhtsa_campaign_number(self, nhtsa_campaign_number):
        """Sets the nhtsa_campaign_number of this RecallRecord.

        the NHTSA compaign number  # noqa: E501

        :param nhtsa_campaign_number: The nhtsa_campaign_number of this RecallRecord.  # noqa: E501
        :type: str
        """

        self._nhtsa_campaign_number = nhtsa_campaign_number

    @property
    def remedy(self):
        """Gets the remedy of this RecallRecord.  # noqa: E501

        the remedy for the recall  # noqa: E501

        :return: The remedy of this RecallRecord.  # noqa: E501
        :rtype: str
        """
        return self._remedy

    @remedy.setter
    def remedy(self, remedy):
        """Sets the remedy of this RecallRecord.

        the remedy for the recall  # noqa: E501

        :param remedy: The remedy of this RecallRecord.  # noqa: E501
        :type: str
        """

        self._remedy = remedy

    @property
    def status(self):
        """Gets the status of this RecallRecord.  # noqa: E501

        the status of the recall  # noqa: E501

        :return: The status of this RecallRecord.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RecallRecord.

        the status of the recall  # noqa: E501

        :param status: The status of this RecallRecord.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def summary(self):
        """Gets the summary of this RecallRecord.  # noqa: E501

        the recall summary  # noqa: E501

        :return: The summary of this RecallRecord.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this RecallRecord.

        the recall summary  # noqa: E501

        :param summary: The summary of this RecallRecord.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def title(self):
        """Gets the title of this RecallRecord.  # noqa: E501

        the recall title  # noqa: E501

        :return: The title of this RecallRecord.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this RecallRecord.

        the recall title  # noqa: E501

        :param title: The title of this RecallRecord.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecallRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
