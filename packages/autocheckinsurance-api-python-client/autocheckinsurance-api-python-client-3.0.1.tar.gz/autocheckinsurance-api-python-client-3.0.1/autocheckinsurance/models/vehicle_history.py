# coding: utf-8

"""
    ACI Services API

    API for methods pertaining to all ACI services  # noqa: E501

    OpenAPI spec version: 3.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from autocheckinsurance.models.history_record import HistoryRecord  # noqa: F401,E501


class VehicleHistory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accident_count': 'int',
        'assured': 'bool',
        'bbp': 'str',
        'condition_rpt': 'bool',
        'count': 'int',
        'estimated_average_miles': 'int',
        'history_records': 'list[HistoryRecord]',
        'last_odometer': 'int',
        'mixed_odometer': 'bool',
        'odometer': 'bool',
        'recall_count': 'int',
        'recall_data_available': 'bool',
        'rollback': 'bool'
    }

    attribute_map = {
        'accident_count': 'accidentCount',
        'assured': 'assured',
        'bbp': 'bbp',
        'condition_rpt': 'conditionRpt',
        'count': 'count',
        'estimated_average_miles': 'estimatedAverageMiles',
        'history_records': 'historyRecords',
        'last_odometer': 'lastOdometer',
        'mixed_odometer': 'mixedOdometer',
        'odometer': 'odometer',
        'recall_count': 'recallCount',
        'recall_data_available': 'recallDataAvailable',
        'rollback': 'rollback'
    }

    def __init__(self, accident_count=None, assured=None, bbp=None, condition_rpt=None, count=None, estimated_average_miles=None, history_records=None, last_odometer=None, mixed_odometer=None, odometer=None, recall_count=None, recall_data_available=None, rollback=None):  # noqa: E501
        """VehicleHistory - a model defined in Swagger"""  # noqa: E501

        self._accident_count = None
        self._assured = None
        self._bbp = None
        self._condition_rpt = None
        self._count = None
        self._estimated_average_miles = None
        self._history_records = None
        self._last_odometer = None
        self._mixed_odometer = None
        self._odometer = None
        self._recall_count = None
        self._recall_data_available = None
        self._rollback = None
        self.discriminator = None

        if accident_count is not None:
            self.accident_count = accident_count
        if assured is not None:
            self.assured = assured
        if bbp is not None:
            self.bbp = bbp
        if condition_rpt is not None:
            self.condition_rpt = condition_rpt
        if count is not None:
            self.count = count
        if estimated_average_miles is not None:
            self.estimated_average_miles = estimated_average_miles
        if history_records is not None:
            self.history_records = history_records
        if last_odometer is not None:
            self.last_odometer = last_odometer
        if mixed_odometer is not None:
            self.mixed_odometer = mixed_odometer
        if odometer is not None:
            self.odometer = odometer
        if recall_count is not None:
            self.recall_count = recall_count
        if recall_data_available is not None:
            self.recall_data_available = recall_data_available
        if rollback is not None:
            self.rollback = rollback

    @property
    def accident_count(self):
        """Gets the accident_count of this VehicleHistory.  # noqa: E501

        the number of accidents  # noqa: E501

        :return: The accident_count of this VehicleHistory.  # noqa: E501
        :rtype: int
        """
        return self._accident_count

    @accident_count.setter
    def accident_count(self, accident_count):
        """Sets the accident_count of this VehicleHistory.

        the number of accidents  # noqa: E501

        :param accident_count: The accident_count of this VehicleHistory.  # noqa: E501
        :type: int
        """

        self._accident_count = accident_count

    @property
    def assured(self):
        """Gets the assured of this VehicleHistory.  # noqa: E501

        if the vehicle is considered to be AutoCheck Assured or not. If this feature is not paid for or no data is available, the attribute will not be displayed via the xml  # noqa: E501

        :return: The assured of this VehicleHistory.  # noqa: E501
        :rtype: bool
        """
        return self._assured

    @assured.setter
    def assured(self, assured):
        """Sets the assured of this VehicleHistory.

        if the vehicle is considered to be AutoCheck Assured or not. If this feature is not paid for or no data is available, the attribute will not be displayed via the xml  # noqa: E501

        :param assured: The assured of this VehicleHistory.  # noqa: E501
        :type: bool
        """

        self._assured = assured

    @property
    def bbp(self):
        """Gets the bbp of this VehicleHistory.  # noqa: E501

        Decides the BBP badge to be displayed on report. This attribute will not be displayed if the Assured feature is not paid for or if the VIN has no history  # noqa: E501

        :return: The bbp of this VehicleHistory.  # noqa: E501
        :rtype: str
        """
        return self._bbp

    @bbp.setter
    def bbp(self, bbp):
        """Sets the bbp of this VehicleHistory.

        Decides the BBP badge to be displayed on report. This attribute will not be displayed if the Assured feature is not paid for or if the VIN has no history  # noqa: E501

        :param bbp: The bbp of this VehicleHistory.  # noqa: E501
        :type: str
        """
        allowed_values = ["0", "1", "3"]  # noqa: E501
        if bbp not in allowed_values:
            raise ValueError(
                "Invalid value for `bbp` ({0}), must be one of {1}"  # noqa: E501
                .format(bbp, allowed_values)
            )

        self._bbp = bbp

    @property
    def condition_rpt(self):
        """Gets the condition_rpt of this VehicleHistory.  # noqa: E501

        if a condition report is available for a vehicle. If this feature is not paid for or no data is available, the attribute will not be displayed via the xml. When a condition report is available for the vehicle then the Condition report URL will be displayed in the history HDATA event section  # noqa: E501

        :return: The condition_rpt of this VehicleHistory.  # noqa: E501
        :rtype: bool
        """
        return self._condition_rpt

    @condition_rpt.setter
    def condition_rpt(self, condition_rpt):
        """Sets the condition_rpt of this VehicleHistory.

        if a condition report is available for a vehicle. If this feature is not paid for or no data is available, the attribute will not be displayed via the xml. When a condition report is available for the vehicle then the Condition report URL will be displayed in the history HDATA event section  # noqa: E501

        :param condition_rpt: The condition_rpt of this VehicleHistory.  # noqa: E501
        :type: bool
        """

        self._condition_rpt = condition_rpt

    @property
    def count(self):
        """Gets the count of this VehicleHistory.  # noqa: E501

        the number of historical activity records  # noqa: E501

        :return: The count of this VehicleHistory.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this VehicleHistory.

        the number of historical activity records  # noqa: E501

        :param count: The count of this VehicleHistory.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def estimated_average_miles(self):
        """Gets the estimated_average_miles of this VehicleHistory.  # noqa: E501

        the estimated average miles  # noqa: E501

        :return: The estimated_average_miles of this VehicleHistory.  # noqa: E501
        :rtype: int
        """
        return self._estimated_average_miles

    @estimated_average_miles.setter
    def estimated_average_miles(self, estimated_average_miles):
        """Sets the estimated_average_miles of this VehicleHistory.

        the estimated average miles  # noqa: E501

        :param estimated_average_miles: The estimated_average_miles of this VehicleHistory.  # noqa: E501
        :type: int
        """

        self._estimated_average_miles = estimated_average_miles

    @property
    def history_records(self):
        """Gets the history_records of this VehicleHistory.  # noqa: E501

        the list of historical activity for the vehicle  # noqa: E501

        :return: The history_records of this VehicleHistory.  # noqa: E501
        :rtype: list[HistoryRecord]
        """
        return self._history_records

    @history_records.setter
    def history_records(self, history_records):
        """Sets the history_records of this VehicleHistory.

        the list of historical activity for the vehicle  # noqa: E501

        :param history_records: The history_records of this VehicleHistory.  # noqa: E501
        :type: list[HistoryRecord]
        """

        self._history_records = history_records

    @property
    def last_odometer(self):
        """Gets the last_odometer of this VehicleHistory.  # noqa: E501

        the last odometer reading  # noqa: E501

        :return: The last_odometer of this VehicleHistory.  # noqa: E501
        :rtype: int
        """
        return self._last_odometer

    @last_odometer.setter
    def last_odometer(self, last_odometer):
        """Sets the last_odometer of this VehicleHistory.

        the last odometer reading  # noqa: E501

        :param last_odometer: The last_odometer of this VehicleHistory.  # noqa: E501
        :type: int
        """

        self._last_odometer = last_odometer

    @property
    def mixed_odometer(self):
        """Gets the mixed_odometer of this VehicleHistory.  # noqa: E501

        indicates a mixed odometer  # noqa: E501

        :return: The mixed_odometer of this VehicleHistory.  # noqa: E501
        :rtype: bool
        """
        return self._mixed_odometer

    @mixed_odometer.setter
    def mixed_odometer(self, mixed_odometer):
        """Sets the mixed_odometer of this VehicleHistory.

        indicates a mixed odometer  # noqa: E501

        :param mixed_odometer: The mixed_odometer of this VehicleHistory.  # noqa: E501
        :type: bool
        """

        self._mixed_odometer = mixed_odometer

    @property
    def odometer(self):
        """Gets the odometer of this VehicleHistory.  # noqa: E501

        indicates if an odometer reading exists  # noqa: E501

        :return: The odometer of this VehicleHistory.  # noqa: E501
        :rtype: bool
        """
        return self._odometer

    @odometer.setter
    def odometer(self, odometer):
        """Sets the odometer of this VehicleHistory.

        indicates if an odometer reading exists  # noqa: E501

        :param odometer: The odometer of this VehicleHistory.  # noqa: E501
        :type: bool
        """

        self._odometer = odometer

    @property
    def recall_count(self):
        """Gets the recall_count of this VehicleHistory.  # noqa: E501

        the number of recalls  # noqa: E501

        :return: The recall_count of this VehicleHistory.  # noqa: E501
        :rtype: int
        """
        return self._recall_count

    @recall_count.setter
    def recall_count(self, recall_count):
        """Sets the recall_count of this VehicleHistory.

        the number of recalls  # noqa: E501

        :param recall_count: The recall_count of this VehicleHistory.  # noqa: E501
        :type: int
        """

        self._recall_count = recall_count

    @property
    def recall_data_available(self):
        """Gets the recall_data_available of this VehicleHistory.  # noqa: E501

        indicates if recall data is available  # noqa: E501

        :return: The recall_data_available of this VehicleHistory.  # noqa: E501
        :rtype: bool
        """
        return self._recall_data_available

    @recall_data_available.setter
    def recall_data_available(self, recall_data_available):
        """Sets the recall_data_available of this VehicleHistory.

        indicates if recall data is available  # noqa: E501

        :param recall_data_available: The recall_data_available of this VehicleHistory.  # noqa: E501
        :type: bool
        """

        self._recall_data_available = recall_data_available

    @property
    def rollback(self):
        """Gets the rollback of this VehicleHistory.  # noqa: E501

        indicates if the vehicle's history determines that the odometer has been tampered with  # noqa: E501

        :return: The rollback of this VehicleHistory.  # noqa: E501
        :rtype: bool
        """
        return self._rollback

    @rollback.setter
    def rollback(self, rollback):
        """Sets the rollback of this VehicleHistory.

        indicates if the vehicle's history determines that the odometer has been tampered with  # noqa: E501

        :param rollback: The rollback of this VehicleHistory.  # noqa: E501
        :type: bool
        """

        self._rollback = rollback

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VehicleHistory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
