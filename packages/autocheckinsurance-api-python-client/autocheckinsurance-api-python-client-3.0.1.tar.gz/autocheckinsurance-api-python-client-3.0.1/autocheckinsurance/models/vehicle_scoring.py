# coding: utf-8

"""
    ACI Services API

    API for methods pertaining to all ACI services  # noqa: E501

    OpenAPI spec version: 3.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class VehicleScoring(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'age': 'int',
        'compare_score_range_high': 'int',
        'compare_score_range_low': 'int',
        'owner_count': 'int',
        'score': 'int'
    }

    attribute_map = {
        'age': 'age',
        'compare_score_range_high': 'compareScoreRangeHigh',
        'compare_score_range_low': 'compareScoreRangeLow',
        'owner_count': 'ownerCount',
        'score': 'score'
    }

    def __init__(self, age=None, compare_score_range_high=None, compare_score_range_low=None, owner_count=None, score=None):  # noqa: E501
        """VehicleScoring - a model defined in Swagger"""  # noqa: E501

        self._age = None
        self._compare_score_range_high = None
        self._compare_score_range_low = None
        self._owner_count = None
        self._score = None
        self.discriminator = None

        if age is not None:
            self.age = age
        if compare_score_range_high is not None:
            self.compare_score_range_high = compare_score_range_high
        if compare_score_range_low is not None:
            self.compare_score_range_low = compare_score_range_low
        if owner_count is not None:
            self.owner_count = owner_count
        if score is not None:
            self.score = score

    @property
    def age(self):
        """Gets the age of this VehicleScoring.  # noqa: E501

        the vehicle's age  # noqa: E501

        :return: The age of this VehicleScoring.  # noqa: E501
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this VehicleScoring.

        the vehicle's age  # noqa: E501

        :param age: The age of this VehicleScoring.  # noqa: E501
        :type: int
        """

        self._age = age

    @property
    def compare_score_range_high(self):
        """Gets the compare_score_range_high of this VehicleScoring.  # noqa: E501

        the high end of the score range  # noqa: E501

        :return: The compare_score_range_high of this VehicleScoring.  # noqa: E501
        :rtype: int
        """
        return self._compare_score_range_high

    @compare_score_range_high.setter
    def compare_score_range_high(self, compare_score_range_high):
        """Sets the compare_score_range_high of this VehicleScoring.

        the high end of the score range  # noqa: E501

        :param compare_score_range_high: The compare_score_range_high of this VehicleScoring.  # noqa: E501
        :type: int
        """

        self._compare_score_range_high = compare_score_range_high

    @property
    def compare_score_range_low(self):
        """Gets the compare_score_range_low of this VehicleScoring.  # noqa: E501

        the low end of the score range  # noqa: E501

        :return: The compare_score_range_low of this VehicleScoring.  # noqa: E501
        :rtype: int
        """
        return self._compare_score_range_low

    @compare_score_range_low.setter
    def compare_score_range_low(self, compare_score_range_low):
        """Sets the compare_score_range_low of this VehicleScoring.

        the low end of the score range  # noqa: E501

        :param compare_score_range_low: The compare_score_range_low of this VehicleScoring.  # noqa: E501
        :type: int
        """

        self._compare_score_range_low = compare_score_range_low

    @property
    def owner_count(self):
        """Gets the owner_count of this VehicleScoring.  # noqa: E501

        the number of owners  # noqa: E501

        :return: The owner_count of this VehicleScoring.  # noqa: E501
        :rtype: int
        """
        return self._owner_count

    @owner_count.setter
    def owner_count(self, owner_count):
        """Sets the owner_count of this VehicleScoring.

        the number of owners  # noqa: E501

        :param owner_count: The owner_count of this VehicleScoring.  # noqa: E501
        :type: int
        """

        self._owner_count = owner_count

    @property
    def score(self):
        """Gets the score of this VehicleScoring.  # noqa: E501

        the score of this vehicle  # noqa: E501

        :return: The score of this VehicleScoring.  # noqa: E501
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this VehicleScoring.

        the score of this vehicle  # noqa: E501

        :param score: The score of this VehicleScoring.  # noqa: E501
        :type: int
        """

        self._score = score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VehicleScoring):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
