# coding: utf-8

"""
    IBM Key Protect API

    IBM Key Protect helps you provision encrypted keys for apps across IBM Cloud. As you manage the lifecycle of your keys, you can benefit from knowing that your keys are secured by cloud-based FIPS 140-2 Level 2 hardware security modules (HSMs) that protect against theft of information. You can use the Key Protect API to store, generate, and retrieve your key material. Keys within the service can protect any type of data in your symmetric key based encryption solution.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from keyprotect.api_client import ApiClient
from keyprotect.exceptions import (
    ApiTypeError,
    ApiValueError
)


class KeysApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def action_on_key(self, bluemix_instance, id, action, key_action, **kwargs):  # noqa: E501
        """Invoke an action on a key  # noqa: E501

        Invokes an action, such as a `wrap`, `unwrap`, or `rotate` operation, on a specified root key.       **Note:** When you unwrap a wrapped data encryption key (WDEK) by using a rotated root key, the service returns a new ciphertext in the response entity-body. Each ciphertext remains available for `unwrap` actions. If you unwrap a DEK with a previous ciphertext, the service also returns the latest ciphertext in the response. Use the latest  ciphertext for future unwrap operations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_on_key(bluemix_instance, id, action, key_action, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bluemix_instance: The IBM Cloud instance ID that identifies your Key Protect service instance. (required)
        :param str id: The root key that is used as the wrapping key. It must be a v4 UUID for an active key. (required)
        :param str action: The action to perform on the specified key. (required)
        :param KeyAction key_action: The request to perform a key wrap operation. (required)
        :param str correlation_id: The v4 UUID used to correlate and track transactions.
        :param str prefer: Alters server behavior for POST or DELETE operations. A header with `return=minimal` causes the service to  return only the key identifier, or metadata. A header containing `return=representation` returns both the key  material and metadata in the response entity-body. If the key has been designated as a root key, the  system cannot return the key material.      **Note:** During POST operations, Key Protect may not immediately return the key material due to key generation time. To retrieve the key material, you can perform a subsequent `GET /keys/{id}` request.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: KeyAction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.action_on_key_with_http_info(bluemix_instance, id, action, key_action, **kwargs)  # noqa: E501

    def action_on_key_with_http_info(self, bluemix_instance, id, action, key_action, **kwargs):  # noqa: E501
        """Invoke an action on a key  # noqa: E501

        Invokes an action, such as a `wrap`, `unwrap`, or `rotate` operation, on a specified root key.       **Note:** When you unwrap a wrapped data encryption key (WDEK) by using a rotated root key, the service returns a new ciphertext in the response entity-body. Each ciphertext remains available for `unwrap` actions. If you unwrap a DEK with a previous ciphertext, the service also returns the latest ciphertext in the response. Use the latest  ciphertext for future unwrap operations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_on_key_with_http_info(bluemix_instance, id, action, key_action, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bluemix_instance: The IBM Cloud instance ID that identifies your Key Protect service instance. (required)
        :param str id: The root key that is used as the wrapping key. It must be a v4 UUID for an active key. (required)
        :param str action: The action to perform on the specified key. (required)
        :param KeyAction key_action: The request to perform a key wrap operation. (required)
        :param str correlation_id: The v4 UUID used to correlate and track transactions.
        :param str prefer: Alters server behavior for POST or DELETE operations. A header with `return=minimal` causes the service to  return only the key identifier, or metadata. A header containing `return=representation` returns both the key  material and metadata in the response entity-body. If the key has been designated as a root key, the  system cannot return the key material.      **Note:** During POST operations, Key Protect may not immediately return the key material due to key generation time. To retrieve the key material, you can perform a subsequent `GET /keys/{id}` request.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(KeyAction, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['bluemix_instance', 'id', 'action', 'key_action', 'correlation_id', 'prefer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method action_on_key" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bluemix_instance' is set
        if ('bluemix_instance' not in local_var_params or
                local_var_params['bluemix_instance'] is None):
            raise ApiValueError("Missing the required parameter `bluemix_instance` when calling `action_on_key`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ApiValueError("Missing the required parameter `id` when calling `action_on_key`")  # noqa: E501
        # verify the required parameter 'action' is set
        if ('action' not in local_var_params or
                local_var_params['action'] is None):
            raise ApiValueError("Missing the required parameter `action` when calling `action_on_key`")  # noqa: E501
        # verify the required parameter 'key_action' is set
        if ('key_action' not in local_var_params or
                local_var_params['key_action'] is None):
            raise ApiValueError("Missing the required parameter `key_action` when calling `action_on_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'action' in local_var_params:
            query_params.append(('action', local_var_params['action']))  # noqa: E501

        header_params = {}
        if 'bluemix_instance' in local_var_params:
            header_params['Bluemix-Instance'] = local_var_params['bluemix_instance']  # noqa: E501
        if 'correlation_id' in local_var_params:
            header_params['Correlation-Id'] = local_var_params['correlation_id']  # noqa: E501
        if 'prefer' in local_var_params:
            header_params['Prefer'] = local_var_params['prefer']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'key_action' in local_var_params:
            body_params = local_var_params['key_action']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/keys/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KeyAction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_key(self, bluemix_instance, create_key_collection, **kwargs):  # noqa: E501
        """Create a new key  # noqa: E501

        Creates a new key with specified key material.      Key Protect designates the resource as either a root key or a standard key based on the `extractable` value that you specify. A successful `POST /keys` operation adds the key to the service and  returns the details of the request in the response entity-body, if the Prefer header is set to  `return=representation`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_key(bluemix_instance, create_key_collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bluemix_instance: The IBM Cloud instance ID that identifies your Key Protect service instance. (required)
        :param CreateKeyCollection create_key_collection: The base request for creating a new key. (required)
        :param str correlation_id: The v4 UUID used to correlate and track transactions.
        :param str prefer: Alters server behavior for POST or DELETE operations. A header with `return=minimal` causes the service to  return only the key identifier, or metadata. A header containing `return=representation` returns both the key  material and metadata in the response entity-body. If the key has been designated as a root key, the  system cannot return the key material.      **Note:** During POST operations, Key Protect may not immediately return the key material due to key generation time. To retrieve the key material, you can perform a subsequent `GET /keys/{id}` request.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: CreateKeyCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_key_with_http_info(bluemix_instance, create_key_collection, **kwargs)  # noqa: E501

    def create_key_with_http_info(self, bluemix_instance, create_key_collection, **kwargs):  # noqa: E501
        """Create a new key  # noqa: E501

        Creates a new key with specified key material.      Key Protect designates the resource as either a root key or a standard key based on the `extractable` value that you specify. A successful `POST /keys` operation adds the key to the service and  returns the details of the request in the response entity-body, if the Prefer header is set to  `return=representation`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_key_with_http_info(bluemix_instance, create_key_collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bluemix_instance: The IBM Cloud instance ID that identifies your Key Protect service instance. (required)
        :param CreateKeyCollection create_key_collection: The base request for creating a new key. (required)
        :param str correlation_id: The v4 UUID used to correlate and track transactions.
        :param str prefer: Alters server behavior for POST or DELETE operations. A header with `return=minimal` causes the service to  return only the key identifier, or metadata. A header containing `return=representation` returns both the key  material and metadata in the response entity-body. If the key has been designated as a root key, the  system cannot return the key material.      **Note:** During POST operations, Key Protect may not immediately return the key material due to key generation time. To retrieve the key material, you can perform a subsequent `GET /keys/{id}` request.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(CreateKeyCollection, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['bluemix_instance', 'create_key_collection', 'correlation_id', 'prefer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_key" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bluemix_instance' is set
        if ('bluemix_instance' not in local_var_params or
                local_var_params['bluemix_instance'] is None):
            raise ApiValueError("Missing the required parameter `bluemix_instance` when calling `create_key`")  # noqa: E501
        # verify the required parameter 'create_key_collection' is set
        if ('create_key_collection' not in local_var_params or
                local_var_params['create_key_collection'] is None):
            raise ApiValueError("Missing the required parameter `create_key_collection` when calling `create_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'bluemix_instance' in local_var_params:
            header_params['Bluemix-Instance'] = local_var_params['bluemix_instance']  # noqa: E501
        if 'correlation_id' in local_var_params:
            header_params['Correlation-Id'] = local_var_params['correlation_id']  # noqa: E501
        if 'prefer' in local_var_params:
            header_params['Prefer'] = local_var_params['prefer']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_key_collection' in local_var_params:
            body_params = local_var_params['create_key_collection']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.ibm.kms.key+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/keys', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateKeyCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_key(self, bluemix_instance, id, **kwargs):  # noqa: E501
        """Delete a key by ID  # noqa: E501

        Deletes a key by specifying the ID of the key.    **Important:** When you delete a key, you permanently shred its contents and associated data. The action cannot be reversed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_key(bluemix_instance, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bluemix_instance: The IBM Cloud instance ID that identifies your Key Protect service instance. (required)
        :param str id: The v4 UUID that uniquely identifies the key. (required)
        :param str correlation_id: The v4 UUID used to correlate and track transactions.
        :param str prefer: Alters server behavior for POST or DELETE operations. A header with `return=minimal` causes the service to  return only the key identifier, or metadata. A header containing `return=representation` returns both the key  material and metadata in the response entity-body. If the key has been designated as a root key, the  system cannot return the key material.      **Note:** During POST operations, Key Protect may not immediately return the key material due to key generation time. To retrieve the key material, you can perform a subsequent `GET /keys/{id}` request.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DeleteKeyCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_key_with_http_info(bluemix_instance, id, **kwargs)  # noqa: E501

    def delete_key_with_http_info(self, bluemix_instance, id, **kwargs):  # noqa: E501
        """Delete a key by ID  # noqa: E501

        Deletes a key by specifying the ID of the key.    **Important:** When you delete a key, you permanently shred its contents and associated data. The action cannot be reversed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_key_with_http_info(bluemix_instance, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bluemix_instance: The IBM Cloud instance ID that identifies your Key Protect service instance. (required)
        :param str id: The v4 UUID that uniquely identifies the key. (required)
        :param str correlation_id: The v4 UUID used to correlate and track transactions.
        :param str prefer: Alters server behavior for POST or DELETE operations. A header with `return=minimal` causes the service to  return only the key identifier, or metadata. A header containing `return=representation` returns both the key  material and metadata in the response entity-body. If the key has been designated as a root key, the  system cannot return the key material.      **Note:** During POST operations, Key Protect may not immediately return the key material due to key generation time. To retrieve the key material, you can perform a subsequent `GET /keys/{id}` request.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DeleteKeyCollection, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['bluemix_instance', 'id', 'correlation_id', 'prefer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_key" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bluemix_instance' is set
        if ('bluemix_instance' not in local_var_params or
                local_var_params['bluemix_instance'] is None):
            raise ApiValueError("Missing the required parameter `bluemix_instance` when calling `delete_key`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ApiValueError("Missing the required parameter `id` when calling `delete_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'bluemix_instance' in local_var_params:
            header_params['Bluemix-Instance'] = local_var_params['bluemix_instance']  # noqa: E501
        if 'correlation_id' in local_var_params:
            header_params['Correlation-Id'] = local_var_params['correlation_id']  # noqa: E501
        if 'prefer' in local_var_params:
            header_params['Prefer'] = local_var_params['prefer']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/keys/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteKeyCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_key(self, bluemix_instance, id, **kwargs):  # noqa: E501
        """Retrieve a key by ID  # noqa: E501

        Retrieves the details of a key by specifying the ID of the key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_key(bluemix_instance, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bluemix_instance: The IBM Cloud instance ID that identifies your Key Protect service instance. (required)
        :param str id: The v4 UUID that uniquely identifies the key. (required)
        :param str correlation_id: The v4 UUID used to correlate and track transactions.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: GetKeyCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_key_with_http_info(bluemix_instance, id, **kwargs)  # noqa: E501

    def get_key_with_http_info(self, bluemix_instance, id, **kwargs):  # noqa: E501
        """Retrieve a key by ID  # noqa: E501

        Retrieves the details of a key by specifying the ID of the key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_key_with_http_info(bluemix_instance, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bluemix_instance: The IBM Cloud instance ID that identifies your Key Protect service instance. (required)
        :param str id: The v4 UUID that uniquely identifies the key. (required)
        :param str correlation_id: The v4 UUID used to correlate and track transactions.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(GetKeyCollection, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['bluemix_instance', 'id', 'correlation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_key" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bluemix_instance' is set
        if ('bluemix_instance' not in local_var_params or
                local_var_params['bluemix_instance'] is None):
            raise ApiValueError("Missing the required parameter `bluemix_instance` when calling `get_key`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ApiValueError("Missing the required parameter `id` when calling `get_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'bluemix_instance' in local_var_params:
            header_params['Bluemix-Instance'] = local_var_params['bluemix_instance']  # noqa: E501
        if 'correlation_id' in local_var_params:
            header_params['Correlation-Id'] = local_var_params['correlation_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/keys/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetKeyCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_key_collection_metadata(self, bluemix_instance, **kwargs):  # noqa: E501
        """Retrieve the number of keys  # noqa: E501

        Returns the same HTTP headers as a GET request without returning the entity-body. This operation returns the number of keys in your instance in a header called `Key-Total`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_key_collection_metadata(bluemix_instance, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bluemix_instance: The IBM Cloud instance ID that identifies your Key Protect service instance. (required)
        :param str correlation_id: The v4 UUID used to correlate and track transactions.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_key_collection_metadata_with_http_info(bluemix_instance, **kwargs)  # noqa: E501

    def get_key_collection_metadata_with_http_info(self, bluemix_instance, **kwargs):  # noqa: E501
        """Retrieve the number of keys  # noqa: E501

        Returns the same HTTP headers as a GET request without returning the entity-body. This operation returns the number of keys in your instance in a header called `Key-Total`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_key_collection_metadata_with_http_info(bluemix_instance, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bluemix_instance: The IBM Cloud instance ID that identifies your Key Protect service instance. (required)
        :param str correlation_id: The v4 UUID used to correlate and track transactions.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['bluemix_instance', 'correlation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_key_collection_metadata" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bluemix_instance' is set
        if ('bluemix_instance' not in local_var_params or
                local_var_params['bluemix_instance'] is None):
            raise ApiValueError("Missing the required parameter `bluemix_instance` when calling `get_key_collection_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'bluemix_instance' in local_var_params:
            header_params['Bluemix-Instance'] = local_var_params['bluemix_instance']  # noqa: E501
        if 'correlation_id' in local_var_params:
            header_params['Correlation-Id'] = local_var_params['correlation_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/keys', 'HEAD',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_keys(self, bluemix_instance, **kwargs):  # noqa: E501
        """Retrieve a list of keys  # noqa: E501

        Retrieves a list of keys that are stored in your Key Protect service instance.    **Note:** `GET /keys` will not return the key material in the response body. You can retrieve the key material for a standard key with a subsequent `GET /keys/{id}` request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_keys(bluemix_instance, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bluemix_instance: The IBM Cloud instance ID that identifies your Key Protect service instance. (required)
        :param str correlation_id: The v4 UUID used to correlate and track transactions.
        :param int limit: The number of keys to retrieve. By default, `GET /keys` returns the first 2000 keys. To retrieve a different set of keys, use `limit` with `offset` to page through your available resources. The maximum value for `limit` is 5000.    **Usage:** If you have 20 keys in your instance, and you want to retrieve only the first 5 keys, use  `../keys?limit=5`.
        :param int offset: The number of keys to skip. By specifying `offset`, you retrieve a subset of keys that starts with the `offset` value. Use `offset` with `limit` to page through your available resources.    **Usage:** If you have 100 keys in your instance, and you want to retrieve keys 26 through 50, use  `../keys?offset=25&limit=50`.    
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ListKeyCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_keys_with_http_info(bluemix_instance, **kwargs)  # noqa: E501

    def get_keys_with_http_info(self, bluemix_instance, **kwargs):  # noqa: E501
        """Retrieve a list of keys  # noqa: E501

        Retrieves a list of keys that are stored in your Key Protect service instance.    **Note:** `GET /keys` will not return the key material in the response body. You can retrieve the key material for a standard key with a subsequent `GET /keys/{id}` request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_keys_with_http_info(bluemix_instance, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bluemix_instance: The IBM Cloud instance ID that identifies your Key Protect service instance. (required)
        :param str correlation_id: The v4 UUID used to correlate and track transactions.
        :param int limit: The number of keys to retrieve. By default, `GET /keys` returns the first 2000 keys. To retrieve a different set of keys, use `limit` with `offset` to page through your available resources. The maximum value for `limit` is 5000.    **Usage:** If you have 20 keys in your instance, and you want to retrieve only the first 5 keys, use  `../keys?limit=5`.
        :param int offset: The number of keys to skip. By specifying `offset`, you retrieve a subset of keys that starts with the `offset` value. Use `offset` with `limit` to page through your available resources.    **Usage:** If you have 100 keys in your instance, and you want to retrieve keys 26 through 50, use  `../keys?offset=25&limit=50`.    
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ListKeyCollection, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['bluemix_instance', 'correlation_id', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_keys" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bluemix_instance' is set
        if ('bluemix_instance' not in local_var_params or
                local_var_params['bluemix_instance'] is None):
            raise ApiValueError("Missing the required parameter `bluemix_instance` when calling `get_keys`")  # noqa: E501

        if 'limit' in local_var_params and local_var_params['limit'] > 5000:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `get_keys`, must be a value less than or equal to `5000`")  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `get_keys`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'offset' in local_var_params and local_var_params['offset'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `offset` when calling `get_keys`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params:
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'offset' in local_var_params:
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501

        header_params = {}
        if 'bluemix_instance' in local_var_params:
            header_params['Bluemix-Instance'] = local_var_params['bluemix_instance']  # noqa: E501
        if 'correlation_id' in local_var_params:
            header_params['Correlation-Id'] = local_var_params['correlation_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListKeyCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
