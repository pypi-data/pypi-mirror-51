# coding: utf-8

"""
    IBM Key Protect API

    IBM Key Protect helps you provision encrypted keys for apps across IBM Cloud. As you manage the lifecycle of your keys, you can benefit from knowing that your keys are secured by cloud-based FIPS 140-2 Level 2 hardware security modules (HSMs) that protect against theft of information. You can use the Key Protect API to store, generate, and retrieve your key material. Keys within the service can protect any type of data in your symmetric key based encryption solution.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CreateKeyCollection(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'metadata': 'CollectionMetadata',
        'resources': 'list[KeyMetadata]'
    }

    attribute_map = {
        'metadata': 'metadata',
        'resources': 'resources'
    }

    def __init__(self, metadata=None, resources=None):  # noqa: E501
        """CreateKeyCollection - a model defined in OpenAPI"""  # noqa: E501

        self._metadata = None
        self._resources = None
        self.discriminator = None

        self.metadata = metadata
        self.resources = resources

    @property
    def metadata(self):
        """Gets the metadata of this CreateKeyCollection.  # noqa: E501


        :return: The metadata of this CreateKeyCollection.  # noqa: E501
        :rtype: CollectionMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CreateKeyCollection.


        :param metadata: The metadata of this CreateKeyCollection.  # noqa: E501
        :type: CollectionMetadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    @property
    def resources(self):
        """Gets the resources of this CreateKeyCollection.  # noqa: E501

        An array of resources.  # noqa: E501

        :return: The resources of this CreateKeyCollection.  # noqa: E501
        :rtype: list[KeyMetadata]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this CreateKeyCollection.

        An array of resources.  # noqa: E501

        :param resources: The resources of this CreateKeyCollection.  # noqa: E501
        :type: list[KeyMetadata]
        """
        if resources is None:
            raise ValueError("Invalid value for `resources`, must not be `None`")  # noqa: E501

        self._resources = resources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateKeyCollection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
