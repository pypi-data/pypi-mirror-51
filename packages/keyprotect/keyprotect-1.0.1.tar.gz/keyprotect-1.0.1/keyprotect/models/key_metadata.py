# coding: utf-8

"""
    IBM Key Protect API

    IBM Key Protect helps you provision encrypted keys for apps across IBM Cloud. As you manage the lifecycle of your keys, you can benefit from knowing that your keys are secured by cloud-based FIPS 140-2 Level 2 hardware security modules (HSMs) that protect against theft of information. You can use the Key Protect API to store, generate, and retrieve your key material. Keys within the service can protect any type of data in your symmetric key based encryption solution.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class KeyMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'creation_date': 'datetime',
        'created_by': 'str',
        'expiration_date': 'datetime',
        'algorithm_type': 'str',
        'algorithm_metadata': 'KeyMetadataAlgorithmMetadata',
        'state': 'int',
        'nonactive_state_reason': 'int',
        'tags': 'list[str]',
        'extractable': 'bool',
        'crn': 'str',
        'last_update_date': 'datetime',
        'last_rotate_date': 'datetime',
        'imported': 'bool'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'creation_date': 'creationDate',
        'created_by': 'createdBy',
        'expiration_date': 'expirationDate',
        'algorithm_type': 'algorithmType',
        'algorithm_metadata': 'algorithmMetadata',
        'state': 'state',
        'nonactive_state_reason': 'nonactiveStateReason',
        'tags': 'tags',
        'extractable': 'extractable',
        'crn': 'crn',
        'last_update_date': 'lastUpdateDate',
        'last_rotate_date': 'lastRotateDate',
        'imported': 'imported'
    }

    def __init__(self, type='application/vnd.ibm.kms.key+json', id=None, name=None, description=None, creation_date=None, created_by=None, expiration_date=None, algorithm_type='AES', algorithm_metadata=None, state=None, nonactive_state_reason=None, tags=None, extractable=True, crn=None, last_update_date=None, last_rotate_date=None, imported=False):  # noqa: E501
        """KeyMetadata - a model defined in OpenAPI"""  # noqa: E501

        self._type = None
        self._id = None
        self._name = None
        self._description = None
        self._creation_date = None
        self._created_by = None
        self._expiration_date = None
        self._algorithm_type = None
        self._algorithm_metadata = None
        self._state = None
        self._nonactive_state_reason = None
        self._tags = None
        self._extractable = None
        self._crn = None
        self._last_update_date = None
        self._last_rotate_date = None
        self._imported = None
        self.discriminator = None

        self.type = type
        if id is not None:
            self.id = id
        self.name = name
        if description is not None:
            self.description = description
        if creation_date is not None:
            self.creation_date = creation_date
        if created_by is not None:
            self.created_by = created_by
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if algorithm_type is not None:
            self.algorithm_type = algorithm_type
        if algorithm_metadata is not None:
            self.algorithm_metadata = algorithm_metadata
        if state is not None:
            self.state = state
        if nonactive_state_reason is not None:
            self.nonactive_state_reason = nonactive_state_reason
        if tags is not None:
            self.tags = tags
        if extractable is not None:
            self.extractable = extractable
        if crn is not None:
            self.crn = crn
        if last_update_date is not None:
            self.last_update_date = last_update_date
        if last_rotate_date is not None:
            self.last_rotate_date = last_rotate_date
        if imported is not None:
            self.imported = imported

    @property
    def type(self):
        """Gets the type of this KeyMetadata.  # noqa: E501

        Specifies the MIME type that represents the key resource. Currently, only the default is supported.  # noqa: E501

        :return: The type of this KeyMetadata.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this KeyMetadata.

        Specifies the MIME type that represents the key resource. Currently, only the default is supported.  # noqa: E501

        :param type: The type of this KeyMetadata.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def id(self):
        """Gets the id of this KeyMetadata.  # noqa: E501

        The v4 UUID used to uniquely identify the resource, as specified by RFC 4122.  # noqa: E501

        :return: The id of this KeyMetadata.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this KeyMetadata.

        The v4 UUID used to uniquely identify the resource, as specified by RFC 4122.  # noqa: E501

        :param id: The id of this KeyMetadata.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this KeyMetadata.  # noqa: E501

        A unique, human-readable alias to assign to your key.    To protect your privacy, do not use personal data, such as your name or location, as an alias for your key.  # noqa: E501

        :return: The name of this KeyMetadata.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this KeyMetadata.

        A unique, human-readable alias to assign to your key.    To protect your privacy, do not use personal data, such as your name or location, as an alias for your key.  # noqa: E501

        :param name: The name of this KeyMetadata.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")  # noqa: E501
        if name is not None and len(name) < 2:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `2`")  # noqa: E501
        if name is not None and not re.search(r'[a-zA-Z0-9 ]{2,50}', name):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/[a-zA-Z0-9 ]{2,50}/`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this KeyMetadata.  # noqa: E501

        A text field used to provide a more detailed description of the key. The maximum length is 240 characters.    To protect your privacy, do not use personal data, such as your name or location, as a description for your  key.  # noqa: E501

        :return: The description of this KeyMetadata.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this KeyMetadata.

        A text field used to provide a more detailed description of the key. The maximum length is 240 characters.    To protect your privacy, do not use personal data, such as your name or location, as a description for your  key.  # noqa: E501

        :param description: The description of this KeyMetadata.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 240:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `240`")  # noqa: E501
        if description is not None and len(description) < 2:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `2`")  # noqa: E501

        self._description = description

    @property
    def creation_date(self):
        """Gets the creation_date of this KeyMetadata.  # noqa: E501

        The date the key material was created. The date format follows RFC 3339.  # noqa: E501

        :return: The creation_date of this KeyMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this KeyMetadata.

        The date the key material was created. The date format follows RFC 3339.  # noqa: E501

        :param creation_date: The creation_date of this KeyMetadata.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def created_by(self):
        """Gets the created_by of this KeyMetadata.  # noqa: E501

        The unique identifier for the resource that created the key.  # noqa: E501

        :return: The created_by of this KeyMetadata.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this KeyMetadata.

        The unique identifier for the resource that created the key.  # noqa: E501

        :param created_by: The created_by of this KeyMetadata.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def expiration_date(self):
        """Gets the expiration_date of this KeyMetadata.  # noqa: E501

        The date the key material expires. The date format follows RFC 3339. You can set an expiration date on any  key on its creation. If you create a key without specifying an expiration date, the key does not expire.  # noqa: E501

        :return: The expiration_date of this KeyMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this KeyMetadata.

        The date the key material expires. The date format follows RFC 3339. You can set an expiration date on any  key on its creation. If you create a key without specifying an expiration date, the key does not expire.  # noqa: E501

        :param expiration_date: The expiration_date of this KeyMetadata.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def algorithm_type(self):
        """Gets the algorithm_type of this KeyMetadata.  # noqa: E501

        The algorithm type used to generate the key. Currently, AES is supported.  # noqa: E501

        :return: The algorithm_type of this KeyMetadata.  # noqa: E501
        :rtype: str
        """
        return self._algorithm_type

    @algorithm_type.setter
    def algorithm_type(self, algorithm_type):
        """Sets the algorithm_type of this KeyMetadata.

        The algorithm type used to generate the key. Currently, AES is supported.  # noqa: E501

        :param algorithm_type: The algorithm_type of this KeyMetadata.  # noqa: E501
        :type: str
        """
        allowed_values = ["AES"]  # noqa: E501
        if algorithm_type not in allowed_values:
            raise ValueError(
                "Invalid value for `algorithm_type` ({0}), must be one of {1}"  # noqa: E501
                .format(algorithm_type, allowed_values)
            )

        self._algorithm_type = algorithm_type

    @property
    def algorithm_metadata(self):
        """Gets the algorithm_metadata of this KeyMetadata.  # noqa: E501


        :return: The algorithm_metadata of this KeyMetadata.  # noqa: E501
        :rtype: KeyMetadataAlgorithmMetadata
        """
        return self._algorithm_metadata

    @algorithm_metadata.setter
    def algorithm_metadata(self, algorithm_metadata):
        """Sets the algorithm_metadata of this KeyMetadata.


        :param algorithm_metadata: The algorithm_metadata of this KeyMetadata.  # noqa: E501
        :type: KeyMetadataAlgorithmMetadata
        """

        self._algorithm_metadata = algorithm_metadata

    @property
    def state(self):
        """Gets the state of this KeyMetadata.  # noqa: E501

        The key state based on NIST SP 800-57. States are integers and correspond to the Pre-activation = 0, Active = 1, Deactivated = 3, and Destroyed = 5 values.  # noqa: E501

        :return: The state of this KeyMetadata.  # noqa: E501
        :rtype: int
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this KeyMetadata.

        The key state based on NIST SP 800-57. States are integers and correspond to the Pre-activation = 0, Active = 1, Deactivated = 3, and Destroyed = 5 values.  # noqa: E501

        :param state: The state of this KeyMetadata.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3, 4, 5]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def nonactive_state_reason(self):
        """Gets the nonactive_state_reason of this KeyMetadata.  # noqa: E501

        A code indicating the reason the key is not in the activation state.  # noqa: E501

        :return: The nonactive_state_reason of this KeyMetadata.  # noqa: E501
        :rtype: int
        """
        return self._nonactive_state_reason

    @nonactive_state_reason.setter
    def nonactive_state_reason(self, nonactive_state_reason):
        """Sets the nonactive_state_reason of this KeyMetadata.

        A code indicating the reason the key is not in the activation state.  # noqa: E501

        :param nonactive_state_reason: The nonactive_state_reason of this KeyMetadata.  # noqa: E501
        :type: int
        """

        self._nonactive_state_reason = nonactive_state_reason

    @property
    def tags(self):
        """Gets the tags of this KeyMetadata.  # noqa: E501

        Up to 30 tags can be created. Tags can be between 2-30 characters, including spaces. Special characters not permitted include the angled bracket, comma, colon, ampersand, and vertical pipe character (|).    To protect your privacy, do not use personal data, such as your name or location, as a tag for your key.   # noqa: E501

        :return: The tags of this KeyMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this KeyMetadata.

        Up to 30 tags can be created. Tags can be between 2-30 characters, including spaces. Special characters not permitted include the angled bracket, comma, colon, ampersand, and vertical pipe character (|).    To protect your privacy, do not use personal data, such as your name or location, as a tag for your key.   # noqa: E501

        :param tags: The tags of this KeyMetadata.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def extractable(self):
        """Gets the extractable of this KeyMetadata.  # noqa: E501

        A boolean value that determines whether the key material can leave the service.       If set to `false`, Key Protect designates the key as a nonextractable root key used for `wrap` and `unwrap` actions. If set to `true`, Key Protect designates the key as a standard key that you can store in your apps and services. Once set to `false` it cannot be changed to `true`.  # noqa: E501

        :return: The extractable of this KeyMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._extractable

    @extractable.setter
    def extractable(self, extractable):
        """Sets the extractable of this KeyMetadata.

        A boolean value that determines whether the key material can leave the service.       If set to `false`, Key Protect designates the key as a nonextractable root key used for `wrap` and `unwrap` actions. If set to `true`, Key Protect designates the key as a standard key that you can store in your apps and services. Once set to `false` it cannot be changed to `true`.  # noqa: E501

        :param extractable: The extractable of this KeyMetadata.  # noqa: E501
        :type: bool
        """

        self._extractable = extractable

    @property
    def crn(self):
        """Gets the crn of this KeyMetadata.  # noqa: E501

        The Cloud Resource Name (CRN) that uniquely identifies your cloud network resources.  # noqa: E501

        :return: The crn of this KeyMetadata.  # noqa: E501
        :rtype: str
        """
        return self._crn

    @crn.setter
    def crn(self, crn):
        """Sets the crn of this KeyMetadata.

        The Cloud Resource Name (CRN) that uniquely identifies your cloud network resources.  # noqa: E501

        :param crn: The crn of this KeyMetadata.  # noqa: E501
        :type: str
        """

        self._crn = crn

    @property
    def last_update_date(self):
        """Gets the last_update_date of this KeyMetadata.  # noqa: E501

        Updates when any part of the key metadata is modified. The date format follows RFC 3339.  # noqa: E501

        :return: The last_update_date of this KeyMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_date

    @last_update_date.setter
    def last_update_date(self, last_update_date):
        """Sets the last_update_date of this KeyMetadata.

        Updates when any part of the key metadata is modified. The date format follows RFC 3339.  # noqa: E501

        :param last_update_date: The last_update_date of this KeyMetadata.  # noqa: E501
        :type: datetime
        """

        self._last_update_date = last_update_date

    @property
    def last_rotate_date(self):
        """Gets the last_rotate_date of this KeyMetadata.  # noqa: E501

        Updates to show when the key was last rotated. The date format follows RFC 3339.  # noqa: E501

        :return: The last_rotate_date of this KeyMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._last_rotate_date

    @last_rotate_date.setter
    def last_rotate_date(self, last_rotate_date):
        """Sets the last_rotate_date of this KeyMetadata.

        Updates to show when the key was last rotated. The date format follows RFC 3339.  # noqa: E501

        :param last_rotate_date: The last_rotate_date of this KeyMetadata.  # noqa: E501
        :type: datetime
        """

        self._last_rotate_date = last_rotate_date

    @property
    def imported(self):
        """Gets the imported of this KeyMetadata.  # noqa: E501

        A boolean value that shows whether your key was originally imported or generated in Key Protect. The value is set by Key Protect based on how the key material is initially added to the service.    A value of `true` indicates that you must provide new key material when it's time to rotate the key. A value  of `false` indicates that Key Protect will generate the new key material on a `rotate` operation, as it did in key creation.  # noqa: E501

        :return: The imported of this KeyMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._imported

    @imported.setter
    def imported(self, imported):
        """Sets the imported of this KeyMetadata.

        A boolean value that shows whether your key was originally imported or generated in Key Protect. The value is set by Key Protect based on how the key material is initially added to the service.    A value of `true` indicates that you must provide new key material when it's time to rotate the key. A value  of `false` indicates that Key Protect will generate the new key material on a `rotate` operation, as it did in key creation.  # noqa: E501

        :param imported: The imported of this KeyMetadata.  # noqa: E501
        :type: bool
        """

        self._imported = imported

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KeyMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
