# coding: utf-8

"""
    IBM Key Protect API

    IBM Key Protect helps you provision encrypted keys for apps across IBM Cloud. As you manage the lifecycle of your keys, you can benefit from knowing that your keys are secured by cloud-based FIPS 140-2 Level 2 hardware security modules (HSMs) that protect against theft of information. You can use the Key Protect API to store, generate, and retrieve your key material. Keys within the service can protect any type of data in your symmetric key based encryption solution.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class KeyMetadataAlgorithmMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bit_length': 'str',
        'mode': 'str'
    }

    attribute_map = {
        'bit_length': 'bitLength',
        'mode': 'mode'
    }

    def __init__(self, bit_length='256', mode='GCM'):  # noqa: E501
        """KeyMetadataAlgorithmMetadata - a model defined in OpenAPI"""  # noqa: E501

        self._bit_length = None
        self._mode = None
        self.discriminator = None

        if bit_length is not None:
            self.bit_length = bit_length
        if mode is not None:
            self.mode = mode

    @property
    def bit_length(self):
        """Gets the bit_length of this KeyMetadataAlgorithmMetadata.  # noqa: E501

        The algorithm bit size used for key encryption.  # noqa: E501

        :return: The bit_length of this KeyMetadataAlgorithmMetadata.  # noqa: E501
        :rtype: str
        """
        return self._bit_length

    @bit_length.setter
    def bit_length(self, bit_length):
        """Sets the bit_length of this KeyMetadataAlgorithmMetadata.

        The algorithm bit size used for key encryption.  # noqa: E501

        :param bit_length: The bit_length of this KeyMetadataAlgorithmMetadata.  # noqa: E501
        :type: str
        """
        allowed_values = ["256"]  # noqa: E501
        if bit_length not in allowed_values:
            raise ValueError(
                "Invalid value for `bit_length` ({0}), must be one of {1}"  # noqa: E501
                .format(bit_length, allowed_values)
            )

        self._bit_length = bit_length

    @property
    def mode(self):
        """Gets the mode of this KeyMetadataAlgorithmMetadata.  # noqa: E501

        The encryption scheme used to generate the key. Currently, GCM is supported.  # noqa: E501

        :return: The mode of this KeyMetadataAlgorithmMetadata.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this KeyMetadataAlgorithmMetadata.

        The encryption scheme used to generate the key. Currently, GCM is supported.  # noqa: E501

        :param mode: The mode of this KeyMetadataAlgorithmMetadata.  # noqa: E501
        :type: str
        """
        allowed_values = ["GCM", "CBC_PAD"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KeyMetadataAlgorithmMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
