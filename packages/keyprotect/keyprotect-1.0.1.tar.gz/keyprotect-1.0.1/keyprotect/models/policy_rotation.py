# coding: utf-8

"""
    IBM Key Protect API

    IBM Key Protect helps you provision encrypted keys for apps across IBM Cloud. As you manage the lifecycle of your keys, you can benefit from knowing that your keys are secured by cloud-based FIPS 140-2 Level 2 hardware security modules (HSMs) that protect against theft of information. You can use the Key Protect API to store, generate, and retrieve your key material. Keys within the service can protect any type of data in your symmetric key based encryption solution.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PolicyRotation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'interval_month': 'int'
    }

    attribute_map = {
        'interval_month': 'interval_month'
    }

    def __init__(self, interval_month=None):  # noqa: E501
        """PolicyRotation - a model defined in OpenAPI"""  # noqa: E501

        self._interval_month = None
        self.discriminator = None

        if interval_month is not None:
            self.interval_month = interval_month

    @property
    def interval_month(self):
        """Gets the interval_month of this PolicyRotation.  # noqa: E501

        Specifies the key rotation time interval in months  # noqa: E501

        :return: The interval_month of this PolicyRotation.  # noqa: E501
        :rtype: int
        """
        return self._interval_month

    @interval_month.setter
    def interval_month(self, interval_month):
        """Sets the interval_month of this PolicyRotation.

        Specifies the key rotation time interval in months  # noqa: E501

        :param interval_month: The interval_month of this PolicyRotation.  # noqa: E501
        :type: int
        """
        if interval_month is not None and interval_month > 12:  # noqa: E501
            raise ValueError("Invalid value for `interval_month`, must be a value less than or equal to `12`")  # noqa: E501
        if interval_month is not None and interval_month < 1:  # noqa: E501
            raise ValueError("Invalid value for `interval_month`, must be a value greater than or equal to `1`")  # noqa: E501

        self._interval_month = interval_month

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PolicyRotation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
