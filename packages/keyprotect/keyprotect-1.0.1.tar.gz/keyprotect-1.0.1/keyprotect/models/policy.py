# coding: utf-8

"""
    IBM Key Protect API

    IBM Key Protect helps you provision encrypted keys for apps across IBM Cloud. As you manage the lifecycle of your keys, you can benefit from knowing that your keys are secured by cloud-based FIPS 140-2 Level 2 hardware security modules (HSMs) that protect against theft of information. You can use the Key Protect API to store, generate, and retrieve your key material. Keys within the service can protect any type of data in your symmetric key based encryption solution.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Policy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'crn': 'str',
        'creation_date': 'datetime',
        'created_by': 'str',
        'last_update_date': 'datetime',
        'updated_by': 'str',
        'rotation': 'PolicyRotation'
    }

    attribute_map = {
        'type': 'type',
        'crn': 'crn',
        'creation_date': 'creationDate',
        'created_by': 'createdBy',
        'last_update_date': 'lastUpdateDate',
        'updated_by': 'updatedBy',
        'rotation': 'rotation'
    }

    def __init__(self, type='application/vnd.ibm.kms.key+json', crn=None, creation_date=None, created_by=None, last_update_date=None, updated_by=None, rotation=None):  # noqa: E501
        """Policy - a model defined in OpenAPI"""  # noqa: E501

        self._type = None
        self._crn = None
        self._creation_date = None
        self._created_by = None
        self._last_update_date = None
        self._updated_by = None
        self._rotation = None
        self.discriminator = None

        self.type = type
        if crn is not None:
            self.crn = crn
        if creation_date is not None:
            self.creation_date = creation_date
        if created_by is not None:
            self.created_by = created_by
        if last_update_date is not None:
            self.last_update_date = last_update_date
        if updated_by is not None:
            self.updated_by = updated_by
        self.rotation = rotation

    @property
    def type(self):
        """Gets the type of this Policy.  # noqa: E501

        Specifies the MIME type that represents the policy resource. Currently, only the default is supported.  # noqa: E501

        :return: The type of this Policy.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Policy.

        Specifies the MIME type that represents the policy resource. Currently, only the default is supported.  # noqa: E501

        :param type: The type of this Policy.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def crn(self):
        """Gets the crn of this Policy.  # noqa: E501

        The Cloud Resource Name (CRN) that uniquely identifies your cloud network resources.  # noqa: E501

        :return: The crn of this Policy.  # noqa: E501
        :rtype: str
        """
        return self._crn

    @crn.setter
    def crn(self, crn):
        """Sets the crn of this Policy.

        The Cloud Resource Name (CRN) that uniquely identifies your cloud network resources.  # noqa: E501

        :param crn: The crn of this Policy.  # noqa: E501
        :type: str
        """

        self._crn = crn

    @property
    def creation_date(self):
        """Gets the creation_date of this Policy.  # noqa: E501

        The date the policy was created. The date format follows RFC 3339.  # noqa: E501

        :return: The creation_date of this Policy.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Policy.

        The date the policy was created. The date format follows RFC 3339.  # noqa: E501

        :param creation_date: The creation_date of this Policy.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def created_by(self):
        """Gets the created_by of this Policy.  # noqa: E501

        The unique identifier for the resource that created the policy.  # noqa: E501

        :return: The created_by of this Policy.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Policy.

        The unique identifier for the resource that created the policy.  # noqa: E501

        :param created_by: The created_by of this Policy.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def last_update_date(self):
        """Gets the last_update_date of this Policy.  # noqa: E501

        Updates when the policy is replaced or modified. The date format follows RFC 3339.  # noqa: E501

        :return: The last_update_date of this Policy.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_date

    @last_update_date.setter
    def last_update_date(self, last_update_date):
        """Sets the last_update_date of this Policy.

        Updates when the policy is replaced or modified. The date format follows RFC 3339.  # noqa: E501

        :param last_update_date: The last_update_date of this Policy.  # noqa: E501
        :type: datetime
        """

        self._last_update_date = last_update_date

    @property
    def updated_by(self):
        """Gets the updated_by of this Policy.  # noqa: E501

        The unique identifier for the resource that updated the policy.  # noqa: E501

        :return: The updated_by of this Policy.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Policy.

        The unique identifier for the resource that updated the policy.  # noqa: E501

        :param updated_by: The updated_by of this Policy.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def rotation(self):
        """Gets the rotation of this Policy.  # noqa: E501


        :return: The rotation of this Policy.  # noqa: E501
        :rtype: PolicyRotation
        """
        return self._rotation

    @rotation.setter
    def rotation(self, rotation):
        """Sets the rotation of this Policy.


        :param rotation: The rotation of this Policy.  # noqa: E501
        :type: PolicyRotation
        """
        if rotation is None:
            raise ValueError("Invalid value for `rotation`, must not be `None`")  # noqa: E501

        self._rotation = rotation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Policy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
