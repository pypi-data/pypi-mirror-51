# coding: utf-8

"""
    IBM Key Protect API

    IBM Key Protect helps you provision encrypted keys for apps across IBM Cloud. As you manage the lifecycle of your keys, you can benefit from knowing that your keys are secured by cloud-based FIPS 140-2 Level 2 hardware security modules (HSMs) that protect against theft of information. You can use the Key Protect API to store, generate, and retrieve your key material. Keys within the service can protect any type of data in your symmetric key based encryption solution.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from keyprotect.api_client import ApiClient
from keyprotect.exceptions import (
    ApiTypeError,
    ApiValueError
)


class PoliciesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_policy(self, bluemix_instance, id, **kwargs):  # noqa: E501
        """Retrieve a list of policies  # noqa: E501

        Retrieves a list of policies that are associated with a specified key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_policy(bluemix_instance, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bluemix_instance: The IBM Cloud instance ID that identifies your Key Protect service instance. (required)
        :param str id: The v4 UUID that uniquely identifies the key. (required)
        :param str correlation_id: The v4 UUID used to correlate and track transactions.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: CreatePolicyCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_policy_with_http_info(bluemix_instance, id, **kwargs)  # noqa: E501

    def get_policy_with_http_info(self, bluemix_instance, id, **kwargs):  # noqa: E501
        """Retrieve a list of policies  # noqa: E501

        Retrieves a list of policies that are associated with a specified key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_policy_with_http_info(bluemix_instance, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bluemix_instance: The IBM Cloud instance ID that identifies your Key Protect service instance. (required)
        :param str id: The v4 UUID that uniquely identifies the key. (required)
        :param str correlation_id: The v4 UUID used to correlate and track transactions.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(CreatePolicyCollection, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['bluemix_instance', 'id', 'correlation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_policy" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bluemix_instance' is set
        if ('bluemix_instance' not in local_var_params or
                local_var_params['bluemix_instance'] is None):
            raise ApiValueError("Missing the required parameter `bluemix_instance` when calling `get_policy`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ApiValueError("Missing the required parameter `id` when calling `get_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'bluemix_instance' in local_var_params:
            header_params['Bluemix-Instance'] = local_var_params['bluemix_instance']  # noqa: E501
        if 'correlation_id' in local_var_params:
            header_params['Correlation-Id'] = local_var_params['correlation_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/keys/{id}/policies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreatePolicyCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_policy(self, bluemix_instance, id, create_policy_collection, **kwargs):  # noqa: E501
        """Replace an existing policy  # noqa: E501

        Replaces the policy that is associated with a specified key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_policy(bluemix_instance, id, create_policy_collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bluemix_instance: The IBM Cloud instance ID that identifies your Key Protect service instance. (required)
        :param str id: The v4 UUID that uniquely identifies the key. (required)
        :param CreatePolicyCollection create_policy_collection: The base request for creating a new policies resource. (required)
        :param  UNKNOWN_PARAMETER_NAME:
        :param str correlation_id: The v4 UUID used to correlate and track transactions.
        :param str prefer: Alters server behavior for POST or DELETE operations. A header with `return=minimal` causes the service to  return only the key identifier, or metadata. A header containing `return=representation` returns both the key  material and metadata in the response entity-body. If the key has been designated as a root key, the  system cannot return the key material.      **Note:** During POST operations, Key Protect may not immediately return the key material due to key generation time. To retrieve the key material, you can perform a subsequent `GET /keys/{id}` request.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: CreatePolicyCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.put_policy_with_http_info(bluemix_instance, id, create_policy_collection, **kwargs)  # noqa: E501

    def put_policy_with_http_info(self, bluemix_instance, id, create_policy_collection, **kwargs):  # noqa: E501
        """Replace an existing policy  # noqa: E501

        Replaces the policy that is associated with a specified key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_policy_with_http_info(bluemix_instance, id, create_policy_collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bluemix_instance: The IBM Cloud instance ID that identifies your Key Protect service instance. (required)
        :param str id: The v4 UUID that uniquely identifies the key. (required)
        :param CreatePolicyCollection create_policy_collection: The base request for creating a new policies resource. (required)
        :param  UNKNOWN_PARAMETER_NAME:
        :param str correlation_id: The v4 UUID used to correlate and track transactions.
        :param str prefer: Alters server behavior for POST or DELETE operations. A header with `return=minimal` causes the service to  return only the key identifier, or metadata. A header containing `return=representation` returns both the key  material and metadata in the response entity-body. If the key has been designated as a root key, the  system cannot return the key material.      **Note:** During POST operations, Key Protect may not immediately return the key material due to key generation time. To retrieve the key material, you can perform a subsequent `GET /keys/{id}` request.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(CreatePolicyCollection, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['bluemix_instance', 'id', 'create_policy_collection', 'UNKNOWN_PARAMETER_NAME', 'correlation_id', 'prefer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_policy" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bluemix_instance' is set
        if ('bluemix_instance' not in local_var_params or
                local_var_params['bluemix_instance'] is None):
            raise ApiValueError("Missing the required parameter `bluemix_instance` when calling `put_policy`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ApiValueError("Missing the required parameter `id` when calling `put_policy`")  # noqa: E501
        # verify the required parameter 'create_policy_collection' is set
        if ('create_policy_collection' not in local_var_params or
                local_var_params['create_policy_collection'] is None):
            raise ApiValueError("Missing the required parameter `create_policy_collection` when calling `put_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'bluemix_instance' in local_var_params:
            header_params['Bluemix-Instance'] = local_var_params['bluemix_instance']  # noqa: E501
        if 'correlation_id' in local_var_params:
            header_params['Correlation-Id'] = local_var_params['correlation_id']  # noqa: E501
        if 'prefer' in local_var_params:
            header_params['Prefer'] = local_var_params['prefer']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_policy_collection' in local_var_params:
            body_params = local_var_params['create_policy_collection']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.ibm.kms.key+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/keys/{id}/policies', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreatePolicyCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
