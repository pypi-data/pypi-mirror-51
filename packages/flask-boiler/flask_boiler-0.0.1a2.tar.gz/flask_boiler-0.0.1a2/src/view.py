from flasgger import SwaggerView
from flask import jsonify

from .domain_model import DomainModel
from .view_model import ViewModel
from google.cloud import firestore
from .context import Context as CTX


def default_mapper(path_str_template: str, _kwargs):
    """

    :param path_str_template: example "company/{}"
    :param args: example ["users"]
    :return: DocumentReference for "company/users"
    """
    """
    Maps a list of arguments from flask.View().get(args) to
        a firestore reference that is used to construct
        the ReferencedObject document
    :return:
    """
    path_str = path_str_template.format(**_kwargs)
    path = CTX.db.document(path_str)
    return path


def flask_as_view(view_model_cls: ViewModel,
                  domain_model_cls: DomainModel,
                     app,
                     endpoint,
                     description=None):
    _proxy_view_cls_name = "{}ProxyView".format(view_model_cls.__name__)

    if description is None:
        description = "A REST API resource automatically generated by" \
                      " flask-boiler"

    responses = {
        200: {
            "description": description,
            "schema": view_model_cls.get_schema_cls()
        }
    }

    parameters = [
        {
            "name": "doc_id",
            "in": "path",
            "type": "string",
            "enum": ["all", "palette_id_a",
                     "palette_id_b"],
            "required": True,
            "default": "all"
        }
    ]

    def get(self, **kwargs):

        obj_gen = domain_model_cls.where(**kwargs)

        objs = [ obj for obj in obj_gen ]

        vm = view_model_cls.from_dict(
            dict(luggages=objs)
        )

        return jsonify(vm.to_dict())

    # Dynamically construct a proxy class that has responses static var
    proxy_view_cls = type(_proxy_view_cls_name,  # class name
                          (SwaggerView,),
                          dict(
                               responses=responses,
                               parameters=parameters,
                               _view_model_cls=view_model_cls,
                               get=get
                               )
                          )

    rule = endpoint

    app.add_url_rule(
        rule,
        view_func=proxy_view_cls.as_view(proxy_view_cls.__name__),
        methods=['GET']
    )

    return proxy_view_cls


def document_as_view(view_model_cls,
                     app,
                     endpoint,
                     mapper,
                     description=None):
    """ Registers a view model as a REST API resource and generate
            corresponding documentation.

    :param view_model_cls: class of view model
    :param app: flask app instance
    :param mapper: function which receives kwargs from REST endpoint and
                    returns a firestore document reference
    :param endpoint: Flask app endpoint for add_url_rule
    :param description: description of the REST API resource for generating
                    flasgger documentations
    :return: proxy flask view
    """


    # Note that there are better ways of implementing this
    _proxy_view_cls_name = "{}ProxyView".format(view_model_cls.__name__)

    if description is None:
        description = "A REST API resource automatically generated by" \
                      " flask-boiler"

    responses = {
        200: {
            "description": description,
            "schema": view_model_cls.get_schema_cls()
        }
    }

    parameters = [
        {
            "name": "doc_id",
            "in": "path",
            "type": "string",
            "enum": ["all", "palette_id_a",
                     "palette_id_b"],
            "required": True,
            "default": "all"
        }
    ]

    def get(self, **kwargs):
        doc_ref: firestore.DocumentReference = mapper(kwargs)

        obj = self._view_model_cls.get(doc_ref)
        return jsonify(obj.to_dict())

    # Dynamically construct a proxy class that has responses static var
    proxy_view_cls = type(_proxy_view_cls_name,  # class name
                          (SwaggerView,),
                          dict(
                               responses=responses,
                               parameters=parameters,
                               _view_model_cls=view_model_cls,
                               get=get
                               )
                          )

    rule = endpoint

    app.add_url_rule(
        rule,
        view_func=proxy_view_cls.as_view(proxy_view_cls.__name__),
        methods=['GET']
    )

    return proxy_view_cls


class GenericView(SwaggerView):

    _view_model_cls = None
    # responses = dict()

    def __new__(cls, view_model_cls: ViewModel=None, description=None, *args, **kwargs):
        """
        TODO: test
        Note that this implementation is unstable.

        :param view_model_cls:
        :param args:
        :param kwargs:
        :return:
        """

        instance = super().__new__(cls)

        cls._view_model_cls = view_model_cls

        # cls.responses = {
        #     200: {
        #         "description": str() if description is None else description,
        #         "schema": cls._view_model_cls.schema_cls
        #     }
        # }

        return instance

    def get(self, dev_path):

        doc_ref: firestore.DocumentReference = \
            firestore.DocumentReference(dev_path)

        assert callable(self._view_model_cls)

        view_model_obj = self._view_model_cls(doc_ref=doc_ref)

        assert isinstance(view_model_obj, ViewModel)

        return view_model_obj.to_dict()
