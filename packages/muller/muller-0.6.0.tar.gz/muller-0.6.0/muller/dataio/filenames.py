from pathlib import Path
from typing import Union


class OutputFilenames:
	""" Used to organize the files generated by the workflow.
	"""

	def __init__(self, output_folder: Path, name: str, suffix = 'tsv'):
		self.suffix = suffix

		def check_folder(path: Union[str, Path]) -> Path:
			path = Path(path)
			if not path.exists():
				path.mkdir()
			return path.absolute()

		output_folder = check_folder(output_folder)
		supplementary_folder = check_folder(output_folder / "supplementary-files")
		graphics_folder = check_folder(output_folder / "graphics")
		graphics_distinctive_folder = check_folder(graphics_folder / "distinctive")
		graphics_clade_folder = check_folder(graphics_folder / "clade")
		tables_folder = check_folder(output_folder / "tables")
		scripts_folder = check_folder(output_folder / "scripts")

		# General Files
		self.trajectory_table: Path = output_folder / (name + f'.trajectories.{suffix}')
		self.genotype_table: Path = output_folder / (name + f'.genotypes.{suffix}')

		# tables
		self.original_trajectory: Path = tables_folder / (name + f'.trajectories.original.{suffix}')
		self.rejected_trajectories: Path = tables_folder / (name + f"trajectories.rejected.{suffix}")
		self.original_genotype: Path = tables_folder / (name + f'.genotypes.original.{suffix}')

		self.ggmuller_population: Path = tables_folder / (name + f'.ggmuller.populations.{suffix}')
		self.ggmuller_edges: Path = tables_folder / (name + f'.ggmuller.edges.{suffix}')
		#self.muller_table: Path = tables_folder / (name + f'.mullerdataframe.csv')  # This is generated in r.
		self.table_muller: Path = tables_folder / (name + f".mullerdataframe.{suffix}")

		self.linkage_matrix_table = tables_folder / (name + f".linkagematrix.tsv")
		self.distance_matrix: Path = tables_folder / (name + f".distance.{suffix}")

		# graphics
		# Muller Plots
		# The muller diagram generator will automatically add filetype extensions and an svg render of each file.
		self.muller_diagram_clade_annotated: Path = graphics_clade_folder / (name + '.clade.annotated')
		self.muller_diagram_clade_unannotated: Path = graphics_clade_folder / (name + '.clade.unannotated')
		self.muller_diagram_distinct_annotated: Path = graphics_distinctive_folder / (name + '.distinct.annotated')
		self.muller_diagram_distinct_unannotated: Path = graphics_distinctive_folder / (name + '.distinct.unannotated')

		##Timeseries plots
		self.timeseries_plot_genotype_unique: Path = graphics_distinctive_folder / (name + '.genotypes.unique')
		self.timeseries_plot_genotype_clade: Path = graphics_clade_folder / (name + 'genotypes.clade')
		self.timeseries_plot_trajectory: Path = graphics_distinctive_folder / (name + f".trajectories")

		## Geneology plots
		self.lineage_image_distinct: Path = graphics_distinctive_folder / (name + f".lineage.unique.png")
		self.lineage_image_clade: Path = output_folder / (name + '.lineage.clade.png')

		## Other plots
		self.distance_heatmap: Path = graphics_folder / (name + f".pairwisedistance.svg")
		self.linkage_plot = graphics_folder / (name + f".dendrogram.png")

		# scripts
		self.r_script: Path = scripts_folder / (name + '.r')
		self.muller_diagram_r_script: Path = graphics_folder / (name + '.rscript.png')
		# self.mermaid_script: Path = scripts_folder / (name + '.mermaid.md')

		# supplementary files
		self.parameters: Path = supplementary_folder / (name + '.options.json')
		self.lineage_confidence_scores: Path = supplementary_folder / (name + '.lineagescores.tsv')
		self.genotype_information: Path = supplementary_folder / (name + '.genotypeinformation.json')

	@property
	def delimiter(self) -> str:
		if self.suffix == 'tsv':
			return '\t'
		else:
			return ','
