Metadata-Version: 2.1
Name: great_expectations
Version: 0.7.7
Summary: Always know what to expect from your data.
Home-page: https://github.com/great-expectations/great_expectations
Author: The Great Expectations Team
Author-email: team@greatexpectations.io
License: Apache-2.0
Description: |Build Status| |Coverage Status| |Documentation Status|
        
        Great Expectations
        ==================
        
        *Always know what to expect from your data.*
        
        What is great_expectations?
        ---------------------------
        
        Great Expectations helps teams save time and promote analytic integrity
        by offering a unique approach to automated testing: pipeline tests.
        Pipeline tests are applied to data (instead of code) and at batch time
        (instead of compile or deploy time). Pipeline tests are like unit tests
        for datasets: they help you guard against upstream data changes and
        monitor data quality.
        
        Software developers have long known that automated testing is essential
        for managing complex codebases. Great Expectations brings the same
        discipline, confidence, and acceleration to data science and engineering
        teams.
        
        Why would I use Great Expectations?
        -----------------------------------
        
        To get more done with data, faster. Teams use great_expectations to
        
        -  Save time during data cleaning and munging.
        -  Accelerate ETL and data normalization.
        -  Streamline analyst-to-engineer handoffs.
        -  Monitor data quality in production data pipelines and data products.
        -  Simplify debugging data pipelines if (when) they break.
        -  Codify assumptions used to build models when sharing with distributed
           teams or other analysts.
        
        How do I get started?
        ---------------------
        
        It’s easy! First use pip install:
        
        ::
        
               $ pip install great_expectations
        
           Then run this command in the root directory of the project you want to try Great Expectations on:
        
               $ great_expectations init
        
        You can also clone the repository, which includes examples of using
        great_expectations.
        
        ::
        
           $ git clone https://github.com/great-expectations/great_expectations.git
           $ pip install great_expectations/
        
        What expectations are available?
        --------------------------------
        
        Expectations include: - ``expect_table_row_count_to_equal`` -
        ``expect_column_values_to_be_unique`` -
        ``expect_column_values_to_be_in_set`` -
        ``expect_column_mean_to_be_between`` - …and many more
        
        Visit the `glossary of
        expectations <http://great-expectations.readthedocs.io/en/latest/glossary.html>`__
        for a complete list of expectations that are currently part of the great
        expectations vocabulary.
        
        Can I contribute?
        -----------------
        
        Absolutely. Yes, please. Start
        `here <https://github.com/great-expectations/great_expectations/blob/develop/CONTRIBUTING.md>`__,
        and don’t be shy with questions!
        
        How do I learn more?
        --------------------
        
        For full documentation, visit `Great Expectations on
        readthedocs.io <http://great-expectations.readthedocs.io/en/latest/>`__.
        
        `Down with Pipeline
        Debt! <https://medium.com/@expectgreatdata/down-with-pipeline-debt-introducing-great-expectations-862ddc46782a>`__
        explains the core philosophy behind Great Expectations. Please give it a
        read, and clap, follow, and share while you’re at it.
        
        For quick, hands-on introductions to Great Expectations’ key features,
        check out our walkthrough videos:
        
        -  `Introduction to Great
           Expectations <https://www.youtube.com/watch?v=-_0tG7ACNU4>`__
        -  `Using Distributional
           Expectations <https://www.youtube.com/watch?v=l3DYPVZAUmw&t=20s>`__
        
        What’s the best way to get in touch with the Great Expectations team?
        ---------------------------------------------------------------------
        
        If you have questions, comments, feature requests, etc., `opening an
        issue <https://github.com/great-expectations/great_expectations/issues/new>`__
        is definitely the best path forward.
        
        We also have a slack channel, which you can join here:
        https://tinyurl.com/great-expectations-slack
        
        Great Expectations doesn’t do X. Is it right for my use case?
        -------------------------------------------------------------
        
        It depends. If you have needs that the library doesn’t meet yet, please
        `upvote an existing
        issue(s) <https://github.com/great-expectations/great_expectations/issues>`__
        or `open a new
        issue <https://github.com/great-expectations/great_expectations/issues/new>`__
        and we’ll see what we can do. Great Expectations is under active
        development, so your use case might be supported soon.
        
        .. |Build Status| image:: https://travis-ci.org/great-expectations/great_expectations.svg?branch=develop
           :target: https://travis-ci.org/great-expectations/great_expectations
        .. |Coverage Status| image:: https://coveralls.io/repos/github/great-expectations/great_expectations/badge.svg?branch=develop
           :target: https://coveralls.io/github/great-expectations/great_expectations?branch=develop
        .. |Documentation Status| image:: https://readthedocs.org/projects/great-expectations/badge/?version=latest
           :target: http://great-expectations.readthedocs.io/en/latest/?badge=latest
        
Keywords: data science testing pipeline data quality dataquality validation datavalidation
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: Intended Audience :: Other Audience
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Software Development
Classifier: Topic :: Software Development :: Testing
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Provides-Extra: spark
Provides-Extra: airflow
Provides-Extra: sqlalchemy
