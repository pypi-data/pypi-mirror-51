####################################################################
## This file is automatically generated
## Do not edit manually
####################################################################

from .reactopyacolabwidget import ReactopyaColabWidget
from .reactopyaelectronwidget import ReactopyaElectronWidget
from .init import _get_init_info

from .widgets import Accordion as AccordionOrig
from .widgets import VBox as VBoxOrig
from .widgets import Surface3dVtp as Surface3dVtpOrig
from .widgets import HBox as HBoxOrig
from .widgets import Surface3d as Surface3dOrig
from .widgets import Tabs as TabsOrig



class Accordion:
    """Jupyter widget for Accordion"""

    def __init__(self, *args, **kwargs):
        super().__init__()
        self._props = dict(**kwargs)
        self._children = list(args)
        self._component = AccordionOrig()
        self._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, []))
        self._connect_children(self._children, [])
        self._reactopya_widget = None
        self._component.init_jupyter()
    
    def _connect_children(self, children, child_indices):
        for i, ch in enumerate(children):
            self._connect_child(ch, child_indices + [i])
            self._connect_children(ch._children, child_indices + [i])
    
    def _connect_child(self, child, child_indices):
        child._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, child_indices))
    
    def _handle_python_state_changed(self, state, child_indices):
        if self._reactopya_widget:
            self._reactopya_widget.set_python_state(state, child_indices)

    def _handle_javascript_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        ptr._component._handle_javascript_state_changed(state)

    def _serialize(self):
        return dict(
            project_name='ccm_widgets',
            type='Accordion',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )

    def _reactopya_widget(self):
        return self._reactopya_widget

    def show(self):
        init_info = _get_init_info()
        if init_info['mode'] == 'jupyter':
            from reactopya_jup import ReactopyaWidget as ReactopyaJupyterWidget
            RW = ReactopyaJupyterWidget
        elif init_info['mode'] == 'colab':
            RW = ReactopyaColabWidget
        elif init_info['mode'] == 'electron':
            RW = ReactopyaElectronWidget
        self._reactopya_widget = RW(
            project_name='ccm_widgets',
            type='Accordion',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )
        if init_info['mode'] == 'colab':
            self._reactopya_widget._set_bundle_js(init_info['bundle_js'], store_bundle_in_notebook=init_info['store_bundle_in_notebook'])
        elif init_info['mode'] == 'electron':
            self._reactopya_widget._set_bundle_fname(init_info['bundle_fname'])
            self._reactopya_widget._set_electron_src(init_info['electron_src'])
        self._reactopya_widget.on_javascript_state_changed(self._handle_javascript_state_changed)

        self._reactopya_widget.show()

class VBox:
    """Jupyter widget for VBox"""

    def __init__(self, *args, **kwargs):
        super().__init__()
        self._props = dict(**kwargs)
        self._children = list(args)
        self._component = VBoxOrig()
        self._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, []))
        self._connect_children(self._children, [])
        self._reactopya_widget = None
        self._component.init_jupyter()
    
    def _connect_children(self, children, child_indices):
        for i, ch in enumerate(children):
            self._connect_child(ch, child_indices + [i])
            self._connect_children(ch._children, child_indices + [i])
    
    def _connect_child(self, child, child_indices):
        child._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, child_indices))
    
    def _handle_python_state_changed(self, state, child_indices):
        if self._reactopya_widget:
            self._reactopya_widget.set_python_state(state, child_indices)

    def _handle_javascript_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        ptr._component._handle_javascript_state_changed(state)

    def _serialize(self):
        return dict(
            project_name='ccm_widgets',
            type='VBox',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )

    def _reactopya_widget(self):
        return self._reactopya_widget

    def show(self):
        init_info = _get_init_info()
        if init_info['mode'] == 'jupyter':
            from reactopya_jup import ReactopyaWidget as ReactopyaJupyterWidget
            RW = ReactopyaJupyterWidget
        elif init_info['mode'] == 'colab':
            RW = ReactopyaColabWidget
        elif init_info['mode'] == 'electron':
            RW = ReactopyaElectronWidget
        self._reactopya_widget = RW(
            project_name='ccm_widgets',
            type='VBox',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )
        if init_info['mode'] == 'colab':
            self._reactopya_widget._set_bundle_js(init_info['bundle_js'], store_bundle_in_notebook=init_info['store_bundle_in_notebook'])
        elif init_info['mode'] == 'electron':
            self._reactopya_widget._set_bundle_fname(init_info['bundle_fname'])
            self._reactopya_widget._set_electron_src(init_info['electron_src'])
        self._reactopya_widget.on_javascript_state_changed(self._handle_javascript_state_changed)

        self._reactopya_widget.show()

class Surface3dVtp:
    """Jupyter widget for Surface3dVtp"""

    def __init__(self, *args, **kwargs):
        super().__init__()
        self._props = dict(**kwargs)
        self._children = list(args)
        self._component = Surface3dVtpOrig()
        self._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, []))
        self._connect_children(self._children, [])
        self._reactopya_widget = None
        self._component.init_jupyter()
    
    def _connect_children(self, children, child_indices):
        for i, ch in enumerate(children):
            self._connect_child(ch, child_indices + [i])
            self._connect_children(ch._children, child_indices + [i])
    
    def _connect_child(self, child, child_indices):
        child._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, child_indices))
    
    def _handle_python_state_changed(self, state, child_indices):
        if self._reactopya_widget:
            self._reactopya_widget.set_python_state(state, child_indices)

    def _handle_javascript_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        ptr._component._handle_javascript_state_changed(state)

    def _serialize(self):
        return dict(
            project_name='ccm_widgets',
            type='Surface3dVtp',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )

    def _reactopya_widget(self):
        return self._reactopya_widget

    def show(self):
        init_info = _get_init_info()
        if init_info['mode'] == 'jupyter':
            from reactopya_jup import ReactopyaWidget as ReactopyaJupyterWidget
            RW = ReactopyaJupyterWidget
        elif init_info['mode'] == 'colab':
            RW = ReactopyaColabWidget
        elif init_info['mode'] == 'electron':
            RW = ReactopyaElectronWidget
        self._reactopya_widget = RW(
            project_name='ccm_widgets',
            type='Surface3dVtp',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )
        if init_info['mode'] == 'colab':
            self._reactopya_widget._set_bundle_js(init_info['bundle_js'], store_bundle_in_notebook=init_info['store_bundle_in_notebook'])
        elif init_info['mode'] == 'electron':
            self._reactopya_widget._set_bundle_fname(init_info['bundle_fname'])
            self._reactopya_widget._set_electron_src(init_info['electron_src'])
        self._reactopya_widget.on_javascript_state_changed(self._handle_javascript_state_changed)

        self._reactopya_widget.show()

class HBox:
    """Jupyter widget for HBox"""

    def __init__(self, *args, **kwargs):
        super().__init__()
        self._props = dict(**kwargs)
        self._children = list(args)
        self._component = HBoxOrig()
        self._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, []))
        self._connect_children(self._children, [])
        self._reactopya_widget = None
        self._component.init_jupyter()
    
    def _connect_children(self, children, child_indices):
        for i, ch in enumerate(children):
            self._connect_child(ch, child_indices + [i])
            self._connect_children(ch._children, child_indices + [i])
    
    def _connect_child(self, child, child_indices):
        child._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, child_indices))
    
    def _handle_python_state_changed(self, state, child_indices):
        if self._reactopya_widget:
            self._reactopya_widget.set_python_state(state, child_indices)

    def _handle_javascript_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        ptr._component._handle_javascript_state_changed(state)

    def _serialize(self):
        return dict(
            project_name='ccm_widgets',
            type='HBox',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )

    def _reactopya_widget(self):
        return self._reactopya_widget

    def show(self):
        init_info = _get_init_info()
        if init_info['mode'] == 'jupyter':
            from reactopya_jup import ReactopyaWidget as ReactopyaJupyterWidget
            RW = ReactopyaJupyterWidget
        elif init_info['mode'] == 'colab':
            RW = ReactopyaColabWidget
        elif init_info['mode'] == 'electron':
            RW = ReactopyaElectronWidget
        self._reactopya_widget = RW(
            project_name='ccm_widgets',
            type='HBox',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )
        if init_info['mode'] == 'colab':
            self._reactopya_widget._set_bundle_js(init_info['bundle_js'], store_bundle_in_notebook=init_info['store_bundle_in_notebook'])
        elif init_info['mode'] == 'electron':
            self._reactopya_widget._set_bundle_fname(init_info['bundle_fname'])
            self._reactopya_widget._set_electron_src(init_info['electron_src'])
        self._reactopya_widget.on_javascript_state_changed(self._handle_javascript_state_changed)

        self._reactopya_widget.show()

class Surface3d:
    """Jupyter widget for Surface3d"""

    def __init__(self, *args, **kwargs):
        super().__init__()
        self._props = dict(**kwargs)
        self._children = list(args)
        self._component = Surface3dOrig()
        self._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, []))
        self._connect_children(self._children, [])
        self._reactopya_widget = None
        self._component.init_jupyter()
    
    def _connect_children(self, children, child_indices):
        for i, ch in enumerate(children):
            self._connect_child(ch, child_indices + [i])
            self._connect_children(ch._children, child_indices + [i])
    
    def _connect_child(self, child, child_indices):
        child._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, child_indices))
    
    def _handle_python_state_changed(self, state, child_indices):
        if self._reactopya_widget:
            self._reactopya_widget.set_python_state(state, child_indices)

    def _handle_javascript_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        ptr._component._handle_javascript_state_changed(state)

    def _serialize(self):
        return dict(
            project_name='ccm_widgets',
            type='Surface3d',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )

    def _reactopya_widget(self):
        return self._reactopya_widget

    def show(self):
        init_info = _get_init_info()
        if init_info['mode'] == 'jupyter':
            from reactopya_jup import ReactopyaWidget as ReactopyaJupyterWidget
            RW = ReactopyaJupyterWidget
        elif init_info['mode'] == 'colab':
            RW = ReactopyaColabWidget
        elif init_info['mode'] == 'electron':
            RW = ReactopyaElectronWidget
        self._reactopya_widget = RW(
            project_name='ccm_widgets',
            type='Surface3d',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )
        if init_info['mode'] == 'colab':
            self._reactopya_widget._set_bundle_js(init_info['bundle_js'], store_bundle_in_notebook=init_info['store_bundle_in_notebook'])
        elif init_info['mode'] == 'electron':
            self._reactopya_widget._set_bundle_fname(init_info['bundle_fname'])
            self._reactopya_widget._set_electron_src(init_info['electron_src'])
        self._reactopya_widget.on_javascript_state_changed(self._handle_javascript_state_changed)

        self._reactopya_widget.show()

class Tabs:
    """Jupyter widget for Tabs"""

    def __init__(self, *args, **kwargs):
        super().__init__()
        self._props = dict(**kwargs)
        self._children = list(args)
        self._component = TabsOrig()
        self._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, []))
        self._connect_children(self._children, [])
        self._reactopya_widget = None
        self._component.init_jupyter()
    
    def _connect_children(self, children, child_indices):
        for i, ch in enumerate(children):
            self._connect_child(ch, child_indices + [i])
            self._connect_children(ch._children, child_indices + [i])
    
    def _connect_child(self, child, child_indices):
        child._component.on_python_state_changed(lambda state: self._handle_python_state_changed(state, child_indices))
    
    def _handle_python_state_changed(self, state, child_indices):
        if self._reactopya_widget:
            self._reactopya_widget.set_python_state(state, child_indices)

    def _handle_javascript_state_changed(self, state, child_indices):
        ptr = self
        for ind in child_indices:
            ptr = ptr._children[ind]
        ptr._component._handle_javascript_state_changed(state)

    def _serialize(self):
        return dict(
            project_name='ccm_widgets',
            type='Tabs',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )

    def _reactopya_widget(self):
        return self._reactopya_widget

    def show(self):
        init_info = _get_init_info()
        if init_info['mode'] == 'jupyter':
            from reactopya_jup import ReactopyaWidget as ReactopyaJupyterWidget
            RW = ReactopyaJupyterWidget
        elif init_info['mode'] == 'colab':
            RW = ReactopyaColabWidget
        elif init_info['mode'] == 'electron':
            RW = ReactopyaElectronWidget
        self._reactopya_widget = RW(
            project_name='ccm_widgets',
            type='Tabs',
            children=[
                ch._serialize()
                for ch in self._children
            ],
            props=self._props
        )
        if init_info['mode'] == 'colab':
            self._reactopya_widget._set_bundle_js(init_info['bundle_js'], store_bundle_in_notebook=init_info['store_bundle_in_notebook'])
        elif init_info['mode'] == 'electron':
            self._reactopya_widget._set_bundle_fname(init_info['bundle_fname'])
            self._reactopya_widget._set_electron_src(init_info['electron_src'])
        self._reactopya_widget.on_javascript_state_changed(self._handle_javascript_state_changed)

        self._reactopya_widget.show()
