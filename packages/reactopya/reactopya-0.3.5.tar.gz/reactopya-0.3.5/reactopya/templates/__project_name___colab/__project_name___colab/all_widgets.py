####################################################################
## This file is automatically generated
## Do not edit manually
####################################################################

import IPython
import json
import simplejson
import uuid
import base64
import os

{% for widget in widgets -%}
from .widgets import {{ widget.componentName }} as {{ widget.componentName }}Orig
{% endfor %}

def _json_parse(x):
    try:
        return json.loads(x)
    except:
        return None

def _json_stringify(x):
    try:
        return simplejson.dumps(x, ignore_nan=True)
    except:
        return ''

{% for widget in widgets %}
class {{ widget.componentName }}:
    """Colab widget for {{ widget.componentName }}"""

    def __init__(self, **kwargs):
        super().__init__()
        self._model_id = uuid.uuid4().hex.upper()
        self._X = {{ widget.componentName }}Orig()
        self._X.on_python_state_changed(self._handle_python_state_changed)
        self._model = ReactopyaColabWidgetModelPy(self._model_id)
        self._props = dict(**kwargs)

    def _handle_python_state_changed(self):
        for key in [{%- for name in widget.pythonStateKeys -%}'{{ name }}'{%- if not loop.last %}, {% endif %}{% endfor %}]:
            val = self._X.get_python_state(key, None)
            self._model.set(key, _json_stringify(val), sync=True)

    def _handle_callback(self, command, *, changes=None):
        if command == 'save_changes':
            state = dict()
            for key, val in changes.items():
                self._model.set(key, val)
                state[key] = simplejson.loads(val)
            self._X._handle_javascript_state_changed(state)
        elif command == 'load_bundle_and_show':
            dirname = os.path.dirname(os.path.realpath(__file__))
            fname = os.path.join(dirname, 'dist', 'bundle.js')
            with open(fname, 'r') as f:
                js = f.read()
            display(IPython.display.Javascript(js))
            self._handle_callback('show')
        elif command == 'show':
            js_code = '''
            {
                window.reactopya_bundle_status = 'loaded';
                let props0 = [props];
                function onSaveChanges(changes) {
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['save_changes'], {changes: changes});
                }
                let model = window.reactopya_colab.widgets.{{ widget.componentName }}.render(props0, onSaveChanges);
                if (!window.reactopya_colab_widget_models)
                    window.reactopya_colab_widget_models = {};
                window.reactopya_colab_widget_models['[model_id]'] = model;
            }
            '''
            js_code = js_code.replace('[model_id]', self._model_id)
            js_code = js_code.replace('[props]', simplejson.dumps(self._props))
            display(IPython.display.Javascript(js_code))


    def show(self):
        from google.colab import output as colab_output  # pylint: disable=import-error
        colab_output.register_callback('reactopya.{}'.format(self._model_id), self._handle_callback)

        js_code = '''
        {
            function try_show() {
                if (window.reactopya_bundle_status == 'loaded') {
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['show'], {});
                    return;
                }
                else if (window.reactopya_bundle_status == 'loading') {
                    setTimeout(try_show ,1000);
                    return;
                }
                else {
                    window.reactopya_bundle_status = 'loading';
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['load_bundle_and_show'], {});
                }
            }
            try_show();
        }
        '''
        js_code = js_code.replace('[model_id]', self._model_id)
        display(IPython.display.Javascript(js_code))

{% endfor %}

class ReactopyaColabWidgetModelPy:
    def __init__(self, model_id):
        self._model_id = model_id
        self._data = dict()  # values are all strings
        self._change_handlers = dict()
    def set(self, key, val, *, sync=False):
        if key in self._data:
            if self._data[key] == val:
                return
        self._data[key] = val
        if key in self._change_handlers:
            for handler in self._change_handlers[key]:
                handler()
        if sync:
            js_code = '''
            window.reactopya_colab_widget_models['[model_id]'].set('[key]', atob('[value_b64]'));
            '''
            value_b64 = base64.b64encode(val.encode('utf-8')).decode()
            js_code = js_code.replace('[model_id]', self._model_id)
            js_code = js_code.replace('[key]', key)
            js_code = js_code.replace('[value_b64]', value_b64)
            display(IPython.display.Javascript(js_code))
    def get(self, key, defaultval):
        if key not in self._data:
            return defaultval
        return self._data[key]
    def onChange(self, key, handler):
        if key not in self._change_handlers:
            self._change_handlers[key] = []
        self._change_handlers[key].append(handler)