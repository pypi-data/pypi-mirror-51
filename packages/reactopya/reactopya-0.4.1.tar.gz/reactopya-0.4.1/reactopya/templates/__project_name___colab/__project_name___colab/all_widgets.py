####################################################################
# This file is automatically generated
# Do not edit manually
####################################################################

import IPython
import json
import simplejson
import uuid
import base64
import os

{% for widget in widgets -%}
from .widgets import {{widget.type}} as {{widget.type}}Orig
{% endfor %}

{% for widget in widgets %}
class {{widget.type}}:
    """Colab widget for {{ widget.type }}"""

    def __init__(self, *args, **kwargs):
        super().__init__()
        self._model_id = uuid.uuid4().hex.upper()
        self._component = {{widget.type}}Orig()
        self._component.on_python_state_changed(
            self._handle_python_state_changed)
        self._children = list(args)
        self._props = dict(**kwargs)
        if 'key' in self._props:
            self._key = self._props['key']
            del self._props['key']
        else:
            self._key = ''

    def _handle_python_state_changed(self, state):
        js_code = '''
        let json = atob('[python_state_json_b64]');
        let state = JSON.parse(json);
        window.reactopya_colab_widget_models['[model_id]'].setPythonState(state);
        '''
        python_state_json_b64 = base64.b64encode(simplejson.dumps(
            state, ignore_nan=True).encode('utf-8')).decode()
        js_code = js_code.replace('[model_id]', self._model_id)
        js_code = js_code.replace(
            '[python_state_json_b64]', python_state_json_b64)
        display(IPython.display.Javascript(js_code))

    def _js_model_injection(self):
        from google.colab import output as colab_output  # pylint: disable=import-error
        colab_output.register_callback('reactopya.{}'.format(self._model_id), self._handle_callback)
        js_code = '''
        let model = new window.JavaScriptPythonStateModel();
        model.onJavaScriptStateChanged(function(state) {
            google.colab.kernel.invokeFunction('reactopya.[model_id]', ['handleJavaScriptStateChanged'], {state: state});
        });
        window.reactopya_colab_widget_models['[model_id]'] = model;
        '''
        js_code = js_code.replace('[model_id]', self._model_id)
        for ch in self._children:
            js2 = ch._js_model_injection()
            js_code = js_code + '\n' + js2
        return js_code

    def _handle_callback(self, command, *, state=None):
        if command == 'handleJavaScriptStateChanged':
            self._component._handle_javascript_state_changed(state)
        elif command == 'load_bundle_and_show':
            dirname = os.path.dirname(os.path.realpath(__file__))
            fname = os.path.join(dirname, 'dist', 'bundle.js')
            with open(fname, 'r') as f:
                js = f.read()
            display(IPython.display.Javascript(js))
            self._handle_callback('show')
        elif command == 'show':
            js_code = '''
            {
                window.reactopya_bundle_status = 'loaded';
                if (!window.reactopya_colab_widget_models)
                    window.reactopya_colab_widget_models = {};
                [js_model_injection]
                let props0 = JSON.parse(atob('[props_json_b64]'));
                let children0 = JSON.parse(atob('[children_json_b64]'));
                let key0 = '[key]';
                let model0 = window.reactopya_colab_widget_models['[model_id]'];
                props0.javaScriptPythonStateModel = model0;
                function set_models_of_children(children) {
                    for (let ch0 of children) {
                        ch0.props.javaScriptPythonStateModel = window.reactopya_colab_widget_models[ch0.model_id];
                        set_models_of_children(ch0.children || []);
                    }
                }
                set_models_of_children(children0);
                window.reactopya_colab.widgets.{{ widget.type }}.render(children0, props0, key0);
            }
            '''
            children_serialized = [
                ch._serialize()
                for ch in self._children
            ]
            js_code = js_code.replace('[model_id]', self._model_id)
            js_code = js_code.replace('[props_json_b64]', base64.b64encode(
                simplejson.dumps(self._props, ignore_nan=True).encode('utf-8')).decode())
            js_code = js_code.replace('[children_json_b64]', base64.b64encode(
                simplejson.dumps(children_serialized, ignore_nan=True).encode('utf-8')).decode())
            js_code = js_code.replace('[key]', self._key)
            js_code = js_code.replace('[js_model_injection]', self._js_model_injection())
            display(IPython.display.Javascript(js_code))

    def _serialize(self):
        return dict(
            type='{{ widget.type }}',
            children=[ch._serialize() for ch in self._children],
            props=self._props,
            key=self._key,
            model_id=self._model_id
        )

    def show(self):
        from google.colab import output as colab_output  # pylint: disable=import-error
        colab_output.register_callback('reactopya.{}'.format(
            self._model_id), self._handle_callback)

        js_code = '''
        {
            function try_show() {
                if (window.reactopya_bundle_status == 'loaded') {
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['show'], {});
                    return;
                }
                else if (window.reactopya_bundle_status == 'loading') {
                    setTimeout(try_show ,1000);
                    return;
                }
                else {
                    window.reactopya_bundle_status = 'loading';
                    google.colab.kernel.invokeFunction('reactopya.[model_id]', ['load_bundle_and_show'], {});
                }
            }
            try_show();
        }
        '''
        js_code = js_code.replace('[model_id]', self._model_id)
        display(IPython.display.Javascript(js_code))
{% endfor %}
