////////////////////////////////////////////////////////////////////
// This file is automatically generated
// Do not edit manually
////////////////////////////////////////////////////////////////////

var widgets = require('@jupyter-widgets/base');
var _ = require('lodash');

require('../dist/bundle.js');

{% for widget in widgets %}
class {{ widget.componentName }}Model extends widgets.DOMWidgetModel {
    initialize(attributes, options) {
        super.initialize(attributes, options);
        this.listenTo(this, 'msg:custom', _.bind(this.handleMessage, this));
    }
    handleMessage(content) {
        console.log('--------------- got message', content);
    }
    defaults() {
        return _.extend(widgets.DOMWidgetModel.prototype.defaults(), {
            _model_name : '{{ widget.componentName }}Model',
            _view_name : '{{ widget.componentName }}View',
            _model_module : '{{ project_name }}_jup',
            _view_module : '{{ project_name }}_jup',
            _model_module_version : '{{ version }}',
            _view_module_version : '{{ version }}',

            // Props
            _props: {},

            // Python state
            {% for name in widget.pythonStateKeys -%}
            {{ name }}: '',
            {% endfor %}

            // JavaScript state
            {% for name in widget.javaScriptStateKeys -%}
            {{ name }}: '',
            {% endfor %}

            __dummy: ''
        });
    }
}

// Custom View. Renders the widget model.
class {{ widget.componentName }}View extends widgets.DOMWidgetView {
    initialize(parameters) {
        super.initialize(parameters);
    }
    render() {
        this.div=document.createElement('div');
        this.el.appendChild(this.div);

        let props = this.model.get('_props');
        props.jupyterModel = this.model;
        window.reactopya.widgets.{{ widget.componentName }}.render(this.div, props);
    }
}
{% endfor %}


module.exports = {
{% for widget in widgets -%}
    {{ widget.componentName }}Model: {{ widget.componentName }}Model,
    {{ widget.componentName }}View: {{ widget.componentName }}View{%- if not loop.last %},{% endif %}
{% endfor %}
};