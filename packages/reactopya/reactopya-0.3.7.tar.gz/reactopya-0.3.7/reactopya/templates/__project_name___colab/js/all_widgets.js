////////////////////////////////////////////////////////////////////
// This file is automatically generated
// Do not edit manually
////////////////////////////////////////////////////////////////////

require('../../{{ project_name }}_bundle/dist/bundle.js');

window.reactopya_colab = window.reactopya_colab || {};
window.reactopya_colab.widgets = window.reactopya_colab.widgets || {};

{% for widget in widgets %}
window.reactopya_colab.widgets['{{ widget.componentName }}'] = {
    render: function(props, onSaveChanges) {
        let model = new ReactopyaColabWidgetModel();
        model.onSaveChanges(onSaveChanges);
        let div = document.createElement('div');
        document.querySelector("#output-area").appendChild(div);
        props.jupyterModel = model;
        window.reactopya.widgets.{{ widget.componentName }}.render(div, props);
        return model;
    }
}
{% endfor %}

class ReactopyaColabWidgetModel {
    constructor() {
        this._changeHandlers = {};
        this._data = {}; // values are all strings
        this._changes_to_save = {};
        this._save_changes_handlers = [];
    }
    on(name, handler) {
        if (name.startsWith('change:')) {
            let key = name.slice('change:'.length);
            if (!this._changeHandlers[key])
                this._changeHandlers[key] = [];
            this._changeHandlers[key].push(handler);
        }
        else {
            console.warn(`Unrecognized name in ColabJupyterModel.on: ${name}`);
        }
    }
    onSaveChanges(handler) {
        this._save_changes_handlers.push(handler);
    }
    get(key, defaultval) {
        if (key in this._data)
            return this._data[key];
        else
            return defaultval;
    }
    set(key, val) {
        if (key in this._data) {
            if (val == this._data[key])
                return;
        }
        this._data[key] = val;
        this._changes_to_save[key] = val;
        if (key in this._changeHandlers) {
            for (let handler of this._changeHandlers[key]) {
                handler();
            }
        }
        return null;
    }
    save_changes() {
        for (let handler of this._save_changes_handlers) {
            handler(this._changes_to_save);
        }
        this._changes_to_save = {};
        return null;
    }

}