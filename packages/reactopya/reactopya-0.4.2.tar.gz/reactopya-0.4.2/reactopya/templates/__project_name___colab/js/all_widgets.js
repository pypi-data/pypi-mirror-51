////////////////////////////////////////////////////////////////////
// This file is automatically generated
// Do not edit manually
////////////////////////////////////////////////////////////////////

require('../../{{ project_name }}_bundle/dist/bundle.js');

window.reactopya_colab = window.reactopya_colab || {};
window.reactopya_colab.widgets = window.reactopya_colab.widgets || {};

{% for widget in widgets %}
window.reactopya_colab.widgets['{{ widget.type }}'] = {
    render: function(children, props, key) {
        let div = document.createElement('div');
        document.querySelector("#output-area").appendChild(div);
        window.reactopya.widgets.{{ widget.type }}.render(div, children, props, key);
    }
}
{% endfor %}

class JavaScriptPythonStateModel {
    constructor() {
        this._pythonStateStringified = {};
        this._javaScriptStateStringified = {};
        this._pythonStateChangedHandlers = [];
        this._javaScriptStateChangedHandlers = [];
    }
    setPythonState(state) {
        this._setStateHelper(state, this._pythonStateStringified, this._pythonStateChangedHandlers);
    }
    setJavaScriptState(state) {
        this._setStateHelper(state, this._javaScriptStateStringified, this._javaScriptStateChangedHandlers);
    }
    onPythonStateChanged(handler) {
        this._pythonStateChangedHandlers.push(handler);
    }
    onJavaScriptStateChanged(handler) {
        this._javaScriptStateChangedHandlers.push(handler);
    }
    _setStateHelper(state, existingStateStringified, handlers) {
        let changedState = {};
        let somethingChanged = false;
        for (let key in state) {
            let val = state[key];
            let valstr = JSON.stringify(val);
            if (valstr !== existingStateStringified[key]) {
                existingStateStringified[key] = val;
                changedState[key] = JSON.parse(valstr);
                somethingChanged = true;
            }
        }
        if (somethingChanged) {
            for (let handler of handlers) {
                handler(changedState);
            }
        }
    }
}

window.JavaScriptPythonStateModel = JavaScriptPythonStateModel;