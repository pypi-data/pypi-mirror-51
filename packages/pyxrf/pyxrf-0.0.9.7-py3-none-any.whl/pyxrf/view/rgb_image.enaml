# ######################################################################
# Copyright (c) 2014, Brookhaven Science Associates, Brookhaven        #
# National Laboratory. All rights reserved.                            #
#                                                                      #
# Redistribution and use in source and binary forms, with or without   #
#
#                                                                      #
# * Redistributions of source code must retain the above copyright     #
#   notice, this list of conditions and the following disclaimer.      #
#                                                                      #
# * Redistributions in binary form must reproduce the above copyright  #
#   notice this list of conditions and the following disclaimer in     #
#   the documentation and/or other materials provided with the         #
#   distribution.                                                      #
#                                                                      #
# * Neither the name of the Brookhaven Science Associates, Brookhaven  #
#   National Laboratory nor the names of its contributors may be used  #
#   to endorse or promote products derived from this software without  #
#   specific prior written permission.                                 #
#                                                                      #
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  #
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT    #
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS    #
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE       #
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,           #
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES   #
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR   #
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)   #
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  #
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OTHERWISE) ARISING   #
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   #
# POSSIBILITY OF SUCH DAMAGE.                                          #
########################################################################
from __future__ import absolute_import
__author__ = 'Li Li'

from enaml.widgets.api import (Container, PushButton, Label,
                               Form, Field, FileDialogEx, DockItem,
                               DockArea, MPLCanvas, CheckBox, ComboBox,
                               ScrollArea, Window, GroupBox,
                               Splitter, SplitItem, DualSlider)
from enaml.layout.api import hbox, vbox, HSplitLayout, VSplitLayout, spacer
from enaml.core.api import Include, Looper

from enaml.widgets.api import RadioButton as DefaultRadioButton

import six
import numpy as np
from matplotlib.figure import Figure

from pyxrf.model.fileio import print_image

import logging
logger = logging.getLogger()


enamldef RadioButton(DefaultRadioButton):
    minimum_size = (5, 26)
    maximum_size = (20, 26)

enamldef ImageRGB(DockItem):
    attr img_model_adv
    #attr choose_element

    Container:
        constraints = [
        vbox(
            #hbox(pb_all, spacer),
            hbox(cbox_file, cb_norm, spacer, pb_print),
            hbox(plot_btn, spacer, tb_check),
            #hbox(spacer, cb_select, cb_norm, tb_check),
            hbox(vbox(lb_select, sa_elements), vbox(canvas, ct_rgb),),
            ),
        ]

        ComboBox: cbox_file:
            items << ['Select Data'] + sorted(img_model_adv.data_dict_keys)
            #index := img_model_adv.data_opt
            index = 0
            index >> img_model_adv.data_opt
            minimum_size = (200,20)

        #ComboBox: cb_select:
        #    items = ['Linear', 'Log']
        #    index = 0
        #    index ::
        #        img_model_adv.scale_opt = cb_select.selected_item

        ComboBox: cb_norm:
            items << ['Normalized by '] + sorted(img_model_adv.scaler_items)
            index := img_model_adv.scaler_name_index

        PushButton: plot_btn:
            text = 'Show Image'
            clicked ::
                img_model_adv.show_image()

        PushButton: pb_print:
            text  ='Print'
            clicked ::
                print_image(img_model_adv.fig)

        CheckBox: tb_check:
            text = 'Toolbar Visible'
            checked := canvas.toolbar_visible

        Container: ct_rgb:
            constraints = [
                           vbox(
                           hbox(lb_name, lb_color, lb_range, spacer, reset),
                           hbox(ct_name, ct_r, ct_g, ct_b, slider, spacer),
                           ),
                           lb_name.width==ct_name.width,
                           ct_name.height==ct_r.height,
                           ct_name.height==ct_g.height,
                           ct_name.height==ct_b.height,
                           ct_r.height==slider.height,
                           ]
            Label: lb_name:
                text = 'Elements'
            Label: lb_color:
                text = '{:>7} {:>7} {:>7}'.format('Red','Green','Blue')
            Label: lb_range:
                text = '{:>36}'.format('0.0 ------------------------ 1.0')
            Container: ct_name:
                Looper: looper:
                    iterable << img_model_adv.rgb_name_list
                    Label:
                        text = loop_item
                        minimum_size = (10, 22)  # width, height
                        maximum_size = (100, 22)
            Container: ct_r:
                #constraints = [vbox(rb_r1, rb_r2, rb_r3, spacer)]
                RadioButton: rb_r1:
                    text = ''
                    checked = img_model_adv.index_red==0
                    clicked ::
                        if checked:
                            img_model_adv.index_red=0
                RadioButton: rb_r2:
                    text = ''
                    checked = img_model_adv.index_red==1
                    clicked ::
                        if checked:
                            img_model_adv.index_red=1
                RadioButton: rb_r3:
                    text = ''
                    checked = img_model_adv.index_red==2
                    clicked ::
                        if checked:
                            img_model_adv.index_red=2
            Container: ct_g:
                RadioButton: rb_g1:
                    text = ''
                    checked << img_model_adv.index_green==0
                    clicked ::
                        if checked:
                            img_model_adv.index_green=0
                RadioButton: rb_g2:
                    text = ''
                    checked << img_model_adv.index_green==1
                    clicked ::
                        if checked:
                            img_model_adv.index_green=1
                RadioButton: rb_g3:
                    text = ''
                    checked << img_model_adv.index_green==2
                    clicked ::
                        if checked:
                            img_model_adv.index_green=2
            Container: ct_b:
                RadioButton: rb_b1:
                    text = ''
                    checked << img_model_adv.index_blue==0
                    clicked ::
                        if checked:
                            img_model_adv.index_blue=0
                RadioButton: rb_b2:
                    text = ''
                    checked << img_model_adv.index_blue==1
                    clicked ::
                        if checked:
                            img_model_adv.index_blue=1
                RadioButton: rb_b3:
                    text = ''
                    checked << img_model_adv.index_blue==2
                    clicked ::
                        if checked:
                            img_model_adv.index_blue=2
            Container: slider:
                constraints = [vbox(slider_r, slider_g, slider_b)]
                DualSlider: slider_r:
                    minimum_size = (150, 22)
                    tick_interval = 100
                    minimum = 0
                    maximum = 100
                    low_value := img_model_adv.r_low
                    high_value := img_model_adv.r_high
                DualSlider: slider_g:
                    minimum_size = (150, 22)
                    tick_interval = 100
                    minimum = 0
                    maximum = 100
                    low_value := img_model_adv.g_low
                    high_value := img_model_adv.g_high
                DualSlider: slider_b:
                    minimum_size = (150, 22)
                    tick_interval = 100
                    minimum = 0
                    maximum = 100
                    low_value := img_model_adv.b_low
                    high_value := img_model_adv.b_high
            PushButton: reset:
                text = 'Reset'
                clicked ::
                    img_model_adv.init_rgb()
                    img_model_adv.show_image()
        MPLCanvas: canvas:
            toolbar_visible = True
            figure << img_model_adv.fig

        Label: lb_select:
            text = 'Select Three Items for RGB'
        ScrollArea: sa_elements:
            constraints = [height >= 100]
            Form: form_element:
                Looper: looper:
                    iterable << sorted(img_model_adv.items_in_selected_group)
                    Label:
                        #font = 'monospace'
                        text = '{:>10}'.format(loop_item)
                        #minimum_size = (10, 22)
                        #maximum_size = (100, 22)
                    CheckBox: element_btn:
                        text = ''
                        #minimum_size = (5, 22)
                        #maximum_size = (10, 22)
                        #checkable = True
                        checked << img_model_adv.plot_all
                        clicked ::
                            if checked:
                                img_model_adv.stat_dict[loop_item] = True
                                element_btn.checked = True
                            else:
                                img_model_adv.stat_dict[loop_item] = False
                                element_btn.checked = False
