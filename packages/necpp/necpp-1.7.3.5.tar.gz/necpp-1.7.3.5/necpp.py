# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_necpp')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_necpp')
    _necpp = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_necpp', [dirname(__file__)])
        except ImportError:
            import _necpp
            return _necpp
        try:
            _mod = imp.load_module('_necpp', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _necpp = swig_import_helper()
    del swig_import_helper
else:
    import _necpp
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def nec_create():
    return _necpp.nec_create()
nec_create = _necpp.nec_create

def nec_delete(in_context):
    return _necpp.nec_delete(in_context)
nec_delete = _necpp.nec_delete

def nec_wire(in_context, tag_id, segment_count, xw1, yw1, zw1, xw2, yw2, zw2, rad, rdel, rrad):
    return _necpp.nec_wire(in_context, tag_id, segment_count, xw1, yw1, zw1, xw2, yw2, zw2, rad, rdel, rrad)
nec_wire = _necpp.nec_wire

def nec_sp_card(in_context, ns, x1, y1, z1, x2, y2, z2):
    return _necpp.nec_sp_card(in_context, ns, x1, y1, z1, x2, y2, z2)
nec_sp_card = _necpp.nec_sp_card

def nec_sc_card(in_context, i2, x3, y3, z3, x4, y4, z4):
    return _necpp.nec_sc_card(in_context, i2, x3, y3, z3, x4, y4, z4)
nec_sc_card = _necpp.nec_sc_card

def nec_gm_card(in_context, itsi, nrpt, rox, roy, roz, xs, ys, zs, its):
    return _necpp.nec_gm_card(in_context, itsi, nrpt, rox, roy, roz, xs, ys, zs, its)
nec_gm_card = _necpp.nec_gm_card

def nec_gx_card(in_context, i1, i2):
    return _necpp.nec_gx_card(in_context, i1, i2)
nec_gx_card = _necpp.nec_gx_card

def nec_geometry_complete(in_context, gpflag):
    return _necpp.nec_geometry_complete(in_context, gpflag)
nec_geometry_complete = _necpp.nec_geometry_complete

def nec_benchmark():
    return _necpp.nec_benchmark()
nec_benchmark = _necpp.nec_benchmark

def nec_error_message():
    return _necpp.nec_error_message()
nec_error_message = _necpp.nec_error_message

def nec_medium_parameters(in_context, permittivity, permeability):
    return _necpp.nec_medium_parameters(in_context, permittivity, permeability)
nec_medium_parameters = _necpp.nec_medium_parameters

def nec_gn_card(in_context, iperf, nradl, epse, sig, tmp3, tmp4, tmp5, tmp6):
    return _necpp.nec_gn_card(in_context, iperf, nradl, epse, sig, tmp3, tmp4, tmp5, tmp6)
nec_gn_card = _necpp.nec_gn_card

def nec_fr_card(in_context, in_ifrq, in_nfrq, in_freq_mhz, in_del_freq):
    return _necpp.nec_fr_card(in_context, in_ifrq, in_nfrq, in_freq_mhz, in_del_freq)
nec_fr_card = _necpp.nec_fr_card

def nec_ek_card(in_context, itmp1):
    return _necpp.nec_ek_card(in_context, itmp1)
nec_ek_card = _necpp.nec_ek_card

def nec_ld_card(in_context, ldtyp, ldtag, ldtagf, ldtagt, tmp1, tmp2, tmp3):
    return _necpp.nec_ld_card(in_context, ldtyp, ldtag, ldtagf, ldtagt, tmp1, tmp2, tmp3)
nec_ld_card = _necpp.nec_ld_card

def nec_ex_card(in_context, extype, i2, i3, i4, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6):
    return _necpp.nec_ex_card(in_context, extype, i2, i3, i4, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6)
nec_ex_card = _necpp.nec_ex_card

def nec_excitation_voltage(in_context, tag, segment, v_real, v_imag):
    return _necpp.nec_excitation_voltage(in_context, tag, segment, v_real, v_imag)
nec_excitation_voltage = _necpp.nec_excitation_voltage

def nec_excitation_current(in_context, x, y, z, a, beta, moment):
    return _necpp.nec_excitation_current(in_context, x, y, z, a, beta, moment)
nec_excitation_current = _necpp.nec_excitation_current

def nec_excitation_planewave(in_context, n_theta, n_phi, theta, phi, eta, dtheta, dphi, pol_ratio):
    return _necpp.nec_excitation_planewave(in_context, n_theta, n_phi, theta, phi, eta, dtheta, dphi, pol_ratio)
nec_excitation_planewave = _necpp.nec_excitation_planewave

def nec_tl_card(in_context, itmp1, itmp2, itmp3, itmp4, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6):
    return _necpp.nec_tl_card(in_context, itmp1, itmp2, itmp3, itmp4, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6)
nec_tl_card = _necpp.nec_tl_card

def nec_nt_card(in_context, itmp1, itmp2, itmp3, itmp4, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6):
    return _necpp.nec_nt_card(in_context, itmp1, itmp2, itmp3, itmp4, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6)
nec_nt_card = _necpp.nec_nt_card

def nec_xq_card(in_context, itmp1):
    return _necpp.nec_xq_card(in_context, itmp1)
nec_xq_card = _necpp.nec_xq_card

def nec_gd_card(in_context, tmp1, tmp2, tmp3, tmp4):
    return _necpp.nec_gd_card(in_context, tmp1, tmp2, tmp3, tmp4)
nec_gd_card = _necpp.nec_gd_card

def nec_rp_card(in_context, calc_mode, n_theta, n_phi, output_format, normalization, D, A, theta0, phi0, delta_theta, delta_phi, radial_distance, gain_norm):
    return _necpp.nec_rp_card(in_context, calc_mode, n_theta, n_phi, output_format, normalization, D, A, theta0, phi0, delta_theta, delta_phi, radial_distance, gain_norm)
nec_rp_card = _necpp.nec_rp_card

def nec_pt_card(in_context, itmp1, itmp2, itmp3, itmp4):
    return _necpp.nec_pt_card(in_context, itmp1, itmp2, itmp3, itmp4)
nec_pt_card = _necpp.nec_pt_card

def nec_pq_card(in_context, itmp1, itmp2, itmp3, itmp4):
    return _necpp.nec_pq_card(in_context, itmp1, itmp2, itmp3, itmp4)
nec_pq_card = _necpp.nec_pq_card

def nec_kh_card(in_context, tmp1):
    return _necpp.nec_kh_card(in_context, tmp1)
nec_kh_card = _necpp.nec_kh_card

def nec_ne_card(in_context, itmp1, itmp2, itmp3, itmp4, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6):
    return _necpp.nec_ne_card(in_context, itmp1, itmp2, itmp3, itmp4, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6)
nec_ne_card = _necpp.nec_ne_card

def nec_nh_card(in_context, itmp1, itmp2, itmp3, itmp4, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6):
    return _necpp.nec_nh_card(in_context, itmp1, itmp2, itmp3, itmp4, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6)
nec_nh_card = _necpp.nec_nh_card

def nec_cp_card(in_context, itmp1, itmp2, itmp3, itmp4):
    return _necpp.nec_cp_card(in_context, itmp1, itmp2, itmp3, itmp4)
nec_cp_card = _necpp.nec_cp_card

def nec_pl_card(in_context, ploutput_filename, itmp1, itmp2, itmp3, itmp4):
    return _necpp.nec_pl_card(in_context, ploutput_filename, itmp1, itmp2, itmp3, itmp4)
nec_pl_card = _necpp.nec_pl_card

def nec_gain(in_context, freq_index, theta_index, phi_index):
    return _necpp.nec_gain(in_context, freq_index, theta_index, phi_index)
nec_gain = _necpp.nec_gain

def nec_gain_max(in_context, freq_index):
    return _necpp.nec_gain_max(in_context, freq_index)
nec_gain_max = _necpp.nec_gain_max

def nec_gain_min(in_context, freq_index):
    return _necpp.nec_gain_min(in_context, freq_index)
nec_gain_min = _necpp.nec_gain_min

def nec_gain_mean(in_context, freq_index):
    return _necpp.nec_gain_mean(in_context, freq_index)
nec_gain_mean = _necpp.nec_gain_mean

def nec_gain_sd(in_context, freq_index):
    return _necpp.nec_gain_sd(in_context, freq_index)
nec_gain_sd = _necpp.nec_gain_sd

def nec_gain_rhcp_max(in_context, freq_index):
    return _necpp.nec_gain_rhcp_max(in_context, freq_index)
nec_gain_rhcp_max = _necpp.nec_gain_rhcp_max

def nec_gain_rhcp_min(in_context, freq_index):
    return _necpp.nec_gain_rhcp_min(in_context, freq_index)
nec_gain_rhcp_min = _necpp.nec_gain_rhcp_min

def nec_gain_rhcp_mean(in_context, freq_index):
    return _necpp.nec_gain_rhcp_mean(in_context, freq_index)
nec_gain_rhcp_mean = _necpp.nec_gain_rhcp_mean

def nec_gain_rhcp_sd(in_context, freq_index):
    return _necpp.nec_gain_rhcp_sd(in_context, freq_index)
nec_gain_rhcp_sd = _necpp.nec_gain_rhcp_sd

def nec_gain_lhcp_max(in_context, freq_index):
    return _necpp.nec_gain_lhcp_max(in_context, freq_index)
nec_gain_lhcp_max = _necpp.nec_gain_lhcp_max

def nec_gain_lhcp_min(in_context, freq_index):
    return _necpp.nec_gain_lhcp_min(in_context, freq_index)
nec_gain_lhcp_min = _necpp.nec_gain_lhcp_min

def nec_gain_lhcp_mean(in_context, freq_index):
    return _necpp.nec_gain_lhcp_mean(in_context, freq_index)
nec_gain_lhcp_mean = _necpp.nec_gain_lhcp_mean

def nec_gain_lhcp_sd(in_context, freq_index):
    return _necpp.nec_gain_lhcp_sd(in_context, freq_index)
nec_gain_lhcp_sd = _necpp.nec_gain_lhcp_sd

def nec_impedance_real(in_context, freq_index):
    return _necpp.nec_impedance_real(in_context, freq_index)
nec_impedance_real = _necpp.nec_impedance_real

def nec_impedance_imag(in_context, freq_index):
    return _necpp.nec_impedance_imag(in_context, freq_index)
nec_impedance_imag = _necpp.nec_impedance_imag
# This file is compatible with both classic and new-style classes.


