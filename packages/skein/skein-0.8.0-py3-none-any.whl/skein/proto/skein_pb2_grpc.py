from __future__ import absolute_import# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import skein_pb2 as skein__pb2


class DriverStub(object):
  """Driver only definitions

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ping = channel.unary_unary(
        '/skein.Driver/ping',
        request_serializer=skein__pb2.Empty.SerializeToString,
        response_deserializer=skein__pb2.Empty.FromString,
        )
    self.getStatus = channel.unary_unary(
        '/skein.Driver/getStatus',
        request_serializer=skein__pb2.Application.SerializeToString,
        response_deserializer=skein__pb2.ApplicationReport.FromString,
        )
    self.getApplications = channel.unary_unary(
        '/skein.Driver/getApplications',
        request_serializer=skein__pb2.ApplicationsRequest.SerializeToString,
        response_deserializer=skein__pb2.ApplicationsResponse.FromString,
        )
    self.getNodes = channel.unary_unary(
        '/skein.Driver/getNodes',
        request_serializer=skein__pb2.NodesRequest.SerializeToString,
        response_deserializer=skein__pb2.NodesResponse.FromString,
        )
    self.getQueue = channel.unary_unary(
        '/skein.Driver/getQueue',
        request_serializer=skein__pb2.QueueRequest.SerializeToString,
        response_deserializer=skein__pb2.Queue.FromString,
        )
    self.getChildQueues = channel.unary_unary(
        '/skein.Driver/getChildQueues',
        request_serializer=skein__pb2.QueueRequest.SerializeToString,
        response_deserializer=skein__pb2.QueuesResponse.FromString,
        )
    self.getAllQueues = channel.unary_unary(
        '/skein.Driver/getAllQueues',
        request_serializer=skein__pb2.Empty.SerializeToString,
        response_deserializer=skein__pb2.QueuesResponse.FromString,
        )
    self.moveApplication = channel.unary_unary(
        '/skein.Driver/moveApplication',
        request_serializer=skein__pb2.MoveRequest.SerializeToString,
        response_deserializer=skein__pb2.Empty.FromString,
        )
    self.submit = channel.unary_unary(
        '/skein.Driver/submit',
        request_serializer=skein__pb2.ApplicationSpec.SerializeToString,
        response_deserializer=skein__pb2.Application.FromString,
        )
    self.waitForStart = channel.unary_unary(
        '/skein.Driver/waitForStart',
        request_serializer=skein__pb2.Application.SerializeToString,
        response_deserializer=skein__pb2.ApplicationReport.FromString,
        )
    self.kill = channel.unary_unary(
        '/skein.Driver/kill',
        request_serializer=skein__pb2.KillRequest.SerializeToString,
        response_deserializer=skein__pb2.Empty.FromString,
        )
    self.getLogs = channel.unary_unary(
        '/skein.Driver/getLogs',
        request_serializer=skein__pb2.LogsRequest.SerializeToString,
        response_deserializer=skein__pb2.LogsResponse.FromString,
        )


class DriverServicer(object):
  """Driver only definitions

  """

  def ping(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getStatus(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getApplications(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getNodes(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getQueue(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getChildQueues(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getAllQueues(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def moveApplication(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def submit(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def waitForStart(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def kill(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getLogs(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DriverServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ping': grpc.unary_unary_rpc_method_handler(
          servicer.ping,
          request_deserializer=skein__pb2.Empty.FromString,
          response_serializer=skein__pb2.Empty.SerializeToString,
      ),
      'getStatus': grpc.unary_unary_rpc_method_handler(
          servicer.getStatus,
          request_deserializer=skein__pb2.Application.FromString,
          response_serializer=skein__pb2.ApplicationReport.SerializeToString,
      ),
      'getApplications': grpc.unary_unary_rpc_method_handler(
          servicer.getApplications,
          request_deserializer=skein__pb2.ApplicationsRequest.FromString,
          response_serializer=skein__pb2.ApplicationsResponse.SerializeToString,
      ),
      'getNodes': grpc.unary_unary_rpc_method_handler(
          servicer.getNodes,
          request_deserializer=skein__pb2.NodesRequest.FromString,
          response_serializer=skein__pb2.NodesResponse.SerializeToString,
      ),
      'getQueue': grpc.unary_unary_rpc_method_handler(
          servicer.getQueue,
          request_deserializer=skein__pb2.QueueRequest.FromString,
          response_serializer=skein__pb2.Queue.SerializeToString,
      ),
      'getChildQueues': grpc.unary_unary_rpc_method_handler(
          servicer.getChildQueues,
          request_deserializer=skein__pb2.QueueRequest.FromString,
          response_serializer=skein__pb2.QueuesResponse.SerializeToString,
      ),
      'getAllQueues': grpc.unary_unary_rpc_method_handler(
          servicer.getAllQueues,
          request_deserializer=skein__pb2.Empty.FromString,
          response_serializer=skein__pb2.QueuesResponse.SerializeToString,
      ),
      'moveApplication': grpc.unary_unary_rpc_method_handler(
          servicer.moveApplication,
          request_deserializer=skein__pb2.MoveRequest.FromString,
          response_serializer=skein__pb2.Empty.SerializeToString,
      ),
      'submit': grpc.unary_unary_rpc_method_handler(
          servicer.submit,
          request_deserializer=skein__pb2.ApplicationSpec.FromString,
          response_serializer=skein__pb2.Application.SerializeToString,
      ),
      'waitForStart': grpc.unary_unary_rpc_method_handler(
          servicer.waitForStart,
          request_deserializer=skein__pb2.Application.FromString,
          response_serializer=skein__pb2.ApplicationReport.SerializeToString,
      ),
      'kill': grpc.unary_unary_rpc_method_handler(
          servicer.kill,
          request_deserializer=skein__pb2.KillRequest.FromString,
          response_serializer=skein__pb2.Empty.SerializeToString,
      ),
      'getLogs': grpc.unary_unary_rpc_method_handler(
          servicer.getLogs,
          request_deserializer=skein__pb2.LogsRequest.FromString,
          response_serializer=skein__pb2.LogsResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'skein.Driver', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class AppMasterStub(object):
  """Master only definitions

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.shutdown = channel.unary_unary(
        '/skein.AppMaster/shutdown',
        request_serializer=skein__pb2.ShutdownRequest.SerializeToString,
        response_deserializer=skein__pb2.Empty.FromString,
        )
    self.GetRange = channel.unary_unary(
        '/skein.AppMaster/GetRange',
        request_serializer=skein__pb2.GetRangeRequest.SerializeToString,
        response_deserializer=skein__pb2.GetRangeResponse.FromString,
        )
    self.PutKey = channel.unary_unary(
        '/skein.AppMaster/PutKey',
        request_serializer=skein__pb2.PutKeyRequest.SerializeToString,
        response_deserializer=skein__pb2.PutKeyResponse.FromString,
        )
    self.DeleteRange = channel.unary_unary(
        '/skein.AppMaster/DeleteRange',
        request_serializer=skein__pb2.DeleteRangeRequest.SerializeToString,
        response_deserializer=skein__pb2.DeleteRangeResponse.FromString,
        )
    self.Transaction = channel.unary_unary(
        '/skein.AppMaster/Transaction',
        request_serializer=skein__pb2.TransactionRequest.SerializeToString,
        response_deserializer=skein__pb2.TransactionResponse.FromString,
        )
    self.Watch = channel.stream_stream(
        '/skein.AppMaster/Watch',
        request_serializer=skein__pb2.WatchRequest.SerializeToString,
        response_deserializer=skein__pb2.WatchResponse.FromString,
        )
    self.getApplicationSpec = channel.unary_unary(
        '/skein.AppMaster/getApplicationSpec',
        request_serializer=skein__pb2.Empty.SerializeToString,
        response_deserializer=skein__pb2.ApplicationSpec.FromString,
        )
    self.getContainers = channel.unary_unary(
        '/skein.AppMaster/getContainers',
        request_serializer=skein__pb2.ContainersRequest.SerializeToString,
        response_deserializer=skein__pb2.ContainersResponse.FromString,
        )
    self.killContainer = channel.unary_unary(
        '/skein.AppMaster/killContainer',
        request_serializer=skein__pb2.ContainerInstance.SerializeToString,
        response_deserializer=skein__pb2.Empty.FromString,
        )
    self.scale = channel.unary_unary(
        '/skein.AppMaster/scale',
        request_serializer=skein__pb2.ScaleRequest.SerializeToString,
        response_deserializer=skein__pb2.ContainersResponse.FromString,
        )
    self.addContainer = channel.unary_unary(
        '/skein.AppMaster/addContainer',
        request_serializer=skein__pb2.AddContainerRequest.SerializeToString,
        response_deserializer=skein__pb2.Container.FromString,
        )
    self.SetProgress = channel.unary_unary(
        '/skein.AppMaster/SetProgress',
        request_serializer=skein__pb2.SetProgressRequest.SerializeToString,
        response_deserializer=skein__pb2.Empty.FromString,
        )
    self.AddProxy = channel.unary_unary(
        '/skein.AppMaster/AddProxy',
        request_serializer=skein__pb2.Proxy.SerializeToString,
        response_deserializer=skein__pb2.Empty.FromString,
        )
    self.RemoveProxy = channel.unary_unary(
        '/skein.AppMaster/RemoveProxy',
        request_serializer=skein__pb2.RemoveProxyRequest.SerializeToString,
        response_deserializer=skein__pb2.Empty.FromString,
        )
    self.UiInfo = channel.unary_unary(
        '/skein.AppMaster/UiInfo',
        request_serializer=skein__pb2.UIInfoRequest.SerializeToString,
        response_deserializer=skein__pb2.UIInfoResponse.FromString,
        )
    self.GetProxies = channel.unary_unary(
        '/skein.AppMaster/GetProxies',
        request_serializer=skein__pb2.GetProxiesRequest.SerializeToString,
        response_deserializer=skein__pb2.GetProxiesResponse.FromString,
        )


class AppMasterServicer(object):
  """Master only definitions

  """

  def shutdown(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetRange(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def PutKey(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DeleteRange(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Transaction(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Watch(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getApplicationSpec(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getContainers(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def killContainer(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def scale(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def addContainer(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetProgress(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AddProxy(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RemoveProxy(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UiInfo(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetProxies(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_AppMasterServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'shutdown': grpc.unary_unary_rpc_method_handler(
          servicer.shutdown,
          request_deserializer=skein__pb2.ShutdownRequest.FromString,
          response_serializer=skein__pb2.Empty.SerializeToString,
      ),
      'GetRange': grpc.unary_unary_rpc_method_handler(
          servicer.GetRange,
          request_deserializer=skein__pb2.GetRangeRequest.FromString,
          response_serializer=skein__pb2.GetRangeResponse.SerializeToString,
      ),
      'PutKey': grpc.unary_unary_rpc_method_handler(
          servicer.PutKey,
          request_deserializer=skein__pb2.PutKeyRequest.FromString,
          response_serializer=skein__pb2.PutKeyResponse.SerializeToString,
      ),
      'DeleteRange': grpc.unary_unary_rpc_method_handler(
          servicer.DeleteRange,
          request_deserializer=skein__pb2.DeleteRangeRequest.FromString,
          response_serializer=skein__pb2.DeleteRangeResponse.SerializeToString,
      ),
      'Transaction': grpc.unary_unary_rpc_method_handler(
          servicer.Transaction,
          request_deserializer=skein__pb2.TransactionRequest.FromString,
          response_serializer=skein__pb2.TransactionResponse.SerializeToString,
      ),
      'Watch': grpc.stream_stream_rpc_method_handler(
          servicer.Watch,
          request_deserializer=skein__pb2.WatchRequest.FromString,
          response_serializer=skein__pb2.WatchResponse.SerializeToString,
      ),
      'getApplicationSpec': grpc.unary_unary_rpc_method_handler(
          servicer.getApplicationSpec,
          request_deserializer=skein__pb2.Empty.FromString,
          response_serializer=skein__pb2.ApplicationSpec.SerializeToString,
      ),
      'getContainers': grpc.unary_unary_rpc_method_handler(
          servicer.getContainers,
          request_deserializer=skein__pb2.ContainersRequest.FromString,
          response_serializer=skein__pb2.ContainersResponse.SerializeToString,
      ),
      'killContainer': grpc.unary_unary_rpc_method_handler(
          servicer.killContainer,
          request_deserializer=skein__pb2.ContainerInstance.FromString,
          response_serializer=skein__pb2.Empty.SerializeToString,
      ),
      'scale': grpc.unary_unary_rpc_method_handler(
          servicer.scale,
          request_deserializer=skein__pb2.ScaleRequest.FromString,
          response_serializer=skein__pb2.ContainersResponse.SerializeToString,
      ),
      'addContainer': grpc.unary_unary_rpc_method_handler(
          servicer.addContainer,
          request_deserializer=skein__pb2.AddContainerRequest.FromString,
          response_serializer=skein__pb2.Container.SerializeToString,
      ),
      'SetProgress': grpc.unary_unary_rpc_method_handler(
          servicer.SetProgress,
          request_deserializer=skein__pb2.SetProgressRequest.FromString,
          response_serializer=skein__pb2.Empty.SerializeToString,
      ),
      'AddProxy': grpc.unary_unary_rpc_method_handler(
          servicer.AddProxy,
          request_deserializer=skein__pb2.Proxy.FromString,
          response_serializer=skein__pb2.Empty.SerializeToString,
      ),
      'RemoveProxy': grpc.unary_unary_rpc_method_handler(
          servicer.RemoveProxy,
          request_deserializer=skein__pb2.RemoveProxyRequest.FromString,
          response_serializer=skein__pb2.Empty.SerializeToString,
      ),
      'UiInfo': grpc.unary_unary_rpc_method_handler(
          servicer.UiInfo,
          request_deserializer=skein__pb2.UIInfoRequest.FromString,
          response_serializer=skein__pb2.UIInfoResponse.SerializeToString,
      ),
      'GetProxies': grpc.unary_unary_rpc_method_handler(
          servicer.GetProxies,
          request_deserializer=skein__pb2.GetProxiesRequest.FromString,
          response_serializer=skein__pb2.GetProxiesResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'skein.AppMaster', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
