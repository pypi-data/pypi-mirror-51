from typing import Tuple, Set, Iterable, List

class BitmapTable:
    @property
    def ComponentType (self) -> ModelComponentType: ...
    @property
    def Item (self, index : int) -> BitmapEntry: ...
    def FindIndex (self, index : int) -> BitmapEntry: ...
    def Find (self, name : str, createFile : bool) -> Tuple[BitmapEntry, str]: ...
    def AddBitmap (self, bitmapFilename : str, replaceExisting : bool) -> int: ...
    def DeleteBitmap (self, bitmapFilename : str) -> bool: ...
    def Delete (self, item : BitmapEntry) -> bool: ...
    def ExportToFiles (self, directoryPath : str, overwrite : int) -> int: ...
    def ExportToFile (self, index : int, path : str) -> bool: ...
class DimStyleTableEventType:
    Added = 0
    Deleted = 1
    Undeleted = 2
    Modified = 3
    Sorted = 4
    Current = 5
class DimStyleTableEventArgs:
    @property
    def Document (self) -> RhinoDoc: ...
    @property
    def EventType (self) -> DimStyleTableEventType: ...
    @property
    def Index (self) -> int: ...
    @property
    def NewState (self) -> DimensionStyle: ...
    @property
    def OldState (self) -> DimensionStyle: ...
class DimStyleTable:
    @property
    def BuiltInStyles (self) -> Set(DimensionStyle): ...
    @property
    def Item (self, index : int) -> DimensionStyle: ...
    def FindIndex (self, index : int) -> DimensionStyle: ...
    def Add (self, name : str) -> int: ...
    def Add (self, dimstyle : DimensionStyle, reference : bool) -> int: ...
    def Add (self, name : str, reference : bool) -> int: ...
    @property
    def CurrentIndex (self) -> int: ...
    @property
    def CurrentId (self) -> Guid: ...
    @property
    def CurrentDimensionStyle (self) -> DimensionStyle: ...
    @property
    def Current (self) -> DimensionStyle: ...
    @property
    def ComponentType (self) -> ModelComponentType: ...
    def SetCurrent (self, index : int, quiet : bool) -> bool: ...
    def SetCurrentDimensionStyleIndex (self, index : int, quiet : bool) -> bool: ...
    def Find (self, name : str, ignoreDeleted : bool) -> DimensionStyle: ...
    def FindName (self, name : str) -> DimensionStyle: ...
    def Find (self, styleId : Guid, ignoreDeleted : bool) -> DimensionStyle: ...
    def FindRoot (self, styleId : Guid, ignoreDeleted : bool) -> DimensionStyle: ...
    def GetUnusedStyleName (self) -> str: ...
    def GetUnusedStyleName (self, rootName : str) -> str: ...
    def Delete (self, index : int, quiet : bool) -> bool: ...
    def Delete (self, item : DimensionStyle) -> bool: ...
    def Modify (self, newSettings : DimensionStyle, dimstyleIndex : int, quiet : bool) -> bool: ...
    def Modify (self, newSettings : DimensionStyle, dimstyleId : Guid, quiet : bool) -> bool: ...
    def Modify (self, dimstyle : DimensionStyle, annotation : AnnotationBase) -> ModifyType: ...
    def GetEnumerator (self) -> IEnumerator: ...
class ModifyType:
    Modify = 0
    Override = 1
    NotSaved = 2
class RuntimeDocumentDataTable:
    @property
    def Document (self) -> RhinoDoc: ...
    def GetValue (self, key : Object, newT : Func) -> T: ...
    def TryGetValue (self, key : Object) -> T: ...
class ViewTable:
    @property
    def Document (self) -> RhinoDoc: ...
    @property
    def ActiveView (self) -> RhinoView: ...
    @ActiveView.setter
    def ActiveView (self, value : RhinoView) -> None: ...
    def IsCameraIconVisible (self, view : RhinoView) -> bool: ...
    def EnableCameraIcon (self, view : RhinoView) -> None: ...
    def FlashObjects (self, list : Iterable[RhinoObject], useSelectionColor : bool) -> None: ...
    def Redraw (self) -> None: ...
    def GetViewList (self, includeStandardViews : bool, includePageViews : bool) -> Set(RhinoView): ...
    def GetStandardRhinoViews (self) -> Set(RhinoView): ...
    def GetPageViews (self) -> Set(RhinoPageView): ...
    def Find (self, mainViewportId : Guid) -> RhinoView: ...
    def Find (self, mainViewportName : str, compareCase : bool) -> RhinoView: ...
    def DefaultViewLayout (self) -> None: ...
    def FourViewLayout (self, useMatchingViews : bool) -> None: ...
    def ThreeViewLayout (self, useMatchingViews : bool) -> None: ...
    @property
    def RedrawEnabled (self) -> bool: ...
    @RedrawEnabled.setter
    def RedrawEnabled (self, value : bool) -> None: ...
    def Add (self, title : str, projection : DefinedViewportProjection, position : Rectangle, floating : bool) -> RhinoView: ...
    def AddPageView (self, title : str) -> RhinoPageView: ...
    def AddPageView (self, title : str, pageWidth : float, pageHeight : float) -> RhinoPageView: ...
    @property
    def ModelSpaceIsActive (self) -> bool: ...
    def GetEnumerator (self) -> IEnumerator: ...
class ObjectTable:
    @property
    def ComponentType (self) -> ModelComponentType: ...
    def Transform (self, objref : ObjRef, xform : Transform, deleteOriginal : bool) -> Guid: ...
    def Transform (self, obj : RhinoObject, xform : Transform, deleteOriginal : bool) -> Guid: ...
    def Transform (self, objectId : Guid, xform : Transform, deleteOriginal : bool) -> Guid: ...
    def TransformWithHistory (self, objref : ObjRef, xform : Transform) -> Guid: ...
    def TransformWithHistory (self, obj : RhinoObject, xform : Transform) -> Guid: ...
    def TransformWithHistory (self, objectId : Guid, xform : Transform) -> Guid: ...
    def Duplicate (self, objref : ObjRef) -> Guid: ...
    def Duplicate (self, obj : RhinoObject) -> Guid: ...
    def Duplicate (self, objectId : Guid) -> Guid: ...
    def PickObjects (self, pickContext : PickContext) -> Set(ObjRef): ...
    def GripUpdate (self, obj : RhinoObject, deleteOriginal : bool) -> RhinoObject: ...
    def ObjectCount (self, filter : ObjectEnumeratorSettings) -> int: ...
    def GetObjectList (self, settings : ObjectEnumeratorSettings) -> Iterable[RhinoObject]: ...
    def GetObjectList (self, typeFilter : Type) -> Iterable[RhinoObject]: ...
    def GetObjectsByType (self) -> Iterable[T]: ...
    def GetObjectsByType (self, settings : ObjectEnumeratorSettings) -> Iterable[T]: ...
    def GetObjectList (self, typeFilter : ObjectType) -> Iterable[RhinoObject]: ...
    def GetSelectedObjects (self, includeLights : bool, includeGrips : bool) -> Iterable[RhinoObject]: ...
    def GetSelectedObjectTypes (self) -> ObjectType: ...
    def GetEnumerator (self) -> IEnumerator: ...
    def DeleteGrips (self, owner : RhinoObject, gripIndices : Iterable[int]) -> int: ...
    def Purge (self, runtimeSerialNumber : UInt32) -> bool: ...
    def Purge (self, rhinoObject : RhinoObject) -> bool: ...
    def Undelete (self, runtimeSerialNumber : UInt32) -> bool: ...
    def Undelete (self, rhinoObject : RhinoObject) -> bool: ...
    def Select (self, objref : ObjRef) -> bool: ...
    def Select (self, objref : ObjRef, select : bool) -> bool: ...
    def Select (self, objref : ObjRef, select : bool, syncHighlight : bool) -> bool: ...
    def Select (self, objref : ObjRef, select : bool, syncHighlight : bool, persistentSelect : bool) -> bool: ...
    def Select (self, objref : ObjRef, select : bool, syncHighlight : bool, persistentSelect : bool, ignoreGripsState : bool, ignoreLayerLocking : bool, ignoreLayerVisibility : bool) -> bool: ...
    def Select (self, objRefs : Iterable[ObjRef]) -> int: ...
    def Select (self, objRefs : Iterable[ObjRef], select : bool) -> int: ...
    def Select (self, objectId : Guid) -> bool: ...
    def Select (self, objectId : Guid, select : bool) -> bool: ...
    def Select (self, objectId : Guid, select : bool, syncHighlight : bool) -> bool: ...
    def Select (self, objectId : Guid, select : bool, syncHighlight : bool, persistentSelect : bool) -> bool: ...
    def Select (self, objectId : Guid, select : bool, syncHighlight : bool, persistentSelect : bool, ignoreGripsState : bool, ignoreLayerLocking : bool, ignoreLayerVisibility : bool) -> bool: ...
    def Select (self, objectIds : Iterable[Guid]) -> int: ...
    def Select (self, objectIds : Iterable[Guid], select : bool) -> int: ...
    def UnselectAll (self, ignorePersistentSelections : bool) -> int: ...
    def UnselectAll (self) -> int: ...
    def ModifyAttributes (self, objref : ObjRef, newAttributes : ObjectAttributes, quiet : bool) -> bool: ...
    def ModifyAttributes (self, obj : RhinoObject, newAttributes : ObjectAttributes, quiet : bool) -> bool: ...
    def ModifyAttributes (self, objectId : Guid, newAttributes : ObjectAttributes, quiet : bool) -> bool: ...
    def ModifyRenderMaterial (self, obj : RhinoObject, material : RenderMaterial) -> bool: ...
    def ModifyRenderMaterial (self, objRef : ObjRef, material : RenderMaterial) -> bool: ...
    def ModifyRenderMaterial (self, objectId : Guid, material : RenderMaterial) -> bool: ...
    def ModifyTextureMapping (self, objRef : ObjRef, channel : int, mapping : TextureMapping) -> bool: ...
    def ModifyTextureMapping (self, objId : Guid, channel : int, mapping : TextureMapping) -> bool: ...
    def ModifyTextureMapping (self, obj : RhinoObject, channel : int, mapping : TextureMapping) -> bool: ...
    def Replace (self, objref : ObjRef, newObject : RhinoObject) -> bool: ...
    def Replace (self, objref : ObjRef, point : Point3d) -> bool: ...
    def Replace (self, objectId : Guid, point : Point3d) -> bool: ...
    def Replace (self, objref : ObjRef, point : Point) -> bool: ...
    def Replace (self, objectId : Guid, point : Point) -> bool: ...
    def Replace (self, objref : ObjRef, text : TextEntity) -> bool: ...
    def Replace (self, objectId : Guid, text : TextEntity) -> bool: ...
    def Replace (self, objref : ObjRef, leader : Leader) -> bool: ...
    def Replace (self, objectId : Guid, leader : Leader) -> bool: ...
    def Replace (self, objref : ObjRef, dot : TextDot) -> bool: ...
    def Replace (self, objectId : Guid, dot : TextDot) -> bool: ...
    def Replace (self, objref : ObjRef, hatch : Hatch) -> bool: ...
    def Replace (self, objectId : Guid, hatch : Hatch) -> bool: ...
    def Replace (self, objref : ObjRef, line : Line) -> bool: ...
    def Replace (self, objectId : Guid, line : Line) -> bool: ...
    def Replace (self, objref : ObjRef, circle : Circle) -> bool: ...
    def Replace (self, objectId : Guid, circle : Circle) -> bool: ...
    def Replace (self, objref : ObjRef, arc : Arc) -> bool: ...
    def Replace (self, objectId : Guid, arc : Arc) -> bool: ...
    def Replace (self, objref : ObjRef, polyline : Polyline) -> bool: ...
    def Replace (self, objectId : Guid, polyline : Polyline) -> bool: ...
    def Replace (self, objref : ObjRef, curve : Curve) -> bool: ...
    def Replace (self, objectId : Guid, curve : Curve) -> bool: ...
    def Replace (self, objref : ObjRef, surface : Surface) -> bool: ...
    def Replace (self, objectId : Guid, surface : Surface) -> bool: ...
    def Replace (self, objref : ObjRef, brep : Brep) -> bool: ...
    def Replace (self, objref : ObjRef, brep : Brep, splitKinkySurfaces : bool) -> bool: ...
    def Replace (self, objectId : Guid, brep : Brep) -> bool: ...
    def Replace (self, objectId : Guid, brep : Brep, splitKinkySurfaces : bool) -> bool: ...
    def Replace (self, objref : ObjRef, extrusion : Extrusion) -> bool: ...
    def Replace (self, objectId : Guid, extrusion : Extrusion) -> bool: ...
    def Replace (self, objref : ObjRef, mesh : Mesh) -> bool: ...
    def Replace (self, objref : ObjRef, subD : SubD) -> bool: ...
    def Replace (self, objectId : Guid, mesh : Mesh) -> bool: ...
    def Replace (self, objectId : Guid, subD : SubD) -> bool: ...
    def Replace (self, objref : ObjRef, pointcloud : PointCloud) -> bool: ...
    def Replace (self, objectId : Guid, pointcloud : PointCloud) -> bool: ...
    def ReplaceInstanceObject (self, objectId : Guid, instanceDefinitionIndex : int) -> bool: ...
    def ReplaceInstanceObject (self, objref : ObjRef, instanceDefinitionIndex : int) -> bool: ...
    def MostRecentObject (self) -> RhinoObject: ...
    def AllObjectsSince (self, runtimeSerialNumber : UInt32) -> Set(RhinoObject): ...
    def Hide (self, objref : ObjRef, ignoreLayerMode : bool) -> bool: ...
    def Hide (self, obj : RhinoObject, ignoreLayerMode : bool) -> bool: ...
    def Hide (self, objectId : Guid, ignoreLayerMode : bool) -> bool: ...
    def Show (self, objref : ObjRef, ignoreLayerMode : bool) -> bool: ...
    def Show (self, obj : RhinoObject, ignoreLayerMode : bool) -> bool: ...
    def Show (self, objectId : Guid, ignoreLayerMode : bool) -> bool: ...
    def Lock (self, objref : ObjRef, ignoreLayerMode : bool) -> bool: ...
    def Lock (self, obj : RhinoObject, ignoreLayerMode : bool) -> bool: ...
    def Lock (self, objectId : Guid, ignoreLayerMode : bool) -> bool: ...
    def Unlock (self, objref : ObjRef, ignoreLayerMode : bool) -> bool: ...
    def Unlock (self, obj : RhinoObject, ignoreLayerMode : bool) -> bool: ...
    def Unlock (self, objectId : Guid, ignoreLayerMode : bool) -> bool: ...
    @property
    def BoundingBox (self) -> BoundingBox: ...
    @property
    def BoundingBoxVisible (self) -> BoundingBox: ...
    def AddCircle (self, circle : Circle, attributes : ObjectAttributes) -> Guid: ...
    def AddCircle (self, circle : Circle, attributes : ObjectAttributes, history : HistoryRecord, reference : bool) -> Guid: ...
    def AddEllipse (self, ellipse : Ellipse) -> Guid: ...
    def AddEllipse (self, ellipse : Ellipse, attributes : ObjectAttributes) -> Guid: ...
    def AddEllipse (self, ellipse : Ellipse, attributes : ObjectAttributes, history : HistoryRecord, reference : bool) -> Guid: ...
    def AddSphere (self, sphere : Sphere) -> Guid: ...
    def AddSphere (self, sphere : Sphere, attributes : ObjectAttributes) -> Guid: ...
    def AddSphere (self, sphere : Sphere, attributes : ObjectAttributes, history : HistoryRecord, reference : bool) -> Guid: ...
    def AddCurve (self, curve : Curve) -> Guid: ...
    def AddCurve (self, curve : Curve, attributes : ObjectAttributes) -> Guid: ...
    def AddCurve (self, curve : Curve, attributes : ObjectAttributes, history : HistoryRecord, reference : bool) -> Guid: ...
    def AddTextDot (self, text : str, location : Point3d) -> Guid: ...
    def AddTextDot (self, text : str, location : Point3d, attributes : ObjectAttributes) -> Guid: ...
    def AddTextDot (self, dot : TextDot) -> Guid: ...
    def AddTextDot (self, dot : TextDot, attributes : ObjectAttributes) -> Guid: ...
    def AddTextDot (self, dot : TextDot, attributes : ObjectAttributes, history : HistoryRecord, reference : bool) -> Guid: ...
    def AddText (self, text : TextEntity) -> Guid: ...
    def AddText (self, text : TextEntity, attributes : ObjectAttributes) -> Guid: ...
    def AddText (self, text : TextEntity, attributes : ObjectAttributes, history : HistoryRecord, reference : bool) -> Guid: ...
    def AddLeader (self, leader : Leader) -> Guid: ...
    def AddLeader (self, leader : Leader, attributes : ObjectAttributes) -> Guid: ...
    def AddLeader (self, leader : Leader, attributes : ObjectAttributes, history : HistoryRecord, reference : bool) -> Guid: ...
    def AddLinearDimension (self, dimension : LinearDimension) -> Guid: ...
    def AddLinearDimension (self, dimension : LinearDimension, attributes : ObjectAttributes) -> Guid: ...
    def AddLinearDimension (self, dimension : LinearDimension, attributes : ObjectAttributes, history : HistoryRecord, reference : bool) -> Guid: ...
    def AddAngularDimension (self, dimension : AngularDimension) -> Guid: ...
    def AddAngularDimension (self, dimension : AngularDimension, attributes : ObjectAttributes) -> Guid: ...
    def AddAngularDimension (self, dimension : AngularDimension, attributes : ObjectAttributes, history : HistoryRecord, reference : bool) -> Guid: ...
    def AddOrdinateDimension (self, dimordinate : OrdinateDimension, attributes : ObjectAttributes, history : HistoryRecord, reference : bool) -> Guid: ...
    def AddCentermark (self, centermark : Centermark, attributes : ObjectAttributes, history : HistoryRecord, reference : bool) -> Guid: ...
    def AddText (self, text3d : Text3d) -> Guid: ...
    def AddText (self, text3d : Text3d, attributes : ObjectAttributes) -> Guid: ...
    def AddText (self, text : str, plane : Plane, height : float, fontName : str, bold : bool, italic : bool) -> Guid: ...
    def AddText (self, text : str, plane : Plane, height : float, fontName : str, bold : bool, italic : bool, justification : TextJustification) -> Guid: ...
    def AddText (self, text : str, plane : Plane, height : float, fontName : str, bold : bool, italic : bool, attributes : ObjectAttributes) -> Guid: ...
    def AddText (self, text : str, plane : Plane, height : float, fontName : str, bold : bool, italic : bool, justification : TextJustification, attributes : ObjectAttributes) -> Guid: ...
    def AddText (self, text : str, plane : Plane, height : float, fontName : str, bold : bool, italic : bool, attributes : ObjectAttributes, history : HistoryRecord, reference : bool) -> Guid: ...
    def AddText (self, text : str, plane : Plane, height : float, fontName : str, bold : bool, italic : bool, justification : TextJustification, attributes : ObjectAttributes, history : HistoryRecord, reference : bool) -> Guid: ...
    def AddSubD (self, subD : SubD) -> Guid: ...
    def AddSubD (self, subD : SubD, attributes : ObjectAttributes) -> Guid: ...
    def AddSubD (self, subD : SubD, attributes : ObjectAttributes, history : HistoryRecord, reference : bool) -> Guid: ...
    def AddSurface (self, surface : Surface) -> Guid: ...
    def AddSurface (self, surface : Surface, attributes : ObjectAttributes) -> Guid: ...
    def AddSurface (self, surface : Surface, attributes : ObjectAttributes, history : HistoryRecord, reference : bool) -> Guid: ...
    def AddExtrusion (self, extrusion : Extrusion) -> Guid: ...
    def AddExtrusion (self, extrusion : Extrusion, attributes : ObjectAttributes) -> Guid: ...
    def AddExtrusion (self, extrusion : Extrusion, attributes : ObjectAttributes, history : HistoryRecord, reference : bool) -> Guid: ...
    def AddMesh (self, mesh : Mesh) -> Guid: ...
    def AddMesh (self, mesh : Mesh, attributes : ObjectAttributes) -> Guid: ...
    def AddMesh (self, mesh : Mesh, attributes : ObjectAttributes, history : HistoryRecord, reference : bool) -> Guid: ...
    def AddMesh (self, mesh : Mesh, attributes : ObjectAttributes, history : HistoryRecord, reference : bool, requireValidMesh : bool) -> Guid: ...
    def AddBrep (self, brep : Brep) -> Guid: ...
    def AddBrep (self, brep : Brep, attributes : ObjectAttributes) -> Guid: ...
    def AddBrep (self, brep : Brep, attributes : ObjectAttributes, history : HistoryRecord, reference : bool) -> Guid: ...
    def AddBrep (self, brep : Brep, attributes : ObjectAttributes, history : HistoryRecord, reference : bool, splitKinkySurfaces : bool) -> Guid: ...
    def AddExplodedInstancePieces (self, instance : InstanceObject, explodeNestedInstances : bool, deleteInstance : bool) -> Set(Guid): ...
    def AddInstanceObject (self, instanceDefinitionIndex : int, instanceXform : Transform) -> Guid: ...
    def AddInstanceObject (self, instanceDefinitionIndex : int, instanceXform : Transform, attributes : ObjectAttributes) -> Guid: ...
    def AddLeader (self, plane : Plane, points : Iterable[Point2d]) -> Guid: ...
    def AddLeader (self, plane : Plane, points : Iterable[Point2d], attributes : ObjectAttributes) -> Guid: ...
    def AddLeader (self, text : str, plane : Plane, points : Iterable[Point2d], attributes : ObjectAttributes) -> Guid: ...
    def AddLeader (self, text : str, plane : Plane, points : Iterable[Point2d], attributes : ObjectAttributes, history : HistoryRecord, reference : bool) -> Guid: ...
    def AddLeader (self, text : str, plane : Plane, points : Iterable[Point2d]) -> Guid: ...
    def AddLeader (self, text : str, points : Iterable[Point3d]) -> Guid: ...
    def AddLeader (self, points : Iterable[Point3d]) -> Guid: ...
    def AddHatch (self, hatch : Hatch) -> Guid: ...
    def AddHatch (self, hatch : Hatch, attributes : ObjectAttributes) -> Guid: ...
    def AddHatch (self, hatch : Hatch, attributes : ObjectAttributes, history : HistoryRecord, reference : bool) -> Guid: ...
    def AddMorphControl (self, morphControl : MorphControl) -> Guid: ...
    def AddMorphControl (self, morphControl : MorphControl, attributes : ObjectAttributes) -> Guid: ...
    def AddMorphControl (self, morphControl : MorphControl, attributes : ObjectAttributes, history : HistoryRecord, reference : bool) -> Guid: ...
    def AddPictureFrame (self, plane : Plane, texturePath : str, asMesh : bool, width : float, height : float, selfIllumination : bool, embedBitmap : bool) -> Guid: ...
    def Delete (self, objref : ObjRef, quiet : bool, ignoreModes : bool) -> bool: ...
    def Delete (self, objref : ObjRef, quiet : bool) -> bool: ...
    def Delete (self, obj : RhinoObject, quiet : bool) -> bool: ...
    def Delete (self, obj : RhinoObject, quiet : bool, ignoreModes : bool) -> bool: ...
    def Delete (self, objectId : Guid, quiet : bool) -> bool: ...
    def Delete (self, objectIds : Iterable[Guid], quiet : bool) -> int: ...
    def Delete (self, item : RhinoObject) -> bool: ...
    def DeleteGrip (self, gripId : Guid) -> bool: ...
    def DeleteGrip (self, gripRef : ObjRef) -> bool: ...
    def DeleteGrip (self, grip : GripObject) -> bool: ...
    def DeleteGrips (self, gripIds : Iterable[Guid]) -> int: ...
    def DeleteGrips (self, gripRefs : Iterable[ObjRef]) -> int: ...
    def DeleteGrips (self, grips : Iterable[GripObject]) -> int: ...
    @property
    def Document (self) -> RhinoDoc: ...
    def Find (self, objectId : Guid) -> RhinoObject: ...
    def FindId (self, id : Guid) -> RhinoObject: ...
    def TryFindPoint (self, id : Guid) -> Tuple[bool, Point3d]: ...
    def FindGeometry (self, id : Guid) -> GeometryBase: ...
    def Find (self, runtimeSerialNumber : UInt32) -> RhinoObject: ...
    def FindByGroup (self, groupIndex : int) -> Set(RhinoObject): ...
    def FindByLayer (self, layer : Layer) -> Set(RhinoObject): ...
    def FindByLayer (self, layerName : str) -> Set(RhinoObject): ...
    def FindByFilter (self, filter : ObjectEnumeratorSettings) -> Set(RhinoObject): ...
    def FindByObjectType (self, typeFilter : ObjectType) -> Set(RhinoObject): ...
    def FindByUserString (self, key : str, value : str, caseSensitive : bool) -> Set(RhinoObject): ...
    def FindByUserString (self, key : str, value : str, caseSensitive : bool, searchGeometry : bool, searchAttributes : bool, filter : ObjectType) -> Set(RhinoObject): ...
    def FindByUserString (self, key : str, value : str, caseSensitive : bool, searchGeometry : bool, searchAttributes : bool, filter : ObjectEnumeratorSettings) -> Set(RhinoObject): ...
    def FindByDrawColor (self, drawColor : Color, includeLights : bool) -> Set(RhinoObject): ...
    def FindByWindowRegion (self, viewport : RhinoViewport, region : Iterable[Point3d], inside : bool, filter : ObjectType) -> Set(RhinoObject): ...
    def FindByWindowRegion (self, viewport : RhinoViewport, screen1 : Point2d, screen2 : Point2d, inside : bool, filter : ObjectType) -> Set(RhinoObject): ...
    def FindByCrossingWindowRegion (self, viewport : RhinoViewport, region : Iterable[Point3d], inside : bool, filter : ObjectType) -> Set(RhinoObject): ...
    def FindByCrossingWindowRegion (self, viewport : RhinoViewport, screen1 : Point2d, screen2 : Point2d, inside : bool, filter : ObjectType) -> Set(RhinoObject): ...
    def FindClippingPlanesForViewport (self, viewport : RhinoViewport) -> Set(ClippingPlaneObject): ...
    def AddRhinoObject (self, meshObject : CustomMeshObject) -> None: ...
    def AddRhinoObject (self, meshObject : CustomMeshObject, history : HistoryRecord) -> None: ...
    def AddRhinoObject (self, meshObject : MeshObject, mesh : Mesh) -> None: ...
    def AddRhinoObject (self, brepObject : CustomBrepObject) -> None: ...
    def AddRhinoObject (self, brepObject : CustomBrepObject, history : HistoryRecord) -> None: ...
    def AddRhinoObject (self, brepObject : BrepObject, brep : Brep) -> None: ...
    def AddRhinoObject (self, pointObject : CustomPointObject) -> None: ...
    def AddRhinoObject (self, pointObject : CustomPointObject, history : HistoryRecord) -> None: ...
    def AddRhinoObject (self, pointObject : PointObject, point : Point) -> None: ...
    def AddRhinoObject (self, curveObject : CurveObject, curve : Curve) -> None: ...
    def AddRhinoObject (self, curveObject : CustomCurveObject, history : HistoryRecord) -> None: ...
    def Add (self, geometry : GeometryBase) -> Guid: ...
    def Add (self, geometry : GeometryBase, attributes : ObjectAttributes) -> Guid: ...
    def Add (self, geometry : GeometryBase, attributes : ObjectAttributes, history : HistoryRecord, reference : bool) -> Guid: ...
    @property
    def HistoryRecordCount (self) -> int: ...
    def AddPoint (self, x : float, y : float, z : float) -> Guid: ...
    def AddPoint (self, point : Point3d) -> Guid: ...
    def AddPoint (self, point : Point3d, attributes : ObjectAttributes) -> Guid: ...
    def AddPoint (self, point : Point3d, attributes : ObjectAttributes, history : HistoryRecord, reference : bool) -> Guid: ...
    def AddPoint (self, point : Point, attributes : ObjectAttributes, history : HistoryRecord, reference : bool) -> Guid: ...
    def AddPoint (self, point : Point3f) -> Guid: ...
    def AddPoint (self, point : Point3f, attributes : ObjectAttributes) -> Guid: ...
    def AddPoints (self, points : Iterable[Point3d]) -> RhinoList: ...
    def AddPoints (self, points : Iterable[Point3d], attributes : ObjectAttributes) -> RhinoList: ...
    def AddPoints (self, points : Iterable[Point3f]) -> RhinoList: ...
    def AddPoints (self, points : Iterable[Point3f], attributes : ObjectAttributes) -> RhinoList: ...
    def AddPointCloud (self, cloud : PointCloud) -> Guid: ...
    def AddPointCloud (self, cloud : PointCloud, attributes : ObjectAttributes) -> Guid: ...
    def AddPointCloud (self, cloud : PointCloud, attributes : ObjectAttributes, history : HistoryRecord, reference : bool) -> Guid: ...
    def AddPointCloud (self, points : Iterable[Point3d]) -> Guid: ...
    def AddPointCloud (self, points : Iterable[Point3d], attributes : ObjectAttributes) -> Guid: ...
    def AddPointCloud (self, points : Iterable[Point3d], attributes : ObjectAttributes, history : HistoryRecord, reference : bool) -> Guid: ...
    def AddClippingPlane (self, plane : Plane, uMagnitude : float, vMagnitude : float, clippedViewportId : Guid) -> Guid: ...
    def AddClippingPlane (self, plane : Plane, uMagnitude : float, vMagnitude : float, clippedViewportIds : Iterable[Guid]) -> Guid: ...
    def AddClippingPlane (self, plane : Plane, uMagnitude : float, vMagnitude : float, clippedViewportIds : Iterable[Guid], attributes : ObjectAttributes) -> Guid: ...
    def AddClippingPlane (self, plane : Plane, uMagnitude : float, vMagnitude : float, clippedViewportId : Guid, attributes : ObjectAttributes, history : HistoryRecord, reference : bool) -> Guid: ...
    def AddClippingPlane (self, plane : Plane, uMagnitude : float, vMagnitude : float, clippedViewportIds : Iterable[Guid], attributes : ObjectAttributes, history : HistoryRecord, reference : bool) -> Guid: ...
    def AddRadialDimension (self, dimension : RadialDimension) -> Guid: ...
    def AddRadialDimension (self, dimension : RadialDimension, attributes : ObjectAttributes) -> Guid: ...
    def AddRadialDimension (self, dimension : RadialDimension, attributes : ObjectAttributes, history : HistoryRecord, reference : bool) -> Guid: ...
    def AddRectangle (self, rectangle : Rectangle3d) -> Guid: ...
    def AddRectangle (self, rectangle : Rectangle3d, attributes : ObjectAttributes) -> Guid: ...
    def AddRectangle (self, rectangle : Rectangle3d, attributes : ObjectAttributes, history : HistoryRecord, reference : bool) -> Guid: ...
    def AddBox (self, box : Box) -> Guid: ...
    def AddBox (self, box : Box, attributes : ObjectAttributes) -> Guid: ...
    def AddBox (self, box : Box, attributes : ObjectAttributes, history : HistoryRecord, reference : bool) -> Guid: ...
    def AddLine (self, from_ : Point3d, to : Point3d) -> Guid: ...
    def AddLine (self, from_ : Point3d, to : Point3d, attributes : ObjectAttributes) -> Guid: ...
    def AddLine (self, from_ : Point3d, to : Point3d, attributes : ObjectAttributes, history : HistoryRecord, reference : bool) -> Guid: ...
    def AddLine (self, line : Line) -> Guid: ...
    def AddLine (self, line : Line, attributes : ObjectAttributes) -> Guid: ...
    def AddPolyline (self, points : Iterable[Point3d]) -> Guid: ...
    def AddPolyline (self, points : Iterable[Point3d], attributes : ObjectAttributes) -> Guid: ...
    def AddPolyline (self, points : Iterable[Point3d], attributes : ObjectAttributes, history : HistoryRecord, reference : bool) -> Guid: ...
    def AddArc (self, arc : Arc) -> Guid: ...
    def AddArc (self, arc : Arc, attributes : ObjectAttributes) -> Guid: ...
    def AddArc (self, arc : Arc, attributes : ObjectAttributes, history : HistoryRecord, reference : bool) -> Guid: ...
    def AddCircle (self, circle : Circle) -> Guid: ...
class StringTable:
    @property
    def Document (self) -> RhinoDoc: ...
    @property
    def Count (self) -> int: ...
    @property
    def DocumentDataCount (self) -> int: ...
    @property
    def DocumentUserTextCount (self) -> int: ...
    def GetKey (self, i : int) -> str: ...
    def GetValue (self, i : int) -> str: ...
    def GetValue (self, key : str) -> str: ...
    def GetValue (self, section : str, entry : str) -> str: ...
    def GetSectionNames (self) -> Set(str): ...
    def GetEntryNames (self, section : str) -> Set(str): ...
    def SetString (self, section : str, entry : str, value : str) -> str: ...
    def SetString (self, key : str, value : str) -> str: ...
    def Delete (self, section : str, entry : str) -> None: ...
    def Delete (self, key : str) -> None: ...
class NamedConstructionPlaneTable:
    @property
    def Document (self) -> RhinoDoc: ...
    @property
    def Count (self) -> int: ...
    @property
    def Item (self, index : int) -> ConstructionPlane: ...
    def Find (self, name : str) -> int: ...
    def Add (self, name : str, plane : Plane) -> int: ...
    def Delete (self, index : int) -> bool: ...
    def Delete (self, name : str) -> bool: ...
    def GetEnumerator (self) -> IEnumerator: ...
class NamedViewTable:
    @property
    def Document (self) -> RhinoDoc: ...
    @property
    def Count (self) -> int: ...
    @property
    def Item (self, index : int) -> ViewInfo: ...
    def FindByName (self, name : str) -> int: ...
    def Add (self, name : str, viewportId : Guid) -> int: ...
    def Add (self, view : ViewInfo) -> int: ...
    def Delete (self, index : int) -> bool: ...
    def Delete (self, name : str) -> bool: ...
    def Rename (self, index : int, newName : str) -> bool: ...
    def Rename (self, oldName : str, newName : str) -> bool: ...
    def Restore (self, index : int, viewport : RhinoViewport) -> bool: ...
    def RestoreWithAspectRatio (self, index : int, viewport : RhinoViewport) -> bool: ...
    def RestoreAnimatedConstantSpeed (self, index : int, viewport : RhinoViewport, units_per_frame : float, ms_delay : int) -> bool: ...
    def RestoreAnimatedConstantTime (self, index : int, viewport : RhinoViewport, frames : int, ms_delay : int) -> bool: ...
    def Restore (self, index : int, view : RhinoView, backgroundBitmap : bool) -> bool: ...
    def Restore (self, index : int, viewport : RhinoViewport, backgroundBitmap : bool) -> bool: ...
    def RestoreAnimated (self, index : int, view : RhinoView, backgroundBitmap : bool) -> bool: ...
    def RestoreAnimated (self, index : int, view : RhinoView, backgroundBitmap : bool, frames : int, frameRate : int) -> bool: ...
    def RestoreAnimated (self, index : int, viewport : RhinoViewport, backgroundBitmap : bool) -> bool: ...
    def RestoreAnimated (self, index : int, viewport : RhinoViewport, backgroundBitmap : bool, frames : int, frameRate : int) -> bool: ...
    def GetEnumerator (self) -> IEnumerator: ...
class NamedPositionTable:
    @property
    def Document (self) -> RhinoDoc: ...
    @property
    def Count (self) -> int: ...
    @property
    def Ids (self) -> Set(Guid): ...
    @property
    def Names (self) -> Set(str): ...
    def Objects (self, id : Guid) -> Set(RhinoObject): ...
    def Objects (self, name : str) -> Set(RhinoObject): ...
    def ObjectIds (self, id : Guid) -> Set(Guid): ...
    def ObjectIds (self, name : str) -> Set(Guid): ...
    def ObjectXform (self, id : Guid, obj : RhinoObject, xform : Transform) -> Tuple[bool, Transform]: ...
    def ObjectXform (self, id : Guid, objId : Guid, xform : Transform) -> Tuple[bool, Transform]: ...
    def Name (self, id : Guid) -> str: ...
    def Id (self, name : str) -> Guid: ...
    def Restore (self, id : Guid) -> bool: ...
    def Restore (self, name : str) -> bool: ...
    def Save (self, name : str, objects : Iterable[RhinoObject]) -> Guid: ...
    def Save (self, name : str, objectIds : Iterable[Guid]) -> Guid: ...
    def Delete (self, id : Guid) -> bool: ...
    def Delete (self, name : str) -> bool: ...
    def Update (self, id : Guid) -> bool: ...
    def Update (self, name : str) -> bool: ...
    def Rename (self, id : Guid, name : str) -> bool: ...
    def Rename (self, oldName : str, name : str) -> bool: ...
    def Append (self, id : Guid, objects : Iterable[RhinoObject]) -> bool: ...
    def Append (self, id : Guid, objectIds : Iterable[Guid]) -> bool: ...
    def Append (self, name : str, objects : Iterable[RhinoObject]) -> bool: ...
    def Append (self, name : str, objectIds : Iterable[Guid]) -> bool: ...
class SnapshotTable:
    @property
    def Document (self) -> RhinoDoc: ...
    @property
    def Names (self) -> Set(str): ...
class RestoreLayerProperties:
    None = 0
    Current = 1
    Visible = 2
    Locked = 4
    Color = 8
    Linetype = 16
    PrintColor = 32
    PrintWidth = 64
    ViewportVisible = 128
    ViewportColor = 256
    ViewportPrintColor = 512
    ViewportPrintWidth = 1024
    RenderMaterial = 2048
    Unused = 4096
    All = 4294967295
class NamedLayerStateTable:
    @property
    def Document (self) -> RhinoDoc: ...
    @property
    def Count (self) -> int: ...
    @property
    def Names (self) -> Set(str): ...
    def FindName (self, name : str) -> int: ...
    def Save (self, name : str) -> int: ...
    def Save (self, name : str, viewportId : Guid) -> int: ...
    def Restore (self, name : str, properties : RestoreLayerProperties) -> bool: ...
    def Restore (self, name : str, properties : RestoreLayerProperties, viewportId : Guid) -> bool: ...
    def Rename (self, oldName : str, newName : str) -> bool: ...
    def Delete (self, name : str) -> bool: ...
    def Import (self, filename : str) -> int: ...
class FontTable:
    @property
    def Document (self) -> RhinoDoc: ...
    @property
    def Count (self) -> int: ...
    @property
    def CurrentIndex (self) -> int: ...
    @property
    def Item (self, index : int) -> Font: ...
    def FindOrCreate (self, face : str, bold : bool, italic : bool) -> int: ...
    def FindOrCreate (self, face : str, bold : bool, italic : bool, template_style : DimensionStyle) -> int: ...
    def GetEnumerator (self) -> IEnumerator: ...
class GroupTableEventType:
    Added = 0
    Deleted = 1
    Undeleted = 2
    Modified = 3
    Sorted = 4
class GroupTableEventArgs:
    @property
    def Document (self) -> RhinoDoc: ...
    @property
    def EventType (self) -> GroupTableEventType: ...
    @property
    def GroupIndex (self) -> int: ...
    @property
    def NewState (self) -> Group: ...
    @property
    def OldState (self) -> Group: ...
class GroupTable:
    @property
    def ComponentType (self) -> ModelComponentType: ...
    def Find (self, groupName : str) -> int: ...
    def Find (self, groupName : str, ignoreDeletedGroups : bool) -> int: ...
    def FindName (self, name : str) -> Group: ...
    def FindNameHash (self, nameHash : NameHash) -> Group: ...
    def FindIndex (self, index : int) -> Group: ...
    def Add (self, groupName : str) -> int: ...
    def Add (self) -> int: ...
    def Add (self, groupName : str, objectIds : Iterable[Guid]) -> int: ...
    def Add (self, objectIds : Iterable[Guid]) -> int: ...
    def AddToGroup (self, groupIndex : int, objectId : Guid) -> bool: ...
    def AddToGroup (self, groupIndex : int, objectIds : Iterable[Guid]) -> bool: ...
    def Delete (self, groupIndex : int) -> bool: ...
    def Delete (self, item : Group) -> bool: ...
    def Undelete (self, groupIndex : int) -> bool: ...
    def IsDeleted (self, groupIndex : int) -> bool: ...
    def GroupName (self, groupIndex : int) -> str: ...
    def ChangeGroupName (self, groupIndex : int, newName : str) -> bool: ...
    def GroupNames (self, ignoreDeletedGroups : bool) -> Set(str): ...
    def Hide (self, groupIndex : int) -> int: ...
    def Show (self, groupIndex : int) -> int: ...
    def Lock (self, groupIndex : int) -> int: ...
    def Unlock (self, groupIndex : int) -> int: ...
    def GroupObjectCount (self, groupIndex : int) -> int: ...
    def GroupMembers (self, groupIndex : int) -> Set(RhinoObject): ...
class HatchPatternTable:
    @property
    def Item (self, index : int) -> HatchPattern: ...
    @property
    def CurrentHatchPatternIndex (self) -> int: ...
    @CurrentHatchPatternIndex.setter
    def CurrentHatchPatternIndex (self, value : int) -> None: ...
    @property
    def ComponentType (self) -> ModelComponentType: ...
    def Find (self, name : str, ignoreDeleted : bool) -> int: ...
    def FindName (self, name : str) -> HatchPattern: ...
    def FindNameHash (self, nameHash : NameHash) -> HatchPattern: ...
    def FindIndex (self, index : int) -> HatchPattern: ...
    def Add (self, pattern : HatchPattern) -> int: ...
    def Delete (self, item : HatchPattern) -> bool: ...
    def Delete (self, item : HatchPattern, quiet : bool) -> bool: ...
class InstanceDefinitionTableEventType:
    Added = 0
    Deleted = 1
    Undeleted = 2
    Modified = 3
    Sorted = 4
class InstanceDefinitionTableEventArgs:
    @property
    def Document (self) -> RhinoDoc: ...
    @property
    def EventType (self) -> InstanceDefinitionTableEventType: ...
    @property
    def InstanceDefinitionIndex (self) -> int: ...
    @property
    def NewState (self) -> InstanceDefinition: ...
    @property
    def OldState (self) -> InstanceDefinitionGeometry: ...
class InstanceDefinitionTable:
    @property
    def Document (self) -> RhinoDoc: ...
    @property
    def Count (self) -> int: ...
    @property
    def ActiveCount (self) -> int: ...
    @property
    def ComponentType (self) -> ModelComponentType: ...
    @property
    def Item (self, index : int) -> InstanceDefinition: ...
    def Find (self, instanceDefinitionName : str, ignoreDeletedInstanceDefinitions : bool) -> InstanceDefinition: ...
    def Find (self, instanceDefinitionName : str) -> InstanceDefinition: ...
    def Find (self, instanceId : Guid, ignoreDeletedInstanceDefinitions : bool) -> InstanceDefinition: ...
    def InstanceDefinitionIndex (self, instanceId : Guid, ignoreDeletedInstanceDefinitions : bool) -> int: ...
    def Add (self, name : str, description : str, basePoint : Point3d, geometry : Iterable[GeometryBase], attributes : Iterable[ObjectAttributes]) -> int: ...
    def Add (self, name : str, description : str, basePoint : Point3d, geometry : Iterable[GeometryBase]) -> int: ...
    def Add (self, name : str, description : str, basePoint : Point3d, geometry : GeometryBase, attributes : ObjectAttributes) -> int: ...
    def Modify (self, idef : InstanceDefinition, newName : str, newDescription : str, quiet : bool) -> bool: ...
    def Modify (self, idefIndex : int, newName : str, newDescription : str, quiet : bool) -> bool: ...
    def UndoModify (self, idefIndex : int) -> bool: ...
    def ModifyGeometry (self, idefIndex : int, newGeometry : Iterable[GeometryBase], newAttributes : Iterable[ObjectAttributes]) -> bool: ...
    def ModifyGeometry (self, idefIndex : int, newGeometry : Iterable[GeometryBase]) -> bool: ...
    def ModifyGeometry (self, idefIndex : int, newGeometry : GeometryBase, newAttributes : ObjectAttributes) -> bool: ...
    def DestroySourceArchive (self, definition : InstanceDefinition, quiet : bool) -> bool: ...
    def ModifySourceArchive (self, idefIndex : int, sourceArchive : str, updateType : InstanceDefinitionUpdateType, quiet : bool) -> bool: ...
    def ModifySourceArchive (self, idefIndex : int, sourceArchive : FileReference, updateType : InstanceDefinitionUpdateType, quiet : bool) -> bool: ...
    def RefreshLinkedBlock (self, definition : InstanceDefinition) -> bool: ...
    def MakeSourcePathRelative (self, idef : InstanceDefinition, relative : bool, quiet : bool) -> bool: ...
    def Delete (self, idefIndex : int, deleteReferences : bool, quiet : bool) -> bool: ...
    def Delete (self, item : InstanceDefinition) -> bool: ...
    def Purge (self, idefIndex : int) -> bool: ...
    def Compact (self, ignoreUndoReferences : bool) -> None: ...
    def Undelete (self, idefIndex : int) -> bool: ...
    def UpdateLinkedInstanceDefinition (self, idefIndex : int, filename : str, updateNestedLinks : bool, quiet : bool) -> bool: ...
    def GetList (self, ignoreDeleted : bool) -> Set(InstanceDefinition): ...
    def GetUnusedInstanceDefinitionName (self) -> str: ...
    def GetUnusedInstanceDefinitionName (self, root : str) -> str: ...
    def GetUnusedInstanceDefinitionName (self, root : str, defaultSuffix : UInt32) -> str: ...
    def GetEnumerator (self) -> IEnumerator: ...
class LayerTableEventType:
    Added = 0
    Deleted = 1
    Undeleted = 2
    Modified = 3
    Sorted = 4
    Current = 5
class LayerTableEventArgs:
    @property
    def Document (self) -> RhinoDoc: ...
    @property
    def EventType (self) -> LayerTableEventType: ...
    @property
    def LayerIndex (self) -> int: ...
    @property
    def NewState (self) -> Layer: ...
    @property
    def OldState (self) -> Layer: ...
class LayerTable:
    @property
    def Document (self) -> RhinoDoc: ...
    @property
    def Count (self) -> int: ...
    @property
    def ActiveCount (self) -> int: ...
    @property
    def Item (self, index : int) -> Layer: ...
    @property
    def CurrentLayerIndex (self) -> int: ...
    def SetCurrentLayerIndex (self, layerIndex : int, quiet : bool) -> bool: ...
    @property
    def CurrentLayer (self) -> Layer: ...
    @property
    def ComponentType (self) -> ModelComponentType: ...
    def Find (self, layerName : str, ignoreDeletedLayers : bool) -> int: ...
    def FindNext (self, index : int, layerName : str, ignoreDeletedLayers : bool) -> int: ...
    def FindNext (self, index : int, layerName : str) -> Layer: ...
    def FindByFullPath (self, layerPath : str, ignoreDeletedLayers : bool) -> int: ...
    def FindByFullPath (self, layerPath : str, notFoundReturnValue : int) -> int: ...
    def Find (self, parentId : Guid, layerName : str, ignoreDeletedLayers : bool) -> int: ...
    def Find (self, parentId : Guid, layerName : str, notFoundReturnValue : int) -> int: ...
    def Find (self, layerId : Guid, ignoreDeletedLayers : bool) -> int: ...
    def Find (self, layerId : Guid, ignoreDeletedLayers : bool, notFoundReturnValue : int) -> int: ...
    def FindName (self, layerName : str) -> Layer: ...
    def FindName (self, layerName : str, startIndex : int) -> Layer: ...
    def FindNameHash (self, nameHash : NameHash) -> Layer: ...
    def FindIndex (self, index : int) -> Layer: ...
    def Add (self, layer : Layer) -> int: ...
    def Add (self, layerName : str, layerColor : Color) -> int: ...
    def AddReferenceLayer (self, layer : Layer) -> int: ...
    def Add (self) -> int: ...
    def AddReferenceLayer (self) -> int: ...
    def Modify (self, newSettings : Layer, layerIndex : int, quiet : bool) -> bool: ...
    def Modify (self, newSettings : Layer, layerId : Guid, quiet : bool) -> bool: ...
    def ForceLayerVisible (self, layerId : Guid) -> bool: ...
    def ForceLayerVisible (self, layerIndex : int) -> bool: ...
    def UndoModify (self, layerIndex : int, undoRecordSerialNumber : UInt32) -> bool: ...
    def UndoModify (self, layerIndex : int) -> bool: ...
    def UndoModify (self, layerId : Guid, undoRecordSerialNumber : UInt32) -> bool: ...
    def UndoModify (self, layerId : Guid) -> bool: ...
    def Delete (self, layerIndex : int, quiet : bool) -> bool: ...
    def Delete (self, layer : Layer) -> bool: ...
    def Delete (self, layerId : Guid, quiet : bool) -> bool: ...
    def Delete (self, layer : Layer, quiet : bool) -> bool: ...
    def Purge (self, layerIndex : int, quiet : bool) -> bool: ...
    def Purge (self, layerId : Guid, quiet : bool) -> bool: ...
    def Undelete (self, layerIndex : int) -> bool: ...
    def GetUnusedLayerName (self, ignoreDeleted : bool) -> str: ...
    def GetUnusedLayerName (self) -> str: ...
    def GetSelected (self) -> Tuple[bool, List]: ...
    def Select (self, layerIndices : Iterable[int], bDeselect : bool) -> bool: ...
    def Duplicate (self, layerIndex : int, duplicateObjects : bool, duplicateSublayers : bool) -> Set(int): ...
    def Duplicate (self, layerIndices : Iterable[int], duplicateObjects : bool, duplicateSublayers : bool) -> Set(int): ...
    def GetEnumerator (self) -> IEnumerator: ...
class LightTableEventType:
    Added = 0
    Deleted = 1
    Undeleted = 2
    Modified = 3
    Sorted = 4
class LightTableEventArgs:
    @property
    def Document (self) -> RhinoDoc: ...
    @property
    def EventType (self) -> LightTableEventType: ...
    @property
    def LightIndex (self) -> int: ...
    @property
    def NewState (self) -> LightObject: ...
    @property
    def OldState (self) -> Light: ...
class LightTable:
    @property
    def Document (self) -> RhinoDoc: ...
    @property
    def Sun (self) -> Sun: ...
    @property
    def Skylight (self) -> Skylight: ...
    @property
    def Count (self) -> int: ...
    @property
    def ComponentType (self) -> ModelComponentType: ...
    @property
    def Item (self, index : int) -> LightObject: ...
    def Find (self, id : Guid, ignoreDeleted : bool) -> int: ...
    def FindName (self, name : str) -> LightObject: ...
    def FindNameHash (self, nameHash : NameHash) -> LightObject: ...
    def FindIndex (self, index : int) -> LightObject: ...
    def Add (self, light : Light) -> int: ...
    def Add (self, light : Light, attributes : ObjectAttributes) -> int: ...
    def Delete (self, index : int, quiet : bool) -> bool: ...
    def Delete (self, item : LightObject) -> bool: ...
    def Modify (self, id : Guid, light : Light) -> bool: ...
    def Modify (self, index : int, light : Light) -> bool: ...
    def GetEnumerator (self) -> IEnumerator: ...
class LinetypeTable:
    @property
    def Document (self) -> RhinoDoc: ...
    @property
    def Count (self) -> int: ...
    @property
    def ActiveCount (self) -> int: ...
    @property
    def CurrentLinetypeIndex (self) -> int: ...
    @property
    def LinetypeScale (self) -> float: ...
    @LinetypeScale.setter
    def LinetypeScale (self, value : float) -> None: ...
    @property
    def Item (self, index : int) -> Linetype: ...
    @property
    def CurrentLinetypeSource (self) -> ObjectLinetypeSource: ...
    @CurrentLinetypeSource.setter
    def CurrentLinetypeSource (self, value : ObjectLinetypeSource) -> None: ...
    def SetCurrentLinetypeIndex (self, linetypeIndex : int, quiet : bool) -> bool: ...
    def LinetypeIndexForObject (self, rhinoObject : RhinoObject) -> int: ...
    @property
    def CurrentLinetype (self) -> Linetype: ...
    def LoadDefaultLinetypes (self) -> int: ...
    def Find (self, name : str, ignoreDeletedLinetypes : bool) -> int: ...
    def Find (self, name : str) -> int: ...
    def Find (self, id : Guid, ignoreDeletedLinetypes : bool) -> int: ...
    def FindName (self, name : str) -> Linetype: ...
    def FindIndex (self, index : int) -> Linetype: ...
    def Add (self, linetype : Linetype) -> int: ...
    def Add (self, name : str, segmentLengths : Iterable[float]) -> int: ...
    def AddReferenceLinetype (self, linetype : Linetype) -> int: ...
    def Modify (self, linetype : Linetype, index : int, quiet : bool) -> bool: ...
    def UndoModify (self, index : int) -> bool: ...
    def Delete (self, index : int, quiet : bool) -> bool: ...
    def Delete (self, item : Linetype) -> bool: ...
    def Delete (self, indices : Iterable[int], quiet : bool) -> bool: ...
    def Undelete (self, index : int) -> bool: ...
    def GetUnusedLinetypeName (self, ignoreDeleted : bool) -> str: ...
    def GetUnusedLinetypeName (self) -> str: ...
    @property
    def ContinuousLinetypeName (self) -> str: ...
    @property
    def ByLayerLinetypeName (self) -> str: ...
    @property
    def ByParentLinetypeName (self) -> str: ...
    @property
    def ComponentType (self) -> ModelComponentType: ...
    def GetEnumerator (self) -> IEnumerator: ...
class MaterialTableEventType:
    Added = 0
    Deleted = 1
    Undeleted = 2
    Modified = 3
    Sorted = 4
    Current = 5
class MaterialTableEventArgs:
    @property
    def Document (self) -> RhinoDoc: ...
    @property
    def EventType (self) -> MaterialTableEventType: ...
    @property
    def Index (self) -> int: ...
    @property
    def OldSettings (self) -> Material: ...
class MaterialTable:
    @property
    def Item (self, index : int) -> Material: ...
    def FindIndex (self, index : int) -> Material: ...
    @property
    def CurrentMaterialIndex (self) -> int: ...
    @CurrentMaterialIndex.setter
    def CurrentMaterialIndex (self, value : int) -> None: ...
    @property
    def CurrentMaterialSource (self) -> ObjectMaterialSource: ...
    @CurrentMaterialSource.setter
    def CurrentMaterialSource (self, value : ObjectMaterialSource) -> None: ...
    @property
    def ComponentType (self) -> ModelComponentType: ...
    def Add (self) -> int: ...
    def Add (self, material : Material) -> int: ...
    def Add (self, material : Material, reference : bool) -> int: ...
    def Find (self, materialName : str, ignoreDeletedMaterials : bool) -> int: ...
    def Find (self, materialId : Guid, ignoreDeletedMaterials : bool) -> int: ...
    def Modify (self, newSettings : Material, materialIndex : int, quiet : bool) -> bool: ...
    def ResetMaterial (self, materialIndex : int) -> bool: ...
    def DeleteAt (self, materialIndex : int) -> bool: ...
    def Delete (self, item : Material) -> bool: ...
