# __oal_lextab.py. This file automatically created by PLY (version 3.11). Don't edit!
_tabversion   = '3.10'
_lextokens    = set(('ACROSS', 'AMP', 'AND', 'ANY', 'ARROW', 'ASSIGN', 'ASSIGNER', 'BREAK', 'BRIDGE', 'BY', 'CARDINALITY', 'CARET', 'CLASS', 'COLON', 'COMMA', 'COMMENT', 'CONTINUE', 'CONTROL', 'CREATE', 'CREATOR', 'DELETE', 'DIV', 'DOT', 'DOUBLECOLON', 'DOUBLEEQUAL', 'EACH', 'ELIF', 'ELSE', 'EMPTY', 'END_FOR', 'END_IF', 'END_WHILE', 'EQUAL', 'EVENT', 'FALSE', 'FOR', 'FRACTION', 'FROM', 'GE', 'GENERATE', 'GT', 'ID', 'IF', 'IN', 'INSTANCE', 'INSTANCES', 'LE', 'LESSTHAN', 'LPAREN', 'LSQBR', 'MANY', 'MINUS', 'MOD', 'NAMESPACE', 'NOT', 'NOTEQUAL', 'NOT_EMPTY', 'NUMBER', 'OBJECT', 'OF', 'ONE', 'OR', 'PARAM', 'PIPE', 'PLUS', 'QMARK', 'RCVD_EVT', 'RELATE', 'RELATED', 'RETURN', 'RPAREN', 'RSQBR', 'SELECT', 'SELECTED', 'SELF', 'SEMICOLON', 'SEND', 'SL_STRING', 'STOP', 'STRING', 'TICKED_PHRASE', 'TIMES', 'TO', 'TRANSFORM', 'TRUE', 'UNRELATE', 'USING', 'WHERE', 'WHILE'))
_lexreflags   = 64
_lexliterals  = ''
_lexstateinfo = {'INITIAL': 'inclusive'}
_lexstatere   = {'INITIAL': [('(?P<t_COMMENT>/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*+/)|(?P<t_SL_STRING>\\/\\/.*\\n)|(?P<t_TICKED_PHRASE>\\\'[^\\\']*\\\')|(?P<t_STRING>"[^"\\n]*")|(?P<t_END_FOR>(?i)end[\\s]+for)|(?P<t_END_IF>(?i)end[\\s]+if)|(?P<t_END_WHILE>(?i)end[\\s]+while)|(?P<t_NAMESPACE>([0-9a-zA-Z_])+(?=::))|(?P<t_ID>[a-zA-Z_][0-9a-zA-Z_]*|[a-zA-Z][0-9a-zA-Z_]*[0-9a-zA-Z_]+)|(?P<t_FRACTION>(((\\d*\\.\\d+)|(\\d+\\.)([eE][-+]?\\d+)?)|(\\d+([eE][-+]?\\d+)))[FfLl]?)|(?P<t_NUMBER>\\d+)|(?P<t_DOUBLECOLON>::)|(?P<t_DOUBLEEQUAL>\\=\\=)|(?P<t_NOTEQUAL>!\\=)|(?P<t_ARROW>\\-\\>)|(?P<t_LE>\\<\\=)|(?P<t_GE>\\>\\=)|(?P<t_SEMICOLON>;)|(?P<t_EQUAL>\\=)|(?P<t_DOT>\\.)|(?P<t_LPAREN>\\()|(?P<t_RPAREN>\\))|(?P<t_TIMES>\\*)|(?P<t_COLON>:)|(?P<t_COMMA>,)|(?P<t_LSQBR>\\[)|(?P<t_RSQBR>\\])|(?P<t_QMARK>\\?)|(?P<t_LESSTHAN>\\<)|(?P<t_GT>\\>)|(?P<t_PLUS>\\+)|(?P<t_MINUS>\\-)|(?P<t_PIPE>\\|)|(?P<t_DIV>/)|(?P<t_MOD>%)|(?P<t_AMP>&)|(?P<t_CARET>\\^)|(?P<t_newline>\\n+)', [None, ('t_COMMENT', 'COMMENT'), None, None, None, ('t_SL_STRING', 'SL_STRING'), ('t_TICKED_PHRASE', 'TICKED_PHRASE'), ('t_STRING', 'STRING'), ('t_END_FOR', 'END_FOR'), ('t_END_IF', 'END_IF'), ('t_END_WHILE', 'END_WHILE'), ('t_NAMESPACE', 'NAMESPACE'), None, ('t_ID', 'ID'), ('t_FRACTION', 'FRACTION'), None, None, None, None, None, None, None, ('t_NUMBER', 'NUMBER'), ('t_DOUBLECOLON', 'DOUBLECOLON'), ('t_DOUBLEEQUAL', 'DOUBLEEQUAL'), ('t_NOTEQUAL', 'NOTEQUAL'), ('t_ARROW', 'ARROW'), ('t_LE', 'LE'), ('t_GE', 'GE'), ('t_SEMICOLON', 'SEMICOLON'), ('t_EQUAL', 'EQUAL'), ('t_DOT', 'DOT'), ('t_LPAREN', 'LPAREN'), ('t_RPAREN', 'RPAREN'), ('t_TIMES', 'TIMES'), ('t_COLON', 'COLON'), ('t_COMMA', 'COMMA'), ('t_LSQBR', 'LSQBR'), ('t_RSQBR', 'RSQBR'), ('t_QMARK', 'QMARK'), ('t_LESSTHAN', 'LESSTHAN'), ('t_GT', 'GT'), ('t_PLUS', 'PLUS'), ('t_MINUS', 'MINUS'), ('t_PIPE', 'PIPE'), ('t_DIV', 'DIV'), ('t_MOD', 'MOD'), ('t_AMP', 'AMP'), ('t_CARET', 'CARET'), ('t_newline', 'newline')])]}
_lexstateignore = {'INITIAL': ' \t\r'}
_lexstateerrorf = {'INITIAL': 't_error'}
_lexstateeoff = {}
