#!/bin/bash
# This file has been autogenerated by CCompose

VERBOSE=0

# Does $2 begins with $1 ?
beginswith() { case $2 in "$1"*) true;; *) false;; esac; }

typeset -A services
{%- for node in nodes -%}
{%- if node.type == 'service' -%}
services['{{node.name}}']='{{node.config['image']}}'
{% endif %}
{% endfor %}

cc_help() {
  if [ ! -z "$1" ]
  then
    docker $1 --help
    return
  fi
  cat << EOF
Define and run multi-container applications with Docker or not !

Usage:
  $(basename "$0") [options] [COMMAND] [ARGS...]
  $(basename "$0") -h|--help

Options:
  --verbose                   Show more output

Commands:
  build              Build or rebuild services
  create             Create services
  commit             Commit Docker images
  down               Stop and remove containers, networks, images, and volumes
! events             Receive real time events from containers
  exec               Execute a command in a running container
  help               Get help on a command
! images             List images
  kill               Kill containers
  logs               View output from containers
  pause              Pause services
! port               Print the public port for a port binding
! ps                 List containers
  pull               Pull service images
  push               Push service images
  restart            Restart services
  rm                 Remove stopped containers
  rmi                Remove all images
  run                Run a one-off command
  start              Start services
  stop               Stop services
! top                Display the running processes
  unpause            Unpause services
  up                 Create and start containers

! These are not implemented yet !
EOF
}

{% for key, value in output.items() -%}
{% if value -%}
cc_{{key}}() {
  {{'\n  '.join(value)}}
}
{% else %}
cc_{{key}}() {
  return
}
{% endif -%}
{% endfor -%}

cc_push() {
  while [ $# -ne 0 ]
  do
    eval image=${services[$1]}
    echo Pushing ${image}
    docker push ${image}
    shift
  done
}

cc_pull() {
  while [ $# -ne 0 ]
  do
    eval image=${services[$1]}
    echo Pulling ${image}
    docker pull ${image}
    shift
  done
}

cc_rmi() {
  docker rmi {{ ' '.join(build_nodes) }}
}

cc_build() {
  {% for batch in range(batches) %}
  cc_build_{{batch}}
  {% endfor %}
}

cc_start() {
  {% for batch in range(batches) %}
  cc_start_{{batch}}
  sleep 5
  {% endfor %}
}

cc_stop() {
  {% for batch in range(batches-1, -1, -1) %}
  cc_stop_{{batch}}
  {% endfor %}
}

cc_up() {
  {% for batch in range(batches) %}
  cc_create_{{batch}}
  cc_start_{{batch}}
  sleep 5
  {% endfor %}
}

cc_down() {
  {% for batch in range(batches-1, -1, -1) %}
  cc_stop_{{batch}}
  cc_remove_{{batch}}
  {% endfor %}
}

cc_restart_all() {
  cc_stop
  cc_start
}

cc_restart() {
  local found=false
  args=()
  for arg in "$@"
  do
    if beginswith - $arg
    then
      args+=($arg)
    elif [[ "$found" == "false" ]]; then
      service=${services[$arg]}
      if [[ -z "${service}" ]]
      then
        echo "Service '${arg}' not found !"
        exit 1
      fi
      args+=($service)
      found=true
    else
      echo "[WARNING] Extraneous ${arg} found. Skipped."
    fi
  done
  if $found
  then
    docker restart ${args[@]}
  else
    cc_restart_all
  fi
}

cc_rm_all() {
  docker rm $@ {{ ' '.join(nodes_name) }}
}

cc_rm() {
  local found=false
  args=()
  for arg in "$@"
  do
    if beginswith - $arg
    then
      args+=($arg)
    elif [[ "$found" == "false" ]]; then
      service=${services[$arg]}
      if [[ -z "${service}" ]]
      then
        echo "Service '${arg}' not found !"
        exit 1
      fi
      args+=($service)
      found=true
    else
      echo "[WARNING] Extraneous ${arg} found. Skipped."
    fi
  done
  if $found
  then
    docker rm ${args[@]}
  else
    cc_rm_all ${args[@]}
  fi
}

# And avoid shadowing of builtin 'exec' command :)
cc_exec() {
  local found=false
  args=()
  for arg in "$@"
  do
    if beginswith - $arg
    then
      args+=($arg)
    elif [[ "$found" == "false" ]]; then
      service=${services[$arg]}
      if [[ -z "${service}" ]]
      then
        echo "Service '${arg}' not found !"
        exit 1
      fi
      args+=($service)
      found=true
    else
      args+=($arg)
    fi
  done
  docker exec ${args[@]}
}

cc_run() {
  local found=false
  args=()
  for arg in "$@"
  do
    if beginswith - $arg
    then
      args+=($arg)
    elif [[ "$found" == "false" ]]; then
      service=${services[$arg]}
      if [[ -z "${service}" ]]
      then
        echo "Service '${arg}' not found !"
        exit 1
      fi
      args+=($service)
      found=true
    else
      args+=($arg)
    fi
  done
  docker run ${args[@]}
}

cc_pause() {
  service=${services[$1]}
  if [[ -z "${service}" ]]
  then
    echo "Service '${1}' not found !"
    exit 1
  fi
  docker pause $service
}

cc_unpause() {
  service=${services[$1]}
  if [[ -z "${service}" ]]
  then
    echo "Service '${1}' not found !"
    exit 1
  fi
  docker unpause $service
}

# And avoid shadowing of system 'kill' command :)
cc_kill() {
  local found=false
  args=()
  for arg in "$@"
  do
    if beginswith - $arg
    then
      args+=($arg)
    elif [[ "$found" == "false" ]]; then
      service=${services[$arg]}
      if [[ -z "${service}" ]]
      then
        echo "Service '${arg}' not found !"
        exit 1
      fi
      args+=($service)
      found=true
    else
      echo "[WARNING] Extraneous ${arg} found. Skipped."
    fi
  done
  docker kill ${args[@]}
}

# Kudos go to https://stackoverflow.com/questions/38094715/tail-stdout-from-multiple-docker-containers

pids=()
cleanup()
{
  if [ ${#pids[@]} -ne 0 ]; then
    kill "${pids[@]}" 2>/dev/null
  fi
}

trap cleanup EXIT

cc_logs() {
  while [ $# -ne 0 ]
  do
    (docker logs -f -t --tail=10 "$1"|sed -e "s/^/$1: /")&
    pids+=($!)
    shift
  done
  wait
}

cc_commit() {
  local found=false
  argList=""
  # Kudos go to https://stackoverflow.com/questions/3755772/how-to-preserve-double-quotes-in-in-a-shell-script
  for arg in "$@"
  do
    if beginswith - $arg
    then
      argList="$argList $arg"
    elif [[ "$found" == "false" ]]; then
      image=${services[$arg]}
      if [[ -z "${image}" ]]
      then
        if echo $arg | grep -q " "; then
          argList="$argList \"$arg\""
        else
          argList="$argList $arg"
        fi
      else
        argList="$argList $arg $image"
        found=true
      fi
    else
      if echo $arg | grep -q " "; then
        argList="$argList \"$arg\""
      else
        argList="$argList $arg"
      fi
    fi
  done

  #remove a possible space at the beginning of the list
  argList=$(echo $argList | sed 's/^ *//')

  if [[ "$found" == "false" ]]
  then
    echo "No service found !"
    exit 1
  fi

  eval $(echo docker commit $argList)
}

[[ -z "${1-}" ]] && cc_help "$0"
case $1 in
	start|stop|restart|build|up|down|rmi|pull|rm|images|ps|run|exec|pause|unpause|commit) cc_"$1" "${@:2}" ;;
  logs)
    shift
    if [ $# -eq 0 ]
    then
      cc_logs {{' '.join(container_nodes_name) }}
    else
      cc_logs $*
    fi
    ;;
	*) cc_help "$0" ;;
esac
