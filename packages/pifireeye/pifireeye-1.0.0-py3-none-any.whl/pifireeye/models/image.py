# coding: utf-8

"""
    工业互联网云端API

    工业互联网云端API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Image(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'pixels': 'list[int]',
        'size': 'list[int]',
        'mode': 'str',
        'time': 'float',
        'order_category_id': 'str',
        'label_id': 'str',
        'truth_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'pixels': 'pixels',
        'size': 'size',
        'mode': 'mode',
        'time': 'time',
        'order_category_id': 'order_category_id',
        'label_id': 'label_id',
        'truth_id': 'truth_id'
    }

    def __init__(self, id=None, pixels=None, size=None, mode=None, time=None, order_category_id=None, label_id=None, truth_id=None):  # noqa: E501
        """Image - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._pixels = None
        self._size = None
        self._mode = None
        self._time = None
        self._order_category_id = None
        self._label_id = None
        self._truth_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if pixels is not None:
            self.pixels = pixels
        if size is not None:
            self.size = size
        if mode is not None:
            self.mode = mode
        if time is not None:
            self.time = time
        if order_category_id is not None:
            self.order_category_id = order_category_id
        if label_id is not None:
            self.label_id = label_id
        if truth_id is not None:
            self.truth_id = truth_id

    @property
    def id(self):
        """Gets the id of this Image.  # noqa: E501


        :return: The id of this Image.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Image.


        :param id: The id of this Image.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def pixels(self):
        """Gets the pixels of this Image.  # noqa: E501

        像素值  # noqa: E501

        :return: The pixels of this Image.  # noqa: E501
        :rtype: list[int]
        """
        return self._pixels

    @pixels.setter
    def pixels(self, pixels):
        """Sets the pixels of this Image.

        像素值  # noqa: E501

        :param pixels: The pixels of this Image.  # noqa: E501
        :type: list[int]
        """

        self._pixels = pixels

    @property
    def size(self):
        """Gets the size of this Image.  # noqa: E501

        长宽高  # noqa: E501

        :return: The size of this Image.  # noqa: E501
        :rtype: list[int]
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Image.

        长宽高  # noqa: E501

        :param size: The size of this Image.  # noqa: E501
        :type: list[int]
        """

        self._size = size

    @property
    def mode(self):
        """Gets the mode of this Image.  # noqa: E501


        :return: The mode of this Image.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this Image.


        :param mode: The mode of this Image.  # noqa: E501
        :type: str
        """
        allowed_values = ["RGB", "GREY"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def time(self):
        """Gets the time of this Image.  # noqa: E501

        时间戳，以秒为单位  # noqa: E501

        :return: The time of this Image.  # noqa: E501
        :rtype: float
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this Image.

        时间戳，以秒为单位  # noqa: E501

        :param time: The time of this Image.  # noqa: E501
        :type: float
        """
        if time is not None and time > 10000000000:  # noqa: E501
            raise ValueError("Invalid value for `time`, must be a value less than or equal to `10000000000`")  # noqa: E501
        if time is not None and time < 1000000000:  # noqa: E501
            raise ValueError("Invalid value for `time`, must be a value greater than or equal to `1000000000`")  # noqa: E501

        self._time = time

    @property
    def order_category_id(self):
        """Gets the order_category_id of this Image.  # noqa: E501

        image category id  # noqa: E501

        :return: The order_category_id of this Image.  # noqa: E501
        :rtype: str
        """
        return self._order_category_id

    @order_category_id.setter
    def order_category_id(self, order_category_id):
        """Sets the order_category_id of this Image.

        image category id  # noqa: E501

        :param order_category_id: The order_category_id of this Image.  # noqa: E501
        :type: str
        """

        self._order_category_id = order_category_id

    @property
    def label_id(self):
        """Gets the label_id of this Image.  # noqa: E501

        image category id  # noqa: E501

        :return: The label_id of this Image.  # noqa: E501
        :rtype: str
        """
        return self._label_id

    @label_id.setter
    def label_id(self, label_id):
        """Sets the label_id of this Image.

        image category id  # noqa: E501

        :param label_id: The label_id of this Image.  # noqa: E501
        :type: str
        """

        self._label_id = label_id

    @property
    def truth_id(self):
        """Gets the truth_id of this Image.  # noqa: E501

        image category id  # noqa: E501

        :return: The truth_id of this Image.  # noqa: E501
        :rtype: str
        """
        return self._truth_id

    @truth_id.setter
    def truth_id(self, truth_id):
        """Sets the truth_id of this Image.

        image category id  # noqa: E501

        :param truth_id: The truth_id of this Image.  # noqa: E501
        :type: str
        """

        self._truth_id = truth_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Image, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Image):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
