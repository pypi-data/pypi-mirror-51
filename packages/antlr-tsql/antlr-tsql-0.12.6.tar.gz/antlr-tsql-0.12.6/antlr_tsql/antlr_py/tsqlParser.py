# Generated from antlr_tsql/tsql.g4 by ANTLR 4.7.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u01d7")
        buf.write("\u0d94\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\3\2\7\2\u0172\n\2\f\2\16\2\u0175\13\2\3\2\3\2\3\3\3\3")
        buf.write("\5\3\u017b\n\3\3\4\3\4\5\4\u017f\n\4\6\4\u0181\n\4\r\4")
        buf.write("\16\4\u0182\3\5\3\5\3\5\3\5\5\5\u0189\n\5\3\6\3\6\3\6")
        buf.write("\3\6\5\6\u018f\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u01a1\n\7\3\b\3\b\5\b")
        buf.write("\u01a5\n\b\3\b\5\b\u01a8\n\b\3\b\3\b\5\b\u01ac\n\b\3\b")
        buf.write("\3\b\5\b\u01b0\n\b\3\b\3\b\5\b\u01b4\n\b\3\b\3\b\3\b\5")
        buf.write("\b\u01b9\n\b\3\b\3\b\3\b\5\b\u01be\n\b\3\b\3\b\3\b\3\b")
        buf.write("\3\b\5\b\u01c5\n\b\3\b\5\b\u01c8\n\b\3\b\3\b\5\b\u01cc")
        buf.write("\n\b\3\b\5\b\u01cf\n\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u01d7")
        buf.write("\n\b\3\b\5\b\u01da\n\b\3\b\3\b\3\b\5\b\u01df\n\b\3\b\5")
        buf.write("\b\u01e2\n\b\3\b\3\b\3\b\5\b\u01e7\n\b\3\b\3\b\3\b\5\b")
        buf.write("\u01ec\n\b\3\b\5\b\u01ef\n\b\3\b\3\b\3\b\5\b\u01f4\n\b")
        buf.write("\3\b\3\b\3\b\3\b\5\b\u01fa\n\b\3\b\3\b\3\b\3\b\3\b\5\b")
        buf.write("\u0201\n\b\3\b\3\b\5\b\u0205\n\b\5\b\u0207\n\b\3\b\3\b")
        buf.write("\3\b\5\b\u020c\n\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b")
        buf.write("\7\b\u0217\n\b\f\b\16\b\u021a\13\b\3\b\3\b\5\b\u021e\n")
        buf.write("\b\5\b\u0220\n\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u0229")
        buf.write("\n\t\3\n\5\n\u022c\n\n\3\n\3\n\5\n\u0230\n\n\3\n\5\n\u0233")
        buf.write("\n\n\3\n\3\n\5\n\u0237\n\n\3\n\5\n\u023a\n\n\3\n\3\n\5")
        buf.write("\n\u023e\n\n\3\n\5\n\u0241\n\n\3\n\5\n\u0244\n\n\3\n\5")
        buf.write("\n\u0247\n\n\3\n\5\n\u024a\n\n\3\13\3\13\5\13\u024e\n")
        buf.write("\13\3\13\3\13\3\13\5\13\u0253\n\13\3\f\5\f\u0256\n\f\3")
        buf.write("\f\3\f\5\f\u025a\n\f\3\f\5\f\u025d\n\f\3\f\3\f\5\f\u0261")
        buf.write("\n\f\3\f\5\f\u0264\n\f\3\f\3\f\3\f\3\f\5\f\u026a\n\f\3")
        buf.write("\f\5\f\u026d\n\f\3\f\3\f\5\f\u0271\n\f\3\f\5\f\u0274\n")
        buf.write("\f\3\f\5\f\u0277\n\f\3\r\3\r\3\r\3\r\3\r\5\r\u027e\n\r")
        buf.write("\3\16\5\16\u0281\n\16\3\16\3\16\5\16\u0285\n\16\3\16\5")
        buf.write("\16\u0288\n\16\3\16\5\16\u028b\n\16\3\16\5\16\u028e\n")
        buf.write("\16\3\17\5\17\u0291\n\17\3\17\3\17\5\17\u0295\n\17\3\17")
        buf.write("\3\17\5\17\u0299\n\17\3\17\5\17\u029c\n\17\3\17\3\17\3")
        buf.write("\17\3\17\7\17\u02a2\n\17\f\17\16\17\u02a5\13\17\3\17\5")
        buf.write("\17\u02a8\n\17\3\17\3\17\5\17\u02ac\n\17\3\17\5\17\u02af")
        buf.write("\n\17\3\17\5\17\u02b2\n\17\3\17\5\17\u02b5\n\17\3\17\5")
        buf.write("\17\u02b8\n\17\3\20\3\20\3\20\3\20\3\20\5\20\u02bf\n\20")
        buf.write("\3\20\3\20\5\20\u02c3\n\20\5\20\u02c5\n\20\3\21\3\21\3")
        buf.write("\21\3\21\7\21\u02cb\n\21\f\21\16\21\u02ce\13\21\3\21\3")
        buf.write("\21\3\21\5\21\u02d3\n\21\3\21\3\21\3\21\3\21\5\21\u02d9")
        buf.write("\n\21\5\21\u02db\n\21\3\22\3\22\5\22\u02df\n\22\3\22\5")
        buf.write("\22\u02e2\n\22\3\22\5\22\u02e5\n\22\3\23\3\23\3\23\5\23")
        buf.write("\u02ea\n\23\3\23\3\23\3\23\5\23\u02ef\n\23\3\23\5\23\u02f2")
        buf.write("\n\23\3\24\3\24\3\24\3\24\3\24\3\24\5\24\u02fa\n\24\3")
        buf.write("\24\3\24\5\24\u02fe\n\24\3\24\3\24\3\24\7\24\u0303\n\24")
        buf.write("\f\24\16\24\u0306\13\24\5\24\u0308\n\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\7\24\u030f\n\24\f\24\16\24\u0312\13\24\5\24")
        buf.write("\u0314\n\24\3\24\3\24\5\24\u0318\n\24\3\24\3\24\3\24\3")
        buf.write("\24\7\24\u031e\n\24\f\24\16\24\u0321\13\24\5\24\u0323")
        buf.write("\n\24\3\25\3\25\5\25\u0327\n\25\3\25\5\25\u032a\n\25\3")
        buf.write("\25\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u0333\n\25\3\25")
        buf.write("\3\25\5\25\u0337\n\25\3\25\3\25\5\25\u033b\n\25\3\25\5")
        buf.write("\25\u033e\n\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u034e\n\26\3\26\3")
        buf.write("\26\5\26\u0352\n\26\3\26\3\26\3\26\3\26\5\26\u0358\n\26")
        buf.write("\5\26\u035a\n\26\3\26\5\26\u035d\n\26\3\27\3\27\3\27\3")
        buf.write("\27\3\27\3\27\5\27\u0365\n\27\3\27\3\27\3\27\3\27\5\27")
        buf.write("\u036b\n\27\3\27\3\27\3\27\5\27\u0370\n\27\3\27\5\27\u0373")
        buf.write("\n\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u037c\n")
        buf.write("\30\3\30\3\30\3\30\3\30\7\30\u0382\n\30\f\30\16\30\u0385")
        buf.write("\13\30\5\30\u0387\n\30\3\30\3\30\3\30\3\30\3\30\5\30\u038e")
        buf.write("\n\30\3\30\5\30\u0391\n\30\3\31\3\31\3\32\3\32\3\32\3")
        buf.write("\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u03b6\n")
        buf.write("\32\3\32\5\32\u03b9\n\32\3\33\3\33\3\33\3\33\5\33\u03bf")
        buf.write("\n\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\5\33\u03cb\n\33\5\33\u03cd\n\33\3\33\5\33\u03d0\n\33")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\5\34\u03e8\n\34\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3")
        buf.write("\35\3\35\5\35\u03f3\n\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\5\35\u03fb\n\35\3\36\3\36\3\36\3\36\3\36\3\36\3\36\7")
        buf.write("\36\u0404\n\36\f\36\16\36\u0407\13\36\7\36\u0409\n\36")
        buf.write("\f\36\16\36\u040c\13\36\5\36\u040e\n\36\3\37\3\37\3\37")
        buf.write("\3\37\3\37\3\37\5\37\u0416\n\37\3 \3 \3 \3 \3!\3!\3!\3")
        buf.write("!\5!\u0420\n!\3\"\3\"\3\"\3#\3#\3#\3$\3$\3%\3%\3&\3&\3")
        buf.write("\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3(\3(\5(\u043a\n(\3(")
        buf.write("\3(\3(\3(\5(\u0440\n(\3(\3(\3(\3(\3(\3(\3(\3(\3(\5(\u044b")
        buf.write("\n(\3)\3)\3)\3*\3*\3*\3+\3+\3+\3+\3+\3+\5+\u0459\n+\3")
        buf.write(",\3,\3,\3,\3,\3,\5,\u0461\n,\3-\3-\3-\3-\3-\5-\u0468\n")
        buf.write("-\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\5.\u047f\n.\3/\3/\3/\3/\3/\3\60\3\60\3\60\3")
        buf.write("\60\3\60\3\60\5\60\u048c\n\60\3\61\3\61\3\61\3\61\5\61")
        buf.write("\u0492\n\61\3\61\3\61\3\61\5\61\u0497\n\61\3\61\5\61\u049a")
        buf.write("\n\61\3\62\3\62\3\62\3\62\5\62\u04a0\n\62\3\62\3\62\5")
        buf.write("\62\u04a4\n\62\3\63\3\63\3\63\3\63\3\63\5\63\u04ab\n\63")
        buf.write("\3\63\3\63\3\63\3\64\3\64\3\64\3\64\5\64\u04b4\n\64\3")
        buf.write("\64\3\64\5\64\u04b8\n\64\3\65\3\65\3\65\3\65\5\65\u04be")
        buf.write("\n\65\3\65\3\65\3\65\7\65\u04c3\n\65\f\65\16\65\u04c6")
        buf.write("\13\65\3\65\5\65\u04c9\n\65\3\66\3\66\3\66\3\66\3\66\3")
        buf.write("\66\3\66\3\67\3\67\3\67\3\67\5\67\u04d6\n\67\3\67\3\67")
        buf.write("\38\38\58\u04dc\n8\39\39\39\39\39\39\39\3:\3:\3:\3:\3")
        buf.write(":\3:\3:\3:\5:\u04ed\n:\3:\3:\5:\u04f1\n:\3:\3:\3:\3;\3")
        buf.write(";\3;\5;\u04f9\n;\3;\3;\5;\u04fd\n;\3;\3;\3;\3;\7;\u0503")
        buf.write("\n;\f;\16;\u0506\13;\3;\5;\u0509\n;\5;\u050b\n;\3<\3<")
        buf.write("\5<\u050f\n<\3<\3<\5<\u0513\n<\3<\3<\5<\u0517\n<\3<\3")
        buf.write("<\5<\u051b\n<\3<\3<\3<\3<\5<\u0521\n<\3<\3<\5<\u0525\n")
        buf.write("<\5<\u0527\n<\3=\3=\3=\5=\u052c\n=\3=\3=\3=\3=\7=\u0532")
        buf.write("\n=\f=\16=\u0535\13=\5=\u0537\n=\3=\5=\u053a\n=\3=\3=")
        buf.write("\3=\3=\3=\7=\u0541\n=\f=\16=\u0544\13=\3=\3=\5=\u0548")
        buf.write("\n=\3=\3=\3=\5=\u054d\n=\3=\5=\u0550\n=\5=\u0552\n=\3")
        buf.write(">\3>\5>\u0556\n>\3>\3>\5>\u055a\n>\3>\5>\u055d\n>\3>\3")
        buf.write(">\5>\u0561\n>\3?\3?\3@\3@\5@\u0567\n@\3@\3@\3@\5@\u056c")
        buf.write("\n@\3@\3@\3@\3@\3@\5@\u0573\n@\5@\u0575\n@\3@\3@\5@\u0579")
        buf.write("\n@\3@\3@\3@\3@\3@\5@\u0580\n@\3@\3@\5@\u0584\n@\3@\5")
        buf.write("@\u0587\n@\3@\3@\3@\3@\3@\3@\3@\5@\u0590\n@\3@\5@\u0593")
        buf.write("\n@\5@\u0595\n@\3A\3A\3A\3A\3A\3A\3A\5A\u059e\nA\3A\3")
        buf.write("A\3A\3A\3A\3A\3A\3A\3A\5A\u05a9\nA\3A\3A\5A\u05ad\nA\5")
        buf.write("A\u05af\nA\5A\u05b1\nA\3B\3B\3B\3B\5B\u05b7\nB\3B\3B\3")
        buf.write("B\5B\u05bc\nB\3B\3B\3B\3B\3B\5B\u05c3\nB\3B\3B\3B\3B\3")
        buf.write("B\3B\3B\3B\3B\3B\3B\5B\u05d0\nB\5B\u05d2\nB\5B\u05d4\n")
        buf.write("B\3B\5B\u05d7\nB\3B\5B\u05da\nB\3C\3C\3C\3C\3C\5C\u05e1")
        buf.write("\nC\3C\5C\u05e4\nC\3C\3C\3C\3C\5C\u05ea\nC\3C\3C\3C\5")
        buf.write("C\u05ef\nC\5C\u05f1\nC\3C\5C\u05f4\nC\3C\3C\3C\3C\5C\u05fa")
        buf.write("\nC\3C\3C\3C\3C\3C\3C\5C\u0602\nC\5C\u0604\nC\3C\5C\u0607")
        buf.write("\nC\3C\3C\5C\u060b\nC\3C\5C\u060e\nC\3C\3C\3C\3C\5C\u0614")
        buf.write("\nC\3C\5C\u0617\nC\3C\3C\5C\u061b\nC\3C\5C\u061e\nC\3")
        buf.write("C\3C\3C\3C\5C\u0624\nC\3C\5C\u0627\nC\5C\u0629\nC\3D\3")
        buf.write("D\5D\u062d\nD\3E\3E\3E\5E\u0632\nE\3F\3F\3F\3F\3G\3G\5")
        buf.write("G\u063a\nG\3G\3G\3G\5G\u063f\nG\3H\3H\3H\3H\3H\3I\3I\5")
        buf.write("I\u0648\nI\3I\7I\u064b\nI\fI\16I\u064e\13I\3J\3J\5J\u0652")
        buf.write("\nJ\3K\3K\3K\3K\5K\u0658\nK\3K\3K\5K\u065c\nK\3K\5K\u065f")
        buf.write("\nK\3K\3K\5K\u0663\nK\3K\3K\3K\3K\5K\u0669\nK\3K\3K\3")
        buf.write("K\3K\3K\3K\5K\u0671\nK\3K\3K\3K\5K\u0676\nK\5K\u0678\n")
        buf.write("K\3K\5K\u067b\nK\3K\7K\u067e\nK\fK\16K\u0681\13K\3L\3")
        buf.write("L\5L\u0685\nL\3L\5L\u0688\nL\3L\3L\3L\5L\u068d\nL\3L\5")
        buf.write("L\u0690\nL\3L\5L\u0693\nL\3L\3L\3L\3L\5L\u0699\nL\3L\3")
        buf.write("L\3L\3L\5L\u069f\nL\3M\3M\5M\u06a3\nM\3M\3M\3M\5M\u06a8")
        buf.write("\nM\3M\5M\u06ab\nM\3M\3M\3M\5M\u06b0\nM\3M\3M\5M\u06b4")
        buf.write("\nM\3M\3M\5M\u06b8\nM\3M\3M\3M\3M\5M\u06be\nM\3M\3M\3")
        buf.write("M\3M\5M\u06c4\nM\3N\3N\3N\3N\3N\7N\u06cb\nN\fN\16N\u06ce")
        buf.write("\13N\3N\3N\3O\3O\3O\3O\3O\5O\u06d7\nO\3P\3P\3P\3P\3P\3")
        buf.write("P\3P\3P\5P\u06e1\nP\5P\u06e3\nP\5P\u06e5\nP\3P\5P\u06e8")
        buf.write("\nP\3P\5P\u06eb\nP\3P\3P\3P\3P\3P\3P\3P\3P\3P\5P\u06f6")
        buf.write("\nP\5P\u06f8\nP\5P\u06fa\nP\3P\5P\u06fd\nP\3Q\5Q\u0700")
        buf.write("\nQ\3Q\5Q\u0703\nQ\3Q\5Q\u0706\nQ\3Q\5Q\u0709\nQ\3Q\5")
        buf.write("Q\u070c\nQ\3Q\3Q\3Q\3R\3R\3R\3R\3R\3R\3R\5R\u0718\nR\3")
        buf.write("R\5R\u071b\nR\3R\5R\u071e\nR\3R\3R\3R\3R\3R\7R\u0725\n")
        buf.write("R\fR\16R\u0728\13R\5R\u072a\nR\3R\5R\u072d\nR\3S\3S\3")
        buf.write("S\3S\3S\5S\u0734\nS\3S\5S\u0737\nS\3S\3S\3S\3S\3S\3S\3")
        buf.write("S\3S\3S\3S\3S\3S\5S\u0745\nS\3S\5S\u0748\nS\3S\3S\3S\3")
        buf.write("S\3S\5S\u074f\nS\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3")
        buf.write("S\5S\u075e\nS\3T\3T\5T\u0762\nT\3U\3U\3U\3U\3U\3U\3U\3")
        buf.write("U\3U\6U\u076d\nU\rU\16U\u076e\3U\3U\5U\u0773\nU\3U\3U")
        buf.write("\3U\3U\6U\u0779\nU\rU\16U\u077a\3U\3U\5U\u077f\nU\3U\3")
        buf.write("U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\5U\u0793")
        buf.write("\nU\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3")
        buf.write("U\3U\7U\u07a7\nU\fU\16U\u07aa\13U\3V\3V\3V\3V\3V\3V\3")
        buf.write("V\3V\5V\u07b4\nV\3W\3W\3X\3X\3X\5X\u07bb\nX\3X\3X\3X\7")
        buf.write("X\u07c0\nX\fX\16X\u07c3\13X\3Y\3Y\3Y\3Y\3Y\5Y\u07ca\n")
        buf.write("Y\3Y\3Y\3Y\3Y\3Y\3Z\3Z\5Z\u07d3\nZ\3Z\3Z\5Z\u07d7\nZ\3")
        buf.write("Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u07e1\nZ\3[\3[\3[\7[\u07e6\n")
        buf.write("[\f[\16[\u07e9\13[\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\")
        buf.write("\7\\\u07f4\n\\\f\\\16\\\u07f7\13\\\3]\3]\3]\3]\3]\3]\3")
        buf.write("]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\5]\u080d\n]\3")
        buf.write("]\3]\3]\3]\3]\3]\3]\5]\u0816\n]\3]\3]\3]\3]\5]\u081c\n")
        buf.write("]\3]\3]\3]\3]\5]\u0822\n]\3]\3]\3]\3]\5]\u0828\n]\3]\3")
        buf.write("]\3]\3]\3]\3]\3]\3]\3]\5]\u0833\n]\3^\3^\3^\3^\3^\3^\5")
        buf.write("^\u083b\n^\3^\3^\3^\3^\7^\u0841\n^\f^\16^\u0844\13^\3")
        buf.write("_\3_\5_\u0848\n_\3_\3_\5_\u084c\n_\3`\3`\5`\u0850\n`\3")
        buf.write("`\5`\u0853\n`\3`\3`\3`\5`\u0858\n`\3`\3`\5`\u085c\n`\3")
        buf.write("`\3`\5`\u0860\n`\3`\3`\3`\3`\3`\7`\u0867\n`\f`\16`\u086a")
        buf.write("\13`\5`\u086c\n`\3`\5`\u086f\n`\3`\3`\5`\u0873\n`\3`\3")
        buf.write("`\5`\u0877\n`\3a\3a\3a\3a\3a\3a\3a\3a\7a\u0881\na\fa\16")
        buf.write("a\u0884\13a\3a\3a\3b\3b\3b\3b\3b\3b\3b\7b\u088f\nb\fb")
        buf.write("\16b\u0892\13b\3b\3b\5b\u0896\nb\3c\3c\3c\5c\u089b\nc")
        buf.write("\3c\3c\5c\u089f\nc\3d\3d\3d\3d\3d\5d\u08a6\nd\3e\3e\3")
        buf.write("e\3e\3e\7e\u08ad\ne\fe\16e\u08b0\13e\3e\3e\3e\3e\5e\u08b6")
        buf.write("\ne\5e\u08b8\ne\3f\3f\3f\3f\3f\3f\3g\3g\3g\3g\3g\3g\5")
        buf.write("g\u08c6\ng\3g\3g\3g\3g\3g\3g\5g\u08ce\ng\3g\5g\u08d1\n")
        buf.write("g\5g\u08d3\ng\3h\3h\3h\3h\3h\5h\u08da\nh\3i\3i\5i\u08de")
        buf.write("\ni\3j\3j\3k\3k\3k\3k\3k\7k\u08e7\nk\fk\16k\u08ea\13k")
        buf.write("\3k\3k\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3")
        buf.write("l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\7l\u0909\nl\fl\16l")
        buf.write("\u090c\13l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\5l\u091b")
        buf.write("\nl\3m\3m\3m\3m\5m\u0921\nm\3n\3n\3n\7n\u0926\nn\fn\16")
        buf.write("n\u0929\13n\3o\3o\3o\5o\u092e\no\3o\3o\3o\5o\u0933\no")
        buf.write("\3o\3o\3o\3o\3o\3o\5o\u093b\no\3o\5o\u093e\no\5o\u0940")
        buf.write("\no\3p\3p\3p\7p\u0945\np\fp\16p\u0948\13p\3q\3q\3q\3q")
        buf.write("\3q\3q\5q\u0950\nq\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3")
        buf.write("q\3q\3q\3q\7q\u0961\nq\fq\16q\u0964\13q\3r\3r\5r\u0968")
        buf.write("\nr\3r\5r\u096b\nr\3r\5r\u096e\nr\3r\3r\5r\u0972\nr\3")
        buf.write("r\3r\3r\5r\u0977\nr\5r\u0979\nr\3r\3r\5r\u097d\nr\3r\3")
        buf.write("r\5r\u0981\nr\3r\3r\5r\u0985\nr\3r\3r\3r\3r\3r\5r\u098c")
        buf.write("\nr\5r\u098e\nr\5r\u0990\nr\3s\3s\5s\u0994\ns\3s\3s\3")
        buf.write("s\5s\u0999\ns\3s\3s\3s\5s\u099e\ns\3t\3t\3u\3u\3v\5v\u09a5")
        buf.write("\nv\3v\3v\3w\3w\3w\3w\3w\3w\3w\3w\3x\5x\u09b2\nx\3x\3")
        buf.write("x\5x\u09b6\nx\5x\u09b8\nx\3x\5x\u09bb\nx\3y\3y\5y\u09bf")
        buf.write("\ny\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\7")
        buf.write("z\u09d1\nz\fz\16z\u09d4\13z\3z\5z\u09d7\nz\3z\3z\5z\u09db")
        buf.write("\nz\3{\3{\3{\3{\3|\3|\3|\3|\3|\5|\u09e6\n|\3}\3}\3}\3")
        buf.write("}\3}\5}\u09ed\n}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3")
        buf.write("}\3}\3}\3}\3}\3}\3}\3}\3}\5}\u0a04\n}\3}\3}\3}\3}\3}\3")
        buf.write("}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3")
        buf.write("}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3")
        buf.write("}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3")
        buf.write("}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\5}\u0a4f\n}\3")
        buf.write("}\3}\5}\u0a53\n}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3")
        buf.write("}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\5}\u0a6f\n}\3")
        buf.write("}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3")
        buf.write("}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\5}\u0a91\n}\3")
        buf.write("}\3}\5}\u0a95\n}\3~\3~\3~\3~\3~\3\177\3\177\3\177\3\177")
        buf.write("\3\177\3\u0080\5\u0080\u0aa2\n\u0080\3\u0080\3\u0080\3")
        buf.write("\u0080\3\u0080\7\u0080\u0aa8\n\u0080\f\u0080\16\u0080")
        buf.write("\u0aab\13\u0080\3\u0080\3\u0080\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\7\u0081\u0ab4\n\u0081\f\u0081\16\u0081")
        buf.write("\u0ab7\13\u0081\3\u0081\3\u0081\3\u0082\5\u0082\u0abc")
        buf.write("\n\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\7\u0082")
        buf.write("\u0ac3\n\u0082\f\u0082\16\u0082\u0ac6\13\u0082\3\u0082")
        buf.write("\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082")
        buf.write("\3\u0082\3\u0082\3\u0082\3\u0082\7\u0082\u0ad4\n\u0082")
        buf.write("\f\u0082\16\u0082\u0ad7\13\u0082\3\u0082\3\u0082\3\u0082")
        buf.write("\5\u0082\u0adc\n\u0082\3\u0082\3\u0082\3\u0082\3\u0082")
        buf.write("\3\u0082\3\u0082\5\u0082\u0ae4\n\u0082\3\u0083\3\u0083")
        buf.write("\5\u0083\u0ae8\n\u0083\3\u0084\3\u0084\3\u0084\3\u0084")
        buf.write("\7\u0084\u0aee\n\u0084\f\u0084\16\u0084\u0af1\13\u0084")
        buf.write("\3\u0084\3\u0084\3\u0085\3\u0085\5\u0085\u0af7\n\u0085")
        buf.write("\3\u0086\3\u0086\3\u0087\3\u0087\3\u0087\3\u0087\7\u0087")
        buf.write("\u0aff\n\u0087\f\u0087\16\u0087\u0b02\13\u0087\3\u0088")
        buf.write("\3\u0088\3\u0088\7\u0088\u0b07\n\u0088\f\u0088\16\u0088")
        buf.write("\u0b0a\13\u0088\3\u0089\3\u0089\3\u0089\3\u0089\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008b\3\u008b\3\u008b\3\u008b")
        buf.write("\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c")
        buf.write("\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c")
        buf.write("\3\u008c\7\u008c\u0b27\n\u008c\f\u008c\16\u008c\u0b2a")
        buf.write("\13\u008c\3\u008c\3\u008c\3\u008c\5\u008c\u0b2f\n\u008c")
        buf.write("\3\u008d\3\u008d\3\u008d\5\u008d\u0b34\n\u008d\3\u008d")
        buf.write("\3\u008d\3\u008d\5\u008d\u0b39\n\u008d\3\u008d\3\u008d")
        buf.write("\3\u008d\3\u008d\5\u008d\u0b3f\n\u008d\3\u008d\5\u008d")
        buf.write("\u0b42\n\u008d\3\u008d\3\u008d\5\u008d\u0b46\n\u008d\3")
        buf.write("\u008d\3\u008d\3\u008d\5\u008d\u0b4b\n\u008d\3\u008d\3")
        buf.write("\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write("\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\5\u008d\u0b5a")
        buf.write("\n\u008d\3\u008e\3\u008e\3\u008f\3\u008f\3\u008f\3\u008f")
        buf.write("\3\u008f\5\u008f\u0b63\n\u008f\3\u008f\5\u008f\u0b66\n")
        buf.write("\u008f\3\u008f\5\u008f\u0b69\n\u008f\3\u008f\3\u008f\3")
        buf.write("\u0090\3\u0090\3\u0090\3\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\3\u0091\5\u0091\u0b76\n\u0091\3\u0092\3\u0092")
        buf.write("\5\u0092\u0b7a\n\u0092\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0093\3\u0093\5\u0093\u0b82\n\u0093\3\u0094\3\u0094")
        buf.write("\3\u0094\3\u0094\5\u0094\u0b88\n\u0094\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\7\u0095\u0b8e\n\u0095\f\u0095\16\u0095")
        buf.write("\u0b91\13\u0095\3\u0095\3\u0095\3\u0095\3\u0095\5\u0095")
        buf.write("\u0b97\n\u0095\3\u0095\3\u0095\3\u0095\3\u0095\5\u0095")
        buf.write("\u0b9d\n\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\5\u0095\u0bac\n\u0095\3\u0096\3\u0096\3\u0096")
        buf.write("\3\u0096\3\u0096\3\u0096\3\u0096\5\u0096\u0bb5\n\u0096")
        buf.write("\3\u0096\3\u0096\3\u0097\3\u0097\5\u0097\u0bbb\n\u0097")
        buf.write("\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u0bc1\n\u0098")
        buf.write("\3\u0098\5\u0098\u0bc4\n\u0098\3\u0098\3\u0098\5\u0098")
        buf.write("\u0bc8\n\u0098\3\u0098\3\u0098\3\u0098\7\u0098\u0bcd\n")
        buf.write("\u0098\f\u0098\16\u0098\u0bd0\13\u0098\3\u0099\3\u0099")
        buf.write("\3\u0099\3\u0099\3\u0099\5\u0099\u0bd7\n\u0099\3\u0099")
        buf.write("\5\u0099\u0bda\n\u0099\3\u0099\3\u0099\3\u0099\3\u0099")
        buf.write("\5\u0099\u0be0\n\u0099\3\u0099\3\u0099\3\u0099\3\u0099")
        buf.write("\5\u0099\u0be6\n\u0099\5\u0099\u0be8\n\u0099\3\u0099\3")
        buf.write("\u0099\3\u0099\3\u0099\5\u0099\u0bee\n\u0099\3\u0099\5")
        buf.write("\u0099\u0bf1\n\u0099\5\u0099\u0bf3\n\u0099\3\u0099\3\u0099")
        buf.write("\3\u0099\3\u0099\5\u0099\u0bf9\n\u0099\5\u0099\u0bfb\n")
        buf.write("\u0099\3\u0099\3\u0099\3\u009a\3\u009a\3\u009a\3\u009a")
        buf.write("\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\5\u009a")
        buf.write("\u0c09\n\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a")
        buf.write("\5\u009a\u0c10\n\u009a\3\u009a\3\u009a\3\u009b\3\u009b")
        buf.write("\3\u009b\5\u009b\u0c17\n\u009b\3\u009b\3\u009b\3\u009b")
        buf.write("\3\u009b\3\u009b\5\u009b\u0c1e\n\u009b\3\u009b\3\u009b")
        buf.write("\3\u009c\3\u009c\3\u009c\5\u009c\u0c25\n\u009c\3\u009c")
        buf.write("\3\u009c\3\u009d\3\u009d\3\u009d\5\u009d\u0c2c\n\u009d")
        buf.write("\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\5\u009d\u0c33")
        buf.write("\n\u009d\3\u009d\3\u009d\3\u009e\3\u009e\5\u009e\u0c39")
        buf.write("\n\u009e\3\u009f\3\u009f\3\u009f\5\u009f\u0c3e\n\u009f")
        buf.write("\3\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a0\7\u00a0\u0c45")
        buf.write("\n\u00a0\f\u00a0\16\u00a0\u0c48\13\u00a0\3\u00a1\3\u00a1")
        buf.write("\5\u00a1\u0c4c\n\u00a1\3\u00a2\3\u00a2\3\u00a3\3\u00a3")
        buf.write("\3\u00a4\5\u00a4\u0c53\n\u00a4\3\u00a4\3\u00a4\3\u00a5")
        buf.write("\3\u00a5\3\u00a5\3\u00a5\3\u00a5\5\u00a5\u0c5c\n\u00a5")
        buf.write("\3\u00a6\3\u00a6\5\u00a6\u0c60\n\u00a6\3\u00a7\3\u00a7")
        buf.write("\3\u00a7\5\u00a7\u0c65\n\u00a7\3\u00a7\3\u00a7\5\u00a7")
        buf.write("\u0c69\n\u00a7\3\u00a7\3\u00a7\5\u00a7\u0c6d\n\u00a7\3")
        buf.write("\u00a7\3\u00a7\5\u00a7\u0c71\n\u00a7\3\u00a8\3\u00a8\3")
        buf.write("\u00a9\3\u00a9\3\u00a9\5\u00a9\u0c78\n\u00a9\3\u00aa\3")
        buf.write("\u00aa\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab")
        buf.write("\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab")
        buf.write("\3\u00ab\3\u00ab\5\u00ab\u0c8b\n\u00ab\3\u00ac\3\u00ac")
        buf.write("\3\u00ad\3\u00ad\5\u00ad\u0c91\n\u00ad\3\u00ae\3\u00ae")
        buf.write("\3\u00ae\5\u00ae\u0c96\n\u00ae\3\u00ae\5\u00ae\u0c99\n")
        buf.write("\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u0c9f\n")
        buf.write("\u00ae\3\u00ae\5\u00ae\u0ca2\n\u00ae\3\u00ae\3\u00ae\3")
        buf.write("\u00ae\7\u00ae\u0ca7\n\u00ae\f\u00ae\16\u00ae\u0caa\13")
        buf.write("\u00ae\3\u00ae\5\u00ae\u0cad\n\u00ae\5\u00ae\u0caf\n\u00ae")
        buf.write("\3\u00ae\3\u00ae\3\u00ae\3\u00ae\7\u00ae\u0cb5\n\u00ae")
        buf.write("\f\u00ae\16\u00ae\u0cb8\13\u00ae\5\u00ae\u0cba\n\u00ae")
        buf.write("\3\u00ae\3\u00ae\5\u00ae\u0cbe\n\u00ae\3\u00ae\3\u00ae")
        buf.write("\3\u00ae\3\u00af\3\u00af\3\u00af\5\u00af\u0cc6\n\u00af")
        buf.write("\3\u00af\5\u00af\u0cc9\n\u00af\3\u00af\3\u00af\3\u00af")
        buf.write("\3\u00af\3\u00af\3\u00af\7\u00af\u0cd1\n\u00af\f\u00af")
        buf.write("\16\u00af\u0cd4\13\u00af\3\u00af\3\u00af\3\u00af\3\u00af")
        buf.write("\5\u00af\u0cda\n\u00af\3\u00af\3\u00af\3\u00af\5\u00af")
        buf.write("\u0cdf\n\u00af\3\u00af\5\u00af\u0ce2\n\u00af\3\u00b0\3")
        buf.write("\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\7\u00b0\u0cea\n")
        buf.write("\u00b0\f\u00b0\16\u00b0\u0ced\13\u00b0\5\u00b0\u0cef\n")
        buf.write("\u00b0\3\u00b0\5\u00b0\u0cf2\n\u00b0\3\u00b0\3\u00b0\3")
        buf.write("\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u0cfa\n\u00b0\3")
        buf.write("\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1")
        buf.write("\7\u00b1\u0d03\n\u00b1\f\u00b1\16\u00b1\u0d06\13\u00b1")
        buf.write("\5\u00b1\u0d08\n\u00b1\3\u00b1\5\u00b1\u0d0b\n\u00b1\3")
        buf.write("\u00b1\3\u00b1\7\u00b1\u0d0f\n\u00b1\f\u00b1\16\u00b1")
        buf.write("\u0d12\13\u00b1\3\u00b1\3\u00b1\5\u00b1\u0d16\n\u00b1")
        buf.write("\3\u00b1\3\u00b1\5\u00b1\u0d1a\n\u00b1\3\u00b2\3\u00b2")
        buf.write("\3\u00b2\3\u00b2\3\u00b2\3\u00b2\7\u00b2\u0d22\n\u00b2")
        buf.write("\f\u00b2\16\u00b2\u0d25\13\u00b2\5\u00b2\u0d27\n\u00b2")
        buf.write("\3\u00b2\5\u00b2\u0d2a\n\u00b2\3\u00b2\3\u00b2\7\u00b2")
        buf.write("\u0d2e\n\u00b2\f\u00b2\16\u00b2\u0d31\13\u00b2\3\u00b2")
        buf.write("\3\u00b2\3\u00b2\5\u00b2\u0d36\n\u00b2\3\u00b2\3\u00b2")
        buf.write("\3\u00b3\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u0d3e\n\u00b3")
        buf.write("\3\u00b3\5\u00b3\u0d41\n\u00b3\3\u00b3\3\u00b3\5\u00b3")
        buf.write("\u0d45\n\u00b3\3\u00b3\3\u00b3\5\u00b3\u0d49\n\u00b3\3")
        buf.write("\u00b3\5\u00b3\u0d4c\n\u00b3\3\u00b4\3\u00b4\3\u00b4\5")
        buf.write("\u00b4\u0d51\n\u00b4\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3")
        buf.write("\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5")
        buf.write("\3\u00b5\5\u00b5\u0d5f\n\u00b5\3\u00b6\3\u00b6\3\u00b6")
        buf.write("\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6")
        buf.write("\3\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7")
        buf.write("\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b8")
        buf.write("\3\u00b8\5\u00b8\u0d7a\n\u00b8\3\u00b8\3\u00b8\3\u00b8")
        buf.write("\3\u00b8\5\u00b8\u0d80\n\u00b8\3\u00b8\5\u00b8\u0d83\n")
        buf.write("\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8")
        buf.write("\3\u00b8\5\u00b8\u0d8c\n\u00b8\3\u00b8\3\u00b8\3\u00b8")
        buf.write("\3\u00b8\5\u00b8\u0d92\n\u00b8\3\u00b8\2\6\u00a8\u00b6")
        buf.write("\u00ba\u00e0\u00b9\2\4\6\b\n\f\16\20\22\24\26\30\32\34")
        buf.write("\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjln")
        buf.write("prtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e")
        buf.write("\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0")
        buf.write("\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2")
        buf.write("\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4")
        buf.write("\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6")
        buf.write("\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8")
        buf.write("\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa")
        buf.write("\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c")
        buf.write("\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e")
        buf.write("\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130")
        buf.write("\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142")
        buf.write("\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154")
        buf.write("\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166")
        buf.write("\u0168\u016a\u016c\u016e\2A\3\2\u01b2\u01b3\4\2\u01b2")
        buf.write("\u01b2\u01b5\u01b5\4\2\u0101\u0101\u0196\u0196\4\2\u01b2")
        buf.write("\u01b3\u01b5\u01b5\4\2oo\u0082\u0082\4\2\n\n\66\66\4\2")
        buf.write("\u0083\u0083\u0178\u0178\5\2\u010c\u010c\u017b\u017b\u01a7")
        buf.write("\u01a7\5\2\u00ac\u00ac\u00d7\u00d7\u0106\u0106\4\2uuw")
        buf.write("w\5\2\u00fd\u00fd\u0123\u0123\u0143\u0143\4\2\u011c\u011c")
        buf.write("\u0137\u0137\5\2\u010a\u010a\u0153\u0153\u0155\u0155\3")
        buf.write("\2\u016a\u016b\5\2\u0147\u0147\u0172\u0172\u0184\u0184")
        buf.write("\5\2\u00ce\u00ce\u0107\u0107\u0118\u0118\4\2\u0118\u0118")
        buf.write("\u0183\u0183\5\2PP\u00e2\u00e2\u0183\u0183\5\2oo\u00e8")
        buf.write("\u00e8\u0198\u0198\4\2\u0143\u0143\u017e\u017e\4\2\u00c0")
        buf.write("\u00c0\u0139\u0139\3\2\u0159\u015a\4\2\u00ac\u00ac\u00c4")
        buf.write("\u00c4\3\2\u00b2\u00b3\6\2\u00e3\u00e3\u015b\u015b\u017f")
        buf.write("\u017f\u01b5\u01b5\4\2\u0119\u0119\u017c\u017c\6\2\u0109")
        buf.write("\u0109\u0110\u0110\u0131\u0131\u0189\u0189\5\2\u0157\u0157")
        buf.write("\u016a\u016a\u017d\u017d\4\2\u00cc\u00cc\u016f\u016f\4")
        buf.write("\2\u012d\u012d\u0196\u0196\3\2\u01d2\u01d3\3\2\u01cf\u01d1")
        buf.write("\4\2\u01d2\u01d3\u01d5\u01d7\5\2\5\5\b\b\u00a8\u00a8\4")
        buf.write("\2\5\588\4\2\u00f2\u00f2\u0174\u0174\4\2\u0176\u0176\u0178")
        buf.write("\u0178\4\2ll\u0114\u0114\4\2\177\177\u0121\u0121\5\2j")
        buf.write("j\u00ec\u00ec\u0121\u0121\5\2jj\u0121\u0121\u013a\u013a")
        buf.write("\4\2VV\u0177\u0177\4\2((\u0080\u0080\4\2qq\u01b2\u01b3")
        buf.write("\5\2PPee\u0098\u0098\6\2jj\u0121\u0121\u013a\u013a\u0170")
        buf.write("\u0170\4\2\u01b3\u01b3\u01b5\u01b5\5\2\u0104\u0104\u0167")
        buf.write("\u0167\u0179\u0179\5\2\u0115\u0115\u0134\u0134\u0150\u0150")
        buf.write("\4\2\u0132\u0132\u0135\u0135\b\2\u00de\u00de\u013c\u013c")
        buf.write("\u0142\u0142\u018b\u018c\u018f\u018f\u01a4\u01a5\3\2\u00f0")
        buf.write("\u00f1\4\2\u0166\u0166\u0178\u0178\5\2PPuu\u016a\u016a")
        buf.write("\4\2\33\33nn\3\2\u01b7\u01b8\4\2\u01b3\u01b3\u01b7\u01b7")
        buf.write("\66\2KKllss\u00c2\u00c2\u00cc\u00cc\u00d4\u00d4\u00d7")
        buf.write("\u00d7\u00de\u00df\u00e3\u00e5\u00e9\u00ea\u00ec\u00ec")
        buf.write("\u00ee\u00f1\u00f5\u00f5\u0101\u0101\u0103\u0104\u0106")
        buf.write("\u0106\u0109\u0109\u010c\u010c\u010e\u0110\u0114\u011a")
        buf.write("\u011c\u011f\u0121\u0121\u0124\u0124\u0126\u0126\u012a")
        buf.write("\u012d\u012f\u013e\u0142\u0142\u0146\u0146\u0148\u0148")
        buf.write("\u014b\u014c\u014e\u014e\u0150\u0151\u0154\u015b\u015d")
        buf.write("\u015d\u015f\u0160\u0162\u0164\u0166\u0168\u016a\u016a")
        buf.write("\u016c\u016c\u016f\u0171\u0173\u0173\u0175\u017d\u017f")
        buf.write("\u0180\u0183\u0183\u0185\u0185\u0187\u018c\u018f\u018f")
        buf.write("\u0193\u0196\u019b\u019b\u019d\u01a1\u01a3\u01ab\u01b4")
        buf.write("\u01b4\3\2\u01bd\u01c4\7\2\u011b\u011b\u012e\u012e\u0140")
        buf.write("\u0140\u0192\u0192\u01d1\u01d1\3\2\u0089\u008a\4\2\u0159")
        buf.write("\u015a\u0168\u0168\4\2\u013c\u013c\u01b3\u01b3\2\u0fc6")
        buf.write("\2\u0173\3\2\2\2\4\u0178\3\2\2\2\6\u0180\3\2\2\2\b\u0188")
        buf.write("\3\2\2\2\n\u018e\3\2\2\2\f\u01a0\3\2\2\2\16\u021f\3\2")
        buf.write("\2\2\20\u0228\3\2\2\2\22\u022b\3\2\2\2\24\u0252\3\2\2")
        buf.write("\2\26\u0255\3\2\2\2\30\u027d\3\2\2\2\32\u0280\3\2\2\2")
        buf.write("\34\u0290\3\2\2\2\36\u02b9\3\2\2\2 \u02c6\3\2\2\2\"\u02de")
        buf.write("\3\2\2\2$\u02f1\3\2\2\2&\u02f3\3\2\2\2(\u0324\3\2\2\2")
        buf.write("*\u033f\3\2\2\2,\u035e\3\2\2\2.\u0374\3\2\2\2\60\u0392")
        buf.write("\3\2\2\2\62\u0394\3\2\2\2\64\u03ba\3\2\2\2\66\u03e7\3")
        buf.write("\2\2\28\u03fa\3\2\2\2:\u03fc\3\2\2\2<\u0415\3\2\2\2>\u0417")
        buf.write("\3\2\2\2@\u041f\3\2\2\2B\u0421\3\2\2\2D\u0424\3\2\2\2")
        buf.write("F\u0427\3\2\2\2H\u0429\3\2\2\2J\u042b\3\2\2\2L\u042d\3")
        buf.write("\2\2\2N\u044a\3\2\2\2P\u044c\3\2\2\2R\u044f\3\2\2\2T\u0458")
        buf.write("\3\2\2\2V\u0460\3\2\2\2X\u0467\3\2\2\2Z\u047e\3\2\2\2")
        buf.write("\\\u0480\3\2\2\2^\u048b\3\2\2\2`\u048d\3\2\2\2b\u049b")
        buf.write("\3\2\2\2d\u04a5\3\2\2\2f\u04af\3\2\2\2h\u04b9\3\2\2\2")
        buf.write("j\u04ca\3\2\2\2l\u04d1\3\2\2\2n\u04db\3\2\2\2p\u04dd\3")
        buf.write("\2\2\2r\u04e4\3\2\2\2t\u050a\3\2\2\2v\u0526\3\2\2\2x\u0551")
        buf.write("\3\2\2\2z\u0555\3\2\2\2|\u0562\3\2\2\2~\u0594\3\2\2\2")
        buf.write("\u0080\u05b0\3\2\2\2\u0082\u05d9\3\2\2\2\u0084\u0628\3")
        buf.write("\2\2\2\u0086\u062a\3\2\2\2\u0088\u062e\3\2\2\2\u008a\u0633")
        buf.write("\3\2\2\2\u008c\u0637\3\2\2\2\u008e\u0640\3\2\2\2\u0090")
        buf.write("\u0645\3\2\2\2\u0092\u0651\3\2\2\2\u0094\u0653\3\2\2\2")
        buf.write("\u0096\u0684\3\2\2\2\u0098\u06a2\3\2\2\2\u009a\u06c5\3")
        buf.write("\2\2\2\u009c\u06d1\3\2\2\2\u009e\u06d8\3\2\2\2\u00a0\u06ff")
        buf.write("\3\2\2\2\u00a2\u0710\3\2\2\2\u00a4\u075d\3\2\2\2\u00a6")
        buf.write("\u0761\3\2\2\2\u00a8\u0792\3\2\2\2\u00aa\u07b3\3\2\2\2")
        buf.write("\u00ac\u07b5\3\2\2\2\u00ae\u07b7\3\2\2\2\u00b0\u07c4\3")
        buf.write("\2\2\2\u00b2\u07e0\3\2\2\2\u00b4\u07e2\3\2\2\2\u00b6\u07ea")
        buf.write("\3\2\2\2\u00b8\u0832\3\2\2\2\u00ba\u083a\3\2\2\2\u00bc")
        buf.write("\u084b\3\2\2\2\u00be\u084d\3\2\2\2\u00c0\u0878\3\2\2\2")
        buf.write("\u00c2\u0895\3\2\2\2\u00c4\u0897\3\2\2\2\u00c6\u08a0\3")
        buf.write("\2\2\2\u00c8\u08a7\3\2\2\2\u00ca\u08b9\3\2\2\2\u00cc\u08d2")
        buf.write("\3\2\2\2\u00ce\u08d4\3\2\2\2\u00d0\u08db\3\2\2\2\u00d2")
        buf.write("\u08df\3\2\2\2\u00d4\u08e1\3\2\2\2\u00d6\u091a\3\2\2\2")
        buf.write("\u00d8\u091c\3\2\2\2\u00da\u0922\3\2\2\2\u00dc\u093f\3")
        buf.write("\2\2\2\u00de\u0941\3\2\2\2\u00e0\u094f\3\2\2\2\u00e2\u098f")
        buf.write("\3\2\2\2\u00e4\u0991\3\2\2\2\u00e6\u099f\3\2\2\2\u00e8")
        buf.write("\u09a1\3\2\2\2\u00ea\u09a4\3\2\2\2\u00ec\u09a8\3\2\2\2")
        buf.write("\u00ee\u09b7\3\2\2\2\u00f0\u09bc\3\2\2\2\u00f2\u09da\3")
        buf.write("\2\2\2\u00f4\u09dc\3\2\2\2\u00f6\u09e5\3\2\2\2\u00f8\u0a94")
        buf.write("\3\2\2\2\u00fa\u0a96\3\2\2\2\u00fc\u0a9b\3\2\2\2\u00fe")
        buf.write("\u0aa1\3\2\2\2\u0100\u0aae\3\2\2\2\u0102\u0abb\3\2\2\2")
        buf.write("\u0104\u0ae7\3\2\2\2\u0106\u0ae9\3\2\2\2\u0108\u0af6\3")
        buf.write("\2\2\2\u010a\u0af8\3\2\2\2\u010c\u0afa\3\2\2\2\u010e\u0b03")
        buf.write("\3\2\2\2\u0110\u0b0b\3\2\2\2\u0112\u0b0f\3\2\2\2\u0114")
        buf.write("\u0b13\3\2\2\2\u0116\u0b2e\3\2\2\2\u0118\u0b59\3\2\2\2")
        buf.write("\u011a\u0b5b\3\2\2\2\u011c\u0b5d\3\2\2\2\u011e\u0b6c\3")
        buf.write("\2\2\2\u0120\u0b75\3\2\2\2\u0122\u0b79\3\2\2\2\u0124\u0b81")
        buf.write("\3\2\2\2\u0126\u0b87\3\2\2\2\u0128\u0bab\3\2\2\2\u012a")
        buf.write("\u0bad\3\2\2\2\u012c\u0bba\3\2\2\2\u012e\u0bbc\3\2\2\2")
        buf.write("\u0130\u0bd1\3\2\2\2\u0132\u0c0f\3\2\2\2\u0134\u0c1d\3")
        buf.write("\2\2\2\u0136\u0c24\3\2\2\2\u0138\u0c32\3\2\2\2\u013a\u0c38")
        buf.write("\3\2\2\2\u013c\u0c3d\3\2\2\2\u013e\u0c41\3\2\2\2\u0140")
        buf.write("\u0c4b\3\2\2\2\u0142\u0c4d\3\2\2\2\u0144\u0c4f\3\2\2\2")
        buf.write("\u0146\u0c52\3\2\2\2\u0148\u0c5b\3\2\2\2\u014a\u0c5f\3")
        buf.write("\2\2\2\u014c\u0c70\3\2\2\2\u014e\u0c72\3\2\2\2\u0150\u0c77")
        buf.write("\3\2\2\2\u0152\u0c79\3\2\2\2\u0154\u0c8a\3\2\2\2\u0156")
        buf.write("\u0c8c\3\2\2\2\u0158\u0c8e\3\2\2\2\u015a\u0c98\3\2\2\2")
        buf.write("\u015c\u0cc8\3\2\2\2\u015e\u0ce3\3\2\2\2\u0160\u0cfb\3")
        buf.write("\2\2\2\u0162\u0d1b\3\2\2\2\u0164\u0d39\3\2\2\2\u0166\u0d50")
        buf.write("\3\2\2\2\u0168\u0d5e\3\2\2\2\u016a\u0d60\3\2\2\2\u016c")
        buf.write("\u0d6b\3\2\2\2\u016e\u0d91\3\2\2\2\u0170\u0172\5\4\3\2")
        buf.write("\u0171\u0170\3\2\2\2\u0172\u0175\3\2\2\2\u0173\u0171\3")
        buf.write("\2\2\2\u0173\u0174\3\2\2\2\u0174\u0176\3\2\2\2\u0175\u0173")
        buf.write("\3\2\2\2\u0176\u0177\7\2\2\3\u0177\3\3\2\2\2\u0178\u017a")
        buf.write("\5\6\4\2\u0179\u017b\5\u0086D\2\u017a\u0179\3\2\2\2\u017a")
        buf.write("\u017b\3\2\2\2\u017b\5\3\2\2\2\u017c\u017e\5\b\5\2\u017d")
        buf.write("\u017f\7\u01cd\2\2\u017e\u017d\3\2\2\2\u017e\u017f\3\2")
        buf.write("\2\2\u017f\u0181\3\2\2\2\u0180\u017c\3\2\2\2\u0181\u0182")
        buf.write("\3\2\2\2\u0182\u0180\3\2\2\2\u0182\u0183\3\2\2\2\u0183")
        buf.write("\7\3\2\2\2\u0184\u0189\5\n\6\2\u0185\u0189\5\f\7\2\u0186")
        buf.write("\u0189\5\16\b\2\u0187\u0189\5\20\t\2\u0188\u0184\3\2\2")
        buf.write("\2\u0188\u0185\3\2\2\2\u0188\u0186\3\2\2\2\u0188\u0187")
        buf.write("\3\2\2\2\u0189\t\3\2\2\2\u018a\u018f\5\22\n\2\u018b\u018f")
        buf.write("\5\26\f\2\u018c\u018f\5\32\16\2\u018d\u018f\5\34\17\2")
        buf.write("\u018e\u018a\3\2\2\2\u018e\u018b\3\2\2\2\u018e\u018c\3")
        buf.write("\2\2\2\u018e\u018d\3\2\2\2\u018f\13\3\2\2\2\u0190\u01a1")
        buf.write("\5&\24\2\u0191\u01a1\5(\25\2\u0192\u01a1\5\u015c\u00af")
        buf.write("\2\u0193\u01a1\5\u015a\u00ae\2\u0194\u01a1\5*\26\2\u0195")
        buf.write("\u01a1\5,\27\2\u0196\u01a1\5j\66\2\u0197\u01a1\5.\30\2")
        buf.write("\u0198\u01a1\5\62\32\2\u0199\u01a1\5\64\33\2\u019a\u01a1")
        buf.write("\5`\61\2\u019b\u01a1\5b\62\2\u019c\u01a1\5d\63\2\u019d")
        buf.write("\u01a1\5f\64\2\u019e\u01a1\5l\67\2\u019f\u01a1\5h\65\2")
        buf.write("\u01a0\u0190\3\2\2\2\u01a0\u0191\3\2\2\2\u01a0\u0192\3")
        buf.write("\2\2\2\u01a0\u0193\3\2\2\2\u01a0\u0194\3\2\2\2\u01a0\u0195")
        buf.write("\3\2\2\2\u01a0\u0196\3\2\2\2\u01a0\u0197\3\2\2\2\u01a0")
        buf.write("\u0198\3\2\2\2\u01a0\u0199\3\2\2\2\u01a0\u019a\3\2\2\2")
        buf.write("\u01a0\u019b\3\2\2\2\u01a0\u019c\3\2\2\2\u01a0\u019d\3")
        buf.write("\2\2\2\u01a0\u019e\3\2\2\2\u01a0\u019f\3\2\2\2\u01a1\r")
        buf.write("\3\2\2\2\u01a2\u01a4\7\r\2\2\u01a3\u01a5\7\u01cd\2\2\u01a4")
        buf.write("\u01a3\3\2\2\2\u01a4\u01a5\3\2\2\2\u01a5\u01a7\3\2\2\2")
        buf.write("\u01a6\u01a8\5\6\4\2\u01a7\u01a6\3\2\2\2\u01a7\u01a8\3")
        buf.write("\2\2\2\u01a8\u01a9\3\2\2\2\u01a9\u01ab\7>\2\2\u01aa\u01ac")
        buf.write("\7\u01cd\2\2\u01ab\u01aa\3\2\2\2\u01ab\u01ac\3\2\2\2\u01ac")
        buf.write("\u0220\3\2\2\2\u01ad\u01af\7\17\2\2\u01ae\u01b0\7\u01cd")
        buf.write("\2\2\u01af\u01ae\3\2\2\2\u01af\u01b0\3\2\2\2\u01b0\u0220")
        buf.write("\3\2\2\2\u01b1\u01b3\7%\2\2\u01b2\u01b4\7\u01cd\2\2\u01b3")
        buf.write("\u01b2\3\2\2\2\u01b3\u01b4\3\2\2\2\u01b4\u0220\3\2\2\2")
        buf.write("\u01b5\u01b6\7R\2\2\u01b6\u01b8\5\u0150\u00a9\2\u01b7")
        buf.write("\u01b9\7\u01cd\2\2\u01b8\u01b7\3\2\2\2\u01b8\u01b9\3\2")
        buf.write("\2\2\u01b9\u0220\3\2\2\2\u01ba\u01bb\5\u0150\u00a9\2\u01bb")
        buf.write("\u01bd\7\u01ce\2\2\u01bc\u01be\7\u01cd\2\2\u01bd\u01bc")
        buf.write("\3\2\2\2\u01bd\u01be\3\2\2\2\u01be\u0220\3\2\2\2\u01bf")
        buf.write("\u01c0\7Z\2\2\u01c0\u01c1\5\u00b6\\\2\u01c1\u01c4\5\b")
        buf.write("\5\2\u01c2\u01c3\7=\2\2\u01c3\u01c5\5\b\5\2\u01c4\u01c2")
        buf.write("\3\2\2\2\u01c4\u01c5\3\2\2\2\u01c5\u01c7\3\2\2\2\u01c6")
        buf.write("\u01c8\7\u01cd\2\2\u01c7\u01c6\3\2\2\2\u01c7\u01c8\3\2")
        buf.write("\2\2\u01c8\u0220\3\2\2\2\u01c9\u01cb\7\u0094\2\2\u01ca")
        buf.write("\u01cc\5\u00a8U\2\u01cb\u01ca\3\2\2\2\u01cb\u01cc\3\2")
        buf.write("\2\2\u01cc\u01ce\3\2\2\2\u01cd\u01cf\7\u01cd\2\2\u01ce")
        buf.write("\u01cd\3\2\2\2\u01ce\u01cf\3\2\2\2\u01cf\u0220\3\2\2\2")
        buf.write("\u01d0\u01d6\7\u0194\2\2\u01d1\u01d2\t\2\2\2\u01d2\u01d3")
        buf.write("\7\u01cc\2\2\u01d3\u01d4\t\3\2\2\u01d4\u01d5\7\u01cc\2")
        buf.write("\2\u01d5\u01d7\t\2\2\2\u01d6\u01d1\3\2\2\2\u01d6\u01d7")
        buf.write("\3\2\2\2\u01d7\u01d9\3\2\2\2\u01d8\u01da\7\u01cd\2\2\u01d9")
        buf.write("\u01d8\3\2\2\2\u01d9\u01da\3\2\2\2\u01da\u0220\3\2\2\2")
        buf.write("\u01db\u01dc\7\r\2\2\u01dc\u01de\7\u019b\2\2\u01dd\u01df")
        buf.write("\7\u01cd\2\2\u01de\u01dd\3\2\2\2\u01de\u01df\3\2\2\2\u01df")
        buf.write("\u01e1\3\2\2\2\u01e0\u01e2\5\6\4\2\u01e1\u01e0\3\2\2\2")
        buf.write("\u01e1\u01e2\3\2\2\2\u01e2\u01e3\3\2\2\2\u01e3\u01e4\7")
        buf.write(">\2\2\u01e4\u01e6\7\u019b\2\2\u01e5\u01e7\7\u01cd\2\2")
        buf.write("\u01e6\u01e5\3\2\2\2\u01e6\u01e7\3\2\2\2\u01e7\u01e8\3")
        buf.write("\2\2\2\u01e8\u01e9\7\r\2\2\u01e9\u01eb\7\u00e5\2\2\u01ea")
        buf.write("\u01ec\7\u01cd\2\2\u01eb\u01ea\3\2\2\2\u01eb\u01ec\3\2")
        buf.write("\2\2\u01ec\u01ee\3\2\2\2\u01ed\u01ef\5\6\4\2\u01ee\u01ed")
        buf.write("\3\2\2\2\u01ee\u01ef\3\2\2\2\u01ef\u01f0\3\2\2\2\u01f0")
        buf.write("\u01f1\7>\2\2\u01f1\u01f3\7\u00e5\2\2\u01f2\u01f4\7\u01cd")
        buf.write("\2\2\u01f3\u01f2\3\2\2\2\u01f3\u01f4\3\2\2\2\u01f4\u0220")
        buf.write("\3\2\2\2\u01f5\u01f6\7\u00c5\2\2\u01f6\u01f7\t\4\2\2\u01f7")
        buf.write("\u01f9\5\u00a8U\2\u01f8\u01fa\7\u01cd\2\2\u01f9\u01f8")
        buf.write("\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa\u0220\3\2\2\2\u01fb")
        buf.write("\u01fc\7\u00c8\2\2\u01fc\u0206\5\u00b6\\\2\u01fd\u0207")
        buf.write("\5\b\5\2\u01fe\u0200\7\17\2\2\u01ff\u0201\7\u01cd\2\2")
        buf.write("\u0200\u01ff\3\2\2\2\u0200\u0201\3\2\2\2\u0201\u0207\3")
        buf.write("\2\2\2\u0202\u0204\7%\2\2\u0203\u0205\7\u01cd\2\2\u0204")
        buf.write("\u0203\3\2\2\2\u0204\u0205\3\2\2\2\u0205\u0207\3\2\2\2")
        buf.write("\u0206\u01fd\3\2\2\2\u0206\u01fe\3\2\2\2\u0206\u0202\3")
        buf.write("\2\2\2\u0207\u0220\3\2\2\2\u0208\u0209\7\u0088\2\2\u0209")
        buf.write("\u020b\5\u00a8U\2\u020a\u020c\7\u01cd\2\2\u020b\u020a")
        buf.write("\3\2\2\2\u020b\u020c\3\2\2\2\u020c\u0220\3\2\2\2\u020d")
        buf.write("\u020e\7\u008c\2\2\u020e\u020f\7\u01ca\2\2\u020f\u0210")
        buf.write("\t\5\2\2\u0210\u0211\7\u01cc\2\2\u0211\u0212\5\u00a6T")
        buf.write("\2\u0212\u0213\7\u01cc\2\2\u0213\u0218\5\u00a6T\2\u0214")
        buf.write("\u0215\7\u01cc\2\2\u0215\u0217\5\u00a6T\2\u0216\u0214")
        buf.write("\3\2\2\2\u0217\u021a\3\2\2\2\u0218\u0216\3\2\2\2\u0218")
        buf.write("\u0219\3\2\2\2\u0219\u021b\3\2\2\2\u021a\u0218\3\2\2\2")
        buf.write("\u021b\u021d\7\u01cb\2\2\u021c\u021e\7\u01cd\2\2\u021d")
        buf.write("\u021c\3\2\2\2\u021d\u021e\3\2\2\2\u021e\u0220\3\2\2\2")
        buf.write("\u021f\u01a2\3\2\2\2\u021f\u01ad\3\2\2\2\u021f\u01b1\3")
        buf.write("\2\2\2\u021f\u01b5\3\2\2\2\u021f\u01ba\3\2\2\2\u021f\u01bf")
        buf.write("\3\2\2\2\u021f\u01c9\3\2\2\2\u021f\u01d0\3\2\2\2\u021f")
        buf.write("\u01db\3\2\2\2\u021f\u01f5\3\2\2\2\u021f\u01fb\3\2\2\2")
        buf.write("\u021f\u0208\3\2\2\2\u021f\u020d\3\2\2\2\u0220\17\3\2")
        buf.write("\2\2\u0221\u0229\5t;\2\u0222\u0229\5v<\2\u0223\u0229\5")
        buf.write("x=\2\u0224\u0229\5~@\2\u0225\u0229\5\u0082B\2\u0226\u0229")
        buf.write("\5\u0084C\2\u0227\u0229\5\u0088E\2\u0228\u0221\3\2\2\2")
        buf.write("\u0228\u0222\3\2\2\2\u0228\u0223\3\2\2\2\u0228\u0224\3")
        buf.write("\2\2\2\u0228\u0225\3\2\2\2\u0228\u0226\3\2\2\2\u0228\u0227")
        buf.write("\3\2\2\2\u0229\21\3\2\2\2\u022a\u022c\5\u00aeX\2\u022b")
        buf.write("\u022a\3\2\2\2\u022b\u022c\3\2\2\2\u022c\u022d\3\2\2\2")
        buf.write("\u022d\u022f\7\64\2\2\u022e\u0230\5\u00c6d\2\u022f\u022e")
        buf.write("\3\2\2\2\u022f\u0230\3\2\2\2\u0230\u0232\3\2\2\2\u0231")
        buf.write("\u0233\7O\2\2\u0232\u0231\3\2\2\2\u0232\u0233\3\2\2\2")
        buf.write("\u0233\u0234\3\2\2\2\u0234\u0236\5\24\13\2\u0235\u0237")
        buf.write("\5\u0100\u0081\2\u0236\u0235\3\2\2\2\u0236\u0237\3\2\2")
        buf.write("\2\u0237\u0239\3\2\2\2\u0238\u023a\5 \21\2\u0239\u0238")
        buf.write("\3\2\2\2\u0239\u023a\3\2\2\2\u023a\u023d\3\2\2\2\u023b")
        buf.write("\u023c\7O\2\2\u023c\u023e\5\u00dep\2\u023d\u023b\3\2\2")
        buf.write("\2\u023d\u023e\3\2\2\2\u023e\u0240\3\2\2\2\u023f\u0241")
        buf.write("\5\36\20\2\u0240\u023f\3\2\2\2\u0240\u0241\3\2\2\2\u0241")
        buf.write("\u0243\3\2\2\2\u0242\u0244\5\u00ccg\2\u0243\u0242\3\2")
        buf.write("\2\2\u0243\u0244\3\2\2\2\u0244\u0246\3\2\2\2\u0245\u0247")
        buf.write("\5\u00d4k\2\u0246\u0245\3\2\2\2\u0246\u0247\3\2\2\2\u0247")
        buf.write("\u0249\3\2\2\2\u0248\u024a\7\u01cd\2\2\u0249\u0248\3\2")
        buf.write("\2\2\u0249\u024a\3\2\2\2\u024a\23\3\2\2\2\u024b\u024d")
        buf.write("\5\u0150\u00a9\2\u024c\u024e\5\u00fe\u0080\2\u024d\u024c")
        buf.write("\3\2\2\2\u024d\u024e\3\2\2\2\u024e\u0253\3\2\2\2\u024f")
        buf.write("\u0253\5\u013a\u009e\2\u0250\u0253\5n8\2\u0251\u0253\7")
        buf.write("\u01b2\2\2\u0252\u024b\3\2\2\2\u0252\u024f\3\2\2\2\u0252")
        buf.write("\u0250\3\2\2\2\u0252\u0251\3\2\2\2\u0253\25\3\2\2\2\u0254")
        buf.write("\u0256\5\u00aeX\2\u0255\u0254\3\2\2\2\u0255\u0256\3\2")
        buf.write("\2\2\u0256\u0257\3\2\2\2\u0257\u0259\7^\2\2\u0258\u025a")
        buf.write("\5\u00c6d\2\u0259\u0258\3\2\2\2\u0259\u025a\3\2\2\2\u025a")
        buf.write("\u025c\3\2\2\2\u025b\u025d\7`\2\2\u025c\u025b\3\2\2\2")
        buf.write("\u025c\u025d\3\2\2\2\u025d\u0260\3\2\2\2\u025e\u0261\5")
        buf.write("\u013a\u009e\2\u025f\u0261\5n8\2\u0260\u025e\3\2\2\2\u0260")
        buf.write("\u025f\3\2\2\2\u0261\u0263\3\2\2\2\u0262\u0264\5\u0100")
        buf.write("\u0081\2\u0263\u0262\3\2\2\2\u0263\u0264\3\2\2\2\u0264")
        buf.write("\u0269\3\2\2\2\u0265\u0266\7\u01ca\2\2\u0266\u0267\5\u013e")
        buf.write("\u00a0\2\u0267\u0268\7\u01cb\2\2\u0268\u026a\3\2\2\2\u0269")
        buf.write("\u0265\3\2\2\2\u0269\u026a\3\2\2\2\u026a\u026c\3\2\2\2")
        buf.write("\u026b\u026d\5 \21\2\u026c\u026b\3\2\2\2\u026c\u026d\3")
        buf.write("\2\2\2\u026d\u026e\3\2\2\2\u026e\u0270\5\30\r\2\u026f")
        buf.write("\u0271\5\u00ccg\2\u0270\u026f\3\2\2\2\u0270\u0271\3\2")
        buf.write("\2\2\u0271\u0273\3\2\2\2\u0272\u0274\5\u00d4k\2\u0273")
        buf.write("\u0272\3\2\2\2\u0273\u0274\3\2\2\2\u0274\u0276\3\2\2\2")
        buf.write("\u0275\u0277\7\u01cd\2\2\u0276\u0275\3\2\2\2\u0276\u0277")
        buf.write("\3\2\2\2\u0277\27\3\2\2\2\u0278\u027e\5\u010c\u0087\2")
        buf.write("\u0279\u027e\5\u00f6|\2\u027a\u027e\5x=\2\u027b\u027c")
        buf.write("\7\63\2\2\u027c\u027e\7\u00c1\2\2\u027d\u0278\3\2\2\2")
        buf.write("\u027d\u0279\3\2\2\2\u027d\u027a\3\2\2\2\u027d\u027b\3")
        buf.write("\2\2\2\u027e\31\3\2\2\2\u027f\u0281\5\u00aeX\2\u0280\u027f")
        buf.write("\3\2\2\2\u0280\u0281\3\2\2\2\u0281\u0282\3\2\2\2\u0282")
        buf.write("\u0284\5\u00ba^\2\u0283\u0285\5\u00c8e\2\u0284\u0283\3")
        buf.write("\2\2\2\u0284\u0285\3\2\2\2\u0285\u0287\3\2\2\2\u0286\u0288")
        buf.write("\5\u00ccg\2\u0287\u0286\3\2\2\2\u0287\u0288\3\2\2\2\u0288")
        buf.write("\u028a\3\2\2\2\u0289\u028b\5\u00d4k\2\u028a\u0289\3\2")
        buf.write("\2\2\u028a\u028b\3\2\2\2\u028b\u028d\3\2\2\2\u028c\u028e")
        buf.write("\7\u01cd\2\2\u028d\u028c\3\2\2\2\u028d\u028e\3\2\2\2\u028e")
        buf.write("\33\3\2\2\2\u028f\u0291\5\u00aeX\2\u0290\u028f\3\2\2\2")
        buf.write("\u0290\u0291\3\2\2\2\u0291\u0292\3\2\2\2\u0292\u0294\7")
        buf.write("\u00bd\2\2\u0293\u0295\5\u00c6d\2\u0294\u0293\3\2\2\2")
        buf.write("\u0294\u0295\3\2\2\2\u0295\u0298\3\2\2\2\u0296\u0299\5")
        buf.write("\u013a\u009e\2\u0297\u0299\5n8\2\u0298\u0296\3\2\2\2\u0298")
        buf.write("\u0297\3\2\2\2\u0299\u029b\3\2\2\2\u029a\u029c\5\u00fe")
        buf.write("\u0080\2\u029b\u029a\3\2\2\2\u029b\u029c\3\2\2\2\u029c")
        buf.write("\u029d\3\2\2\2\u029d\u029e\7\u00a5\2\2\u029e\u02a3\5\u00b2")
        buf.write("Z\2\u029f\u02a0\7\u01cc\2\2\u02a0\u02a2\5\u00b2Z\2\u02a1")
        buf.write("\u029f\3\2\2\2\u02a2\u02a5\3\2\2\2\u02a3\u02a1\3\2\2\2")
        buf.write("\u02a3\u02a4\3\2\2\2\u02a4\u02a7\3\2\2\2\u02a5\u02a3\3")
        buf.write("\2\2\2\u02a6\u02a8\5 \21\2\u02a7\u02a6\3\2\2\2\u02a7\u02a8")
        buf.write("\3\2\2\2\u02a8\u02ab\3\2\2\2\u02a9\u02aa\7O\2\2\u02aa")
        buf.write("\u02ac\5\u00dep\2\u02ab\u02a9\3\2\2\2\u02ab\u02ac\3\2")
        buf.write("\2\2\u02ac\u02ae\3\2\2\2\u02ad\u02af\5\36\20\2\u02ae\u02ad")
        buf.write("\3\2\2\2\u02ae\u02af\3\2\2\2\u02af\u02b1\3\2\2\2\u02b0")
        buf.write("\u02b2\5\u00ccg\2\u02b1\u02b0\3\2\2\2\u02b1\u02b2\3\2")
        buf.write("\2\2\u02b2\u02b4\3\2\2\2\u02b3\u02b5\5\u00d4k\2\u02b4")
        buf.write("\u02b3\3\2\2\2\u02b4\u02b5\3\2\2\2\u02b5\u02b7\3\2\2\2")
        buf.write("\u02b6\u02b8\7\u01cd\2\2\u02b7\u02b6\3\2\2\2\u02b7\u02b8")
        buf.write("\3\2\2\2\u02b8\35\3\2\2\2\u02b9\u02c4\7\u00c7\2\2\u02ba")
        buf.write("\u02c5\5\u00b4[\2\u02bb\u02bc\7)\2\2\u02bc\u02c2\7t\2")
        buf.write("\2\u02bd\u02bf\7\u011c\2\2\u02be\u02bd\3\2\2\2\u02be\u02bf")
        buf.write("\3\2\2\2\u02bf\u02c0\3\2\2\2\u02c0\u02c3\5\u0140\u00a1")
        buf.write("\2\u02c1\u02c3\7\u01b2\2\2\u02c2\u02be\3\2\2\2\u02c2\u02c1")
        buf.write("\3\2\2\2\u02c3\u02c5\3\2\2\2\u02c4\u02ba\3\2\2\2\u02c4")
        buf.write("\u02bb\3\2\2\2\u02c5\37\3\2\2\2\u02c6\u02c7\7\u015a\2")
        buf.write("\2\u02c7\u02cc\5\"\22\2\u02c8\u02c9\7\u01cc\2\2\u02c9")
        buf.write("\u02cb\5\"\22\2\u02ca\u02c8\3\2\2\2\u02cb\u02ce\3\2\2")
        buf.write("\2\u02cc\u02ca\3\2\2\2\u02cc\u02cd\3\2\2\2\u02cd\u02da")
        buf.write("\3\2\2\2\u02ce\u02cc\3\2\2\2\u02cf\u02d2\7`\2\2\u02d0")
        buf.write("\u02d3\7\u01b2\2\2\u02d1\u02d3\5\u0134\u009b\2\u02d2\u02d0")
        buf.write("\3\2\2\2\u02d2\u02d1\3\2\2\2\u02d3\u02d8\3\2\2\2\u02d4")
        buf.write("\u02d5\7\u01ca\2\2\u02d5\u02d6\5\u013e\u00a0\2\u02d6\u02d7")
        buf.write("\7\u01cb\2\2\u02d7\u02d9\3\2\2\2\u02d8\u02d4\3\2\2\2\u02d8")
        buf.write("\u02d9\3\2\2\2\u02d9\u02db\3\2\2\2\u02da\u02cf\3\2\2\2")
        buf.write("\u02da\u02db\3\2\2\2\u02db!\3\2\2\2\u02dc\u02df\5$\23")
        buf.write("\2\u02dd\u02df\5\u00a8U\2\u02de\u02dc\3\2\2\2\u02de\u02dd")
        buf.write("\3\2\2\2\u02df\u02e4\3\2\2\2\u02e0\u02e2\7\t\2\2\u02e1")
        buf.write("\u02e0\3\2\2\2\u02e1\u02e2\3\2\2\2\u02e2\u02e3\3\2\2\2")
        buf.write("\u02e3\u02e5\5\u0108\u0085\2\u02e4\u02e1\3\2\2\2\u02e4")
        buf.write("\u02e5\3\2\2\2\u02e5#\3\2\2\2\u02e6\u02ea\7\u0103\2\2")
        buf.write("\u02e7\u02ea\7\u012b\2\2\u02e8\u02ea\5\u0134\u009b\2\u02e9")
        buf.write("\u02e6\3\2\2\2\u02e9\u02e7\3\2\2\2\u02e9\u02e8\3\2\2\2")
        buf.write("\u02ea\u02eb\3\2\2\2\u02eb\u02ee\7\u01c5\2\2\u02ec\u02ef")
        buf.write("\7\u01cf\2\2\u02ed\u02ef\5\u0150\u00a9\2\u02ee\u02ec\3")
        buf.write("\2\2\2\u02ee\u02ed\3\2\2\2\u02ef\u02f2\3\2\2\2\u02f0\u02f2")
        buf.write("\7\u01ac\2\2\u02f1\u02e9\3\2\2\2\u02f1\u02f0\3\2\2\2\u02f2")
        buf.write("%\3\2\2\2\u02f3\u02f4\7\'\2\2\u02f4\u02f5\7/\2\2\u02f5")
        buf.write("\u02f9\5\u0150\u00a9\2\u02f6\u02f7\7\"\2\2\u02f7\u02f8")
        buf.write("\7\u01b9\2\2\u02f8\u02fa\t\6\2\2\u02f9\u02f6\3\2\2\2\u02f9")
        buf.write("\u02fa\3\2\2\2\u02fa\u0307\3\2\2\2\u02fb\u02fd\7w\2\2")
        buf.write("\u02fc\u02fe\7\u0087\2\2\u02fd\u02fc\3\2\2\2\u02fd\u02fe")
        buf.write("\3\2\2\2\u02fe\u02ff\3\2\2\2\u02ff\u0304\5\u012c\u0097")
        buf.write("\2\u0300\u0301\7\u01cc\2\2\u0301\u0303\5\u012c\u0097\2")
        buf.write("\u0302\u0300\3\2\2\2\u0303\u0306\3\2\2\2\u0304\u0302\3")
        buf.write("\2\2\2\u0304\u0305\3\2\2\2\u0305\u0308\3\2\2\2\u0306\u0304")
        buf.write("\3\2\2\2\u0307\u02fb\3\2\2\2\u0307\u0308\3\2\2\2\u0308")
        buf.write("\u0313\3\2\2\2\u0309\u030a\7i\2\2\u030a\u030b\7w\2\2\u030b")
        buf.write("\u0310\5\u012c\u0097\2\u030c\u030d\7\u01cc\2\2\u030d\u030f")
        buf.write("\5\u012c\u0097\2\u030e\u030c\3\2\2\2\u030f\u0312\3\2\2")
        buf.write("\2\u0310\u030e\3\2\2\2\u0310\u0311\3\2\2\2\u0311\u0314")
        buf.write("\3\2\2\2\u0312\u0310\3\2\2\2\u0313\u0309\3\2\2\2\u0313")
        buf.write("\u0314\3\2\2\2\u0314\u0317\3\2\2\2\u0315\u0316\7\35\2")
        buf.write("\2\u0316\u0318\5\u0150\u00a9\2\u0317\u0315\3\2\2\2\u0317")
        buf.write("\u0318\3\2\2\2\u0318\u0322\3\2\2\2\u0319\u031a\7\u00c9")
        buf.write("\2\2\u031a\u031f\5\u0128\u0095\2\u031b\u031c\7\u01cc\2")
        buf.write("\2\u031c\u031e\5\u0128\u0095\2\u031d\u031b\3\2\2\2\u031e")
        buf.write("\u0321\3\2\2\2\u031f\u031d\3\2\2\2\u031f\u0320\3\2\2\2")
        buf.write("\u0320\u0323\3\2\2\2\u0321\u031f\3\2\2\2\u0322\u0319\3")
        buf.write("\2\2\2\u0322\u0323\3\2\2\2\u0323\'\3\2\2\2\u0324\u0326")
        buf.write("\7\'\2\2\u0325\u0327\7\u00bb\2\2\u0326\u0325\3\2\2\2\u0326")
        buf.write("\u0327\3\2\2\2\u0327\u0329\3\2\2\2\u0328\u032a\5\u0144")
        buf.write("\u00a3\2\u0329\u0328\3\2\2\2\u0329\u032a\3\2\2\2\u032a")
        buf.write("\u032b\3\2\2\2\u032b\u032c\7\\\2\2\u032c\u032d\5\u0150")
        buf.write("\u00a9\2\u032d\u032e\7w\2\2\u032e\u032f\5\u00f0y\2\u032f")
        buf.write("\u0330\7\u01ca\2\2\u0330\u0332\5\u013e\u00a0\2\u0331\u0333")
        buf.write("\t\7\2\2\u0332\u0331\3\2\2\2\u0332\u0333\3\2\2\2\u0333")
        buf.write("\u0334\3\2\2\2\u0334\u0336\7\u01cb\2\2\u0335\u0337\5\u009a")
        buf.write("N\2\u0336\u0335\3\2\2\2\u0336\u0337\3\2\2\2\u0337\u033a")
        buf.write("\3\2\2\2\u0338\u0339\7w\2\2\u0339\u033b\5\u0150\u00a9")
        buf.write("\2\u033a\u0338\3\2\2\2\u033a\u033b\3\2\2\2\u033b\u033d")
        buf.write("\3\2\2\2\u033c\u033e\7\u01cd\2\2\u033d\u033c\3\2\2\2\u033d")
        buf.write("\u033e\3\2\2\2\u033e)\3\2\2\2\u033f\u0340\7\'\2\2\u0340")
        buf.write("\u0341\7\u00a9\2\2\u0341\u0342\5\u0150\u00a9\2\u0342\u0343")
        buf.write("\7w\2\2\u0343\u0344\5\u00f0y\2\u0344\u0345\7\u01ca\2\2")
        buf.write("\u0345\u0346\5\u013e\u00a0\2\u0346\u0359\7\u01cb\2\2\u0347")
        buf.write("\u034d\7\u00c9\2\2\u0348\u034e\7\u011a\2\2\u0349\u034a")
        buf.write("\7\u017a\2\2\u034a\u034b\7\u01b3\2\2\u034b\u034e\t\b\2")
        buf.write("\2\u034c\u034e\7\u018a\2\2\u034d\u0348\3\2\2\2\u034d\u0349")
        buf.write("\3\2\2\2\u034d\u034c\3\2\2\2\u034e\u0351\3\2\2\2\u034f")
        buf.write("\u0350\7\u01cc\2\2\u0350\u0352\7\u014e\2\2\u0351\u034f")
        buf.write("\3\2\2\2\u0351\u0352\3\2\2\2\u0352\u0357\3\2\2\2\u0353")
        buf.write("\u0354\7\u01cc\2\2\u0354\u0355\7\u0127\2\2\u0355\u0356")
        buf.write("\7\u01b9\2\2\u0356\u0358\5\u0142\u00a2\2\u0357\u0353\3")
        buf.write("\2\2\2\u0357\u0358\3\2\2\2\u0358\u035a\3\2\2\2\u0359\u0347")
        buf.write("\3\2\2\2\u0359\u035a\3\2\2\2\u035a\u035c\3\2\2\2\u035b")
        buf.write("\u035d\7\u01cd\2\2\u035c\u035b\3\2\2\2\u035c\u035d\3\2")
        buf.write("\2\2\u035d+\3\2\2\2\u035e\u035f\7\'\2\2\u035f\u0360\7")
        buf.write("\u00ac\2\2\u0360\u0361\5\u0134\u009b\2\u0361\u0362\7\u01ca")
        buf.write("\2\2\u0362\u0364\5\u0090I\2\u0363\u0365\7\u01cc\2\2\u0364")
        buf.write("\u0363\3\2\2\2\u0364\u0365\3\2\2\2\u0365\u0366\3\2\2\2")
        buf.write("\u0366\u036a\7\u01cb\2\2\u0367\u0368\7w\2\2\u0368\u036b")
        buf.write("\5\u0150\u00a9\2\u0369\u036b\7\63\2\2\u036a\u0367\3\2")
        buf.write("\2\2\u036a\u0369\3\2\2\2\u036a\u036b\3\2\2\2\u036b\u036f")
        buf.write("\3\2\2\2\u036c\u036d\7\u0193\2\2\u036d\u0370\5\u0150\u00a9")
        buf.write("\2\u036e\u0370\7\63\2\2\u036f\u036c\3\2\2\2\u036f\u036e")
        buf.write("\3\2\2\2\u036f\u0370\3\2\2\2\u0370\u0372\3\2\2\2\u0371")
        buf.write("\u0373\7\u01cd\2\2\u0372\u0371\3\2\2\2\u0372\u0373\3\2")
        buf.write("\2\2\u0373-\3\2\2\2\u0374\u0375\7\'\2\2\u0375\u0376\7")
        buf.write("\u00c4\2\2\u0376\u037b\5\u0136\u009c\2\u0377\u0378\7\u01ca")
        buf.write("\2\2\u0378\u0379\5\u013e\u00a0\2\u0379\u037a\7\u01cb\2")
        buf.write("\2\u037a\u037c\3\2\2\2\u037b\u0377\3\2\2\2\u037b\u037c")
        buf.write("\3\2\2\2\u037c\u0386\3\2\2\2\u037d\u037e\7\u00c9\2\2\u037e")
        buf.write("\u0383\5\60\31\2\u037f\u0380\7\u01cc\2\2\u0380\u0382\5")
        buf.write("\60\31\2\u0381\u037f\3\2\2\2\u0382\u0385\3\2\2\2\u0383")
        buf.write("\u0381\3\2\2\2\u0383\u0384\3\2\2\2\u0384\u0387\3\2\2\2")
        buf.write("\u0385\u0383\3\2\2\2\u0386\u037d\3\2\2\2\u0386\u0387\3")
        buf.write("\2\2\2\u0387\u0388\3\2\2\2\u0388\u0389\7\t\2\2\u0389\u038d")
        buf.write("\5\32\16\2\u038a\u038b\7\u00c9\2\2\u038b\u038c\7\30\2")
        buf.write("\2\u038c\u038e\7}\2\2\u038d\u038a\3\2\2\2\u038d\u038e")
        buf.write("\3\2\2\2\u038e\u0390\3\2\2\2\u038f\u0391\7\u01cd\2\2\u0390")
        buf.write("\u038f\3\2\2\2\u0390\u0391\3\2\2\2\u0391/\3\2\2\2\u0392")
        buf.write("\u0393\t\t\2\2\u0393\61\3\2\2\2\u0394\u0395\7\6\2\2\u0395")
        buf.write("\u0396\7\u00ac\2\2\u0396\u03b5\5\u0134\u009b\2\u0397\u0398")
        buf.write("\7\u00a5\2\2\u0398\u0399\7\u01ca\2\2\u0399\u039a\7\u0138")
        buf.write("\2\2\u039a\u039b\7\u01b9\2\2\u039b\u039c\t\n\2\2\u039c")
        buf.write("\u03b6\7\u01cb\2\2\u039d\u039e\7\4\2\2\u039e\u03b6\5\u0092")
        buf.write("J\2\u039f\u03a0\7;\2\2\u03a0\u03a1\7!\2\2\u03a1\u03b6")
        buf.write("\5\u0150\u00a9\2\u03a2\u03a3\7\u00c9\2\2\u03a3\u03a4\7")
        buf.write("\30\2\2\u03a4\u03a5\7\4\2\2\u03a5\u03a6\7!\2\2\u03a6\u03a7")
        buf.write("\5\u0150\u00a9\2\u03a7\u03a8\7L\2\2\u03a8\u03a9\7c\2\2")
        buf.write("\u03a9\u03aa\7\u01ca\2\2\u03aa\u03ab\5\u013e\u00a0\2\u03ab")
        buf.write("\u03ac\7\u01cb\2\2\u03ac\u03ad\7\u0090\2\2\u03ad\u03ae")
        buf.write("\5\u0134\u009b\2\u03ae\u03af\7\u01ca\2\2\u03af\u03b0\5")
        buf.write("\u013e\u00a0\2\u03b0\u03b1\7\u01cb\2\2\u03b1\u03b6\3\2")
        buf.write("\2\2\u03b2\u03b3\7\30\2\2\u03b3\u03b4\7!\2\2\u03b4\u03b6")
        buf.write("\5\u0150\u00a9\2\u03b5\u0397\3\2\2\2\u03b5\u039d\3\2\2")
        buf.write("\2\u03b5\u039f\3\2\2\2\u03b5\u03a2\3\2\2\2\u03b5\u03b2")
        buf.write("\3\2\2\2\u03b6\u03b8\3\2\2\2\u03b7\u03b9\7\u01cd\2\2\u03b8")
        buf.write("\u03b7\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9\63\3\2\2\2\u03ba")
        buf.write("\u03bb\7\6\2\2\u03bb\u03be\7/\2\2\u03bc\u03bf\5\u0150")
        buf.write("\u00a9\2\u03bd\u03bf\7)\2\2\u03be\u03bc\3\2\2\2\u03be")
        buf.write("\u03bd\3\2\2\2\u03bf\u03cc\3\2\2\2\u03c0\u03c1\7\u0146")
        buf.write("\2\2\u03c1\u03c2\7\u0148\2\2\u03c2\u03c3\7\u01b9\2\2\u03c3")
        buf.write("\u03cd\5\u0150\u00a9\2\u03c4\u03c5\7\35\2\2\u03c5\u03cd")
        buf.write("\5\u0150\u00a9\2\u03c6\u03c7\7\u00a5\2\2\u03c7\u03ca\5")
        buf.write("\66\34\2\u03c8\u03c9\7\u00c9\2\2\u03c9\u03cb\5^\60\2\u03ca")
        buf.write("\u03c8\3\2\2\2\u03ca\u03cb\3\2\2\2\u03cb\u03cd\3\2\2\2")
        buf.write("\u03cc\u03c0\3\2\2\2\u03cc\u03c4\3\2\2\2\u03cc\u03c6\3")
        buf.write("\2\2\2\u03cd\u03cf\3\2\2\2\u03ce\u03d0\7\u01cd\2\2\u03cf")
        buf.write("\u03ce\3\2\2\2\u03cf\u03d0\3\2\2\2\u03d0\65\3\2\2\2\u03d1")
        buf.write("\u03e8\58\35\2\u03d2\u03e8\5:\36\2\u03d3\u03e8\5> \2\u03d4")
        buf.write("\u03e8\5@!\2\u03d5\u03e8\5B\"\2\u03d6\u03e8\5D#\2\u03d7")
        buf.write("\u03e8\5F$\2\u03d8\u03e8\5H%\2\u03d9\u03e8\5J&\2\u03da")
        buf.write("\u03e8\5L\'\2\u03db\u03e8\5N(\2\u03dc\u03dd\7\u0113\2")
        buf.write("\2\u03dd\u03e8\5\u012a\u0096\2\u03de\u03e8\7\3\2\2\u03df")
        buf.write("\u03e8\5P)\2\u03e0\u03e8\5R*\2\u03e1\u03e8\5T+\2\u03e2")
        buf.write("\u03e8\5V,\2\u03e3\u03e8\5X-\2\u03e4\u03e8\5Z.\2\u03e5")
        buf.write("\u03e8\5\\/\2\u03e6\u03e8\5^\60\2\u03e7\u03d1\3\2\2\2")
        buf.write("\u03e7\u03d2\3\2\2\2\u03e7\u03d3\3\2\2\2\u03e7\u03d4\3")
        buf.write("\2\2\2\u03e7\u03d5\3\2\2\2\u03e7\u03d6\3\2\2\2\u03e7\u03d7")
        buf.write("\3\2\2\2\u03e7\u03d8\3\2\2\2\u03e7\u03d9\3\2\2\2\u03e7")
        buf.write("\u03da\3\2\2\2\u03e7\u03db\3\2\2\2\u03e7\u03dc\3\2\2\2")
        buf.write("\u03e7\u03de\3\2\2\2\u03e7\u03df\3\2\2\2\u03e7\u03e0\3")
        buf.write("\2\2\2\u03e7\u03e1\3\2\2\2\u03e7\u03e2\3\2\2\2\u03e7\u03e3")
        buf.write("\3\2\2\2\u03e7\u03e4\3\2\2\2\u03e7\u03e5\3\2\2\2\u03e7")
        buf.write("\u03e6\3\2\2\2\u03e8\67\3\2\2\2\u03e9\u03ea\7\u00d9\2")
        buf.write("\2\u03ea\u03fb\5\u0142\u00a2\2\u03eb\u03ec\7\u00da\2\2")
        buf.write("\u03ec\u03fb\7u\2\2\u03ed\u03f2\7w\2\2\u03ee\u03ef\7\u0127")
        buf.write("\2\2\u03ef\u03f0\7\u01b9\2\2\u03f0\u03f3\7w\2\2\u03f1")
        buf.write("\u03f3\7u\2\2\u03f2\u03ee\3\2\2\2\u03f2\u03f1\3\2\2\2")
        buf.write("\u03f3\u03fb\3\2\2\2\u03f4\u03f5\7\u00db\2\2\u03f5\u03fb")
        buf.write("\5\u0142\u00a2\2\u03f6\u03f7\7\u00dc\2\2\u03f7\u03fb\5")
        buf.write("\u0142\u00a2\2\u03f8\u03f9\7\u00dd\2\2\u03f9\u03fb\t\13")
        buf.write("\2\2\u03fa\u03e9\3\2\2\2\u03fa\u03eb\3\2\2\2\u03fa\u03ed")
        buf.write("\3\2\2\2\u03fa\u03f4\3\2\2\2\u03fa\u03f6\3\2\2\2\u03fa")
        buf.write("\u03f8\3\2\2\2\u03fb9\3\2\2\2\u03fc\u03fd\7\u00e7\2\2")
        buf.write("\u03fd\u040d\7\u01b9\2\2\u03fe\u040e\7u\2\2\u03ff\u040a")
        buf.write("\7w\2\2\u0400\u0405\5<\37\2\u0401\u0402\7\u01cc\2\2\u0402")
        buf.write("\u0404\5<\37\2\u0403\u0401\3\2\2\2\u0404\u0407\3\2\2\2")
        buf.write("\u0405\u0403\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u0409\3")
        buf.write("\2\2\2\u0407\u0405\3\2\2\2\u0408\u0400\3\2\2\2\u0409\u040c")
        buf.write("\3\2\2\2\u040a\u0408\3\2\2\2\u040a\u040b\3\2\2\2\u040b")
        buf.write("\u040e\3\2\2\2\u040c\u040a\3\2\2\2\u040d\u03fe\3\2\2\2")
        buf.write("\u040d\u03ff\3\2\2\2\u040e;\3\2\2\2\u040f\u0410\7\u00d8")
        buf.write("\2\2\u0410\u0411\7\u01b9\2\2\u0411\u0416\5\u0142\u00a2")
        buf.write("\2\u0412\u0413\7\u00e6\2\2\u0413\u0414\7\u01b9\2\2\u0414")
        buf.write("\u0416\t\f\2\2\u0415\u040f\3\2\2\2\u0415\u0412\3\2\2\2")
        buf.write("\u0416=\3\2\2\2\u0417\u0418\7\"\2\2\u0418\u0419\7\u01b9")
        buf.write("\2\2\u0419\u041a\t\6\2\2\u041a?\3\2\2\2\u041b\u041c\7")
        buf.write("\u00f3\2\2\u041c\u0420\5\u0142\u00a2\2\u041d\u041e\7\u00f4")
        buf.write("\2\2\u041e\u0420\t\r\2\2\u041f\u041b\3\2\2\2\u041f\u041d")
        buf.write("\3\2\2\2\u0420A\3\2\2\2\u0421\u0422\7\u00fc\2\2\u0422")
        buf.write("\u0423\5\u0142\u00a2\2\u0423C\3\2\2\2\u0424\u0425\7\u010c")
        buf.write("\2\2\u0425\u0426\5\u0142\u00a2\2\u0426E\3\2\2\2\u0427")
        buf.write("\u0428\t\16\2\2\u0428G\3\2\2\2\u0429\u042a\t\17\2\2\u042a")
        buf.write("I\3\2\2\2\u042b\u042c\t\20\2\2\u042cK\3\2\2\2\u042d\u042e")
        buf.write("\7\u0102\2\2\u042e\u042f\7\u01b9\2\2\u042f\u0430\t\21")
        buf.write("\2\2\u0430M\3\2\2\2\u0431\u0432\7\u00fe\2\2\u0432\u044b")
        buf.write("\5\u0142\u00a2\2\u0433\u0434\7\u019a\2\2\u0434\u044b\5")
        buf.write("\u0142\u00a2\2\u0435\u0436\7\u0100\2\2\u0436\u0439\7\u01b9")
        buf.write("\2\2\u0437\u043a\5\u0150\u00a9\2\u0438\u043a\7\u01b5\2")
        buf.write("\2\u0439\u0437\3\2\2\2\u0439\u0438\3\2\2\2\u043a\u044b")
        buf.write("\3\2\2\2\u043b\u043c\7\u00ff\2\2\u043c\u043f\7\u01b9\2")
        buf.write("\2\u043d\u0440\5\u0150\u00a9\2\u043e\u0440\7\u01b5\2\2")
        buf.write("\u043f\u043d\3\2\2\2\u043f\u043e\3\2\2\2\u0440\u044b\3")
        buf.write("\2\2\2\u0441\u0442\7\u0149\2\2\u0442\u0443\7\u01b9\2\2")
        buf.write("\u0443\u044b\t\13\2\2\u0444\u0445\7\u0199\2\2\u0445\u0446")
        buf.write("\7\u01b9\2\2\u0446\u044b\t\13\2\2\u0447\u0448\7\u019c")
        buf.write("\2\2\u0448\u0449\7\u01b9\2\2\u0449\u044b\7\u01b3\2\2\u044a")
        buf.write("\u0431\3\2\2\2\u044a\u0433\3\2\2\2\u044a\u0435\3\2\2\2")
        buf.write("\u044a\u043b\3\2\2\2\u044a\u0441\3\2\2\2\u044a\u0444\3")
        buf.write("\2\2\2\u044a\u0447\3\2\2\2\u044bO\3\2\2\2\u044c\u044d")
        buf.write("\7\u0145\2\2\u044d\u044e\t\13\2\2\u044eQ\3\2\2\2\u044f")
        buf.write("\u0450\7\u015d\2\2\u0450\u0451\t\22\2\2\u0451S\3\2\2\2")
        buf.write("\u0452\u0453\7\u016d\2\2\u0453\u0459\t\23\2\2\u0454\u0455")
        buf.write("\7\u0198\2\2\u0455\u0459\5\u0142\u00a2\2\u0456\u0457\7")
        buf.write("\u015c\2\2\u0457\u0459\t\24\2\2\u0458\u0452\3\2\2\2\u0458")
        buf.write("\u0454\3\2\2\2\u0458\u0456\3\2\2\2\u0459U\3\2\2\2\u045a")
        buf.write("\u0461\7\u010b\2\2\u045b\u0461\7\u0108\2\2\u045c\u0461")
        buf.write("\7\u014a\2\2\u045d\u0461\7\u010d\2\2\u045e\u045f\7\u0122")
        buf.write("\2\2\u045f\u0461\5\u0142\u00a2\2\u0460\u045a\3\2\2\2\u0460")
        buf.write("\u045b\3\2\2\2\u0460\u045c\3\2\2\2\u0460\u045d\3\2\2\2")
        buf.write("\u0460\u045e\3\2\2\2\u0461W\3\2\2\2\u0462\u0463\7\u00cf")
        buf.write("\2\2\u0463\u0468\5\u0142\u00a2\2\u0464\u0465\7\u0169\2")
        buf.write("\2\u0465\u0468\t\13\2\2\u0466\u0468\t\13\2\2\u0467\u0462")
        buf.write("\3\2\2\2\u0467\u0464\3\2\2\2\u0467\u0466\3\2\2\2\u0468")
        buf.write("Y\3\2\2\2\u0469\u046a\7\u00d1\2\2\u046a\u047f\5\u0142")
        buf.write("\u00a2\2\u046b\u046c\7\u00d0\2\2\u046c\u047f\5\u0142\u00a2")
        buf.write("\2\u046d\u046e\7\u00d2\2\2\u046e\u047f\5\u0142\u00a2\2")
        buf.write("\u046f\u0470\7\u00d3\2\2\u0470\u047f\5\u0142\u00a2\2\u0471")
        buf.write("\u0472\7\u00d5\2\2\u0472\u047f\5\u0142\u00a2\2\u0473\u0474")
        buf.write("\7\u00eb\2\2\u0474\u0475\7\u01b9\2\2\u0475\u047f\7\u01b3")
        buf.write("\2\2\u0476\u0477\7\u00ed\2\2\u0477\u047f\5\u0142\u00a2")
        buf.write("\2\u0478\u0479\7\u0152\2\2\u0479\u047f\5\u0142\u00a2\2")
        buf.write("\u047a\u047b\7\u0165\2\2\u047b\u047f\5\u0142\u00a2\2\u047c")
        buf.write("\u047d\7\u016e\2\2\u047d\u047f\5\u0142\u00a2\2\u047e\u0469")
        buf.write("\3\2\2\2\u047e\u046b\3\2\2\2\u047e\u046d\3\2\2\2\u047e")
        buf.write("\u046f\3\2\2\2\u047e\u0471\3\2\2\2\u047e\u0473\3\2\2\2")
        buf.write("\u047e\u0476\3\2\2\2\u047e\u0478\3\2\2\2\u047e\u047a\3")
        buf.write("\2\2\2\u047e\u047c\3\2\2\2\u047f[\3\2\2\2\u0480\u0481")
        buf.write("\7\u0191\2\2\u0481\u0482\7\u01b9\2\2\u0482\u0483\7\u01b3")
        buf.write("\2\2\u0483\u0484\t\25\2\2\u0484]\3\2\2\2\u0485\u0486\7")
        buf.write("\u0099\2\2\u0486\u0487\7\u00cd\2\2\u0487\u048c\7\u01b3")
        buf.write("\2\2\u0488\u0489\7\u0099\2\2\u0489\u048c\7\u0125\2\2\u048a")
        buf.write("\u048c\7\u014f\2\2\u048b\u0485\3\2\2\2\u048b\u0488\3\2")
        buf.write("\2\2\u048b\u048a\3\2\2\2\u048c_\3\2\2\2\u048d\u048e\7")
        buf.write(";\2\2\u048e\u0491\7\\\2\2\u048f\u0490\7Z\2\2\u0490\u0492")
        buf.write("\7C\2\2\u0491\u048f\3\2\2\2\u0491\u0492\3\2\2\2\u0492")
        buf.write("\u0493\3\2\2\2\u0493\u0496\5\u0150\u00a9\2\u0494\u0495")
        buf.write("\7w\2\2\u0495\u0497\5\u0134\u009b\2\u0496\u0494\3\2\2")
        buf.write("\2\u0496\u0497\3\2\2\2\u0497\u0499\3\2\2\2\u0498\u049a")
        buf.write("\7\u01cd\2\2\u0499\u0498\3\2\2\2\u0499\u049a\3\2\2\2\u049a")
        buf.write("a\3\2\2\2\u049b\u049c\7;\2\2\u049c\u049f\7\u008a\2\2\u049d")
        buf.write("\u049e\7Z\2\2\u049e\u04a0\7C\2\2\u049f\u049d\3\2\2\2\u049f")
        buf.write("\u04a0\3\2\2\2\u04a0\u04a1\3\2\2\2\u04a1\u04a3\5\u0138")
        buf.write("\u009d\2\u04a2\u04a4\7\u01cd\2\2\u04a3\u04a2\3\2\2\2\u04a3")
        buf.write("\u04a4\3\2\2\2\u04a4c\3\2\2\2\u04a5\u04a6\7;\2\2\u04a6")
        buf.write("\u04aa\7\u00a9\2\2\u04a7\u04a8\5\u0134\u009b\2\u04a8\u04a9")
        buf.write("\7\u01c5\2\2\u04a9\u04ab\3\2\2\2\u04aa\u04a7\3\2\2\2\u04aa")
        buf.write("\u04ab\3\2\2\2\u04ab\u04ac\3\2\2\2\u04ac\u04ad\5\u0150")
        buf.write("\u00a9\2\u04ad\u04ae\7\u01cd\2\2\u04aee\3\2\2\2\u04af")
        buf.write("\u04b0\7;\2\2\u04b0\u04b3\7\u00ac\2\2\u04b1\u04b2\7Z\2")
        buf.write("\2\u04b2\u04b4\7C\2\2\u04b3\u04b1\3\2\2\2\u04b3\u04b4")
        buf.write("\3\2\2\2\u04b4\u04b5\3\2\2\2\u04b5\u04b7\5\u0134\u009b")
        buf.write("\2\u04b6\u04b8\7\u01cd\2\2\u04b7\u04b6\3\2\2\2\u04b7\u04b8")
        buf.write("\3\2\2\2\u04b8g\3\2\2\2\u04b9\u04ba\7;\2\2\u04ba\u04bd")
        buf.write("\7\u00c4\2\2\u04bb\u04bc\7Z\2\2\u04bc\u04be\7C\2\2\u04bd")
        buf.write("\u04bb\3\2\2\2\u04bd\u04be\3\2\2\2\u04be\u04bf\3\2\2\2")
        buf.write("\u04bf\u04c4\5\u0136\u009c\2\u04c0\u04c1\7\u01cc\2\2\u04c1")
        buf.write("\u04c3\5\u0136\u009c\2\u04c2\u04c0\3\2\2\2\u04c3\u04c6")
        buf.write("\3\2\2\2\u04c4\u04c2\3\2\2\2\u04c4\u04c5\3\2\2\2\u04c5")
        buf.write("\u04c8\3\2\2\2\u04c6\u04c4\3\2\2\2\u04c7\u04c9\7\u01cd")
        buf.write("\2\2\u04c8\u04c7\3\2\2\2\u04c8\u04c9\3\2\2\2\u04c9i\3")
        buf.write("\2\2\2\u04ca\u04cb\7\'\2\2\u04cb\u04cc\7\u019d\2\2\u04cc")
        buf.write("\u04cd\5\u0136\u009c\2\u04cd\u04ce\7O\2\2\u04ce\u04cf")
        buf.write("\5\u016e\u00b8\2\u04cf\u04d0\5\u014a\u00a6\2\u04d0k\3")
        buf.write("\2\2\2\u04d1\u04d2\7;\2\2\u04d2\u04d5\7\u019d\2\2\u04d3")
        buf.write("\u04d4\7Z\2\2\u04d4\u04d6\7C\2\2\u04d5\u04d3\3\2\2\2\u04d5")
        buf.write("\u04d6\3\2\2\2\u04d6\u04d7\3\2\2\2\u04d7\u04d8\5\u0136")
        buf.write("\u009c\2\u04d8m\3\2\2\2\u04d9\u04dc\5p9\2\u04da\u04dc")
        buf.write("\5r:\2\u04db\u04d9\3\2\2\2\u04db\u04da\3\2\2\2\u04dco")
        buf.write("\3\2\2\2\u04dd\u04de\7z\2\2\u04de\u04df\7\u01ca\2\2\u04df")
        buf.write("\u04e0\5\u0150\u00a9\2\u04e0\u04e1\7\u01cc\2\2\u04e1\u04e2")
        buf.write("\7\u01b5\2\2\u04e2\u04e3\7\u01cb\2\2\u04e3q\3\2\2\2\u04e4")
        buf.write("\u04e5\7y\2\2\u04e5\u04e6\7\u01ca\2\2\u04e6\u04e7\7\u01b5")
        buf.write("\2\2\u04e7\u04e8\7\u01cc\2\2\u04e8\u04e9\7\u01b5\2\2\u04e9")
        buf.write("\u04ea\7\u01cb\2\2\u04ea\u04ec\7\u01c5\2\2\u04eb\u04ed")
        buf.write("\5\u0150\u00a9\2\u04ec\u04eb\3\2\2\2\u04ec\u04ed\3\2\2")
        buf.write("\2\u04ed\u04ee\3\2\2\2\u04ee\u04f0\7\u01c5\2\2\u04ef\u04f1")
        buf.write("\5\u0150\u00a9\2\u04f0\u04ef\3\2\2\2\u04f0\u04f1\3\2\2")
        buf.write("\2\u04f1\u04f2\3\2\2\2\u04f2\u04f3\7\u01c5\2\2\u04f3\u04f4")
        buf.write("\5\u0150\u00a9\2\u04f4s\3\2\2\2\u04f5\u04f6\7\62\2\2\u04f6")
        buf.write("\u04f8\7\u01b2\2\2\u04f7\u04f9\7\t\2\2\u04f8\u04f7\3\2")
        buf.write("\2\2\u04f8\u04f9\3\2\2\2\u04f9\u04fa\3\2\2\2\u04fa\u04fc")
        buf.write("\5\u008eH\2\u04fb\u04fd\7\u01cd\2\2\u04fc\u04fb\3\2\2")
        buf.write("\2\u04fc\u04fd\3\2\2\2\u04fd\u050b\3\2\2\2\u04fe\u04ff")
        buf.write("\7\62\2\2\u04ff\u0504\5\u008cG\2\u0500\u0501\7\u01cc\2")
        buf.write("\2\u0501\u0503\5\u008cG\2\u0502\u0500\3\2\2\2\u0503\u0506")
        buf.write("\3\2\2\2\u0504\u0502\3\2\2\2\u0504\u0505\3\2\2\2\u0505")
        buf.write("\u0508\3\2\2\2\u0506\u0504\3\2\2\2\u0507\u0509\7\u01cd")
        buf.write("\2\2\u0508\u0507\3\2\2\2\u0508\u0509\3\2\2\2\u0509\u050b")
        buf.write("\3\2\2\2\u050a\u04f5\3\2\2\2\u050a\u04fe\3\2\2\2\u050b")
        buf.write("u\3\2\2\2\u050c\u050e\7\32\2\2\u050d\u050f\7\u011c\2\2")
        buf.write("\u050e\u050d\3\2\2\2\u050e\u050f\3\2\2\2\u050f\u0510\3")
        buf.write("\2\2\2\u0510\u0512\5\u0140\u00a1\2\u0511\u0513\7\u01cd")
        buf.write("\2\2\u0512\u0511\3\2\2\2\u0512\u0513\3\2\2\2\u0513\u0527")
        buf.write("\3\2\2\2\u0514\u0516\7\61\2\2\u0515\u0517\7\u011c\2\2")
        buf.write("\u0516\u0515\3\2\2\2\u0516\u0517\3\2\2\2\u0517\u0518\3")
        buf.write("\2\2\2\u0518\u051a\5\u0140\u00a1\2\u0519\u051b\7\u01cd")
        buf.write("\2\2\u051a\u0519\3\2\2\2\u051a\u051b\3\2\2\2\u051b\u0527")
        buf.write("\3\2\2\2\u051c\u0527\5\u009eP\2\u051d\u0527\5\u00a2R\2")
        buf.write("\u051e\u0520\7x\2\2\u051f\u0521\7\u011c\2\2\u0520\u051f")
        buf.write("\3\2\2\2\u0520\u0521\3\2\2\2\u0521\u0522\3\2\2\2\u0522")
        buf.write("\u0524\5\u0140\u00a1\2\u0523\u0525\7\u01cd\2\2\u0524\u0523")
        buf.write("\3\2\2\2\u0524\u0525\3\2\2\2\u0525\u0527\3\2\2\2\u0526")
        buf.write("\u050c\3\2\2\2\u0526\u0514\3\2\2\2\u0526\u051c\3\2\2\2")
        buf.write("\u0526\u051d\3\2\2\2\u0526\u051e\3\2\2\2\u0527w\3\2\2")
        buf.write("\2\u0528\u052b\7B\2\2\u0529\u052a\7\u01b2\2\2\u052a\u052c")
        buf.write("\7\u01b9\2\2\u052b\u0529\3\2\2\2\u052b\u052c\3\2\2\2\u052c")
        buf.write("\u052d\3\2\2\2\u052d\u0536\5\u0138\u009d\2\u052e\u0533")
        buf.write("\5z>\2\u052f\u0530\7\u01cc\2\2\u0530\u0532\5z>\2\u0531")
        buf.write("\u052f\3\2\2\2\u0532\u0535\3\2\2\2\u0533\u0531\3\2\2\2")
        buf.write("\u0533\u0534\3\2\2\2\u0534\u0537\3\2\2\2\u0535\u0533\3")
        buf.write("\2\2\2\u0536\u052e\3\2\2\2\u0536\u0537\3\2\2\2\u0537\u0539")
        buf.write("\3\2\2\2\u0538\u053a\7\u01cd\2\2\u0539\u0538\3\2\2\2\u0539")
        buf.write("\u053a\3\2\2\2\u053a\u0552\3\2\2\2\u053b\u053c\7B\2\2")
        buf.write("\u053c\u053d\7\u01ca\2\2\u053d\u0542\5|?\2\u053e\u053f")
        buf.write("\7\u01d2\2\2\u053f\u0541\5|?\2\u0540\u053e\3\2\2\2\u0541")
        buf.write("\u0544\3\2\2\2\u0542\u0540\3\2\2\2\u0542\u0543\3\2\2\2")
        buf.write("\u0543\u0545\3\2\2\2\u0544\u0542\3\2\2\2\u0545\u054c\7")
        buf.write("\u01cb\2\2\u0546\u0548\7\t\2\2\u0547\u0546\3\2\2\2\u0547")
        buf.write("\u0548\3\2\2\2\u0548\u0549\3\2\2\2\u0549\u054a\t\26\2")
        buf.write("\2\u054a\u054b\7\u01b9\2\2\u054b\u054d\7\u01b5\2\2\u054c")
        buf.write("\u0547\3\2\2\2\u054c\u054d\3\2\2\2\u054d\u054f\3\2\2\2")
        buf.write("\u054e\u0550\7\u01cd\2\2\u054f\u054e\3\2\2\2\u054f\u0550")
        buf.write("\3\2\2\2\u0550\u0552\3\2\2\2\u0551\u0528\3\2\2\2\u0551")
        buf.write("\u053b\3\2\2\2\u0552y\3\2\2\2\u0553\u0554\7\u01b2\2\2")
        buf.write("\u0554\u0556\7\u01b9\2\2\u0555\u0553\3\2\2\2\u0555\u0556")
        buf.write("\3\2\2\2\u0556\u0560\3\2\2\2\u0557\u055a\5\u00a6T\2\u0558")
        buf.write("\u055a\5\u0150\u00a9\2\u0559\u0557\3\2\2\2\u0559\u0558")
        buf.write("\3\2\2\2\u055a\u055c\3\2\2\2\u055b\u055d\t\27\2\2\u055c")
        buf.write("\u055b\3\2\2\2\u055c\u055d\3\2\2\2\u055d\u0561\3\2\2\2")
        buf.write("\u055e\u0561\7\63\2\2\u055f\u0561\7q\2\2\u0560\u0559\3")
        buf.write("\2\2\2\u0560\u055e\3\2\2\2\u0560\u055f\3\2\2\2\u0561{")
        buf.write("\3\2\2\2\u0562\u0563\t\3\2\2\u0563}\3\2\2\2\u0564\u0566")
        buf.write("\5\u008aF\2\u0565\u0567\7\u01cd\2\2\u0566\u0565\3\2\2")
        buf.write("\2\u0566\u0567\3\2\2\2\u0567\u0595\3\2\2\2\u0568\u0574")
        buf.write("\7S\2\2\u0569\u056b\7\5\2\2\u056a\u056c\7\u0164\2\2\u056b")
        buf.write("\u056a\3\2\2\2\u056b\u056c\3\2\2\2\u056c\u0575\3\2\2\2")
        buf.write("\u056d\u0572\5\u0080A\2\u056e\u056f\7\u01ca\2\2\u056f")
        buf.write("\u0570\5\u013e\u00a0\2\u0570\u0571\7\u01cb\2\2\u0571\u0573")
        buf.write("\3\2\2\2\u0572\u056e\3\2\2\2\u0572\u0573\3\2\2\2\u0573")
        buf.write("\u0575\3\2\2\2\u0574\u0569\3\2\2\2\u0574\u056d\3\2\2\2")
        buf.write("\u0575\u0578\3\2\2\2\u0576\u0577\7w\2\2\u0577\u0579\5")
        buf.write("\u0134\u009b\2\u0578\u0576\3\2\2\2\u0578\u0579\3\2\2\2")
        buf.write("\u0579\u057a\3\2\2\2\u057a\u057b\7\u00b0\2\2\u057b\u057f")
        buf.write("\5\u0150\u00a9\2\u057c\u057d\7\u00c9\2\2\u057d\u057e\7")
        buf.write("S\2\2\u057e\u0580\7}\2\2\u057f\u057c\3\2\2\2\u057f\u0580")
        buf.write("\3\2\2\2\u0580\u0583\3\2\2\2\u0581\u0582\7\t\2\2\u0582")
        buf.write("\u0584\5\u0150\u00a9\2\u0583\u0581\3\2\2\2\u0583\u0584")
        buf.write("\3\2\2\2\u0584\u0586\3\2\2\2\u0585\u0587\7\u01cd\2\2\u0586")
        buf.write("\u0585\3\2\2\2\u0586\u0587\3\2\2\2\u0587\u0595\3\2\2\2")
        buf.write("\u0588\u058f\7\u0096\2\2\u0589\u058a\7\u01ca\2\2\u058a")
        buf.write("\u058b\7\u00c9\2\2\u058b\u058c\7\u00ef\2\2\u058c\u058d")
        buf.write("\7\u01b9\2\2\u058d\u058e\7\u01b2\2\2\u058e\u0590\7\u01cb")
        buf.write("\2\2\u058f\u0589\3\2\2\2\u058f\u0590\3\2\2\2\u0590\u0592")
        buf.write("\3\2\2\2\u0591\u0593\7\u01cd\2\2\u0592\u0591\3\2\2\2\u0592")
        buf.write("\u0593\3\2\2\2\u0593\u0595\3\2\2\2\u0594\u0564\3\2\2\2")
        buf.write("\u0594\u0568\3\2\2\2\u0594\u0588\3\2\2\2\u0595\177\3\2")
        buf.write("\2\2\u0596\u05b1\7B\2\2\u0597\u0598\7\u00c4\2\2\u0598")
        buf.write("\u05b1\5\u0150\u00a9\2\u0599\u059a\7\u0190\2\2\u059a\u05b1")
        buf.write("\5\u0150\u00a9\2\u059b\u059d\7\u00ee\2\2\u059c\u059e\5")
        buf.write("\u0150\u00a9\2\u059d\u059c\3\2\2\2\u059d\u059e\3\2\2\2")
        buf.write("\u059e\u05b1\3\2\2\2\u059f\u05a0\7\'\2\2\u05a0\u05b1\t")
        buf.write("\30\2\2\u05a1\u05b1\7\u0182\2\2\u05a2\u05b1\7\u0126\2")
        buf.write("\2\u05a3\u05b1\7\u00a0\2\2\u05a4\u05b1\7\u0090\2\2\u05a5")
        buf.write("\u05b1\7^\2\2\u05a6\u05ae\7\6\2\2\u05a7\u05a9\7\b\2\2")
        buf.write("\u05a8\u05a7\3\2\2\2\u05a8\u05a9\3\2\2\2\u05a9\u05ac\3")
        buf.write("\2\2\2\u05aa\u05ad\5\u0150\u00a9\2\u05ab\u05ad\7/\2\2")
        buf.write("\u05ac\u05aa\3\2\2\2\u05ac\u05ab\3\2\2\2\u05ad\u05af\3")
        buf.write("\2\2\2\u05ae\u05a8\3\2\2\2\u05ae\u05af\3\2\2\2\u05af\u05b1")
        buf.write("\3\2\2\2\u05b0\u0596\3\2\2\2\u05b0\u0597\3\2\2\2\u05b0")
        buf.write("\u0599\3\2\2\2\u05b0\u059b\3\2\2\2\u05b0\u059f\3\2\2\2")
        buf.write("\u05b0\u05a1\3\2\2\2\u05b0\u05a2\3\2\2\2\u05b0\u05a3\3")
        buf.write("\2\2\2\u05b0\u05a4\3\2\2\2\u05b0\u05a5\3\2\2\2\u05b0\u05a6")
        buf.write("\3\2\2\2\u05b1\u0081\3\2\2\2\u05b2\u05b3\7\u00a5\2\2\u05b3")
        buf.write("\u05b6\7\u01b2\2\2\u05b4\u05b5\7\u01c5\2\2\u05b5\u05b7")
        buf.write("\5\u0150\u00a9\2\u05b6\u05b4\3\2\2\2\u05b6\u05b7\3\2\2")
        buf.write("\2\u05b7\u05b8\3\2\2\2\u05b8\u05b9\7\u01b9\2\2\u05b9\u05bb")
        buf.write("\5\u00a8U\2\u05ba\u05bc\7\u01cd\2\2\u05bb\u05ba\3\2\2")
        buf.write("\2\u05bb\u05bc\3\2\2\2\u05bc\u05da\3\2\2\2\u05bd\u05be")
        buf.write("\7\u00a5\2\2\u05be\u05bf\7\u01b2\2\2\u05bf\u05c0\5\u0156")
        buf.write("\u00ac\2\u05c0\u05c2\5\u00a8U\2\u05c1\u05c3\7\u01cd\2")
        buf.write("\2\u05c2\u05c1\3\2\2\2\u05c2\u05c3\3\2\2\2\u05c3\u05da")
        buf.write("\3\2\2\2\u05c4\u05c5\7\u00a5\2\2\u05c5\u05c6\7\u01b2\2")
        buf.write("\2\u05c6\u05c7\7\u01b9\2\2\u05c7\u05c8\7.\2\2\u05c8\u05d3")
        buf.write("\5\u00a0Q\2\u05c9\u05d1\7J\2\2\u05ca\u05cb\7\u008d\2\2")
        buf.write("\u05cb\u05d2\7\u0156\2\2\u05cc\u05cf\7\u00bd\2\2\u05cd")
        buf.write("\u05ce\7t\2\2\u05ce\u05d0\5\u013e\u00a0\2\u05cf\u05cd")
        buf.write("\3\2\2\2\u05cf\u05d0\3\2\2\2\u05d0\u05d2\3\2\2\2\u05d1")
        buf.write("\u05ca\3\2\2\2\u05d1\u05cc\3\2\2\2\u05d2\u05d4\3\2\2\2")
        buf.write("\u05d3\u05c9\3\2\2\2\u05d3\u05d4\3\2\2\2\u05d4\u05d6\3")
        buf.write("\2\2\2\u05d5\u05d7\7\u01cd\2\2\u05d6\u05d5\3\2\2\2\u05d6")
        buf.write("\u05d7\3\2\2\2\u05d7\u05da\3\2\2\2\u05d8\u05da\5\u00a4")
        buf.write("S\2\u05d9\u05b2\3\2\2\2\u05d9\u05bd\3\2\2\2\u05d9\u05c4")
        buf.write("\3\2\2\2\u05d9\u05d8\3\2\2\2\u05da\u0083\3\2\2\2\u05db")
        buf.write("\u05dc\7\r\2\2\u05dc\u05dd\79\2\2\u05dd\u05e0\t\31\2\2")
        buf.write("\u05de\u05e1\5\u0150\u00a9\2\u05df\u05e1\7\u01b2\2\2\u05e0")
        buf.write("\u05de\3\2\2\2\u05e0\u05df\3\2\2\2\u05e0\u05e1\3\2\2\2")
        buf.write("\u05e1\u05e3\3\2\2\2\u05e2\u05e4\7\u01cd\2\2\u05e3\u05e2")
        buf.write("\3\2\2\2\u05e3\u05e4\3\2\2\2\u05e4\u0629\3\2\2\2\u05e5")
        buf.write("\u05e6\7\r\2\2\u05e6\u05f0\t\31\2\2\u05e7\u05ea\5\u0150")
        buf.write("\u00a9\2\u05e8\u05ea\7\u01b2\2\2\u05e9\u05e7\3\2\2\2\u05e9")
        buf.write("\u05e8\3\2\2\2\u05ea\u05ee\3\2\2\2\u05eb\u05ec\7\u00c9")
        buf.write("\2\2\u05ec\u05ed\7\u013b\2\2\u05ed\u05ef\7\u01b5\2\2\u05ee")
        buf.write("\u05eb\3\2\2\2\u05ee\u05ef\3\2\2\2\u05ef\u05f1\3\2\2\2")
        buf.write("\u05f0\u05e9\3\2\2\2\u05f0\u05f1\3\2\2\2\u05f1\u05f3\3")
        buf.write("\2\2\2\u05f2\u05f4\7\u01cd\2\2\u05f3\u05f2\3\2\2\2\u05f3")
        buf.write("\u05f4\3\2\2\2\u05f4\u0629\3\2\2\2\u05f5\u05f6\7\37\2")
        buf.write("\2\u05f6\u0603\t\31\2\2\u05f7\u05fa\5\u0150\u00a9\2\u05f8")
        buf.write("\u05fa\7\u01b2\2\2\u05f9\u05f7\3\2\2\2\u05f9\u05f8\3\2")
        buf.write("\2\2\u05fa\u0601\3\2\2\2\u05fb\u05fc\7\u00c9\2\2\u05fc")
        buf.write("\u05fd\7\u01ca\2\2\u05fd\u05fe\7\u0102\2\2\u05fe\u05ff")
        buf.write("\7\u01b9\2\2\u05ff\u0600\t\13\2\2\u0600\u0602\7\u01cb")
        buf.write("\2\2\u0601\u05fb\3\2\2\2\u0601\u0602\3\2\2\2\u0602\u0604")
        buf.write("\3\2\2\2\u0603\u05f9\3\2\2\2\u0603\u0604\3\2\2\2\u0604")
        buf.write("\u0606\3\2\2\2\u0605\u0607\7\u01cd\2\2\u0606\u0605\3\2")
        buf.write("\2\2\u0606\u0607\3\2\2\2\u0607\u0629\3\2\2\2\u0608\u060a")
        buf.write("\7\37\2\2\u0609\u060b\7\u01a8\2\2\u060a\u0609\3\2\2\2")
        buf.write("\u060a\u060b\3\2\2\2\u060b\u060d\3\2\2\2\u060c\u060e\7")
        buf.write("\u01cd\2\2\u060d\u060c\3\2\2\2\u060d\u060e\3\2\2\2\u060e")
        buf.write("\u0629\3\2\2\2\u060f\u0610\7\u0099\2\2\u0610\u0613\t\31")
        buf.write("\2\2\u0611\u0614\5\u0150\u00a9\2\u0612\u0614\7\u01b2\2")
        buf.write("\2\u0613\u0611\3\2\2\2\u0613\u0612\3\2\2\2\u0613\u0614")
        buf.write("\3\2\2\2\u0614\u0616\3\2\2\2\u0615\u0617\7\u01cd\2\2\u0616")
        buf.write("\u0615\3\2\2\2\u0616\u0617\3\2\2\2\u0617\u0629\3\2\2\2")
        buf.write("\u0618\u061a\7\u0099\2\2\u0619\u061b\7\u01a8\2\2\u061a")
        buf.write("\u0619\3\2\2\2\u061a\u061b\3\2\2\2\u061b\u061d\3\2\2\2")
        buf.write("\u061c\u061e\7\u01cd\2\2\u061d\u061c\3\2\2\2\u061d\u061e")
        buf.write("\3\2\2\2\u061e\u0629\3\2\2\2\u061f\u0620\7\u009d\2\2\u0620")
        buf.write("\u0623\t\31\2\2\u0621\u0624\5\u0150\u00a9\2\u0622\u0624")
        buf.write("\7\u01b2\2\2\u0623\u0621\3\2\2\2\u0623\u0622\3\2\2\2\u0623")
        buf.write("\u0624\3\2\2\2\u0624\u0626\3\2\2\2\u0625\u0627\7\u01cd")
        buf.write("\2\2\u0626\u0625\3\2\2\2\u0626\u0627\3\2\2\2\u0627\u0629")
        buf.write("\3\2\2\2\u0628\u05db\3\2\2\2\u0628\u05e5\3\2\2\2\u0628")
        buf.write("\u05f5\3\2\2\2\u0628\u0608\3\2\2\2\u0628\u060f\3\2\2\2")
        buf.write("\u0628\u0618\3\2\2\2\u0628\u061f\3\2\2\2\u0629\u0085\3")
        buf.write("\2\2\2\u062a\u062c\7\u011d\2\2\u062b\u062d\7\u01b3\2\2")
        buf.write("\u062c\u062b\3\2\2\2\u062c\u062d\3\2\2\2\u062d\u0087\3")
        buf.write("\2\2\2\u062e\u062f\7\u00bf\2\2\u062f\u0631\5\u0150\u00a9")
        buf.write("\2\u0630\u0632\7\u01cd\2\2\u0631\u0630\3\2\2\2\u0631\u0632")
        buf.write("\3\2\2\2\u0632\u0089\3\2\2\2\u0633\u0634\7B\2\2\u0634")
        buf.write("\u0635\7\t\2\2\u0635\u0636\t\32\2\2\u0636\u008b\3\2\2")
        buf.write("\2\u0637\u0639\7\u01b2\2\2\u0638\u063a\7\t\2\2\u0639\u0638")
        buf.write("\3\2\2\2\u0639\u063a\3\2\2\2\u063a\u063b\3\2\2\2\u063b")
        buf.write("\u063e\5\u016e\u00b8\2\u063c\u063d\7\u01b9\2\2\u063d\u063f")
        buf.write("\5\u00a8U\2\u063e\u063c\3\2\2\2\u063e\u063f\3\2\2\2\u063f")
        buf.write("\u008d\3\2\2\2\u0640\u0641\7\u00ac\2\2\u0641\u0642\7\u01ca")
        buf.write("\2\2\u0642\u0643\5\u0090I\2\u0643\u0644\7\u01cb\2\2\u0644")
        buf.write("\u008f\3\2\2\2\u0645\u064c\5\u0092J\2\u0646\u0648\7\u01cc")
        buf.write("\2\2\u0647\u0646\3\2\2\2\u0647\u0648\3\2\2\2\u0648\u0649")
        buf.write("\3\2\2\2\u0649\u064b\5\u0092J\2\u064a\u0647\3\2\2\2\u064b")
        buf.write("\u064e\3\2\2\2\u064c\u064a\3\2\2\2\u064c\u064d\3\2\2\2")
        buf.write("\u064d\u0091\3\2\2\2\u064e\u064c\3\2\2\2\u064f\u0652\5")
        buf.write("\u0094K\2\u0650\u0652\5\u0098M\2\u0651\u064f\3\2\2\2\u0651")
        buf.write("\u0650\3\2\2\2\u0652\u0093\3\2\2\2\u0653\u0657\5\u0150")
        buf.write("\u00a9\2\u0654\u0658\5\u016e\u00b8\2\u0655\u0656\7\t\2")
        buf.write("\2\u0656\u0658\5\u00a8U\2\u0657\u0654\3\2\2\2\u0657\u0655")
        buf.write("\3\2\2\2\u0658\u065b\3\2\2\2\u0659\u065a\7\35\2\2\u065a")
        buf.write("\u065c\5\u0150\u00a9\2\u065b\u0659\3\2\2\2\u065b\u065c")
        buf.write("\3\2\2\2\u065c\u065e\3\2\2\2\u065d\u065f\5\u0146\u00a4")
        buf.write("\2\u065e\u065d\3\2\2\2\u065e\u065f\3\2\2\2\u065f\u0677")
        buf.write("\3\2\2\2\u0660\u0661\7!\2\2\u0661\u0663\5\u0150\u00a9")
        buf.write("\2\u0662\u0660\3\2\2\2\u0662\u0663\3\2\2\2\u0663\u0664")
        buf.write("\3\2\2\2\u0664\u0665\7\63\2\2\u0665\u0668\5\u00aaV\2\u0666")
        buf.write("\u0667\7\u00c9\2\2\u0667\u0669\7\u00c1\2\2\u0668\u0666")
        buf.write("\3\2\2\2\u0668\u0669\3\2\2\2\u0669\u0678\3\2\2\2\u066a")
        buf.write("\u0670\7V\2\2\u066b\u066c\7\u01ca\2\2\u066c\u066d\7\u01b3")
        buf.write("\2\2\u066d\u066e\7\u01cc\2\2\u066e\u066f\7\u01b3\2\2\u066f")
        buf.write("\u0671\7\u01cb\2\2\u0670\u066b\3\2\2\2\u0670\u0671\3\2")
        buf.write("\2\2\u0671\u0675\3\2\2\2\u0672\u0673\7p\2\2\u0673\u0674")
        buf.write("\7J\2\2\u0674\u0676\7\u0091\2\2\u0675\u0672\3\2\2\2\u0675")
        buf.write("\u0676\3\2\2\2\u0676\u0678\3\2\2\2\u0677\u0662\3\2\2\2")
        buf.write("\u0677\u066a\3\2\2\2\u0677\u0678\3\2\2\2\u0678\u067a\3")
        buf.write("\2\2\2\u0679\u067b\7\u009b\2\2\u067a\u0679\3\2\2\2\u067a")
        buf.write("\u067b\3\2\2\2\u067b\u067f\3\2\2\2\u067c\u067e\5\u0096")
        buf.write("L\2\u067d\u067c\3\2\2\2\u067e\u0681\3\2\2\2\u067f\u067d")
        buf.write("\3\2\2\2\u067f\u0680\3\2\2\2\u0680\u0095\3\2\2\2\u0681")
        buf.write("\u067f\3\2\2\2\u0682\u0683\7!\2\2\u0683\u0685\5\u0150")
        buf.write("\u00a9\2\u0684\u0682\3\2\2\2\u0684\u0685\3\2\2\2\u0685")
        buf.write("\u0687\3\2\2\2\u0686\u0688\5\u0146\u00a4\2\u0687\u0686")
        buf.write("\3\2\2\2\u0687\u0688\3\2\2\2\u0688\u069e\3\2\2\2\u0689")
        buf.write("\u068a\7\u0087\2\2\u068a\u068d\7c\2\2\u068b\u068d\7\u00bb")
        buf.write("\2\2\u068c\u0689\3\2\2\2\u068c\u068b\3\2\2\2\u068d\u068f")
        buf.write("\3\2\2\2\u068e\u0690\5\u0144\u00a3\2\u068f\u068e\3\2\2")
        buf.write("\2\u068f\u0690\3\2\2\2\u0690\u0692\3\2\2\2\u0691\u0693")
        buf.write("\5\u009aN\2\u0692\u0691\3\2\2\2\u0692\u0693\3\2\2\2\u0693")
        buf.write("\u069f\3\2\2\2\u0694\u0698\7\30\2\2\u0695\u0696\7p\2\2")
        buf.write("\u0696\u0697\7J\2\2\u0697\u0699\7\u0091\2\2\u0698\u0695")
        buf.write("\3\2\2\2\u0698\u0699\3\2\2\2\u0699\u069a\3\2\2\2\u069a")
        buf.write("\u069b\7\u01ca\2\2\u069b\u069c\5\u00b6\\\2\u069c\u069d")
        buf.write("\7\u01cb\2\2\u069d\u069f\3\2\2\2\u069e\u068c\3\2\2\2\u069e")
        buf.write("\u0694\3\2\2\2\u069f\u0097\3\2\2\2\u06a0\u06a1\7!\2\2")
        buf.write("\u06a1\u06a3\5\u0150\u00a9\2\u06a2\u06a0\3\2\2\2\u06a2")
        buf.write("\u06a3\3\2\2\2\u06a3\u06c3\3\2\2\2\u06a4\u06a5\7\u0087")
        buf.write("\2\2\u06a5\u06a8\7c\2\2\u06a6\u06a8\7\u00bb\2\2\u06a7")
        buf.write("\u06a4\3\2\2\2\u06a7\u06a6\3\2\2\2\u06a8\u06aa\3\2\2\2")
        buf.write("\u06a9\u06ab\5\u0144\u00a3\2\u06aa\u06a9\3\2\2\2\u06aa")
        buf.write("\u06ab\3\2\2\2\u06ab\u06ac\3\2\2\2\u06ac\u06ad\7\u01ca")
        buf.write("\2\2\u06ad\u06af\5\u013e\u00a0\2\u06ae\u06b0\t\7\2\2\u06af")
        buf.write("\u06ae\3\2\2\2\u06af\u06b0\3\2\2\2\u06b0\u06b1\3\2\2\2")
        buf.write("\u06b1\u06b3\7\u01cb\2\2\u06b2\u06b4\5\u009aN\2\u06b3")
        buf.write("\u06b2\3\2\2\2\u06b3\u06b4\3\2\2\2\u06b4\u06b7\3\2\2\2")
        buf.write("\u06b5\u06b6\7w\2\2\u06b6\u06b8\5\u0150\u00a9\2\u06b7")
        buf.write("\u06b5\3\2\2\2\u06b7\u06b8\3\2\2\2\u06b8\u06c4\3\2\2\2")
        buf.write("\u06b9\u06bd\7\30\2\2\u06ba\u06bb\7p\2\2\u06bb\u06bc\7")
        buf.write("J\2\2\u06bc\u06be\7\u0091\2\2\u06bd\u06ba\3\2\2\2\u06bd")
        buf.write("\u06be\3\2\2\2\u06be\u06bf\3\2\2\2\u06bf\u06c0\7\u01ca")
        buf.write("\2\2\u06c0\u06c1\5\u00b6\\\2\u06c1\u06c2\7\u01cb\2\2\u06c2")
        buf.write("\u06c4\3\2\2\2\u06c3\u06a7\3\2\2\2\u06c3\u06b9\3\2\2\2")
        buf.write("\u06c4\u0099\3\2\2\2\u06c5\u06c6\7\u00c9\2\2\u06c6\u06c7")
        buf.write("\7\u01ca\2\2\u06c7\u06cc\5\u009cO\2\u06c8\u06c9\7\u01cc")
        buf.write("\2\2\u06c9\u06cb\5\u009cO\2\u06ca\u06c8\3\2\2\2\u06cb")
        buf.write("\u06ce\3\2\2\2\u06cc\u06ca\3\2\2\2\u06cc\u06cd\3\2\2\2")
        buf.write("\u06cd\u06cf\3\2\2\2\u06ce\u06cc\3\2\2\2\u06cf\u06d0\7")
        buf.write("\u01cb\2\2\u06d0\u009b\3\2\2\2\u06d1\u06d2\5\u0152\u00aa")
        buf.write("\2\u06d2\u06d6\7\u01b9\2\2\u06d3\u06d7\5\u0152\u00aa\2")
        buf.write("\u06d4\u06d7\5\u0142\u00a2\2\u06d5\u06d7\7\u01b3\2\2\u06d6")
        buf.write("\u06d3\3\2\2\2\u06d6\u06d4\3\2\2\2\u06d6\u06d5\3\2\2\2")
        buf.write("\u06d7\u009d\3\2\2\2\u06d8\u06d9\7\62\2\2\u06d9\u06f9")
        buf.write("\5\u0140\u00a1\2\u06da\u06e4\7.\2\2\u06db\u06e2\5\u00a0")
        buf.write("Q\2\u06dc\u06dd\7J\2\2\u06dd\u06e0\7\u00bd\2\2\u06de\u06df")
        buf.write("\7t\2\2\u06df\u06e1\5\u013e\u00a0\2\u06e0\u06de\3\2\2")
        buf.write("\2\u06e0\u06e1\3\2\2\2\u06e1\u06e3\3\2\2\2\u06e2\u06dc")
        buf.write("\3\2\2\2\u06e2\u06e3\3\2\2\2\u06e3\u06e5\3\2\2\2\u06e4")
        buf.write("\u06db\3\2\2\2\u06e4\u06e5\3\2\2\2\u06e5\u06fa\3\2\2\2")
        buf.write("\u06e6\u06e8\7\u012a\2\2\u06e7\u06e6\3\2\2\2\u06e7\u06e8")
        buf.write("\3\2\2\2\u06e8\u06ea\3\2\2\2\u06e9\u06eb\7\u017c\2\2\u06ea")
        buf.write("\u06e9\3\2\2\2\u06ea\u06eb\3\2\2\2\u06eb\u06ec\3\2\2\2")
        buf.write("\u06ec\u06ed\7.\2\2\u06ed\u06ee\7J\2\2\u06ee\u06f7\5\32")
        buf.write("\16\2\u06ef\u06f5\7J\2\2\u06f0\u06f1\7\u008d\2\2\u06f1")
        buf.write("\u06f6\7\u0156\2\2\u06f2\u06f6\7\u00bd\2\2\u06f3\u06f4")
        buf.write("\7t\2\2\u06f4\u06f6\5\u013e\u00a0\2\u06f5\u06f0\3\2\2")
        buf.write("\2\u06f5\u06f2\3\2\2\2\u06f5\u06f3\3\2\2\2\u06f6\u06f8")
        buf.write("\3\2\2\2\u06f7\u06ef\3\2\2\2\u06f7\u06f8\3\2\2\2\u06f8")
        buf.write("\u06fa\3\2\2\2\u06f9\u06da\3\2\2\2\u06f9\u06e7\3\2\2\2")
        buf.write("\u06fa\u06fc\3\2\2\2\u06fb\u06fd\7\u01cd\2\2\u06fc\u06fb")
        buf.write("\3\2\2\2\u06fc\u06fd\3\2\2\2\u06fd\u009f\3\2\2\2\u06fe")
        buf.write("\u0700\t\r\2\2\u06ff\u06fe\3\2\2\2\u06ff\u0700\3\2\2\2")
        buf.write("\u0700\u0702\3\2\2\2\u0701\u0703\t\33\2\2\u0702\u0701")
        buf.write("\3\2\2\2\u0702\u0703\3\2\2\2\u0703\u0705\3\2\2\2\u0704")
        buf.write("\u0706\t\34\2\2\u0705\u0704\3\2\2\2\u0705\u0706\3\2\2")
        buf.write("\2\u0706\u0708\3\2\2\2\u0707\u0709\t\35\2\2\u0708\u0707")
        buf.write("\3\2\2\2\u0708\u0709\3\2\2\2\u0709\u070b\3\2\2\2\u070a")
        buf.write("\u070c\7\u019e\2\2\u070b\u070a\3\2\2\2\u070b\u070c\3\2")
        buf.write("\2\2\u070c\u070d\3\2\2\2\u070d\u070e\7J\2\2\u070e\u070f")
        buf.write("\5\32\16\2\u070f\u00a1\3\2\2\2\u0710\u071a\7F\2\2\u0711")
        buf.write("\u0718\7l\2\2\u0712\u0718\7\u0163\2\2\u0713\u0718\7\u0114")
        buf.write("\2\2\u0714\u0718\7\u0133\2\2\u0715\u0716\t\36\2\2\u0716")
        buf.write("\u0718\5\u00a8U\2\u0717\u0711\3\2\2\2\u0717\u0712\3\2")
        buf.write("\2\2\u0717\u0713\3\2\2\2\u0717\u0714\3\2\2\2\u0717\u0715")
        buf.write("\3\2\2\2\u0717\u0718\3\2\2\2\u0718\u0719\3\2\2\2\u0719")
        buf.write("\u071b\7O\2\2\u071a\u0717\3\2\2\2\u071a\u071b\3\2\2\2")
        buf.write("\u071b\u071d\3\2\2\2\u071c\u071e\7\u011c\2\2\u071d\u071c")
        buf.write("\3\2\2\2\u071d\u071e\3\2\2\2\u071e\u071f\3\2\2\2\u071f")
        buf.write("\u0729\5\u0140\u00a1\2\u0720\u0721\7`\2\2\u0721\u0726")
        buf.write("\7\u01b2\2\2\u0722\u0723\7\u01cc\2\2\u0723\u0725\7\u01b2")
        buf.write("\2\2\u0724\u0722\3\2\2\2\u0725\u0728\3\2\2\2\u0726\u0724")
        buf.write("\3\2\2\2\u0726\u0727\3\2\2\2\u0727\u072a\3\2\2\2\u0728")
        buf.write("\u0726\3\2\2\2\u0729\u0720\3\2\2\2\u0729\u072a\3\2\2\2")
        buf.write("\u072a\u072c\3\2\2\2\u072b\u072d\7\u01cd\2\2\u072c\u072b")
        buf.write("\3\2\2\2\u072c\u072d\3\2\2\2\u072d\u00a3\3\2\2\2\u072e")
        buf.write("\u072f\7\u00a5\2\2\u072f\u0733\5\u0150\u00a9\2\u0730\u0734")
        buf.write("\5\u0150\u00a9\2\u0731\u0734\5\u00a6T\2\u0732\u0734\5")
        buf.write("\u0142\u00a2\2\u0733\u0730\3\2\2\2\u0733\u0731\3\2\2\2")
        buf.write("\u0733\u0732\3\2\2\2\u0734\u0736\3\2\2\2\u0735\u0737\7")
        buf.write("\u01cd\2\2\u0736\u0735\3\2\2\2\u0736\u0737\3\2\2\2\u0737")
        buf.write("\u075e\3\2\2\2\u0738\u0739\7\u00a5\2\2\u0739\u073a\7\u00b3")
        buf.write("\2\2\u073a\u073b\7\u012c\2\2\u073b\u0744\7\u0136\2\2\u073c")
        buf.write("\u073d\7\u008d\2\2\u073d\u0745\7\u01a0\2\2\u073e\u073f")
        buf.write("\7\u008d\2\2\u073f\u0745\7\u00ea\2\2\u0740\u0741\7\u0171")
        buf.write("\2\2\u0741\u0745\7\u008d\2\2\u0742\u0745\7\u0187\2\2\u0743")
        buf.write("\u0745\7\u0180\2\2\u0744\u073c\3\2\2\2\u0744\u073e\3\2")
        buf.write("\2\2\u0744\u0740\3\2\2\2\u0744\u0742\3\2\2\2\u0744\u0743")
        buf.write("\3\2\2\2\u0745\u0747\3\2\2\2\u0746\u0748\7\u01cd\2\2\u0747")
        buf.write("\u0746\3\2\2\2\u0747\u0748\3\2\2\2\u0748\u075e\3\2\2\2")
        buf.write("\u0749\u074a\7\u00a5\2\2\u074a\u074b\7X\2\2\u074b\u074c")
        buf.write("\5\u0134\u009b\2\u074c\u074e\5\u0142\u00a2\2\u074d\u074f")
        buf.write("\7\u01cd\2\2\u074e\u074d\3\2\2\2\u074e\u074f\3\2\2\2\u074f")
        buf.write("\u075e\3\2\2\2\u0750\u0751\7\u00a5\2\2\u0751\u0752\7\u00d0")
        buf.write("\2\2\u0752\u075e\5\u0142\u00a2\2\u0753\u0754\7\u00a5\2")
        buf.write("\2\u0754\u0755\7\u0165\2\2\u0755\u075e\5\u0142\u00a2\2")
        buf.write("\u0756\u0757\7\u00a5\2\2\u0757\u0758\7\u00d2\2\2\u0758")
        buf.write("\u075e\5\u0142\u00a2\2\u0759\u075a\7\u00a5\2\2\u075a\u075b")
        buf.write("\7\u00a9\2\2\u075b\u075c\t\37\2\2\u075c\u075e\5\u0142")
        buf.write("\u00a2\2\u075d\u072e\3\2\2\2\u075d\u0738\3\2\2\2\u075d")
        buf.write("\u0749\3\2\2\2\u075d\u0750\3\2\2\2\u075d\u0753\3\2\2\2")
        buf.write("\u075d\u0756\3\2\2\2\u075d\u0759\3\2\2\2\u075e\u00a5\3")
        buf.write("\2\2\2\u075f\u0762\5\u014c\u00a7\2\u0760\u0762\7\u01b2")
        buf.write("\2\2\u0761\u075f\3\2\2\2\u0761\u0760\3\2\2\2\u0762\u00a7")
        buf.write("\3\2\2\2\u0763\u0764\bU\1\2\u0764\u0793\7\63\2\2\u0765")
        buf.write("\u0793\7q\2\2\u0766\u0793\7\u01b2\2\2\u0767\u0793\5\u014c")
        buf.write("\u00a7\2\u0768\u0793\5\u00f8}\2\u0769\u076a\7\25\2\2\u076a")
        buf.write("\u076c\5\u00a8U\2\u076b\u076d\5\u00fa~\2\u076c\u076b\3")
        buf.write("\2\2\2\u076d\u076e\3\2\2\2\u076e\u076c\3\2\2\2\u076e\u076f")
        buf.write("\3\2\2\2\u076f\u0772\3\2\2\2\u0770\u0771\7=\2\2\u0771")
        buf.write("\u0773\5\u00a8U\2\u0772\u0770\3\2\2\2\u0772\u0773\3\2")
        buf.write("\2\2\u0773\u0774\3\2\2\2\u0774\u0775\7>\2\2\u0775\u0793")
        buf.write("\3\2\2\2\u0776\u0778\7\25\2\2\u0777\u0779\5\u00fc\177")
        buf.write("\2\u0778\u0777\3\2\2\2\u0779\u077a\3\2\2\2\u077a\u0778")
        buf.write("\3\2\2\2\u077a\u077b\3\2\2\2\u077b\u077e\3\2\2\2\u077c")
        buf.write("\u077d\7=\2\2\u077d\u077f\5\u00a8U\2\u077e\u077c\3\2\2")
        buf.write("\2\u077e\u077f\3\2\2\2\u077f\u0780\3\2\2\2\u0780\u0781")
        buf.write("\7>\2\2\u0781\u0793\3\2\2\2\u0782\u0793\5\u013c\u009f")
        buf.write("\2\u0783\u0784\7\u01ca\2\2\u0784\u0785\5\u00a8U\2\u0785")
        buf.write("\u0786\7\u01cb\2\2\u0786\u0793\3\2\2\2\u0787\u0788\7\u01ca")
        buf.write("\2\2\u0788\u0789\5\u00acW\2\u0789\u078a\7\u01cb\2\2\u078a")
        buf.write("\u0793\3\2\2\2\u078b\u078c\7\u01d4\2\2\u078c\u0793\5\u00a8")
        buf.write("U\n\u078d\u078e\t \2\2\u078e\u0793\5\u00a8U\b\u078f\u0793")
        buf.write("\5\u011c\u008f\2\u0790\u0793\5\u016a\u00b6\2\u0791\u0793")
        buf.write("\5\u016c\u00b7\2\u0792\u0763\3\2\2\2\u0792\u0765\3\2\2")
        buf.write("\2\u0792\u0766\3\2\2\2\u0792\u0767\3\2\2\2\u0792\u0768")
        buf.write("\3\2\2\2\u0792\u0769\3\2\2\2\u0792\u0776\3\2\2\2\u0792")
        buf.write("\u0782\3\2\2\2\u0792\u0783\3\2\2\2\u0792\u0787\3\2\2\2")
        buf.write("\u0792\u078b\3\2\2\2\u0792\u078d\3\2\2\2\u0792\u078f\3")
        buf.write("\2\2\2\u0792\u0790\3\2\2\2\u0792\u0791\3\2\2\2\u0793\u07a8")
        buf.write("\3\2\2\2\u0794\u0795\f\20\2\2\u0795\u0796\7\u00d6\2\2")
        buf.write("\u0796\u0797\7\u0196\2\2\u0797\u0798\7\u01ab\2\2\u0798")
        buf.write("\u07a7\5\u00a8U\21\u0799\u079a\f\t\2\2\u079a\u079b\t!")
        buf.write("\2\2\u079b\u07a7\5\u00a8U\n\u079c\u079d\f\7\2\2\u079d")
        buf.write("\u079e\t\"\2\2\u079e\u07a7\5\u00a8U\b\u079f\u07a0\f\6")
        buf.write("\2\2\u07a0\u07a1\5\u0154\u00ab\2\u07a1\u07a2\5\u00a8U")
        buf.write("\7\u07a2\u07a7\3\2\2\2\u07a3\u07a4\f\21\2\2\u07a4\u07a5")
        buf.write("\7\35\2\2\u07a5\u07a7\5\u0150\u00a9\2\u07a6\u0794\3\2")
        buf.write("\2\2\u07a6\u0799\3\2\2\2\u07a6\u079c\3\2\2\2\u07a6\u079f")
        buf.write("\3\2\2\2\u07a6\u07a3\3\2\2\2\u07a7\u07aa\3\2\2\2\u07a8")
        buf.write("\u07a6\3\2\2\2\u07a8\u07a9\3\2\2\2\u07a9\u00a9\3\2\2\2")
        buf.write("\u07aa\u07a8\3\2\2\2\u07ab\u07b4\7q\2\2\u07ac\u07b4\5")
        buf.write("\u014c\u00a7\2\u07ad\u07b4\5\u00f8}\2\u07ae\u07b4\7\u01b2")
        buf.write("\2\2\u07af\u07b0\7\u01ca\2\2\u07b0\u07b1\5\u00aaV\2\u07b1")
        buf.write("\u07b2\7\u01cb\2\2\u07b2\u07b4\3\2\2\2\u07b3\u07ab\3\2")
        buf.write("\2\2\u07b3\u07ac\3\2\2\2\u07b3\u07ad\3\2\2\2\u07b3\u07ae")
        buf.write("\3\2\2\2\u07b3\u07af\3\2\2\2\u07b4\u00ab\3\2\2\2\u07b5")
        buf.write("\u07b6\5\32\16\2\u07b6\u00ad\3\2\2\2\u07b7\u07ba\7\u00c9")
        buf.write("\2\2\u07b8\u07b9\7\u01aa\2\2\u07b9\u07bb\7\u01cc\2\2\u07ba")
        buf.write("\u07b8\3\2\2\2\u07ba\u07bb\3\2\2\2\u07bb\u07bc\3\2\2\2")
        buf.write("\u07bc\u07c1\5\u00b0Y\2\u07bd\u07be\7\u01cc\2\2\u07be")
        buf.write("\u07c0\5\u00b0Y\2\u07bf\u07bd\3\2\2\2\u07c0\u07c3\3\2")
        buf.write("\2\2\u07c1\u07bf\3\2\2\2\u07c1\u07c2\3\2\2\2\u07c2\u00af")
        buf.write("\3\2\2\2\u07c3\u07c1\3\2\2\2\u07c4\u07c9\5\u0150\u00a9")
        buf.write("\2\u07c5\u07c6\7\u01ca\2\2\u07c6\u07c7\5\u013e\u00a0\2")
        buf.write("\u07c7\u07c8\7\u01cb\2\2\u07c8\u07ca\3\2\2\2\u07c9\u07c5")
        buf.write("\3\2\2\2\u07c9\u07ca\3\2\2\2\u07ca\u07cb\3\2\2\2\u07cb")
        buf.write("\u07cc\7\t\2\2\u07cc\u07cd\7\u01ca\2\2\u07cd\u07ce\5\32")
        buf.write("\16\2\u07ce\u07cf\7\u01cb\2\2\u07cf\u00b1\3\2\2\2\u07d0")
        buf.write("\u07d3\5\u013c\u009f\2\u07d1\u07d3\7\u01b2\2\2\u07d2\u07d0")
        buf.write("\3\2\2\2\u07d2\u07d1\3\2\2\2\u07d3\u07d6\3\2\2\2\u07d4")
        buf.write("\u07d7\7\u01b9\2\2\u07d5\u07d7\5\u0156\u00ac\2\u07d6\u07d4")
        buf.write("\3\2\2\2\u07d6\u07d5\3\2\2\2\u07d7\u07d8\3\2\2\2\u07d8")
        buf.write("\u07e1\5\u00a8U\2\u07d9\u07da\5\u0150\u00a9\2\u07da\u07db")
        buf.write("\7\u01c5\2\2\u07db\u07dc\5\u0150\u00a9\2\u07dc\u07dd\7")
        buf.write("\u01ca\2\2\u07dd\u07de\5\u010e\u0088\2\u07de\u07df\7\u01cb")
        buf.write("\2\2\u07df\u07e1\3\2\2\2\u07e0\u07d2\3\2\2\2\u07e0\u07d9")
        buf.write("\3\2\2\2\u07e1\u00b3\3\2\2\2\u07e2\u07e7\5\u00b6\\\2\u07e3")
        buf.write("\u07e4\7\u01cc\2\2\u07e4\u07e6\5\u00b6\\\2\u07e5\u07e3")
        buf.write("\3\2\2\2\u07e6\u07e9\3\2\2\2\u07e7\u07e5\3\2\2\2\u07e7")
        buf.write("\u07e8\3\2\2\2\u07e8\u00b5\3\2\2\2\u07e9\u07e7\3\2\2\2")
        buf.write("\u07ea\u07eb\b\\\1\2\u07eb\u07ec\5\u00b8]\2\u07ec\u07f5")
        buf.write("\3\2\2\2\u07ed\u07ee\f\5\2\2\u07ee\u07ef\7\7\2\2\u07ef")
        buf.write("\u07f4\5\u00b6\\\6\u07f0\u07f1\f\4\2\2\u07f1\u07f2\7~")
        buf.write("\2\2\u07f2\u07f4\5\u00b6\\\5\u07f3\u07ed\3\2\2\2\u07f3")
        buf.write("\u07f0\3\2\2\2\u07f4\u07f7\3\2\2\2\u07f5\u07f3\3\2\2\2")
        buf.write("\u07f5\u07f6\3\2\2\2\u07f6\u00b7\3\2\2\2\u07f7\u07f5\3")
        buf.write("\2\2\2\u07f8\u07f9\7p\2\2\u07f9\u0833\5\u00b8]\2\u07fa")
        buf.write("\u07fb\7C\2\2\u07fb\u07fc\7\u01ca\2\2\u07fc\u07fd\5\u00ac")
        buf.write("W\2\u07fd\u07fe\7\u01cb\2\2\u07fe\u0833\3\2\2\2\u07ff")
        buf.write("\u0800\5\u00a8U\2\u0800\u0801\5\u0154\u00ab\2\u0801\u0802")
        buf.write("\5\u00a8U\2\u0802\u0833\3\2\2\2\u0803\u0804\5\u00a8U\2")
        buf.write("\u0804\u0805\5\u0154\u00ab\2\u0805\u0806\t#\2\2\u0806")
        buf.write("\u0807\7\u01ca\2\2\u0807\u0808\5\u00acW\2\u0808\u0809")
        buf.write("\7\u01cb\2\2\u0809\u0833\3\2\2\2\u080a\u080c\5\u00a8U")
        buf.write("\2\u080b\u080d\7p\2\2\u080c\u080b\3\2\2\2\u080c\u080d")
        buf.write("\3\2\2\2\u080d\u080e\3\2\2\2\u080e\u080f\7\16\2\2\u080f")
        buf.write("\u0810\5\u00a8U\2\u0810\u0811\7\7\2\2\u0811\u0812\5\u00a8")
        buf.write("U\2\u0812\u0833\3\2\2\2\u0813\u0815\5\u00a8U\2\u0814\u0816")
        buf.write("\7p\2\2\u0815\u0814\3\2\2\2\u0815\u0816\3\2\2\2\u0816")
        buf.write("\u0817\3\2\2\2\u0817\u0818\7[\2\2\u0818\u081b\7\u01ca")
        buf.write("\2\2\u0819\u081c\5\u00acW\2\u081a\u081c\5\u010e\u0088")
        buf.write("\2\u081b\u0819\3\2\2\2\u081b\u081a\3\2\2\2\u081c\u081d")
        buf.write("\3\2\2\2\u081d\u081e\7\u01cb\2\2\u081e\u0833\3\2\2\2\u081f")
        buf.write("\u0821\5\u00a8U\2\u0820\u0822\7p\2\2\u0821\u0820\3\2\2")
        buf.write("\2\u0821\u0822\3\2\2\2\u0822\u0823\3\2\2\2\u0823\u0824")
        buf.write("\7f\2\2\u0824\u0827\5\u00a8U\2\u0825\u0826\7@\2\2\u0826")
        buf.write("\u0828\5\u00a8U\2\u0827\u0825\3\2\2\2\u0827\u0828\3\2")
        buf.write("\2\2\u0828\u0833\3\2\2\2\u0829\u082a\5\u00a8U\2\u082a")
        buf.write("\u082b\7a\2\2\u082b\u082c\5\u0146\u00a4\2\u082c\u0833")
        buf.write("\3\2\2\2\u082d\u082e\7\u01ca\2\2\u082e\u082f\5\u00b6\\")
        buf.write("\2\u082f\u0830\7\u01cb\2\2\u0830\u0833\3\2\2\2\u0831\u0833")
        buf.write("\7\u01b3\2\2\u0832\u07f8\3\2\2\2\u0832\u07fa\3\2\2\2\u0832")
        buf.write("\u07ff\3\2\2\2\u0832\u0803\3\2\2\2\u0832\u080a\3\2\2\2")
        buf.write("\u0832\u0813\3\2\2\2\u0832\u081f\3\2\2\2\u0832\u0829\3")
        buf.write("\2\2\2\u0832\u082d\3\2\2\2\u0832\u0831\3\2\2\2\u0833\u00b9")
        buf.write("\3\2\2\2\u0834\u0835\b^\1\2\u0835\u0836\7\u01ca\2\2\u0836")
        buf.write("\u0837\5\u00ba^\2\u0837\u0838\7\u01cb\2\2\u0838\u083b")
        buf.write("\3\2\2\2\u0839\u083b\5\u00be`\2\u083a\u0834\3\2\2\2\u083a")
        buf.write("\u0839\3\2\2\2\u083b\u0842\3\2\2\2\u083c\u083d\f\4\2\2")
        buf.write("\u083d\u083e\5\u00bc_\2\u083e\u083f\5\u00ba^\5\u083f\u0841")
        buf.write("\3\2\2\2\u0840\u083c\3\2\2\2\u0841\u0844\3\2\2\2\u0842")
        buf.write("\u0840\3\2\2\2\u0842\u0843\3\2\2\2\u0843\u00bb\3\2\2\2")
        buf.write("\u0844\u0842\3\2\2\2\u0845\u0847\7\u00ba\2\2\u0846\u0848")
        buf.write("\7\5\2\2\u0847\u0846\3\2\2\2\u0847\u0848\3\2\2\2\u0848")
        buf.write("\u084c\3\2\2\2\u0849\u084c\7A\2\2\u084a\u084c\7_\2\2\u084b")
        buf.write("\u0845\3\2\2\2\u084b\u0849\3\2\2\2\u084b\u084a\3\2\2\2")
        buf.write("\u084c\u00bd\3\2\2\2\u084d\u084f\7\u00a0\2\2\u084e\u0850")
        buf.write("\t$\2\2\u084f\u084e\3\2\2\2\u084f\u0850\3\2\2\2\u0850")
        buf.write("\u0852\3\2\2\2\u0851\u0853\5\u00c4c\2\u0852\u0851\3\2")
        buf.write("\2\2\u0852\u0853\3\2\2\2\u0853\u0854\3\2\2\2\u0854\u0857")
        buf.write("\5\u00dan\2\u0855\u0856\7`\2\2\u0856\u0858\5\u0134\u009b")
        buf.write("\2\u0857\u0855\3\2\2\2\u0857\u0858\3\2\2\2\u0858\u085b")
        buf.write("\3\2\2\2\u0859\u085a\7O\2\2\u085a\u085c\5\u00dep\2\u085b")
        buf.write("\u0859\3\2\2\2\u085b\u085c\3\2\2\2\u085c\u085f\3\2\2\2")
        buf.write("\u085d\u085e\7\u00c7\2\2\u085e\u0860\5\u00b6\\\2\u085f")
        buf.write("\u085d\3\2\2\2\u085f\u0860\3\2\2\2\u0860\u086b\3\2\2\2")
        buf.write("\u0861\u0862\7T\2\2\u0862\u0863\7\22\2\2\u0863\u0868\5")
        buf.write("\u00d2j\2\u0864\u0865\7\u01cc\2\2\u0865\u0867\5\u00d2")
        buf.write("j\2\u0866\u0864\3\2\2\2\u0867\u086a\3\2\2\2\u0868\u0866")
        buf.write("\3\2\2\2\u0868\u0869\3\2\2\2\u0869\u086c\3\2\2\2\u086a")
        buf.write("\u0868\3\2\2\2\u086b\u0861\3\2\2\2\u086b\u086c\3\2\2\2")
        buf.write("\u086c\u086e\3\2\2\2\u086d\u086f\5\u00c0a\2\u086e\u086d")
        buf.write("\3\2\2\2\u086e\u086f\3\2\2\2\u086f\u0872\3\2\2\2\u0870")
        buf.write("\u0871\7\u00c9\2\2\u0871\u0873\t%\2\2\u0872\u0870\3\2")
        buf.write("\2\2\u0872\u0873\3\2\2\2\u0873\u0876\3\2\2\2\u0874\u0875")
        buf.write("\7U\2\2\u0875\u0877\5\u00b6\\\2\u0876\u0874\3\2\2\2\u0876")
        buf.write("\u0877\3\2\2\2\u0877\u00bf\3\2\2\2\u0878\u0879\7T\2\2")
        buf.write("\u0879\u087a\7\22\2\2\u087a\u087b\7\u011e\2\2\u087b\u087c")
        buf.write("\7\u0181\2\2\u087c\u087d\7\u01ca\2\2\u087d\u0882\5\u00c2")
        buf.write("b\2\u087e\u087f\7\u01cc\2\2\u087f\u0881\5\u00c2b\2\u0880")
        buf.write("\u087e\3\2\2\2\u0881\u0884\3\2\2\2\u0882\u0880\3\2\2\2")
        buf.write("\u0882\u0883\3\2\2\2\u0883\u0885\3\2\2\2\u0884\u0882\3")
        buf.write("\2\2\2\u0885\u0886\7\u01cb\2\2\u0886\u00c1\3\2\2\2\u0887")
        buf.write("\u0888\7\u01ca\2\2\u0888\u0896\7\u01cb\2\2\u0889\u0896")
        buf.write("\5\u00d2j\2\u088a\u088b\7\u01ca\2\2\u088b\u0890\5\u00d2")
        buf.write("j\2\u088c\u088d\7\u01cc\2\2\u088d\u088f\5\u00d2j\2\u088e")
        buf.write("\u088c\3\2\2\2\u088f\u0892\3\2\2\2\u0890\u088e\3\2\2\2")
        buf.write("\u0890\u0891\3\2\2\2\u0891\u0893\3\2\2\2\u0892\u0890\3")
        buf.write("\2\2\2\u0893\u0894\7\u01cb\2\2\u0894\u0896\3\2\2\2\u0895")
        buf.write("\u0887\3\2\2\2\u0895\u0889\3\2\2\2\u0895\u088a\3\2\2\2")
        buf.write("\u0896\u00c3\3\2\2\2\u0897\u0898\7\u00b1\2\2\u0898\u089a")
        buf.write("\5\u00a8U\2\u0899\u089b\7\u0083\2\2\u089a\u0899\3\2\2")
        buf.write("\2\u089a\u089b\3\2\2\2\u089b\u089e\3\2\2\2\u089c\u089d")
        buf.write("\7\u00c9\2\2\u089d\u089f\7\u0195\2\2\u089e\u089c\3\2\2")
        buf.write("\2\u089e\u089f\3\2\2\2\u089f\u00c5\3\2\2\2\u08a0\u08a1")
        buf.write("\7\u00b1\2\2\u08a1\u08a2\7\u01ca\2\2\u08a2\u08a3\5\u00a8")
        buf.write("U\2\u08a3\u08a5\7\u01cb\2\2\u08a4\u08a6\7\u0083\2\2\u08a5")
        buf.write("\u08a4\3\2\2\2\u08a5\u08a6\3\2\2\2\u08a6\u00c7\3\2\2\2")
        buf.write("\u08a7\u08a8\7\177\2\2\u08a8\u08a9\7\22\2\2\u08a9\u08ae")
        buf.write("\5\u00d0i\2\u08aa\u08ab\7\u01cc\2\2\u08ab\u08ad\5\u00d0")
        buf.write("i\2\u08ac\u08aa\3\2\2\2\u08ad\u08b0\3\2\2\2\u08ae\u08ac")
        buf.write("\3\2\2\2\u08ae\u08af\3\2\2\2\u08af\u08b7\3\2\2\2\u08b0")
        buf.write("\u08ae\3\2\2\2\u08b1\u08b2\7\u0154\2\2\u08b2\u08b3\5\u00a8")
        buf.write("U\2\u08b3\u08b5\t&\2\2\u08b4\u08b6\5\u00caf\2\u08b5\u08b4")
        buf.write("\3\2\2\2\u08b5\u08b6\3\2\2\2\u08b6\u08b8\3\2\2\2\u08b7")
        buf.write("\u08b1\3\2\2\2\u08b7\u08b8\3\2\2\2\u08b8\u00c9\3\2\2\2")
        buf.write("\u08b9\u08ba\7F\2\2\u08ba\u08bb\t\'\2\2\u08bb\u08bc\5")
        buf.write("\u00a8U\2\u08bc\u08bd\t&\2\2\u08bd\u08be\7\u0156\2\2\u08be")
        buf.write("\u00cb\3\2\2\2\u08bf\u08c0\7J\2\2\u08c0\u08d3\7\20\2\2")
        buf.write("\u08c1\u08c2\7J\2\2\u08c2\u08c3\7\u01a9\2\2\u08c3\u08c5")
        buf.write("\7\u00d7\2\2\u08c4\u08c6\5\u00ceh\2\u08c5\u08c4\3\2\2")
        buf.write("\2\u08c5\u08c6\3\2\2\2\u08c6\u08d3\3\2\2\2\u08c7\u08c8")
        buf.write("\7J\2\2\u08c8\u08c9\7\u01a9\2\2\u08c9\u08cd\7\u0160\2")
        buf.write("\2\u08ca\u08cb\7\u01ca\2\2\u08cb\u08cc\7\u01b5\2\2\u08cc")
        buf.write("\u08ce\7\u01cb\2\2\u08cd\u08ca\3\2\2\2\u08cd\u08ce\3\2")
        buf.write("\2\2\u08ce\u08d0\3\2\2\2\u08cf\u08d1\5\u00ceh\2\u08d0")
        buf.write("\u08cf\3\2\2\2\u08d0\u08d1\3\2\2\2\u08d1\u08d3\3\2\2\2")
        buf.write("\u08d2\u08bf\3\2\2\2\u08d2\u08c1\3\2\2\2\u08d2\u08c7\3")
        buf.write("\2\2\2\u08d3\u00cd\3\2\2\2\u08d4\u08d9\7\u01cc\2\2\u08d5")
        buf.write("\u08d6\7\u01b6\2\2\u08d6\u08da\7\u00df\2\2\u08d7\u08da")
        buf.write("\7\u019d\2\2\u08d8\u08da\7\u0175\2\2\u08d9\u08d5\3\2\2")
        buf.write("\2\u08d9\u08d7\3\2\2\2\u08d9\u08d8\3\2\2\2\u08da\u00cf")
        buf.write("\3\2\2\2\u08db\u08dd\5\u00a8U\2\u08dc\u08de\t\7\2\2\u08dd")
        buf.write("\u08dc\3\2\2\2\u08dd\u08de\3\2\2\2\u08de\u00d1\3\2\2\2")
        buf.write("\u08df\u08e0\5\u00a8U\2\u08e0\u00d3\3\2\2\2\u08e1\u08e2")
        buf.write("\7}\2\2\u08e2\u08e3\7\u01ca\2\2\u08e3\u08e8\5\u00d6l\2")
        buf.write("\u08e4\u08e5\7\u01cc\2\2\u08e5\u08e7\5\u00d6l\2\u08e6")
        buf.write("\u08e4\3\2\2\2\u08e7\u08ea\3\2\2\2\u08e8\u08e6\3\2\2\2")
        buf.write("\u08e8\u08e9\3\2\2\2\u08e9\u08eb\3\2\2\2\u08ea\u08e8\3")
        buf.write("\2\2\2\u08eb\u08ec\7\u01cb\2\2\u08ec\u00d5\3\2\2\2\u08ed")
        buf.write("\u08ee\7\u010f\2\2\u08ee\u091b\7\u01b3\2\2\u08ef\u08f0")
        buf.write("\t(\2\2\u08f0\u091b\7T\2\2\u08f1\u08f2\t)\2\2\u08f2\u091b")
        buf.write("\7\u00ba\2\2\u08f3\u08f4\t*\2\2\u08f4\u091b\7b\2\2\u08f5")
        buf.write("\u08f6\7\u010e\2\2\u08f6\u091b\7\u01a6\2\2\u08f7\u08f8")
        buf.write("\7\u0117\2\2\u08f8\u091b\7\177\2\2\u08f9\u091b\7\u0124")
        buf.write("\2\2\u08fa\u08fb\7\u012f\2\2\u08fb\u091b\7\u0085\2\2\u08fc")
        buf.write("\u08fd\7\u0130\2\2\u08fd\u091b\7\u0085\2\2\u08fe\u08ff")
        buf.write("\7\u013d\2\2\u08ff\u091b\7\u01b3\2\2\u0900\u0901\7\u013e")
        buf.write("\2\2\u0901\u091b\7\u01b3\2\2\u0902\u0903\7\u0158\2\2\u0903")
        buf.write("\u0904\7J\2\2\u0904\u0905\7\u01ca\2\2\u0905\u090a\5\u00d8")
        buf.write("m\2\u0906\u0907\7\u01cc\2\2\u0907\u0909\5\u00d8m\2\u0908")
        buf.write("\u0906\3\2\2\2\u0909\u090c\3\2\2\2\u090a\u0908\3\2\2\2")
        buf.write("\u090a\u090b\3\2\2\2\u090b\u090d\3\2\2\2\u090c\u090a\3")
        buf.write("\2\2\2\u090d\u090e\7\u01cb\2\2\u090e\u091b\3\2\2\2\u090f")
        buf.write("\u0910\7\u0158\2\2\u0910\u0911\7J\2\2\u0911\u091b\7\u01a1")
        buf.write("\2\2\u0912\u0913\7\u015d\2\2\u0913\u091b\t\22\2\2\u0914")
        buf.write("\u091b\7\u016c\2\2\u0915\u0916\7\u0173\2\2\u0916\u091b")
        buf.write("\7\u0085\2\2\u0917\u0918\7\u00bf\2\2\u0918\u0919\7\u0085")
        buf.write("\2\2\u0919\u091b\7\u01b5\2\2\u091a\u08ed\3\2\2\2\u091a")
        buf.write("\u08ef\3\2\2\2\u091a\u08f1\3\2\2\2\u091a\u08f3\3\2\2\2")
        buf.write("\u091a\u08f5\3\2\2\2\u091a\u08f7\3\2\2\2\u091a\u08f9\3")
        buf.write("\2\2\2\u091a\u08fa\3\2\2\2\u091a\u08fc\3\2\2\2\u091a\u08fe")
        buf.write("\3\2\2\2\u091a\u0900\3\2\2\2\u091a\u0902\3\2\2\2\u091a")
        buf.write("\u090f\3\2\2\2\u091a\u0912\3\2\2\2\u091a\u0914\3\2\2\2")
        buf.write("\u091a\u0915\3\2\2\2\u091a\u0917\3\2\2\2\u091b\u00d7\3")
        buf.write("\2\2\2\u091c\u0920\7\u01b2\2\2\u091d\u0921\7\u01a1\2\2")
        buf.write("\u091e\u091f\7\u01b9\2\2\u091f\u0921\5\u014c\u00a7\2\u0920")
        buf.write("\u091d\3\2\2\2\u0920\u091e\3\2\2\2\u0921\u00d9\3\2\2\2")
        buf.write("\u0922\u0927\5\u00dco\2\u0923\u0924\7\u01cc\2\2\u0924")
        buf.write("\u0926\5\u00dco\2\u0925\u0923\3\2\2\2\u0926\u0929\3\2")
        buf.write("\2\2\u0927\u0925\3\2\2\2\u0927\u0928\3\2\2\2\u0928\u00db")
        buf.write("\3\2\2\2\u0929\u0927\3\2\2\2\u092a\u092b\5\u0134\u009b")
        buf.write("\2\u092b\u092c\7\u01c5\2\2\u092c\u092e\3\2\2\2\u092d\u092a")
        buf.write("\3\2\2\2\u092d\u092e\3\2\2\2\u092e\u0932\3\2\2\2\u092f")
        buf.write("\u0933\5\u010a\u0086\2\u0930\u0931\7\u01c9\2\2\u0931\u0933")
        buf.write("\t+\2\2\u0932\u092f\3\2\2\2\u0932\u0930\3\2\2\2\u0933")
        buf.write("\u0940\3\2\2\2\u0934\u0935\5\u0108\u0085\2\u0935\u0936")
        buf.write("\7\u01b9\2\2\u0936\u0937\5\u00a8U\2\u0937\u0940\3\2\2")
        buf.write("\2\u0938\u093d\5\u00a8U\2\u0939\u093b\7\t\2\2\u093a\u0939")
        buf.write("\3\2\2\2\u093a\u093b\3\2\2\2\u093b\u093c\3\2\2\2\u093c")
        buf.write("\u093e\5\u0108\u0085\2\u093d\u093a\3\2\2\2\u093d\u093e")
        buf.write("\3\2\2\2\u093e\u0940\3\2\2\2\u093f\u092d\3\2\2\2\u093f")
        buf.write("\u0934\3\2\2\2\u093f\u0938\3\2\2\2\u0940\u00dd\3\2\2\2")
        buf.write("\u0941\u0946\5\u00e0q\2\u0942\u0943\7\u01cc\2\2\u0943")
        buf.write("\u0945\5\u00e0q\2\u0944\u0942\3\2\2\2\u0945\u0948\3\2")
        buf.write("\2\2\u0946\u0944\3\2\2\2\u0946\u0947\3\2\2\2\u0947\u00df")
        buf.write("\3\2\2\2\u0948\u0946\3\2\2\2\u0949\u094a\bq\1\2\u094a")
        buf.write("\u094b\7\u01ca\2\2\u094b\u094c\5\u00e0q\2\u094c\u094d")
        buf.write("\7\u01cb\2\2\u094d\u0950\3\2\2\2\u094e\u0950\5\u00e2r")
        buf.write("\2\u094f\u0949\3\2\2\2\u094f\u094e\3\2\2\2\u0950\u0962")
        buf.write("\3\2\2\2\u0951\u0952\f\5\2\2\u0952\u0953\7(\2\2\u0953")
        buf.write("\u0954\7b\2\2\u0954\u0961\5\u00e0q\6\u0955\u0956\f\4\2")
        buf.write("\2\u0956\u0957\t,\2\2\u0957\u0958\7\u00d4\2\2\u0958\u0961")
        buf.write("\5\u00e0q\5\u0959\u095a\f\6\2\2\u095a\u095b\5\u00eex\2")
        buf.write("\u095b\u095c\7b\2\2\u095c\u095d\5\u00e0q\2\u095d\u095e")
        buf.write("\7w\2\2\u095e\u095f\5\u00b6\\\2\u095f\u0961\3\2\2\2\u0960")
        buf.write("\u0951\3\2\2\2\u0960\u0955\3\2\2\2\u0960\u0959\3\2\2\2")
        buf.write("\u0961\u0964\3\2\2\2\u0962\u0960\3\2\2\2\u0962\u0963\3")
        buf.write("\2\2\2\u0963\u00e1\3\2\2\2\u0964\u0962\3\2\2\2\u0965\u0967")
        buf.write("\5\u0134\u009b\2\u0966\u0968\5\u00e4s\2\u0967\u0966\3")
        buf.write("\2\2\2\u0967\u0968\3\2\2\2\u0968\u096a\3\2\2\2\u0969\u096b")
        buf.write("\5\u00eav\2\u096a\u0969\3\2\2\2\u096a\u096b\3\2\2\2\u096b")
        buf.write("\u096d\3\2\2\2\u096c\u096e\5\u00fe\u0080\2\u096d\u096c")
        buf.write("\3\2\2\2\u096d\u096e\3\2\2\2\u096e\u0990\3\2\2\2\u096f")
        buf.write("\u0971\5\u00f2z\2\u0970\u0972\5\u00eav\2\u0971\u0970\3")
        buf.write("\2\2\2\u0971\u0972\3\2\2\2\u0972\u0990\3\2\2\2\u0973\u0978")
        buf.write("\5\u00f6|\2\u0974\u0976\5\u00eav\2\u0975\u0977\5\u0106")
        buf.write("\u0084\2\u0976\u0975\3\2\2\2\u0976\u0977\3\2\2\2\u0977")
        buf.write("\u0979\3\2\2\2\u0978\u0974\3\2\2\2\u0978\u0979\3\2\2\2")
        buf.write("\u0979\u0990\3\2\2\2\u097a\u097c\5\u00ecw\2\u097b\u097d")
        buf.write("\5\u00eav\2\u097c\u097b\3\2\2\2\u097c\u097d\3\2\2\2\u097d")
        buf.write("\u0990\3\2\2\2\u097e\u0980\5\u00f8}\2\u097f\u0981\5\u00ea")
        buf.write("v\2\u0980\u097f\3\2\2\2\u0980\u0981\3\2\2\2\u0981\u0990")
        buf.write("\3\2\2\2\u0982\u0984\7\u01b2\2\2\u0983\u0985\5\u00eav")
        buf.write("\2\u0984\u0983\3\2\2\2\u0984\u0985\3\2\2\2\u0985\u0990")
        buf.write("\3\2\2\2\u0986\u0987\7\u01b2\2\2\u0987\u0988\7\u01c5\2")
        buf.write("\2\u0988\u098d\5\u00f8}\2\u0989\u098b\5\u00eav\2\u098a")
        buf.write("\u098c\5\u0106\u0084\2\u098b\u098a\3\2\2\2\u098b\u098c")
        buf.write("\3\2\2\2\u098c\u098e\3\2\2\2\u098d\u0989\3\2\2\2\u098d")
        buf.write("\u098e\3\2\2\2\u098e\u0990\3\2\2\2\u098f\u0965\3\2\2\2")
        buf.write("\u098f\u096f\3\2\2\2\u098f\u0973\3\2\2\2\u098f\u097a\3")
        buf.write("\2\2\2\u098f\u097e\3\2\2\2\u098f\u0982\3\2\2\2\u098f\u0986")
        buf.write("\3\2\2\2\u0990\u00e3\3\2\2\2\u0991\u0993\7\u00ad\2\2\u0992")
        buf.write("\u0994\7\u00aa\2\2\u0993\u0992\3\2\2\2\u0993\u0994\3\2")
        buf.write("\2\2\u0994\u0995\3\2\2\2\u0995\u0996\7\u01ca\2\2\u0996")
        buf.write("\u0998\5\u00e6t\2\u0997\u0999\t\b\2\2\u0998\u0997\3\2")
        buf.write("\2\2\u0998\u0999\3\2\2\2\u0999\u099a\3\2\2\2\u099a\u099d")
        buf.write("\7\u01cb\2\2\u099b\u099c\7\u0171\2\2\u099c\u099e\5\u00e8")
        buf.write("u\2\u099d\u099b\3\2\2\2\u099d\u099e\3\2\2\2\u099e\u00e5")
        buf.write("\3\2\2\2\u099f\u09a0\7\u01b3\2\2\u09a0\u00e7\3\2\2\2\u09a1")
        buf.write("\u09a2\7\u01b3\2\2\u09a2\u00e9\3\2\2\2\u09a3\u09a5\7\t")
        buf.write("\2\2\u09a4\u09a3\3\2\2\2\u09a4\u09a5\3\2\2\2\u09a5\u09a6")
        buf.write("\3\2\2\2\u09a6\u09a7\5\u0150\u00a9\2\u09a7\u00eb\3\2\2")
        buf.write("\2\u09a8\u09a9\7\26\2\2\u09a9\u09aa\7\u01ca\2\2\u09aa")
        buf.write("\u09ab\7\27\2\2\u09ab\u09ac\5\u0134\u009b\2\u09ac\u09ad")
        buf.write("\7\u01cc\2\2\u09ad\u09ae\t-\2\2\u09ae\u09af\7\u01cb\2")
        buf.write("\2\u09af\u00ed\3\2\2\2\u09b0\u09b2\7]\2\2\u09b1\u09b0")
        buf.write("\3\2\2\2\u09b1\u09b2\3\2\2\2\u09b2\u09b8\3\2\2\2\u09b3")
        buf.write("\u09b5\t.\2\2\u09b4\u09b6\7\u0080\2\2\u09b5\u09b4\3\2")
        buf.write("\2\2\u09b5\u09b6\3\2\2\2\u09b6\u09b8\3\2\2\2\u09b7\u09b1")
        buf.write("\3\2\2\2\u09b7\u09b3\3\2\2\2\u09b8\u09ba\3\2\2\2\u09b9")
        buf.write("\u09bb\t/\2\2\u09ba\u09b9\3\2\2\2\u09ba\u09bb\3\2\2\2")
        buf.write("\u09bb\u00ef\3\2\2\2\u09bc\u09be\5\u0134\u009b\2\u09bd")
        buf.write("\u09bf\5\u00fe\u0080\2\u09be\u09bd\3\2\2\2\u09be\u09bf")
        buf.write("\3\2\2\2\u09bf\u00f1\3\2\2\2\u09c0\u09c1\7{\2\2\u09c1")
        buf.write("\u09c2\7\u01ca\2\2\u09c2\u09c3\7\u01b5\2\2\u09c3\u09c4")
        buf.write("\7\u01cc\2\2\u09c4\u09c5\7\u01b5\2\2\u09c5\u09c6\7\u01cc")
        buf.write("\2\2\u09c6\u09c7\7\u01b5\2\2\u09c7\u09db\7\u01cb\2\2\u09c8")
        buf.write("\u09c9\7{\2\2\u09c9\u09ca\7\u01ca\2\2\u09ca\u09cb\7\21")
        buf.write("\2\2\u09cb\u09cc\7\u01b5\2\2\u09cc\u09d6\7\u01cc\2\2\u09cd")
        buf.write("\u09d2\5\u00f4{\2\u09ce\u09cf\7\u01cc\2\2\u09cf\u09d1")
        buf.write("\5\u00f4{\2\u09d0\u09ce\3\2\2\2\u09d1\u09d4\3\2\2\2\u09d2")
        buf.write("\u09d0\3\2\2\2\u09d2\u09d3\3\2\2\2\u09d3\u09d7\3\2\2\2")
        buf.write("\u09d4\u09d2\3\2\2\2\u09d5\u09d7\5\u0150\u00a9\2\u09d6")
        buf.write("\u09cd\3\2\2\2\u09d6\u09d5\3\2\2\2\u09d7\u09d8\3\2\2\2")
        buf.write("\u09d8\u09d9\7\u01cb\2\2\u09d9\u09db\3\2\2\2\u09da\u09c0")
        buf.write("\3\2\2\2\u09da\u09c8\3\2\2\2\u09db\u00f3\3\2\2\2\u09dc")
        buf.write("\u09dd\5\u0150\u00a9\2\u09dd\u09de\7\u01b9\2\2\u09de\u09df")
        buf.write("\t\60\2\2\u09df\u00f5\3\2\2\2\u09e0\u09e6\5\u00acW\2\u09e1")
        buf.write("\u09e2\7\u01ca\2\2\u09e2\u09e3\5\u00acW\2\u09e3\u09e4")
        buf.write("\7\u01cb\2\2\u09e4\u09e6\3\2\2\2\u09e5\u09e0\3\2\2\2\u09e5")
        buf.write("\u09e1\3\2\2\2\u09e6\u00f7\3\2\2\2\u09e7\u0a95\5\u0116")
        buf.write("\u008c\2\u09e8\u0a95\5\u0118\u008d\2\u09e9\u09ea\5\u0148")
        buf.write("\u00a5\2\u09ea\u09ec\7\u01ca\2\2\u09eb\u09ed\5\u010e\u0088")
        buf.write("\2\u09ec\u09eb\3\2\2\2\u09ec\u09ed\3\2\2\2\u09ed\u09ee")
        buf.write("\3\2\2\2\u09ee\u09ef\7\u01cb\2\2\u09ef\u0a95\3\2\2\2\u09f0")
        buf.write("\u0a95\5\u0114\u008b\2\u09f1\u09f2\7\u00e1\2\2\u09f2\u09f3")
        buf.write("\7\u01ca\2\2\u09f3\u09f4\7\u01cf\2\2\u09f4\u0a95\7\u01cb")
        buf.write("\2\2\u09f5\u09f6\7\u00e4\2\2\u09f6\u09f7\7\u01ca\2\2\u09f7")
        buf.write("\u09f8\5\u00a8U\2\u09f8\u09f9\7\t\2\2\u09f9\u09fa\5\u016e")
        buf.write("\u00b8\2\u09fa\u09fb\7\u01cb\2\2\u09fb\u0a95\3\2\2\2\u09fc")
        buf.write("\u09fd\7&\2\2\u09fd\u09fe\7\u01ca\2\2\u09fe\u09ff\5\u016e")
        buf.write("\u00b8\2\u09ff\u0a00\7\u01cc\2\2\u0a00\u0a03\5\u00a8U")
        buf.write("\2\u0a01\u0a02\7\u01cc\2\2\u0a02\u0a04\5\u00a8U\2\u0a03")
        buf.write("\u0a01\3\2\2\2\u0a03\u0a04\3\2\2\2\u0a04\u0a05\3\2\2\2")
        buf.write("\u0a05\u0a06\7\u01cb\2\2\u0a06\u0a95\3\2\2\2\u0a07\u0a08")
        buf.write("\7\u00e8\2\2\u0a08\u0a09\7\u01ca\2\2\u0a09\u0a0a\7\u01cf")
        buf.write("\2\2\u0a0a\u0a95\7\u01cb\2\2\u0a0b\u0a0c\7\34\2\2\u0a0c")
        buf.write("\u0a0d\7\u01ca\2\2\u0a0d\u0a0e\5\u010e\u0088\2\u0a0e\u0a0f")
        buf.write("\7\u01cb\2\2\u0a0f\u0a95\3\2\2\2\u0a10\u0a95\7,\2\2\u0a11")
        buf.write("\u0a95\7-\2\2\u0a12\u0a13\7\u00f6\2\2\u0a13\u0a14\7\u01ca")
        buf.write("\2\2\u0a14\u0a15\7\u01b4\2\2\u0a15\u0a16\7\u01cc\2\2\u0a16")
        buf.write("\u0a17\5\u00a8U\2\u0a17\u0a18\7\u01cc\2\2\u0a18\u0a19")
        buf.write("\5\u00a8U\2\u0a19\u0a1a\7\u01cb\2\2\u0a1a\u0a95\3\2\2")
        buf.write("\2\u0a1b\u0a1c\7\u00f7\2\2\u0a1c\u0a1d\7\u01ca\2\2\u0a1d")
        buf.write("\u0a1e\7\u01b4\2\2\u0a1e\u0a1f\7\u01cc\2\2\u0a1f\u0a20")
        buf.write("\5\u00a8U\2\u0a20\u0a21\7\u01cc\2\2\u0a21\u0a22\5\u00a8")
        buf.write("U\2\u0a22\u0a23\7\u01cb\2\2\u0a23\u0a95\3\2\2\2\u0a24")
        buf.write("\u0a25\7\u00f8\2\2\u0a25\u0a26\7\u01ca\2\2\u0a26\u0a27")
        buf.write("\7\u01b4\2\2\u0a27\u0a28\7\u01cc\2\2\u0a28\u0a29\5\u00a8")
        buf.write("U\2\u0a29\u0a2a\7\u01cb\2\2\u0a2a\u0a95\3\2\2\2\u0a2b")
        buf.write("\u0a2c\7\u00f9\2\2\u0a2c\u0a2d\7\u01ca\2\2\u0a2d\u0a2e")
        buf.write("\7\u01b4\2\2\u0a2e\u0a2f\7\u01cc\2\2\u0a2f\u0a30\5\u00a8")
        buf.write("U\2\u0a30\u0a31\7\u01cb\2\2\u0a31\u0a95\3\2\2\2\u0a32")
        buf.write("\u0a33\7\u00fb\2\2\u0a33\u0a34\7\u01ca\2\2\u0a34\u0a35")
        buf.write("\5\u00a8U\2\u0a35\u0a36\7\u01cc\2\2\u0a36\u0a37\5\u00a8")
        buf.write("U\2\u0a37\u0a38\7\u01cc\2\2\u0a38\u0a39\5\u00a8U\2\u0a39")
        buf.write("\u0a3a\7\u01cc\2\2\u0a3a\u0a3b\5\u00a8U\2\u0a3b\u0a3c")
        buf.write("\7\u01cc\2\2\u0a3c\u0a3d\5\u00a8U\2\u0a3d\u0a3e\7\u01cc")
        buf.write("\2\2\u0a3e\u0a3f\5\u00a8U\2\u0a3f\u0a40\7\u01cc\2\2\u0a40")
        buf.write("\u0a41\5\u00a8U\2\u0a41\u0a42\7\u01cc\2\2\u0a42\u0a43")
        buf.write("\5\u00a8U\2\u0a43\u0a44\7\u01cc\2\2\u0a44\u0a45\5\u00a8")
        buf.write("U\2\u0a45\u0a46\7\u01cc\2\2\u0a46\u0a47\5\u00a8U\2\u0a47")
        buf.write("\u0a48\7\u01cb\2\2\u0a48\u0a95\3\2\2\2\u0a49\u0a4a\7V")
        buf.write("\2\2\u0a4a\u0a4b\7\u01ca\2\2\u0a4b\u0a4e\5\u016e\u00b8")
        buf.write("\2\u0a4c\u0a4d\7\u01cc\2\2\u0a4d\u0a4f\7\u01b3\2\2\u0a4e")
        buf.write("\u0a4c\3\2\2\2\u0a4e\u0a4f\3\2\2\2\u0a4f\u0a52\3\2\2\2")
        buf.write("\u0a50\u0a51\7\u01cc\2\2\u0a51\u0a53\7\u01b3\2\2\u0a52")
        buf.write("\u0a50\3\2\2\2\u0a52\u0a53\3\2\2\2\u0a53\u0a54\3\2\2\2")
        buf.write("\u0a54\u0a55\7\u01cb\2\2\u0a55\u0a95\3\2\2\2\u0a56\u0a57")
        buf.write("\7Y\2\2\u0a57\u0a58\7\u01ca\2\2\u0a58\u0a59\5\u00b6\\")
        buf.write("\2\u0a59\u0a5a\7\u01cc\2\2\u0a5a\u0a5b\5\u00a8U\2\u0a5b")
        buf.write("\u0a5c\7\u01cc\2\2\u0a5c\u0a5d\5\u00a8U\2\u0a5d\u0a5e")
        buf.write("\7\u01cb\2\2\u0a5e\u0a95\3\2\2\2\u0a5f\u0a95\7\u0144\2")
        buf.write("\2\u0a60\u0a61\7r\2\2\u0a61\u0a62\7\u01ca\2\2\u0a62\u0a63")
        buf.write("\5\u00a8U\2\u0a63\u0a64\7\u01cc\2\2\u0a64\u0a65\5\u00a8")
        buf.write("U\2\u0a65\u0a66\7\u01cb\2\2\u0a66\u0a95\3\2\2\2\u0a67")
        buf.write("\u0a68\7\u015e\2\2\u0a68\u0a69\7\u01ca\2\2\u0a69\u0a6a")
        buf.write("\5\u00a8U\2\u0a6a\u0a6b\7\t\2\2\u0a6b\u0a6e\5\u016e\u00b8")
        buf.write("\2\u0a6c\u0a6d\7\u01a3\2\2\u0a6d\u0a6f\5\u00a8U\2\u0a6e")
        buf.write("\u0a6c\3\2\2\2\u0a6e\u0a6f\3\2\2\2\u0a6f\u0a70\3\2\2\2")
        buf.write("\u0a70\u0a71\7\u01cb\2\2\u0a71\u0a95\3\2\2\2\u0a72\u0a95")
        buf.write("\7\u00a4\2\2\u0a73\u0a74\7\u018e\2\2\u0a74\u0a75\7\u01ca")
        buf.write("\2\2\u0a75\u0a76\5\u00a8U\2\u0a76\u0a77\7\u01cc\2\2\u0a77")
        buf.write("\u0a78\5\u00a8U\2\u0a78\u0a79\7\u01cb\2\2\u0a79\u0a95")
        buf.write("\3\2\2\2\u0a7a\u0a95\7\u00ab\2\2\u0a7b\u0a7c\7\u00b7\2")
        buf.write("\2\u0a7c\u0a7d\7\u01ca\2\2\u0a7d\u0a7e\5\u016e\u00b8\2")
        buf.write("\u0a7e\u0a7f\7\u01cc\2\2\u0a7f\u0a80\5\u00a8U\2\u0a80")
        buf.write("\u0a81\7\u01cb\2\2\u0a81\u0a95\3\2\2\2\u0a82\u0a83\7\u00b6")
        buf.write("\2\2\u0a83\u0a84\7\u01ca\2\2\u0a84\u0a85\5\u00a8U\2\u0a85")
        buf.write("\u0a86\7\t\2\2\u0a86\u0a87\5\u016e\u00b8\2\u0a87\u0a88")
        buf.write("\7\u01cb\2\2\u0a88\u0a95\3\2\2\2\u0a89\u0a8a\7\u00b8\2")
        buf.write("\2\u0a8a\u0a8b\7\u01ca\2\2\u0a8b\u0a8c\5\u00a8U\2\u0a8c")
        buf.write("\u0a8d\7\t\2\2\u0a8d\u0a90\5\u016e\u00b8\2\u0a8e\u0a8f")
        buf.write("\7\u01a3\2\2\u0a8f\u0a91\5\u00a8U\2\u0a90\u0a8e\3\2\2")
        buf.write("\2\u0a90\u0a91\3\2\2\2\u0a91\u0a92\3\2\2\2\u0a92\u0a93")
        buf.write("\7\u01cb\2\2\u0a93\u0a95\3\2\2\2\u0a94\u09e7\3\2\2\2\u0a94")
        buf.write("\u09e8\3\2\2\2\u0a94\u09e9\3\2\2\2\u0a94\u09f0\3\2\2\2")
        buf.write("\u0a94\u09f1\3\2\2\2\u0a94\u09f5\3\2\2\2\u0a94\u09fc\3")
        buf.write("\2\2\2\u0a94\u0a07\3\2\2\2\u0a94\u0a0b\3\2\2\2\u0a94\u0a10")
        buf.write("\3\2\2\2\u0a94\u0a11\3\2\2\2\u0a94\u0a12\3\2\2\2\u0a94")
        buf.write("\u0a1b\3\2\2\2\u0a94\u0a24\3\2\2\2\u0a94\u0a2b\3\2\2\2")
        buf.write("\u0a94\u0a32\3\2\2\2\u0a94\u0a49\3\2\2\2\u0a94\u0a56\3")
        buf.write("\2\2\2\u0a94\u0a5f\3\2\2\2\u0a94\u0a60\3\2\2\2\u0a94\u0a67")
        buf.write("\3\2\2\2\u0a94\u0a72\3\2\2\2\u0a94\u0a73\3\2\2\2\u0a94")
        buf.write("\u0a7a\3\2\2\2\u0a94\u0a7b\3\2\2\2\u0a94\u0a82\3\2\2\2")
        buf.write("\u0a94\u0a89\3\2\2\2\u0a95\u00f9\3\2\2\2\u0a96\u0a97\7")
        buf.write("\u00c6\2\2\u0a97\u0a98\5\u00a8U\2\u0a98\u0a99\7\u00af")
        buf.write("\2\2\u0a99\u0a9a\5\u00a8U\2\u0a9a\u00fb\3\2\2\2\u0a9b")
        buf.write("\u0a9c\7\u00c6\2\2\u0a9c\u0a9d\5\u00b6\\\2\u0a9d\u0a9e")
        buf.write("\7\u00af\2\2\u0a9e\u0a9f\5\u00a8U\2\u0a9f\u00fd\3\2\2")
        buf.write("\2\u0aa0\u0aa2\7\u00c9\2\2\u0aa1\u0aa0\3\2\2\2\u0aa1\u0aa2")
        buf.write("\3\2\2\2\u0aa2\u0aa3\3\2\2\2\u0aa3\u0aa4\7\u01ca\2\2\u0aa4")
        buf.write("\u0aa9\5\u0102\u0082\2\u0aa5\u0aa6\7\u01cc\2\2\u0aa6\u0aa8")
        buf.write("\5\u0102\u0082\2\u0aa7\u0aa5\3\2\2\2\u0aa8\u0aab\3\2\2")
        buf.write("\2\u0aa9\u0aa7\3\2\2\2\u0aa9\u0aaa\3\2\2\2\u0aaa\u0aac")
        buf.write("\3\2\2\2\u0aab\u0aa9\3\2\2\2\u0aac\u0aad\7\u01cb\2\2\u0aad")
        buf.write("\u00ff\3\2\2\2\u0aae\u0aaf\7\u00c9\2\2\u0aaf\u0ab0\7\u01ca")
        buf.write("\2\2\u0ab0\u0ab5\5\u0102\u0082\2\u0ab1\u0ab2\7\u01cc\2")
        buf.write("\2\u0ab2\u0ab4\5\u0102\u0082\2\u0ab3\u0ab1\3\2\2\2\u0ab4")
        buf.write("\u0ab7\3\2\2\2\u0ab5\u0ab3\3\2\2\2\u0ab5\u0ab6\3\2\2\2")
        buf.write("\u0ab6\u0ab8\3\2\2\2\u0ab7\u0ab5\3\2\2\2\u0ab8\u0ab9\7")
        buf.write("\u01cb\2\2\u0ab9\u0101\3\2\2\2\u0aba\u0abc\7\u014c\2\2")
        buf.write("\u0abb\u0aba\3\2\2\2\u0abb\u0abc\3\2\2\2\u0abc\u0ae3\3")
        buf.write("\2\2\2\u0abd\u0abe\7\\\2\2\u0abe\u0abf\7\u01ca\2\2\u0abf")
        buf.write("\u0ac4\5\u0104\u0083\2\u0ac0\u0ac1\7\u01cc\2\2\u0ac1\u0ac3")
        buf.write("\5\u0104\u0083\2\u0ac2\u0ac0\3\2\2\2\u0ac3\u0ac6\3\2\2")
        buf.write("\2\u0ac4\u0ac2\3\2\2\2\u0ac4\u0ac5\3\2\2\2\u0ac5\u0ac7")
        buf.write("\3\2\2\2\u0ac6\u0ac4\3\2\2\2\u0ac7\u0ac8\7\u01cb\2\2\u0ac8")
        buf.write("\u0ae4\3\2\2\2\u0ac9\u0aca\7\\\2\2\u0aca\u0acb\7\u01b9")
        buf.write("\2\2\u0acb\u0ae4\5\u0104\u0083\2\u0acc\u0adb\7K\2\2\u0acd")
        buf.write("\u0ace\7\u01ca\2\2\u0ace\u0acf\5\u0104\u0083\2\u0acf\u0ad0")
        buf.write("\7\u01ca\2\2\u0ad0\u0ad5\7\u01b4\2\2\u0ad1\u0ad2\7\u01cc")
        buf.write("\2\2\u0ad2\u0ad4\7\u01b4\2\2\u0ad3\u0ad1\3\2\2\2\u0ad4")
        buf.write("\u0ad7\3\2\2\2\u0ad5\u0ad3\3\2\2\2\u0ad5\u0ad6\3\2\2\2")
        buf.write("\u0ad6\u0ad8\3\2\2\2\u0ad7\u0ad5\3\2\2\2\u0ad8\u0ad9\7")
        buf.write("\u01cb\2\2\u0ad9\u0ada\7\u01cb\2\2\u0ada\u0adc\3\2\2\2")
        buf.write("\u0adb\u0acd\3\2\2\2\u0adb\u0adc\3\2\2\2\u0adc\u0ae4\3")
        buf.write("\2\2\2\u0add\u0ae4\7\u0180\2\2\u0ade\u0ae4\7\u0187\2\2")
        buf.write("\u0adf\u0ae0\7\u0188\2\2\u0ae0\u0ae1\7\u01b9\2\2\u0ae1")
        buf.write("\u0ae4\7\u01b3\2\2\u0ae2\u0ae4\7\u01b4\2\2\u0ae3\u0abd")
        buf.write("\3\2\2\2\u0ae3\u0ac9\3\2\2\2\u0ae3\u0acc\3\2\2\2\u0ae3")
        buf.write("\u0add\3\2\2\2\u0ae3\u0ade\3\2\2\2\u0ae3\u0adf\3\2\2\2")
        buf.write("\u0ae3\u0ae2\3\2\2\2\u0ae3\u0ae4\3\2\2\2\u0ae4\u0103\3")
        buf.write("\2\2\2\u0ae5\u0ae8\5\u0150\u00a9\2\u0ae6\u0ae8\7\u01b3")
        buf.write("\2\2\u0ae7\u0ae5\3\2\2\2\u0ae7\u0ae6\3\2\2\2\u0ae8\u0105")
        buf.write("\3\2\2\2\u0ae9\u0aea\7\u01ca\2\2\u0aea\u0aef\5\u0108\u0085")
        buf.write("\2\u0aeb\u0aec\7\u01cc\2\2\u0aec\u0aee\5\u0108\u0085\2")
        buf.write("\u0aed\u0aeb\3\2\2\2\u0aee\u0af1\3\2\2\2\u0aef\u0aed\3")
        buf.write("\2\2\2\u0aef\u0af0\3\2\2\2\u0af0\u0af2\3\2\2\2\u0af1\u0aef")
        buf.write("\3\2\2\2\u0af2\u0af3\7\u01cb\2\2\u0af3\u0107\3\2\2\2\u0af4")
        buf.write("\u0af7\5\u0150\u00a9\2\u0af5\u0af7\7\u01b5\2\2\u0af6\u0af4")
        buf.write("\3\2\2\2\u0af6\u0af5\3\2\2\2\u0af7\u0109\3\2\2\2\u0af8")
        buf.write("\u0af9\7\u01cf\2\2\u0af9\u010b\3\2\2\2\u0afa\u0afb\7\u00c1")
        buf.write("\2\2\u0afb\u0b00\5\u0110\u0089\2\u0afc\u0afd\7\u01cc\2")
        buf.write("\2\u0afd\u0aff\5\u0110\u0089\2\u0afe\u0afc\3\2\2\2\u0aff")
        buf.write("\u0b02\3\2\2\2\u0b00\u0afe\3\2\2\2\u0b00\u0b01\3\2\2\2")
        buf.write("\u0b01\u010d\3\2\2\2\u0b02\u0b00\3\2\2\2\u0b03\u0b08\5")
        buf.write("\u00a8U\2\u0b04\u0b05\7\u01cc\2\2\u0b05\u0b07\5\u00a8")
        buf.write("U\2\u0b06\u0b04\3\2\2\2\u0b07\u0b0a\3\2\2\2\u0b08\u0b06")
        buf.write("\3\2\2\2\u0b08\u0b09\3\2\2\2\u0b09\u010f\3\2\2\2\u0b0a")
        buf.write("\u0b08\3\2\2\2\u0b0b\u0b0c\7\u01ca\2\2\u0b0c\u0b0d\5\u010e")
        buf.write("\u0088\2\u0b0d\u0b0e\7\u01cb\2\2\u0b0e\u0111\3\2\2\2\u0b0f")
        buf.write("\u0b10\7l\2\2\u0b10\u0b11\7\u00c2\2\2\u0b11\u0b12\7J\2")
        buf.write("\2\u0b12\u0113\3\2\2\2\u0b13\u0b14\5\u0112\u008a\2\u0b14")
        buf.write("\u0b15\5\u0138\u009d\2\u0b15\u0b16\5\u011c\u008f\2\u0b16")
        buf.write("\u0115\3\2\2\2\u0b17\u0b18\t\61\2\2\u0b18\u0b19\7\u01ca")
        buf.write("\2\2\u0b19\u0b1a\7\u01cb\2\2\u0b1a\u0b2f\5\u011c\u008f")
        buf.write("\2\u0b1b\u0b1c\t\62\2\2\u0b1c\u0b1d\7\u01ca\2\2\u0b1d")
        buf.write("\u0b1e\5\u00a8U\2\u0b1e\u0b1f\7\u01cb\2\2\u0b1f\u0b20")
        buf.write("\5\u011c\u008f\2\u0b20\u0b2f\3\2\2\2\u0b21\u0b22\t\63")
        buf.write("\2\2\u0b22\u0b23\7\u01ca\2\2\u0b23\u0b28\5\u00a8U\2\u0b24")
        buf.write("\u0b25\7\u01cc\2\2\u0b25\u0b27\5\u00a8U\2\u0b26\u0b24")
        buf.write("\3\2\2\2\u0b27\u0b2a\3\2\2\2\u0b28\u0b26\3\2\2\2\u0b28")
        buf.write("\u0b29\3\2\2\2\u0b29\u0b2b\3\2\2\2\u0b2a\u0b28\3\2\2\2")
        buf.write("\u0b2b\u0b2c\7\u01cb\2\2\u0b2c\u0b2d\5\u011c\u008f\2\u0b2d")
        buf.write("\u0b2f\3\2\2\2\u0b2e\u0b17\3\2\2\2\u0b2e\u0b1b\3\2\2\2")
        buf.write("\u0b2e\u0b21\3\2\2\2\u0b2f\u0117\3\2\2\2\u0b30\u0b31\t")
        buf.write("\64\2\2\u0b31\u0b33\7\u01ca\2\2\u0b32\u0b34\5\u011a\u008e")
        buf.write("\2\u0b33\u0b32\3\2\2\2\u0b33\u0b34\3\2\2\2\u0b34\u0b35")
        buf.write("\3\2\2\2\u0b35\u0b36\5\u00a8U\2\u0b36\u0b38\7\u01cb\2")
        buf.write("\2\u0b37\u0b39\5\u011c\u008f\2\u0b38\u0b37\3\2\2\2\u0b38")
        buf.write("\u0b39\3\2\2\2\u0b39\u0b5a\3\2\2\2\u0b3a\u0b3b\t\65\2")
        buf.write("\2\u0b3b\u0b41\7\u01ca\2\2\u0b3c\u0b42\7\u01cf\2\2\u0b3d")
        buf.write("\u0b3f\5\u011a\u008e\2\u0b3e\u0b3d\3\2\2\2\u0b3e\u0b3f")
        buf.write("\3\2\2\2\u0b3f\u0b40\3\2\2\2\u0b40\u0b42\5\u00a8U\2\u0b41")
        buf.write("\u0b3c\3\2\2\2\u0b41\u0b3e\3\2\2\2\u0b42\u0b43\3\2\2\2")
        buf.write("\u0b43\u0b45\7\u01cb\2\2\u0b44\u0b46\5\u011c\u008f\2\u0b45")
        buf.write("\u0b44\3\2\2\2\u0b45\u0b46\3\2\2\2\u0b46\u0b5a\3\2\2\2")
        buf.write("\u0b47\u0b48\7\u00e9\2\2\u0b48\u0b4a\7\u01ca\2\2\u0b49")
        buf.write("\u0b4b\5\u011a\u008e\2\u0b4a\u0b49\3\2\2\2\u0b4a\u0b4b")
        buf.write("\3\2\2\2\u0b4b\u0b4c\3\2\2\2\u0b4c\u0b4d\5\u00a8U\2\u0b4d")
        buf.write("\u0b4e\7\u01cb\2\2\u0b4e\u0b5a\3\2\2\2\u0b4f\u0b50\7\u011e")
        buf.write("\2\2\u0b50\u0b51\7\u01ca\2\2\u0b51\u0b52\5\u00a8U\2\u0b52")
        buf.write("\u0b53\7\u01cb\2\2\u0b53\u0b5a\3\2\2\2\u0b54\u0b55\7\u011f")
        buf.write("\2\2\u0b55\u0b56\7\u01ca\2\2\u0b56\u0b57\5\u010e\u0088")
        buf.write("\2\u0b57\u0b58\7\u01cb\2\2\u0b58\u0b5a\3\2\2\2\u0b59\u0b30")
        buf.write("\3\2\2\2\u0b59\u0b3a\3\2\2\2\u0b59\u0b47\3\2\2\2\u0b59")
        buf.write("\u0b4f\3\2\2\2\u0b59\u0b54\3\2\2\2\u0b5a\u0119\3\2\2\2")
        buf.write("\u0b5b\u0b5c\t$\2\2\u0b5c\u011b\3\2\2\2\u0b5d\u0b5e\7")
        buf.write("\u0081\2\2\u0b5e\u0b62\7\u01ca\2\2\u0b5f\u0b60\7\u015f")
        buf.write("\2\2\u0b60\u0b61\7\22\2\2\u0b61\u0b63\5\u010e\u0088\2")
        buf.write("\u0b62\u0b5f\3\2\2\2\u0b62\u0b63\3\2\2\2\u0b63\u0b65\3")
        buf.write("\2\2\2\u0b64\u0b66\5\u00c8e\2\u0b65\u0b64\3\2\2\2\u0b65")
        buf.write("\u0b66\3\2\2\2\u0b66\u0b68\3\2\2\2\u0b67\u0b69\5\u011e")
        buf.write("\u0090\2\u0b68\u0b67\3\2\2\2\u0b68\u0b69\3\2\2\2\u0b69")
        buf.write("\u0b6a\3\2\2\2\u0b6a\u0b6b\7\u01cb\2\2\u0b6b\u011d\3\2")
        buf.write("\2\2\u0b6c\u0b6d\t\66\2\2\u0b6d\u0b6e\5\u0120\u0091\2")
        buf.write("\u0b6e\u011f\3\2\2\2\u0b6f\u0b76\5\u0124\u0093\2\u0b70")
        buf.write("\u0b71\7\16\2\2\u0b71\u0b72\5\u0122\u0092\2\u0b72\u0b73")
        buf.write("\7\7\2\2\u0b73\u0b74\5\u0122\u0092\2\u0b74\u0b76\3\2\2")
        buf.write("\2\u0b75\u0b6f\3\2\2\2\u0b75\u0b70\3\2\2\2\u0b76\u0121")
        buf.write("\3\2\2\2\u0b77\u0b7a\5\u0124\u0093\2\u0b78\u0b7a\5\u0126")
        buf.write("\u0094\2\u0b79\u0b77\3\2\2\2\u0b79\u0b78\3\2\2\2\u0b7a")
        buf.write("\u0123\3\2\2\2\u0b7b\u0b7c\7\u019f\2\2\u0b7c\u0b82\7\u0162")
        buf.write("\2\2\u0b7d\u0b7e\7\u01b3\2\2\u0b7e\u0b82\7\u0162\2\2\u0b7f")
        buf.write("\u0b80\7)\2\2\u0b80\u0b82\7\u0176\2\2\u0b81\u0b7b\3\2")
        buf.write("\2\2\u0b81\u0b7d\3\2\2\2\u0b81\u0b7f\3\2\2\2\u0b82\u0125")
        buf.write("\3\2\2\2\u0b83\u0b84\7\u019f\2\2\u0b84\u0b88\7\u0116\2")
        buf.write("\2\u0b85\u0b86\7\u01b3\2\2\u0b86\u0b88\7\u0116\2\2\u0b87")
        buf.write("\u0b83\3\2\2\2\u0b87\u0b85\3\2\2\2\u0b88\u0127\3\2\2\2")
        buf.write("\u0b89\u0b8a\7\u0113\2\2\u0b8a\u0b8f\5\u012a\u0096\2\u0b8b")
        buf.write("\u0b8c\7\u01cc\2\2\u0b8c\u0b8e\5\u012a\u0096\2\u0b8d\u0b8b")
        buf.write("\3\2\2\2\u0b8e\u0b91\3\2\2\2\u0b8f\u0b8d\3\2\2\2\u0b8f")
        buf.write("\u0b90\3\2\2\2\u0b90\u0bac\3\2\2\2\u0b91\u0b8f\3\2\2\2")
        buf.write("\u0b92\u0b93\7\u0100\2\2\u0b93\u0b96\7\u01b9\2\2\u0b94")
        buf.write("\u0b97\5\u0150\u00a9\2\u0b95\u0b97\7\u01b5\2\2\u0b96\u0b94")
        buf.write("\3\2\2\2\u0b96\u0b95\3\2\2\2\u0b97\u0bac\3\2\2\2\u0b98")
        buf.write("\u0b99\7\u00ff\2\2\u0b99\u0b9c\7\u01b9\2\2\u0b9a\u0b9d")
        buf.write("\5\u0150\u00a9\2\u0b9b\u0b9d\7\u01b5\2\2\u0b9c\u0b9a\3")
        buf.write("\2\2\2\u0b9c\u0b9b\3\2\2\2\u0b9d\u0bac\3\2\2\2\u0b9e\u0b9f")
        buf.write("\7\u0149\2\2\u0b9f\u0ba0\7\u01b9\2\2\u0ba0\u0bac\t\13")
        buf.write("\2\2\u0ba1\u0ba2\7\u0199\2\2\u0ba2\u0ba3\7\u01b9\2\2\u0ba3")
        buf.write("\u0bac\t\13\2\2\u0ba4\u0ba5\7\u019c\2\2\u0ba5\u0ba6\7")
        buf.write("\u01b9\2\2\u0ba6\u0bac\7\u01b3\2\2\u0ba7\u0ba8\7\u00fe")
        buf.write("\2\2\u0ba8\u0bac\t\13\2\2\u0ba9\u0baa\7\u019a\2\2\u0baa")
        buf.write("\u0bac\t\13\2\2\u0bab\u0b89\3\2\2\2\u0bab\u0b92\3\2\2")
        buf.write("\2\u0bab\u0b98\3\2\2\2\u0bab\u0b9e\3\2\2\2\u0bab\u0ba1")
        buf.write("\3\2\2\2\u0bab\u0ba4\3\2\2\2\u0bab\u0ba7\3\2\2\2\u0bab")
        buf.write("\u0ba9\3\2\2\2\u0bac\u0129\3\2\2\2\u0bad\u0bb4\7\u01ca")
        buf.write("\2\2\u0bae\u0baf\7\u014d\2\2\u0baf\u0bb0\7\u01b9\2\2\u0bb0")
        buf.write("\u0bb5\t\67\2\2\u0bb1\u0bb2\7\u0105\2\2\u0bb2\u0bb3\7")
        buf.write("\u01b9\2\2\u0bb3\u0bb5\7\u01b5\2\2\u0bb4\u0bae\3\2\2\2")
        buf.write("\u0bb4\u0bb1\3\2\2\2\u0bb5\u0bb6\3\2\2\2\u0bb6\u0bb7\7")
        buf.write("\u01cb\2\2\u0bb7\u012b\3\2\2\2\u0bb8\u0bbb\5\u012e\u0098")
        buf.write("\2\u0bb9\u0bbb\5\u0130\u0099\2\u0bba\u0bb8\3\2\2\2\u0bba")
        buf.write("\u0bb9\3\2\2\2\u0bbb\u012d\3\2\2\2\u0bbc\u0bbd\7\u0111")
        buf.write("\2\2\u0bbd\u0bc0\5\u0150\u00a9\2\u0bbe\u0bbf\7#\2\2\u0bbf")
        buf.write("\u0bc1\7\u0113\2\2\u0bc0\u0bbe\3\2\2\2\u0bc0\u0bc1\3\2")
        buf.write("\2\2\u0bc1\u0bc3\3\2\2\2\u0bc2\u0bc4\7\63\2\2\u0bc3\u0bc2")
        buf.write("\3\2\2\2\u0bc3\u0bc4\3\2\2\2\u0bc4\u0bc7\3\2\2\2\u0bc5")
        buf.write("\u0bc6\7#\2\2\u0bc6\u0bc8\7\u0141\2\2\u0bc7\u0bc5\3\2")
        buf.write("\2\2\u0bc7\u0bc8\3\2\2\2\u0bc8\u0bc9\3\2\2\2\u0bc9\u0bce")
        buf.write("\5\u0130\u0099\2\u0bca\u0bcb\7\u01cc\2\2\u0bcb\u0bcd\5")
        buf.write("\u0130\u0099\2\u0bcc\u0bca\3\2\2\2\u0bcd\u0bd0\3\2\2\2")
        buf.write("\u0bce\u0bcc\3\2\2\2\u0bce\u0bcf\3\2\2\2\u0bcf\u012f\3")
        buf.write("\2\2\2\u0bd0\u0bce\3\2\2\2\u0bd1\u0bd2\7\u01ca\2\2\u0bd2")
        buf.write("\u0bd3\7\u0148\2\2\u0bd3\u0bd6\7\u01b9\2\2\u0bd4\u0bd7")
        buf.write("\5\u0150\u00a9\2\u0bd5\u0bd7\7\u01b5\2\2\u0bd6\u0bd4\3")
        buf.write("\2\2\2\u0bd6\u0bd5\3\2\2\2\u0bd7\u0bd9\3\2\2\2\u0bd8\u0bda")
        buf.write("\7\u01cc\2\2\u0bd9\u0bd8\3\2\2\2\u0bd9\u0bda\3\2\2\2\u0bda")
        buf.write("\u0bdb\3\2\2\2\u0bdb\u0bdc\7H\2\2\u0bdc\u0bdd\7\u01b9")
        buf.write("\2\2\u0bdd\u0bdf\7\u01b5\2\2\u0bde\u0be0\7\u01cc\2\2\u0bdf")
        buf.write("\u0bde\3\2\2\2\u0bdf\u0be0\3\2\2\2\u0be0\u0be7\3\2\2\2")
        buf.write("\u0be1\u0be2\7\u0185\2\2\u0be2\u0be3\7\u01b9\2\2\u0be3")
        buf.write("\u0be5\5\u0158\u00ad\2\u0be4\u0be6\7\u01cc\2\2\u0be5\u0be4")
        buf.write("\3\2\2\2\u0be5\u0be6\3\2\2\2\u0be6\u0be8\3\2\2\2\u0be7")
        buf.write("\u0be1\3\2\2\2\u0be7\u0be8\3\2\2\2\u0be8\u0bf2\3\2\2\2")
        buf.write("\u0be9\u0bea\7\u013f\2\2\u0bea\u0bed\7\u01b9\2\2\u0beb")
        buf.write("\u0bee\5\u0158\u00ad\2\u0bec\u0bee\7\u01a2\2\2\u0bed\u0beb")
        buf.write("\3\2\2\2\u0bed\u0bec\3\2\2\2\u0bee\u0bf0\3\2\2\2\u0bef")
        buf.write("\u0bf1\7\u01cc\2\2\u0bf0\u0bef\3\2\2\2\u0bf0\u0bf1\3\2")
        buf.write("\2\2\u0bf1\u0bf3\3\2\2\2\u0bf2\u0be9\3\2\2\2\u0bf2\u0bf3")
        buf.write("\3\2\2\2\u0bf3\u0bfa\3\2\2\2\u0bf4\u0bf5\7\u0112\2\2\u0bf5")
        buf.write("\u0bf6\7\u01b9\2\2\u0bf6\u0bf8\5\u0158\u00ad\2\u0bf7\u0bf9")
        buf.write("\7\u01cc\2\2\u0bf8\u0bf7\3\2\2\2\u0bf8\u0bf9\3\2\2\2\u0bf9")
        buf.write("\u0bfb\3\2\2\2\u0bfa\u0bf4\3\2\2\2\u0bfa\u0bfb\3\2\2\2")
        buf.write("\u0bfb\u0bfc\3\2\2\2\u0bfc\u0bfd\7\u01cb\2\2\u0bfd\u0131")
        buf.write("\3\2\2\2\u0bfe\u0bff\5\u0150\u00a9\2\u0bff\u0c00\7\u01c5")
        buf.write("\2\2\u0c00\u0c01\5\u0150\u00a9\2\u0c01\u0c02\7\u01c5\2")
        buf.write("\2\u0c02\u0c03\5\u0150\u00a9\2\u0c03\u0c04\7\u01c5\2\2")
        buf.write("\u0c04\u0c10\3\2\2\2\u0c05\u0c06\5\u0150\u00a9\2\u0c06")
        buf.write("\u0c08\7\u01c5\2\2\u0c07\u0c09\5\u0150\u00a9\2\u0c08\u0c07")
        buf.write("\3\2\2\2\u0c08\u0c09\3\2\2\2\u0c09\u0c0a\3\2\2\2\u0c0a")
        buf.write("\u0c0b\7\u01c5\2\2\u0c0b\u0c10\3\2\2\2\u0c0c\u0c0d\5\u0150")
        buf.write("\u00a9\2\u0c0d\u0c0e\7\u01c5\2\2\u0c0e\u0c10\3\2\2\2\u0c0f")
        buf.write("\u0bfe\3\2\2\2\u0c0f\u0c05\3\2\2\2\u0c0f\u0c0c\3\2\2\2")
        buf.write("\u0c0f\u0c10\3\2\2\2\u0c10\u0c11\3\2\2\2\u0c11\u0c12\5")
        buf.write("\u0150\u00a9\2\u0c12\u0133\3\2\2\2\u0c13\u0c14\5\u0150")
        buf.write("\u00a9\2\u0c14\u0c16\7\u01c5\2\2\u0c15\u0c17\5\u0150\u00a9")
        buf.write("\2\u0c16\u0c15\3\2\2\2\u0c16\u0c17\3\2\2\2\u0c17\u0c18")
        buf.write("\3\2\2\2\u0c18\u0c19\7\u01c5\2\2\u0c19\u0c1e\3\2\2\2\u0c1a")
        buf.write("\u0c1b\5\u0150\u00a9\2\u0c1b\u0c1c\7\u01c5\2\2\u0c1c\u0c1e")
        buf.write("\3\2\2\2\u0c1d\u0c13\3\2\2\2\u0c1d\u0c1a\3\2\2\2\u0c1d")
        buf.write("\u0c1e\3\2\2\2\u0c1e\u0c1f\3\2\2\2\u0c1f\u0c20\5\u0150")
        buf.write("\u00a9\2\u0c20\u0135\3\2\2\2\u0c21\u0c22\5\u0150\u00a9")
        buf.write("\2\u0c22\u0c23\7\u01c5\2\2\u0c23\u0c25\3\2\2\2\u0c24\u0c21")
        buf.write("\3\2\2\2\u0c24\u0c25\3\2\2\2\u0c25\u0c26\3\2\2\2\u0c26")
        buf.write("\u0c27\5\u0150\u00a9\2\u0c27\u0137\3\2\2\2\u0c28\u0c29")
        buf.write("\5\u0150\u00a9\2\u0c29\u0c2b\7\u01c5\2\2\u0c2a\u0c2c\5")
        buf.write("\u0150\u00a9\2\u0c2b\u0c2a\3\2\2\2\u0c2b\u0c2c\3\2\2\2")
        buf.write("\u0c2c\u0c2d\3\2\2\2\u0c2d\u0c2e\7\u01c5\2\2\u0c2e\u0c33")
        buf.write("\3\2\2\2\u0c2f\u0c30\5\u0150\u00a9\2\u0c30\u0c31\7\u01c5")
        buf.write("\2\2\u0c31\u0c33\3\2\2\2\u0c32\u0c28\3\2\2\2\u0c32\u0c2f")
        buf.write("\3\2\2\2\u0c32\u0c33\3\2\2\2\u0c33\u0c34\3\2\2\2\u0c34")
        buf.write("\u0c35\5\u0150\u00a9\2\u0c35\u0139\3\2\2\2\u0c36\u0c39")
        buf.write("\5\u0132\u009a\2\u0c37\u0c39\7\u01b2\2\2\u0c38\u0c36\3")
        buf.write("\2\2\2\u0c38\u0c37\3\2\2\2\u0c39\u013b\3\2\2\2\u0c3a\u0c3b")
        buf.write("\5\u0134\u009b\2\u0c3b\u0c3c\7\u01c5\2\2\u0c3c\u0c3e\3")
        buf.write("\2\2\2\u0c3d\u0c3a\3\2\2\2\u0c3d\u0c3e\3\2\2\2\u0c3e\u0c3f")
        buf.write("\3\2\2\2\u0c3f\u0c40\5\u0150\u00a9\2\u0c40\u013d\3\2\2")
        buf.write("\2\u0c41\u0c46\5\u0150\u00a9\2\u0c42\u0c43\7\u01cc\2\2")
        buf.write("\u0c43\u0c45\5\u0150\u00a9\2\u0c44\u0c42\3\2\2\2\u0c45")
        buf.write("\u0c48\3\2\2\2\u0c46\u0c44\3\2\2\2\u0c46\u0c47\3\2\2\2")
        buf.write("\u0c47\u013f\3\2\2\2\u0c48\u0c46\3\2\2\2\u0c49\u0c4c\5")
        buf.write("\u0150\u00a9\2\u0c4a\u0c4c\7\u01b2\2\2\u0c4b\u0c49\3\2")
        buf.write("\2\2\u0c4b\u0c4a\3\2\2\2\u0c4c\u0141\3\2\2\2\u0c4d\u0c4e")
        buf.write("\t\13\2\2\u0c4e\u0143\3\2\2\2\u0c4f\u0c50\t8\2\2\u0c50")
        buf.write("\u0145\3\2\2\2\u0c51\u0c53\7p\2\2\u0c52\u0c51\3\2\2\2")
        buf.write("\u0c52\u0c53\3\2\2\2\u0c53\u0c54\3\2\2\2\u0c54\u0c55\7")
        buf.write("q\2\2\u0c55\u0147\3\2\2\2\u0c56\u0c5c\5\u0138\u009d\2")
        buf.write("\u0c57\u0c5c\7\u0098\2\2\u0c58\u0c5c\7e\2\2\u0c59\u0c5c")
        buf.write("\7\u00e1\2\2\u0c5a\u0c5c\7\u00e8\2\2\u0c5b\u0c56\3\2\2")
        buf.write("\2\u0c5b\u0c57\3\2\2\2\u0c5b\u0c58\3\2\2\2\u0c5b\u0c59")
        buf.write("\3\2\2\2\u0c5b\u0c5a\3\2\2\2\u0c5c\u0149\3\2\2\2\u0c5d")
        buf.write("\u0c60\7q\2\2\u0c5e\u0c60\5\u014c\u00a7\2\u0c5f\u0c5d")
        buf.write("\3\2\2\2\u0c5f\u0c5e\3\2\2\2\u0c60\u014b\3\2\2\2\u0c61")
        buf.write("\u0c71\7\u01b5\2\2\u0c62\u0c71\7\u01b6\2\2\u0c63\u0c65")
        buf.write("\5\u014e\u00a8\2\u0c64\u0c63\3\2\2\2\u0c64\u0c65\3\2\2")
        buf.write("\2\u0c65\u0c66\3\2\2\2\u0c66\u0c71\7\u01b3\2\2\u0c67\u0c69")
        buf.write("\5\u014e\u00a8\2\u0c68\u0c67\3\2\2\2\u0c68\u0c69\3\2\2")
        buf.write("\2\u0c69\u0c6a\3\2\2\2\u0c6a\u0c71\t9\2\2\u0c6b\u0c6d")
        buf.write("\5\u014e\u00a8\2\u0c6c\u0c6b\3\2\2\2\u0c6c\u0c6d\3\2\2")
        buf.write("\2\u0c6d\u0c6e\3\2\2\2\u0c6e\u0c6f\7\u01c9\2\2\u0c6f\u0c71")
        buf.write("\t:\2\2\u0c70\u0c61\3\2\2\2\u0c70\u0c62\3\2\2\2\u0c70")
        buf.write("\u0c64\3\2\2\2\u0c70\u0c68\3\2\2\2\u0c70\u0c6c\3\2\2\2")
        buf.write("\u0c71\u014d\3\2\2\2\u0c72\u0c73\t \2\2\u0c73\u014f\3")
        buf.write("\2\2\2\u0c74\u0c78\5\u0152\u00aa\2\u0c75\u0c78\7\u01b0")
        buf.write("\2\2\u0c76\u0c78\7\u01b1\2\2\u0c77\u0c74\3\2\2\2\u0c77")
        buf.write("\u0c75\3\2\2\2\u0c77\u0c76\3\2\2\2\u0c78\u0151\3\2\2\2")
        buf.write("\u0c79\u0c7a\t;\2\2\u0c7a\u0153\3\2\2\2\u0c7b\u0c8b\7")
        buf.write("\u01b9\2\2\u0c7c\u0c8b\7\u01ba\2\2\u0c7d\u0c8b\7\u01bb")
        buf.write("\2\2\u0c7e\u0c7f\7\u01bb\2\2\u0c7f\u0c8b\7\u01b9\2\2\u0c80")
        buf.write("\u0c81\7\u01ba\2\2\u0c81\u0c8b\7\u01b9\2\2\u0c82\u0c83")
        buf.write("\7\u01bb\2\2\u0c83\u0c8b\7\u01ba\2\2\u0c84\u0c85\7\u01bc")
        buf.write("\2\2\u0c85\u0c8b\7\u01b9\2\2\u0c86\u0c87\7\u01bc\2\2\u0c87")
        buf.write("\u0c8b\7\u01ba\2\2\u0c88\u0c89\7\u01bc\2\2\u0c89\u0c8b")
        buf.write("\7\u01bb\2\2\u0c8a\u0c7b\3\2\2\2\u0c8a\u0c7c\3\2\2\2\u0c8a")
        buf.write("\u0c7d\3\2\2\2\u0c8a\u0c7e\3\2\2\2\u0c8a\u0c80\3\2\2\2")
        buf.write("\u0c8a\u0c82\3\2\2\2\u0c8a\u0c84\3\2\2\2\u0c8a\u0c86\3")
        buf.write("\2\2\2\u0c8a\u0c88\3\2\2\2\u0c8b\u0155\3\2\2\2\u0c8c\u0c8d")
        buf.write("\t<\2\2\u0c8d\u0157\3\2\2\2\u0c8e\u0c90\7\u01b3\2\2\u0c8f")
        buf.write("\u0c91\t=\2\2\u0c90\u0c8f\3\2\2\2\u0c90\u0c91\3\2\2\2")
        buf.write("\u0c91\u0159\3\2\2\2\u0c92\u0c95\7\'\2\2\u0c93\u0c94\7")
        buf.write("~\2\2\u0c94\u0c96\7\6\2\2\u0c95\u0c93\3\2\2\2\u0c95\u0c96")
        buf.write("\3\2\2\2\u0c96\u0c99\3\2\2\2\u0c97\u0c99\7\6\2\2\u0c98")
        buf.write("\u0c92\3\2\2\2\u0c98\u0c97\3\2\2\2\u0c99\u0c9a\3\2\2\2")
        buf.write("\u0c9a\u0c9b\t>\2\2\u0c9b\u0c9e\5\u0138\u009d\2\u0c9c")
        buf.write("\u0c9d\7\u01cd\2\2\u0c9d\u0c9f\7\u01b3\2\2\u0c9e\u0c9c")
        buf.write("\3\2\2\2\u0c9e\u0c9f\3\2\2\2\u0c9f\u0cae\3\2\2\2\u0ca0")
        buf.write("\u0ca2\7\u01ca\2\2\u0ca1\u0ca0\3\2\2\2\u0ca1\u0ca2\3\2")
        buf.write("\2\2\u0ca2\u0ca3\3\2\2\2\u0ca3\u0ca8\5\u0164\u00b3\2\u0ca4")
        buf.write("\u0ca5\7\u01cc\2\2\u0ca5\u0ca7\5\u0164\u00b3\2\u0ca6\u0ca4")
        buf.write("\3\2\2\2\u0ca7\u0caa\3\2\2\2\u0ca8\u0ca6\3\2\2\2\u0ca8")
        buf.write("\u0ca9\3\2\2\2\u0ca9\u0cac\3\2\2\2\u0caa\u0ca8\3\2\2\2")
        buf.write("\u0cab\u0cad\7\u01cb\2\2\u0cac\u0cab\3\2\2\2\u0cac\u0cad")
        buf.write("\3\2\2\2\u0cad\u0caf\3\2\2\2\u0cae\u0ca1\3\2\2\2\u0cae")
        buf.write("\u0caf\3\2\2\2\u0caf\u0cb9\3\2\2\2\u0cb0\u0cb1\7\u00c9")
        buf.write("\2\2\u0cb1\u0cb6\5\u0166\u00b4\2\u0cb2\u0cb3\7\u01cc\2")
        buf.write("\2\u0cb3\u0cb5\5\u0166\u00b4\2\u0cb4\u0cb2\3\2\2\2\u0cb5")
        buf.write("\u0cb8\3\2\2\2\u0cb6\u0cb4\3\2\2\2\u0cb6\u0cb7\3\2\2\2")
        buf.write("\u0cb7\u0cba\3\2\2\2\u0cb8\u0cb6\3\2\2\2\u0cb9\u0cb0\3")
        buf.write("\2\2\2\u0cb9\u0cba\3\2\2\2\u0cba\u0cbd\3\2\2\2\u0cbb\u0cbc")
        buf.write("\7J\2\2\u0cbc\u0cbe\7\u0091\2\2\u0cbd\u0cbb\3\2\2\2\u0cbd")
        buf.write("\u0cbe\3\2\2\2\u0cbe\u0cbf\3\2\2\2\u0cbf\u0cc0\7\t\2\2")
        buf.write("\u0cc0\u0cc1\5\6\4\2\u0cc1\u015b\3\2\2\2\u0cc2\u0cc5\7")
        buf.write("\'\2\2\u0cc3\u0cc4\7~\2\2\u0cc4\u0cc6\7\6\2\2\u0cc5\u0cc3")
        buf.write("\3\2\2\2\u0cc5\u0cc6\3\2\2\2\u0cc6\u0cc9\3\2\2\2\u0cc7")
        buf.write("\u0cc9\7\6\2\2\u0cc8\u0cc2\3\2\2\2\u0cc8\u0cc7\3\2\2\2")
        buf.write("\u0cc9\u0cca\3\2\2\2\u0cca\u0ccb\7Q\2\2\u0ccb\u0cd9\5")
        buf.write("\u0138\u009d\2\u0ccc\u0ccd\7\u01ca\2\2\u0ccd\u0cd2\5\u0164")
        buf.write("\u00b3\2\u0cce\u0ccf\7\u01cc\2\2\u0ccf\u0cd1\5\u0164\u00b3")
        buf.write("\2\u0cd0\u0cce\3\2\2\2\u0cd1\u0cd4\3\2\2\2\u0cd2\u0cd0")
        buf.write("\3\2\2\2\u0cd2\u0cd3\3\2\2\2\u0cd3\u0cd5\3\2\2\2\u0cd4")
        buf.write("\u0cd2\3\2\2\2\u0cd5\u0cd6\7\u01cb\2\2\u0cd6\u0cda\3\2")
        buf.write("\2\2\u0cd7\u0cd8\7\u01ca\2\2\u0cd8\u0cda\7\u01cb\2\2\u0cd9")
        buf.write("\u0ccc\3\2\2\2\u0cd9\u0cd7\3\2\2\2\u0cda\u0cde\3\2\2\2")
        buf.write("\u0cdb\u0cdf\5\u015e\u00b0\2\u0cdc\u0cdf\5\u0160\u00b1")
        buf.write("\2\u0cdd\u0cdf\5\u0162\u00b2\2\u0cde\u0cdb\3\2\2\2\u0cde")
        buf.write("\u0cdc\3\2\2\2\u0cde\u0cdd\3\2\2\2\u0cdf\u0ce1\3\2\2\2")
        buf.write("\u0ce0\u0ce2\7\u01cd\2\2\u0ce1\u0ce0\3\2\2\2\u0ce1\u0ce2")
        buf.write("\3\2\2\2\u0ce2\u015d\3\2\2\2\u0ce3\u0ce4\7\u0095\2\2\u0ce4")
        buf.write("\u0cee\7\u00ac\2\2\u0ce5\u0ce6\7\u00c9\2\2\u0ce6\u0ceb")
        buf.write("\5\u0168\u00b5\2\u0ce7\u0ce8\7\u01cc\2\2\u0ce8\u0cea\5")
        buf.write("\u0168\u00b5\2\u0ce9\u0ce7\3\2\2\2\u0cea\u0ced\3\2\2\2")
        buf.write("\u0ceb\u0ce9\3\2\2\2\u0ceb\u0cec\3\2\2\2\u0cec\u0cef\3")
        buf.write("\2\2\2\u0ced\u0ceb\3\2\2\2\u0cee\u0ce5\3\2\2\2\u0cee\u0cef")
        buf.write("\3\2\2\2\u0cef\u0cf1\3\2\2\2\u0cf0\u0cf2\7\t\2\2\u0cf1")
        buf.write("\u0cf0\3\2\2\2\u0cf1\u0cf2\3\2\2\2\u0cf2\u0cf3\3\2\2\2")
        buf.write("\u0cf3\u0cf9\7\u0094\2\2\u0cf4\u0cf5\7\u01ca\2\2\u0cf5")
        buf.write("\u0cf6\5\32\16\2\u0cf6\u0cf7\7\u01cb\2\2\u0cf7\u0cfa\3")
        buf.write("\2\2\2\u0cf8\u0cfa\5\32\16\2\u0cf9\u0cf4\3\2\2\2\u0cf9")
        buf.write("\u0cf8\3\2\2\2\u0cfa\u015f\3\2\2\2\u0cfb\u0cfc\7\u0095")
        buf.write("\2\2\u0cfc\u0cfd\7\u01b2\2\2\u0cfd\u0d07\5\u008eH\2\u0cfe")
        buf.write("\u0cff\7\u00c9\2\2\u0cff\u0d04\5\u0168\u00b5\2\u0d00\u0d01")
        buf.write("\7\u01cc\2\2\u0d01\u0d03\5\u0168\u00b5\2\u0d02\u0d00\3")
        buf.write("\2\2\2\u0d03\u0d06\3\2\2\2\u0d04\u0d02\3\2\2\2\u0d04\u0d05")
        buf.write("\3\2\2\2\u0d05\u0d08\3\2\2\2\u0d06\u0d04\3\2\2\2\u0d07")
        buf.write("\u0cfe\3\2\2\2\u0d07\u0d08\3\2\2\2\u0d08\u0d0a\3\2\2\2")
        buf.write("\u0d09\u0d0b\7\t\2\2\u0d0a\u0d09\3\2\2\2\u0d0a\u0d0b\3")
        buf.write("\2\2\2\u0d0b\u0d0c\3\2\2\2\u0d0c\u0d10\7\r\2\2\u0d0d\u0d0f")
        buf.write("\5\b\5\2\u0d0e\u0d0d\3\2\2\2\u0d0f\u0d12\3\2\2\2\u0d10")
        buf.write("\u0d0e\3\2\2\2\u0d10\u0d11\3\2\2\2\u0d11\u0d13\3\2\2\2")
        buf.write("\u0d12\u0d10\3\2\2\2\u0d13\u0d15\7\u0094\2\2\u0d14\u0d16")
        buf.write("\7\u01cd\2\2\u0d15\u0d14\3\2\2\2\u0d15\u0d16\3\2\2\2\u0d16")
        buf.write("\u0d17\3\2\2\2\u0d17\u0d19\7>\2\2\u0d18\u0d1a\7\u01cd")
        buf.write("\2\2\u0d19\u0d18\3\2\2\2\u0d19\u0d1a\3\2\2\2\u0d1a\u0161")
        buf.write("\3\2\2\2\u0d1b\u0d1c\7\u0095\2\2\u0d1c\u0d26\5\u016e\u00b8")
        buf.write("\2\u0d1d\u0d1e\7\u00c9\2\2\u0d1e\u0d23\5\u0168\u00b5\2")
        buf.write("\u0d1f\u0d20\7\u01cc\2\2\u0d20\u0d22\5\u0168\u00b5\2\u0d21")
        buf.write("\u0d1f\3\2\2\2\u0d22\u0d25\3\2\2\2\u0d23\u0d21\3\2\2\2")
        buf.write("\u0d23\u0d24\3\2\2\2\u0d24\u0d27\3\2\2\2\u0d25\u0d23\3")
        buf.write("\2\2\2\u0d26\u0d1d\3\2\2\2\u0d26\u0d27\3\2\2\2\u0d27\u0d29")
        buf.write("\3\2\2\2\u0d28\u0d2a\7\t\2\2\u0d29\u0d28\3\2\2\2\u0d29")
        buf.write("\u0d2a\3\2\2\2\u0d2a\u0d2b\3\2\2\2\u0d2b\u0d2f\7\r\2\2")
        buf.write("\u0d2c\u0d2e\5\b\5\2\u0d2d\u0d2c\3\2\2\2\u0d2e\u0d31\3")
        buf.write("\2\2\2\u0d2f\u0d2d\3\2\2\2\u0d2f\u0d30\3\2\2\2\u0d30\u0d32")
        buf.write("\3\2\2\2\u0d31\u0d2f\3\2\2\2\u0d32\u0d33\7\u0094\2\2\u0d33")
        buf.write("\u0d35\5\u00a8U\2\u0d34\u0d36\7\u01cd\2\2\u0d35\u0d34")
        buf.write("\3\2\2\2\u0d35\u0d36\3\2\2\2\u0d36\u0d37\3\2\2\2\u0d37")
        buf.write("\u0d38\7>\2\2\u0d38\u0163\3\2\2\2\u0d39\u0d3d\7\u01b2")
        buf.write("\2\2\u0d3a\u0d3b\5\u0150\u00a9\2\u0d3b\u0d3c\7\u01c5\2")
        buf.write("\2\u0d3c\u0d3e\3\2\2\2\u0d3d\u0d3a\3\2\2\2\u0d3d\u0d3e")
        buf.write("\3\2\2\2\u0d3e\u0d40\3\2\2\2\u0d3f\u0d41\7\t\2\2\u0d40")
        buf.write("\u0d3f\3\2\2\2\u0d40\u0d41\3\2\2\2\u0d41\u0d42\3\2\2\2")
        buf.write("\u0d42\u0d44\5\u016e\u00b8\2\u0d43\u0d45\7\u00c3\2\2\u0d44")
        buf.write("\u0d43\3\2\2\2\u0d44\u0d45\3\2\2\2\u0d45\u0d48\3\2\2\2")
        buf.write("\u0d46\u0d47\7\u01b9\2\2\u0d47\u0d49\5\u014a\u00a6\2\u0d48")
        buf.write("\u0d46\3\2\2\2\u0d48\u0d49\3\2\2\2\u0d49\u0d4b\3\2\2\2")
        buf.write("\u0d4a\u0d4c\t?\2\2\u0d4b\u0d4a\3\2\2\2\u0d4b\u0d4c\3")
        buf.write("\2\2\2\u0d4c\u0165\3\2\2\2\u0d4d\u0d51\7\u010c\2\2\u0d4e")
        buf.write("\u0d51\7\u016c\2\2\u0d4f\u0d51\5\u008aF\2\u0d50\u0d4d")
        buf.write("\3\2\2\2\u0d50\u0d4e\3\2\2\2\u0d50\u0d4f\3\2\2\2\u0d51")
        buf.write("\u0167\3\2\2\2\u0d52\u0d5f\7\u010c\2\2\u0d53\u0d5f\7\u017b")
        buf.write("\2\2\u0d54\u0d55\7\u0095\2\2\u0d55\u0d56\7q\2\2\u0d56")
        buf.write("\u0d57\7w\2\2\u0d57\u0d58\7q\2\2\u0d58\u0d5f\7\u0128\2")
        buf.write("\2\u0d59\u0d5a\7\23\2\2\u0d5a\u0d5b\7w\2\2\u0d5b\u0d5c")
        buf.write("\7q\2\2\u0d5c\u0d5f\7\u0128\2\2\u0d5d\u0d5f\5\u008aF\2")
        buf.write("\u0d5e\u0d52\3\2\2\2\u0d5e\u0d53\3\2\2\2\u0d5e\u0d54\3")
        buf.write("\2\2\2\u0d5e\u0d59\3\2\2\2\u0d5e\u0d5d\3\2\2\2\u0d5f\u0169")
        buf.write("\3\2\2\2\u0d60\u0d61\7\u0161\2\2\u0d61\u0d62\7\u01ca\2")
        buf.write("\2\u0d62\u0d63\5\u00a8U\2\u0d63\u0d64\7\u01cb\2\2\u0d64")
        buf.write("\u0d65\7\u00ca\2\2\u0d65\u0d66\7T\2\2\u0d66\u0d67\7\u01ca")
        buf.write("\2\2\u0d67\u0d68\5\u00c8e\2\u0d68\u0d69\7\u01cb\2\2\u0d69")
        buf.write("\u0d6a\5\u011c\u008f\2\u0d6a\u016b\3\2\2\2\u0d6b\u0d6c")
        buf.write("\7\u018d\2\2\u0d6c\u0d6d\7\u01ca\2\2\u0d6d\u0d6e\5\u00a8")
        buf.write("U\2\u0d6e\u0d6f\7\u01cc\2\2\u0d6f\u0d70\5\u00a8U\2\u0d70")
        buf.write("\u0d71\7\u01cb\2\2\u0d71\u0d72\7\u00ca\2\2\u0d72\u0d73")
        buf.write("\7T\2\2\u0d73\u0d74\7\u01ca\2\2\u0d74\u0d75\5\u00c8e\2")
        buf.write("\u0d75\u0d76\7\u01cb\2\2\u0d76\u016d\3\2\2\2\u0d77\u0d79")
        buf.write("\5\u0150\u00a9\2\u0d78\u0d7a\7V\2\2\u0d79\u0d78\3\2\2")
        buf.write("\2\u0d79\u0d7a\3\2\2\2\u0d7a\u0d82\3\2\2\2\u0d7b\u0d7c")
        buf.write("\7\u01ca\2\2\u0d7c\u0d7f\t@\2\2\u0d7d\u0d7e\7\u01cc\2")
        buf.write("\2\u0d7e\u0d80\7\u01b3\2\2\u0d7f\u0d7d\3\2\2\2\u0d7f\u0d80")
        buf.write("\3\2\2\2\u0d80\u0d81\3\2\2\2\u0d81\u0d83\7\u01cb\2\2\u0d82")
        buf.write("\u0d7b\3\2\2\2\u0d82\u0d83\3\2\2\2\u0d83\u0d92\3\2\2\2")
        buf.write("\u0d84\u0d92\7\u00f5\2\2\u0d85\u0d86\7\u00fa\2\2\u0d86")
        buf.write("\u0d87\7\u01ca\2\2\u0d87\u0d88\7\u01b3\2\2\u0d88\u0d92")
        buf.write("\7\u01cb\2\2\u0d89\u0d8b\7:\2\2\u0d8a\u0d8c\7\u0086\2")
        buf.write("\2\u0d8b\u0d8a\3\2\2\2\u0d8b\u0d8c\3\2\2\2\u0d8c\u0d92")
        buf.write("\3\2\2\2\u0d8d\u0d92\7\u0129\2\2\u0d8e\u0d92\7\u0197\2")
        buf.write("\2\u0d8f\u0d92\7\u0186\2\2\u0d90\u0d92\7\u00e0\2\2\u0d91")
        buf.write("\u0d77\3\2\2\2\u0d91\u0d84\3\2\2\2\u0d91\u0d85\3\2\2\2")
        buf.write("\u0d91\u0d89\3\2\2\2\u0d91\u0d8d\3\2\2\2\u0d91\u0d8e\3")
        buf.write("\2\2\2\u0d91\u0d8f\3\2\2\2\u0d91\u0d90\3\2\2\2\u0d92\u016f")
        buf.write("\3\2\2\2\u01ef\u0173\u017a\u017e\u0182\u0188\u018e\u01a0")
        buf.write("\u01a4\u01a7\u01ab\u01af\u01b3\u01b8\u01bd\u01c4\u01c7")
        buf.write("\u01cb\u01ce\u01d6\u01d9\u01de\u01e1\u01e6\u01eb\u01ee")
        buf.write("\u01f3\u01f9\u0200\u0204\u0206\u020b\u0218\u021d\u021f")
        buf.write("\u0228\u022b\u022f\u0232\u0236\u0239\u023d\u0240\u0243")
        buf.write("\u0246\u0249\u024d\u0252\u0255\u0259\u025c\u0260\u0263")
        buf.write("\u0269\u026c\u0270\u0273\u0276\u027d\u0280\u0284\u0287")
        buf.write("\u028a\u028d\u0290\u0294\u0298\u029b\u02a3\u02a7\u02ab")
        buf.write("\u02ae\u02b1\u02b4\u02b7\u02be\u02c2\u02c4\u02cc\u02d2")
        buf.write("\u02d8\u02da\u02de\u02e1\u02e4\u02e9\u02ee\u02f1\u02f9")
        buf.write("\u02fd\u0304\u0307\u0310\u0313\u0317\u031f\u0322\u0326")
        buf.write("\u0329\u0332\u0336\u033a\u033d\u034d\u0351\u0357\u0359")
        buf.write("\u035c\u0364\u036a\u036f\u0372\u037b\u0383\u0386\u038d")
        buf.write("\u0390\u03b5\u03b8\u03be\u03ca\u03cc\u03cf\u03e7\u03f2")
        buf.write("\u03fa\u0405\u040a\u040d\u0415\u041f\u0439\u043f\u044a")
        buf.write("\u0458\u0460\u0467\u047e\u048b\u0491\u0496\u0499\u049f")
        buf.write("\u04a3\u04aa\u04b3\u04b7\u04bd\u04c4\u04c8\u04d5\u04db")
        buf.write("\u04ec\u04f0\u04f8\u04fc\u0504\u0508\u050a\u050e\u0512")
        buf.write("\u0516\u051a\u0520\u0524\u0526\u052b\u0533\u0536\u0539")
        buf.write("\u0542\u0547\u054c\u054f\u0551\u0555\u0559\u055c\u0560")
        buf.write("\u0566\u056b\u0572\u0574\u0578\u057f\u0583\u0586\u058f")
        buf.write("\u0592\u0594\u059d\u05a8\u05ac\u05ae\u05b0\u05b6\u05bb")
        buf.write("\u05c2\u05cf\u05d1\u05d3\u05d6\u05d9\u05e0\u05e3\u05e9")
        buf.write("\u05ee\u05f0\u05f3\u05f9\u0601\u0603\u0606\u060a\u060d")
        buf.write("\u0613\u0616\u061a\u061d\u0623\u0626\u0628\u062c\u0631")
        buf.write("\u0639\u063e\u0647\u064c\u0651\u0657\u065b\u065e\u0662")
        buf.write("\u0668\u0670\u0675\u0677\u067a\u067f\u0684\u0687\u068c")
        buf.write("\u068f\u0692\u0698\u069e\u06a2\u06a7\u06aa\u06af\u06b3")
        buf.write("\u06b7\u06bd\u06c3\u06cc\u06d6\u06e0\u06e2\u06e4\u06e7")
        buf.write("\u06ea\u06f5\u06f7\u06f9\u06fc\u06ff\u0702\u0705\u0708")
        buf.write("\u070b\u0717\u071a\u071d\u0726\u0729\u072c\u0733\u0736")
        buf.write("\u0744\u0747\u074e\u075d\u0761\u076e\u0772\u077a\u077e")
        buf.write("\u0792\u07a6\u07a8\u07b3\u07ba\u07c1\u07c9\u07d2\u07d6")
        buf.write("\u07e0\u07e7\u07f3\u07f5\u080c\u0815\u081b\u0821\u0827")
        buf.write("\u0832\u083a\u0842\u0847\u084b\u084f\u0852\u0857\u085b")
        buf.write("\u085f\u0868\u086b\u086e\u0872\u0876\u0882\u0890\u0895")
        buf.write("\u089a\u089e\u08a5\u08ae\u08b5\u08b7\u08c5\u08cd\u08d0")
        buf.write("\u08d2\u08d9\u08dd\u08e8\u090a\u091a\u0920\u0927\u092d")
        buf.write("\u0932\u093a\u093d\u093f\u0946\u094f\u0960\u0962\u0967")
        buf.write("\u096a\u096d\u0971\u0976\u0978\u097c\u0980\u0984\u098b")
        buf.write("\u098d\u098f\u0993\u0998\u099d\u09a4\u09b1\u09b5\u09b7")
        buf.write("\u09ba\u09be\u09d2\u09d6\u09da\u09e5\u09ec\u0a03\u0a4e")
        buf.write("\u0a52\u0a6e\u0a90\u0a94\u0aa1\u0aa9\u0ab5\u0abb\u0ac4")
        buf.write("\u0ad5\u0adb\u0ae3\u0ae7\u0aef\u0af6\u0b00\u0b08\u0b28")
        buf.write("\u0b2e\u0b33\u0b38\u0b3e\u0b41\u0b45\u0b4a\u0b59\u0b62")
        buf.write("\u0b65\u0b68\u0b75\u0b79\u0b81\u0b87\u0b8f\u0b96\u0b9c")
        buf.write("\u0bab\u0bb4\u0bba\u0bc0\u0bc3\u0bc7\u0bce\u0bd6\u0bd9")
        buf.write("\u0bdf\u0be5\u0be7\u0bed\u0bf0\u0bf2\u0bf8\u0bfa\u0c08")
        buf.write("\u0c0f\u0c16\u0c1d\u0c24\u0c2b\u0c32\u0c38\u0c3d\u0c46")
        buf.write("\u0c4b\u0c52\u0c5b\u0c5f\u0c64\u0c68\u0c6c\u0c70\u0c77")
        buf.write("\u0c8a\u0c90\u0c95\u0c98\u0c9e\u0ca1\u0ca8\u0cac\u0cae")
        buf.write("\u0cb6\u0cb9\u0cbd\u0cc5\u0cc8\u0cd2\u0cd9\u0cde\u0ce1")
        buf.write("\u0ceb\u0cee\u0cf1\u0cf9\u0d04\u0d07\u0d0a\u0d10\u0d15")
        buf.write("\u0d19\u0d23\u0d26\u0d29\u0d2f\u0d35\u0d3d\u0d40\u0d44")
        buf.write("\u0d48\u0d4b\u0d50\u0d5e\u0d79\u0d7f\u0d82\u0d8b\u0d91")
        return buf.getvalue()


class tsqlParser ( Parser ):

    grammarFileName = "tsql.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'='", "'>'", 
                     "'<'", "'!'", "'+='", "'-='", "'*='", "'/='", "'%='", 
                     "'&='", "'^='", "'|='", "'.'", "'_'", "'@'", "'#'", 
                     "'$'", "'('", "')'", "','", "';'", "':'", "'*'", "'/'", 
                     "'%'", "'+'", "'-'", "'~'", "'|'", "'&'", "'^'" ]

    symbolicNames = [ "<INVALID>", "HADR_options", "ADD", "ALL", "ALTER", 
                      "AND", "ANY", "AS", "ASC", "AUTHORIZATION", "BACKUP", 
                      "BEGIN", "BETWEEN", "BREAK", "BROWSE", "BULK", "BY", 
                      "CALLED", "CASCADE", "CASE", "CHANGETABLE", "CHANGES", 
                      "CHECK", "CHECKPOINT", "CLOSE", "CLUSTERED", "COALESCE", 
                      "COLLATE", "COLUMN", "COMMIT", "COMPUTE", "CONSTRAINT", 
                      "CONTAINMENT", "CONTAINS", "CONTAINSTABLE", "CONTINUE", 
                      "CONVERT", "CREATE", "CROSS", "CURRENT", "CURRENT_DATE", 
                      "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", 
                      "CURSOR", "DATABASE", "DBCC", "DEALLOCATE", "DECLARE", 
                      "DEFAULT", "DELETE", "DENY", "DESC", "DISK", "DISTINCT", 
                      "DISTRIBUTED", "DOUBLE", "DROP", "DUMP", "ELSE", "END", 
                      "ERRLVL", "ESCAPE", "EXCEPT", "EXECUTE", "EXISTS", 
                      "EXIT", "EXTERNAL", "FETCH", "FILE", "FILENAME", "FILLFACTOR", 
                      "FOR", "FORCESEEK", "FOREIGN", "FREETEXT", "FREETEXTTABLE", 
                      "FROM", "FULL", "FUNCTION", "GOTO", "GRANT", "GROUP", 
                      "HAVING", "IDENTITY", "IDENTITYCOL", "IDENTITY_INSERT", 
                      "IIF", "IF", "IN", "INDEX", "INNER", "INSERT", "INTERSECT", 
                      "INTO", "IS", "JOIN", "KEY", "KILL", "LEFT", "LIKE", 
                      "LINENO", "LOAD", "LOG", "MERGE", "NATIONAL", "NEXT", 
                      "NOCHECK", "NONCLUSTERED", "NONE", "NOT", "NULL", 
                      "NULLIF", "NUMERIC", "OF", "OFF", "OFFSETS", "ON", 
                      "OPEN", "OPENDATASOURCE", "OPENQUERY", "OPENROWSET", 
                      "OPENXML", "OPTION", "OR", "ORDER", "OUTER", "OVER", 
                      "PARTIAL", "PERCENT", "PIVOT", "PLAN", "PRECISION", 
                      "PRIMARY", "PRINT", "PROC", "PROCEDURE", "PUBLIC", 
                      "RAISERROR", "READ", "READTEXT", "RECONFIGURE", "REFERENCES", 
                      "REPLICATION", "RESTORE", "RESTRICT", "RETURN", "RETURNS", 
                      "REVERT", "REVOKE", "RIGHT", "ROLLBACK", "ROWCOUNT", 
                      "ROWGUIDCOL", "RULE", "SAVE", "SCHEMA", "SECURITYAUDIT", 
                      "SELECT", "SEMANTICKEYPHRASETABLE", "SEMANTICSIMILARITYDETAILSTABLE", 
                      "SEMANTICSIMILARITYTABLE", "SESSION_USER", "SET", 
                      "SETUSER", "SHUTDOWN", "SOME", "STATISTICS", "SYSTEM", 
                      "SYSTEM_USER", "TABLE", "TABLESAMPLE", "TEXTSIZE", 
                      "THEN", "TO", "TOP", "TRAN", "TRANSACTION", "TRIGGER", 
                      "TRUNCATE", "TRY_CAST", "TRY_CONVERT", "TRY_PARSE", 
                      "TSEQUAL", "UNION", "UNIQUE", "UNPIVOT", "UPDATE", 
                      "UPDATETEXT", "USE", "USER", "VALUES", "VALUE", "VARYING", 
                      "VIEW", "WAITFOR", "WHEN", "WHERE", "WHILE", "WITH", 
                      "WITHIN", "WRITETEXT", "ABSOLUTE", "AFTER", "ALLOWED", 
                      "ALLOW_SNAPSHOT_ISOLATION", "ANSI_NULLS", "ANSI_NULL_DEFAULT", 
                      "ANSI_PADDING", "ANSI_WARNINGS", "APPLY", "ARITHABORT", 
                      "AT", "AUTO", "AUTO_CLEANUP", "AUTO_CLOSE", "AUTO_CREATE_STATISTICS", 
                      "AUTO_SHRINK", "AUTO_UPDATE_STATISTICS", "AUTO_UPDATE_STATISTICS_ASYNC", 
                      "AVG", "BASE64", "BIGINT", "BINARY_CHECKSUM", "BULK_LOGGED", 
                      "CALLER", "CAST", "CATCH", "CHANGE_RETENTION", "CHANGE_TRACKING", 
                      "CHECKSUM", "CHECKSUM_AGG", "COMMITTED", "COMPATIBILITY_LEVEL", 
                      "CONCAT", "CONCAT_NULL_YIELDS_NULL", "CONTROL", "COOKIE", 
                      "COUNT", "COUNT_BIG", "CUBE", "CURSOR_CLOSE_ON_COMMIT", 
                      "CURSOR_DEFAULT", "DATE", "DATEADD", "DATEDIFF", "DATENAME", 
                      "DATEPART", "DATETIME2", "DATETIMEOFFSETFROMPARTS", 
                      "DATE_CORRELATION_OPTIMIZATION", "DAYS", "DB_CHAINING", 
                      "DEFAULT_FULLTEXT_LANGUAGE", "DEFAULT_LANGUAGE", "DELAY", 
                      "DELAYED_DURABILITY", "DELETED", "DENSE_RANK", "DIRECTORY_NAME", 
                      "DISABLE", "DISABLED", "DISABLE_BROKER", "DYNAMIC", 
                      "EMERGENCY", "ENABLE_BROKER", "ENCRYPTION", "ERROR_BROKER_CONVERSATIONS", 
                      "EXPAND", "FAST", "FAST_FORWARD", "FILEGROUP", "FILEGROWTH", 
                      "FILESTREAM", "FIRST", "FIRST_VALUE", "FOLLOWING", 
                      "FORCE", "FORCED", "FORWARD_ONLY", "FULLSCAN", "GB", 
                      "GLOBAL", "GO", "GROUPING", "GROUPING_ID", "HADR", 
                      "HASH", "HONOR_BROKER_PRIORITY", "HOURS", "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", 
                      "IMMEDIATE", "IMPERSONATE", "INCREMENTAL", "INPUT", 
                      "INT", "INSENSITIVE", "INSERTED", "ISOLATION", "IO", 
                      "KB", "KEEP", "KEEPFIXED", "KEYSET", "LAG", "LAST", 
                      "LAST_VALUE", "LEAD", "LEVEL", "LOCAL", "LOCK_ESCALATION", 
                      "LOGIN", "LOOP", "MARK", "MAX", "MAXDOP", "MAXRECURSION", 
                      "MAXSIZE", "MB", "MEMORY_OPTIMIZED_DATA", "MIN", "MINUTES", 
                      "MIN_ACTIVE_ROWVERSION", "MIXED_PAGE_ALLOCATION", 
                      "MODIFY", "MULTI_USER", "NAME", "NESTED_TRIGGERS", 
                      "NEW_BROKER", "NOCOUNT", "NOEXPAND", "NON_TRANSACTED_ACCESS", 
                      "NORECOMPUTE", "NO_WAIT", "NTILE", "NUMBER", "NUMERIC_ROUNDABORT", 
                      "OFFLINE", "OFFSET", "ONLINE", "ONLY", "OPTIMISTIC", 
                      "OPTIMIZE", "OUT", "OUTPUT", "OWNER", "PAGE_VERIFY", 
                      "PARAMETERIZATION", "PARSE", "PARTITION", "PATH", 
                      "PERCENTILE_CONT", "PRECEDING", "PRIOR", "PRIVILEGES", 
                      "QUOTED_IDENTIFIER", "RANGE", "RANK", "READONLY", 
                      "READ_COMMITTED_SNAPSHOT", "READ_ONLY", "READ_WRITE", 
                      "RECOMPILE", "RECOVERY", "RECURSIVE_TRIGGERS", "RELATIVE", 
                      "REMOTE", "REPEATABLE", "RESTRICTED_USER", "ROBUST", 
                      "ROLLUP", "ROOT", "ROW", "ROWGUID", "ROWS", "ROW_NUMBER", 
                      "SAMPLE", "SCHEMABINDING", "SCROLL", "SCROLL_LOCKS", 
                      "SECONDS", "SELF", "SERIALIZABLE", "SETS", "SHOWPLAN", 
                      "SIMPLE", "SINGLE_USER", "SIZE", "SMALLINT", "SNAPSHOT", 
                      "SPATIAL_WINDOW_MAX_CELLS", "STATIC", "STATS_STREAM", 
                      "STDEV", "STDEVP", "STRING_AGG", "STRING_SPLIT", "SUM", 
                      "TAKE", "TARGET_RECOVERY_TIME", "TB", "TEXTIMAGE_ON", 
                      "THROW", "TIES", "TIME", "TINYINT", "TORN_PAGE_DETECTION", 
                      "TRANSFORM_NOISE_WORDS", "TRUSTWORTHY", "TRY", "TWO_DIGIT_YEAR_CUTOFF", 
                      "TYPE", "TYPE_WARNING", "UNBOUNDED", "UNCOMMITTED", 
                      "UNKNOWN", "UNLIMITED", "USING", "VAR", "VARP", "VIEWS", 
                      "VIEW_METADATA", "WORK", "XML", "XMLNAMESPACES", "ZONE", 
                      "DOLLAR_ACTION", "SPACE", "COMMENT", "LINE_COMMENT", 
                      "DOUBLE_QUOTE_ID", "SQUARE_BRACKET_ID", "LOCAL_ID", 
                      "DECIMAL", "ID", "STRING", "BINARY", "FLOAT", "REAL", 
                      "EQUAL", "GREATER", "LESS", "EXCLAMATION", "PLUS_ASSIGN", 
                      "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
                      "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "DOT", "UNDERLINE", 
                      "AT_SIGN", "SHARP", "DOLLAR", "LR_BRACKET", "RR_BRACKET", 
                      "COMMA", "SEMI", "COLON", "STAR", "DIVIDE", "MODULE", 
                      "PLUS", "MINUS", "BIT_NOT", "BIT_OR", "BIT_AND", "BIT_XOR" ]

    RULE_tsql_file = 0
    RULE_batch = 1
    RULE_sql_clauses = 2
    RULE_sql_clause = 3
    RULE_dml_clause = 4
    RULE_ddl_clause = 5
    RULE_cfl_statement = 6
    RULE_another_statement = 7
    RULE_delete_statement = 8
    RULE_delete_statement_from = 9
    RULE_insert_statement = 10
    RULE_insert_statement_value = 11
    RULE_select_statement = 12
    RULE_update_statement = 13
    RULE_where_clause_dml = 14
    RULE_output_clause = 15
    RULE_output_dml_list_elem = 16
    RULE_output_column_name = 17
    RULE_create_database = 18
    RULE_create_index = 19
    RULE_create_statistics = 20
    RULE_create_table = 21
    RULE_create_view = 22
    RULE_view_attribute = 23
    RULE_alter_table = 24
    RULE_alter_database = 25
    RULE_database_optionspec = 26
    RULE_auto_option = 27
    RULE_change_tracking_option = 28
    RULE_change_tracking_option_list = 29
    RULE_containment_option = 30
    RULE_cursor_option = 31
    RULE_date_correlation_optimization_option = 32
    RULE_db_encryption_option = 33
    RULE_db_state_option = 34
    RULE_db_update_option = 35
    RULE_db_user_access_option = 36
    RULE_delayed_durability_option = 37
    RULE_external_access_option = 38
    RULE_mixed_page_allocation_option = 39
    RULE_parameterization_option = 40
    RULE_recovery_option = 41
    RULE_service_broker_option = 42
    RULE_snapshot_option = 43
    RULE_sql_option = 44
    RULE_target_recovery_time_option = 45
    RULE_termination = 46
    RULE_drop_index = 47
    RULE_drop_procedure = 48
    RULE_drop_statistics = 49
    RULE_drop_table = 50
    RULE_drop_view = 51
    RULE_create_type = 52
    RULE_drop_type = 53
    RULE_rowset_function_limited = 54
    RULE_openquery = 55
    RULE_opendatasource = 56
    RULE_declare_statement = 57
    RULE_cursor_statement = 58
    RULE_execute_statement = 59
    RULE_execute_statement_arg = 60
    RULE_execute_var_string = 61
    RULE_security_statement = 62
    RULE_grant_permission = 63
    RULE_set_statement = 64
    RULE_transaction_statement = 65
    RULE_go_statement = 66
    RULE_use_statement = 67
    RULE_execute_clause = 68
    RULE_declare_local = 69
    RULE_table_type_definition = 70
    RULE_column_def_table_constraints = 71
    RULE_column_def_table_constraint = 72
    RULE_column_definition = 73
    RULE_column_constraint = 74
    RULE_table_constraint = 75
    RULE_index_options = 76
    RULE_index_option = 77
    RULE_declare_cursor = 78
    RULE_declare_set_cursor_common = 79
    RULE_fetch_cursor = 80
    RULE_set_special = 81
    RULE_constant_LOCAL_ID = 82
    RULE_expression = 83
    RULE_constant_expression = 84
    RULE_subquery = 85
    RULE_with_expression = 86
    RULE_common_table_expression = 87
    RULE_update_elem = 88
    RULE_search_condition_list = 89
    RULE_search_condition = 90
    RULE_predicate = 91
    RULE_query_expression = 92
    RULE_union_op = 93
    RULE_query_specification = 94
    RULE_group_by_grouping_sets = 95
    RULE_grouping_set = 96
    RULE_top_clause = 97
    RULE_top_clause_dm = 98
    RULE_order_by_clause = 99
    RULE_fetch_expression = 100
    RULE_for_clause = 101
    RULE_xml_common_directives = 102
    RULE_order_by_expression = 103
    RULE_group_by_item = 104
    RULE_option_clause = 105
    RULE_option = 106
    RULE_optimize_for_arg = 107
    RULE_select_list = 108
    RULE_select_list_elem = 109
    RULE_table_sources = 110
    RULE_table_source = 111
    RULE_table_source_item = 112
    RULE_tablesample_clause = 113
    RULE_sample_number = 114
    RULE_repeat_seed = 115
    RULE_table_alias = 116
    RULE_change_table = 117
    RULE_join_type = 118
    RULE_table_name_with_hint = 119
    RULE_rowset_function = 120
    RULE_bulk_option = 121
    RULE_derived_table = 122
    RULE_function_call = 123
    RULE_switch_section = 124
    RULE_switch_search_condition_section = 125
    RULE_with_table_hints = 126
    RULE_insert_with_table_hints = 127
    RULE_table_hint = 128
    RULE_index_value = 129
    RULE_column_alias_list = 130
    RULE_column_alias = 131
    RULE_a_star = 132
    RULE_table_value_constructor = 133
    RULE_expression_list = 134
    RULE_value_list = 135
    RULE_next_value_for = 136
    RULE_next_value_for_function = 137
    RULE_ranking_windowed_function = 138
    RULE_aggregate_windowed_function = 139
    RULE_all_distinct = 140
    RULE_over_clause = 141
    RULE_row_or_range_clause = 142
    RULE_window_frame_extent = 143
    RULE_window_frame_bound = 144
    RULE_window_frame_preceding = 145
    RULE_window_frame_following = 146
    RULE_create_database_option = 147
    RULE_database_filestream_option = 148
    RULE_database_file_spec = 149
    RULE_file_group = 150
    RULE_file_spec = 151
    RULE_full_table_name = 152
    RULE_table_name = 153
    RULE_simple_name = 154
    RULE_func_proc_name = 155
    RULE_ddl_object = 156
    RULE_full_column_name = 157
    RULE_column_name_list = 158
    RULE_cursor_name = 159
    RULE_on_off = 160
    RULE_clustered = 161
    RULE_null_notnull = 162
    RULE_scalar_function_name = 163
    RULE_default_value = 164
    RULE_constant = 165
    RULE_sign = 166
    RULE_r_id = 167
    RULE_simple_id = 168
    RULE_comparison_operator = 169
    RULE_assignment_operator = 170
    RULE_file_size = 171
    RULE_create_or_alter_procedure = 172
    RULE_create_or_alter_function = 173
    RULE_func_body_returns_select = 174
    RULE_func_body_returns_table = 175
    RULE_func_body_returns_scalar = 176
    RULE_procedure_param = 177
    RULE_procedure_option = 178
    RULE_function_option = 179
    RULE_percentile_cont = 180
    RULE_string_agg = 181
    RULE_data_type = 182

    ruleNames =  [ "tsql_file", "batch", "sql_clauses", "sql_clause", "dml_clause", 
                   "ddl_clause", "cfl_statement", "another_statement", "delete_statement", 
                   "delete_statement_from", "insert_statement", "insert_statement_value", 
                   "select_statement", "update_statement", "where_clause_dml", 
                   "output_clause", "output_dml_list_elem", "output_column_name", 
                   "create_database", "create_index", "create_statistics", 
                   "create_table", "create_view", "view_attribute", "alter_table", 
                   "alter_database", "database_optionspec", "auto_option", 
                   "change_tracking_option", "change_tracking_option_list", 
                   "containment_option", "cursor_option", "date_correlation_optimization_option", 
                   "db_encryption_option", "db_state_option", "db_update_option", 
                   "db_user_access_option", "delayed_durability_option", 
                   "external_access_option", "mixed_page_allocation_option", 
                   "parameterization_option", "recovery_option", "service_broker_option", 
                   "snapshot_option", "sql_option", "target_recovery_time_option", 
                   "termination", "drop_index", "drop_procedure", "drop_statistics", 
                   "drop_table", "drop_view", "create_type", "drop_type", 
                   "rowset_function_limited", "openquery", "opendatasource", 
                   "declare_statement", "cursor_statement", "execute_statement", 
                   "execute_statement_arg", "execute_var_string", "security_statement", 
                   "grant_permission", "set_statement", "transaction_statement", 
                   "go_statement", "use_statement", "execute_clause", "declare_local", 
                   "table_type_definition", "column_def_table_constraints", 
                   "column_def_table_constraint", "column_definition", "column_constraint", 
                   "table_constraint", "index_options", "index_option", 
                   "declare_cursor", "declare_set_cursor_common", "fetch_cursor", 
                   "set_special", "constant_LOCAL_ID", "expression", "constant_expression", 
                   "subquery", "with_expression", "common_table_expression", 
                   "update_elem", "search_condition_list", "search_condition", 
                   "predicate", "query_expression", "union_op", "query_specification", 
                   "group_by_grouping_sets", "grouping_set", "top_clause", 
                   "top_clause_dm", "order_by_clause", "fetch_expression", 
                   "for_clause", "xml_common_directives", "order_by_expression", 
                   "group_by_item", "option_clause", "option", "optimize_for_arg", 
                   "select_list", "select_list_elem", "table_sources", "table_source", 
                   "table_source_item", "tablesample_clause", "sample_number", 
                   "repeat_seed", "table_alias", "change_table", "join_type", 
                   "table_name_with_hint", "rowset_function", "bulk_option", 
                   "derived_table", "function_call", "switch_section", "switch_search_condition_section", 
                   "with_table_hints", "insert_with_table_hints", "table_hint", 
                   "index_value", "column_alias_list", "column_alias", "a_star", 
                   "table_value_constructor", "expression_list", "value_list", 
                   "next_value_for", "next_value_for_function", "ranking_windowed_function", 
                   "aggregate_windowed_function", "all_distinct", "over_clause", 
                   "row_or_range_clause", "window_frame_extent", "window_frame_bound", 
                   "window_frame_preceding", "window_frame_following", "create_database_option", 
                   "database_filestream_option", "database_file_spec", "file_group", 
                   "file_spec", "full_table_name", "table_name", "simple_name", 
                   "func_proc_name", "ddl_object", "full_column_name", "column_name_list", 
                   "cursor_name", "on_off", "clustered", "null_notnull", 
                   "scalar_function_name", "default_value", "constant", 
                   "sign", "r_id", "simple_id", "comparison_operator", "assignment_operator", 
                   "file_size", "create_or_alter_procedure", "create_or_alter_function", 
                   "func_body_returns_select", "func_body_returns_table", 
                   "func_body_returns_scalar", "procedure_param", "procedure_option", 
                   "function_option", "percentile_cont", "string_agg", "data_type" ]

    EOF = Token.EOF
    HADR_options=1
    ADD=2
    ALL=3
    ALTER=4
    AND=5
    ANY=6
    AS=7
    ASC=8
    AUTHORIZATION=9
    BACKUP=10
    BEGIN=11
    BETWEEN=12
    BREAK=13
    BROWSE=14
    BULK=15
    BY=16
    CALLED=17
    CASCADE=18
    CASE=19
    CHANGETABLE=20
    CHANGES=21
    CHECK=22
    CHECKPOINT=23
    CLOSE=24
    CLUSTERED=25
    COALESCE=26
    COLLATE=27
    COLUMN=28
    COMMIT=29
    COMPUTE=30
    CONSTRAINT=31
    CONTAINMENT=32
    CONTAINS=33
    CONTAINSTABLE=34
    CONTINUE=35
    CONVERT=36
    CREATE=37
    CROSS=38
    CURRENT=39
    CURRENT_DATE=40
    CURRENT_TIME=41
    CURRENT_TIMESTAMP=42
    CURRENT_USER=43
    CURSOR=44
    DATABASE=45
    DBCC=46
    DEALLOCATE=47
    DECLARE=48
    DEFAULT=49
    DELETE=50
    DENY=51
    DESC=52
    DISK=53
    DISTINCT=54
    DISTRIBUTED=55
    DOUBLE=56
    DROP=57
    DUMP=58
    ELSE=59
    END=60
    ERRLVL=61
    ESCAPE=62
    EXCEPT=63
    EXECUTE=64
    EXISTS=65
    EXIT=66
    EXTERNAL=67
    FETCH=68
    FILE=69
    FILENAME=70
    FILLFACTOR=71
    FOR=72
    FORCESEEK=73
    FOREIGN=74
    FREETEXT=75
    FREETEXTTABLE=76
    FROM=77
    FULL=78
    FUNCTION=79
    GOTO=80
    GRANT=81
    GROUP=82
    HAVING=83
    IDENTITY=84
    IDENTITYCOL=85
    IDENTITY_INSERT=86
    IIF=87
    IF=88
    IN=89
    INDEX=90
    INNER=91
    INSERT=92
    INTERSECT=93
    INTO=94
    IS=95
    JOIN=96
    KEY=97
    KILL=98
    LEFT=99
    LIKE=100
    LINENO=101
    LOAD=102
    LOG=103
    MERGE=104
    NATIONAL=105
    NEXT=106
    NOCHECK=107
    NONCLUSTERED=108
    NONE=109
    NOT=110
    NULL=111
    NULLIF=112
    NUMERIC=113
    OF=114
    OFF=115
    OFFSETS=116
    ON=117
    OPEN=118
    OPENDATASOURCE=119
    OPENQUERY=120
    OPENROWSET=121
    OPENXML=122
    OPTION=123
    OR=124
    ORDER=125
    OUTER=126
    OVER=127
    PARTIAL=128
    PERCENT=129
    PIVOT=130
    PLAN=131
    PRECISION=132
    PRIMARY=133
    PRINT=134
    PROC=135
    PROCEDURE=136
    PUBLIC=137
    RAISERROR=138
    READ=139
    READTEXT=140
    RECONFIGURE=141
    REFERENCES=142
    REPLICATION=143
    RESTORE=144
    RESTRICT=145
    RETURN=146
    RETURNS=147
    REVERT=148
    REVOKE=149
    RIGHT=150
    ROLLBACK=151
    ROWCOUNT=152
    ROWGUIDCOL=153
    RULE=154
    SAVE=155
    SCHEMA=156
    SECURITYAUDIT=157
    SELECT=158
    SEMANTICKEYPHRASETABLE=159
    SEMANTICSIMILARITYDETAILSTABLE=160
    SEMANTICSIMILARITYTABLE=161
    SESSION_USER=162
    SET=163
    SETUSER=164
    SHUTDOWN=165
    SOME=166
    STATISTICS=167
    SYSTEM=168
    SYSTEM_USER=169
    TABLE=170
    TABLESAMPLE=171
    TEXTSIZE=172
    THEN=173
    TO=174
    TOP=175
    TRAN=176
    TRANSACTION=177
    TRIGGER=178
    TRUNCATE=179
    TRY_CAST=180
    TRY_CONVERT=181
    TRY_PARSE=182
    TSEQUAL=183
    UNION=184
    UNIQUE=185
    UNPIVOT=186
    UPDATE=187
    UPDATETEXT=188
    USE=189
    USER=190
    VALUES=191
    VALUE=192
    VARYING=193
    VIEW=194
    WAITFOR=195
    WHEN=196
    WHERE=197
    WHILE=198
    WITH=199
    WITHIN=200
    WRITETEXT=201
    ABSOLUTE=202
    AFTER=203
    ALLOWED=204
    ALLOW_SNAPSHOT_ISOLATION=205
    ANSI_NULLS=206
    ANSI_NULL_DEFAULT=207
    ANSI_PADDING=208
    ANSI_WARNINGS=209
    APPLY=210
    ARITHABORT=211
    AT=212
    AUTO=213
    AUTO_CLEANUP=214
    AUTO_CLOSE=215
    AUTO_CREATE_STATISTICS=216
    AUTO_SHRINK=217
    AUTO_UPDATE_STATISTICS=218
    AUTO_UPDATE_STATISTICS_ASYNC=219
    AVG=220
    BASE64=221
    BIGINT=222
    BINARY_CHECKSUM=223
    BULK_LOGGED=224
    CALLER=225
    CAST=226
    CATCH=227
    CHANGE_RETENTION=228
    CHANGE_TRACKING=229
    CHECKSUM=230
    CHECKSUM_AGG=231
    COMMITTED=232
    COMPATIBILITY_LEVEL=233
    CONCAT=234
    CONCAT_NULL_YIELDS_NULL=235
    CONTROL=236
    COOKIE=237
    COUNT=238
    COUNT_BIG=239
    CUBE=240
    CURSOR_CLOSE_ON_COMMIT=241
    CURSOR_DEFAULT=242
    DATE=243
    DATEADD=244
    DATEDIFF=245
    DATENAME=246
    DATEPART=247
    DATETIME2=248
    DATETIMEOFFSETFROMPARTS=249
    DATE_CORRELATION_OPTIMIZATION=250
    DAYS=251
    DB_CHAINING=252
    DEFAULT_FULLTEXT_LANGUAGE=253
    DEFAULT_LANGUAGE=254
    DELAY=255
    DELAYED_DURABILITY=256
    DELETED=257
    DENSE_RANK=258
    DIRECTORY_NAME=259
    DISABLE=260
    DISABLED=261
    DISABLE_BROKER=262
    DYNAMIC=263
    EMERGENCY=264
    ENABLE_BROKER=265
    ENCRYPTION=266
    ERROR_BROKER_CONVERSATIONS=267
    EXPAND=268
    FAST=269
    FAST_FORWARD=270
    FILEGROUP=271
    FILEGROWTH=272
    FILESTREAM=273
    FIRST=274
    FIRST_VALUE=275
    FOLLOWING=276
    FORCE=277
    FORCED=278
    FORWARD_ONLY=279
    FULLSCAN=280
    GB=281
    GLOBAL=282
    GO=283
    GROUPING=284
    GROUPING_ID=285
    HADR=286
    HASH=287
    HONOR_BROKER_PRIORITY=288
    HOURS=289
    IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX=290
    IMMEDIATE=291
    IMPERSONATE=292
    INCREMENTAL=293
    INPUT=294
    INT=295
    INSENSITIVE=296
    INSERTED=297
    ISOLATION=298
    IO=299
    KB=300
    KEEP=301
    KEEPFIXED=302
    KEYSET=303
    LAG=304
    LAST=305
    LAST_VALUE=306
    LEAD=307
    LEVEL=308
    LOCAL=309
    LOCK_ESCALATION=310
    LOGIN=311
    LOOP=312
    MARK=313
    MAX=314
    MAXDOP=315
    MAXRECURSION=316
    MAXSIZE=317
    MB=318
    MEMORY_OPTIMIZED_DATA=319
    MIN=320
    MINUTES=321
    MIN_ACTIVE_ROWVERSION=322
    MIXED_PAGE_ALLOCATION=323
    MODIFY=324
    MULTI_USER=325
    NAME=326
    NESTED_TRIGGERS=327
    NEW_BROKER=328
    NOCOUNT=329
    NOEXPAND=330
    NON_TRANSACTED_ACCESS=331
    NORECOMPUTE=332
    NO_WAIT=333
    NTILE=334
    NUMBER=335
    NUMERIC_ROUNDABORT=336
    OFFLINE=337
    OFFSET=338
    ONLINE=339
    ONLY=340
    OPTIMISTIC=341
    OPTIMIZE=342
    OUT=343
    OUTPUT=344
    OWNER=345
    PAGE_VERIFY=346
    PARAMETERIZATION=347
    PARSE=348
    PARTITION=349
    PATH=350
    PERCENTILE_CONT=351
    PRECEDING=352
    PRIOR=353
    PRIVILEGES=354
    QUOTED_IDENTIFIER=355
    RANGE=356
    RANK=357
    READONLY=358
    READ_COMMITTED_SNAPSHOT=359
    READ_ONLY=360
    READ_WRITE=361
    RECOMPILE=362
    RECOVERY=363
    RECURSIVE_TRIGGERS=364
    RELATIVE=365
    REMOTE=366
    REPEATABLE=367
    RESTRICTED_USER=368
    ROBUST=369
    ROLLUP=370
    ROOT=371
    ROW=372
    ROWGUID=373
    ROWS=374
    ROW_NUMBER=375
    SAMPLE=376
    SCHEMABINDING=377
    SCROLL=378
    SCROLL_LOCKS=379
    SECONDS=380
    SELF=381
    SERIALIZABLE=382
    SETS=383
    SHOWPLAN=384
    SIMPLE=385
    SINGLE_USER=386
    SIZE=387
    SMALLINT=388
    SNAPSHOT=389
    SPATIAL_WINDOW_MAX_CELLS=390
    STATIC=391
    STATS_STREAM=392
    STDEV=393
    STDEVP=394
    STRING_AGG=395
    STRING_SPLIT=396
    SUM=397
    TAKE=398
    TARGET_RECOVERY_TIME=399
    TB=400
    TEXTIMAGE_ON=401
    THROW=402
    TIES=403
    TIME=404
    TINYINT=405
    TORN_PAGE_DETECTION=406
    TRANSFORM_NOISE_WORDS=407
    TRUSTWORTHY=408
    TRY=409
    TWO_DIGIT_YEAR_CUTOFF=410
    TYPE=411
    TYPE_WARNING=412
    UNBOUNDED=413
    UNCOMMITTED=414
    UNKNOWN=415
    UNLIMITED=416
    USING=417
    VAR=418
    VARP=419
    VIEWS=420
    VIEW_METADATA=421
    WORK=422
    XML=423
    XMLNAMESPACES=424
    ZONE=425
    DOLLAR_ACTION=426
    SPACE=427
    COMMENT=428
    LINE_COMMENT=429
    DOUBLE_QUOTE_ID=430
    SQUARE_BRACKET_ID=431
    LOCAL_ID=432
    DECIMAL=433
    ID=434
    STRING=435
    BINARY=436
    FLOAT=437
    REAL=438
    EQUAL=439
    GREATER=440
    LESS=441
    EXCLAMATION=442
    PLUS_ASSIGN=443
    MINUS_ASSIGN=444
    MULT_ASSIGN=445
    DIV_ASSIGN=446
    MOD_ASSIGN=447
    AND_ASSIGN=448
    XOR_ASSIGN=449
    OR_ASSIGN=450
    DOT=451
    UNDERLINE=452
    AT_SIGN=453
    SHARP=454
    DOLLAR=455
    LR_BRACKET=456
    RR_BRACKET=457
    COMMA=458
    SEMI=459
    COLON=460
    STAR=461
    DIVIDE=462
    MODULE=463
    PLUS=464
    MINUS=465
    BIT_NOT=466
    BIT_OR=467
    BIT_AND=468
    BIT_XOR=469

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class Tsql_fileContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(tsqlParser.EOF, 0)

        def batch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.BatchContext)
            else:
                return self.getTypedRuleContext(tsqlParser.BatchContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_tsql_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTsql_file" ):
                listener.enterTsql_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTsql_file" ):
                listener.exitTsql_file(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTsql_file" ):
                return visitor.visitTsql_file(self)
            else:
                return visitor.visitChildren(self)




    def tsql_file(self):

        localctx = tsqlParser.Tsql_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_tsql_file)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << tsqlParser.ALTER) | (1 << tsqlParser.BEGIN) | (1 << tsqlParser.BREAK) | (1 << tsqlParser.CLOSE) | (1 << tsqlParser.COMMIT) | (1 << tsqlParser.CONTINUE) | (1 << tsqlParser.CREATE) | (1 << tsqlParser.DEALLOCATE) | (1 << tsqlParser.DECLARE) | (1 << tsqlParser.DELETE) | (1 << tsqlParser.DROP))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (tsqlParser.EXECUTE - 64)) | (1 << (tsqlParser.FETCH - 64)) | (1 << (tsqlParser.FORCESEEK - 64)) | (1 << (tsqlParser.GOTO - 64)) | (1 << (tsqlParser.GRANT - 64)) | (1 << (tsqlParser.IF - 64)) | (1 << (tsqlParser.INSERT - 64)) | (1 << (tsqlParser.NEXT - 64)) | (1 << (tsqlParser.NUMERIC - 64)) | (1 << (tsqlParser.OPEN - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (tsqlParser.PRINT - 134)) | (1 << (tsqlParser.RAISERROR - 134)) | (1 << (tsqlParser.RETURN - 134)) | (1 << (tsqlParser.REVERT - 134)) | (1 << (tsqlParser.ROLLBACK - 134)) | (1 << (tsqlParser.SAVE - 134)) | (1 << (tsqlParser.SELECT - 134)) | (1 << (tsqlParser.SET - 134)) | (1 << (tsqlParser.UPDATE - 134)) | (1 << (tsqlParser.USE - 134)) | (1 << (tsqlParser.VALUE - 134)) | (1 << (tsqlParser.WAITFOR - 134)))) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & ((1 << (tsqlParser.WHILE - 198)) | (1 << (tsqlParser.WITH - 198)) | (1 << (tsqlParser.ABSOLUTE - 198)) | (1 << (tsqlParser.APPLY - 198)) | (1 << (tsqlParser.AUTO - 198)) | (1 << (tsqlParser.AVG - 198)) | (1 << (tsqlParser.BASE64 - 198)) | (1 << (tsqlParser.CALLER - 198)) | (1 << (tsqlParser.CAST - 198)) | (1 << (tsqlParser.CATCH - 198)) | (1 << (tsqlParser.CHECKSUM_AGG - 198)) | (1 << (tsqlParser.COMMITTED - 198)) | (1 << (tsqlParser.CONCAT - 198)) | (1 << (tsqlParser.CONTROL - 198)) | (1 << (tsqlParser.COOKIE - 198)) | (1 << (tsqlParser.COUNT - 198)) | (1 << (tsqlParser.COUNT_BIG - 198)) | (1 << (tsqlParser.DATE - 198)) | (1 << (tsqlParser.DELAY - 198)) | (1 << (tsqlParser.DELETED - 198)) | (1 << (tsqlParser.DENSE_RANK - 198)) | (1 << (tsqlParser.DISABLE - 198)))) != 0) or ((((_la - 263)) & ~0x3f) == 0 and ((1 << (_la - 263)) & ((1 << (tsqlParser.DYNAMIC - 263)) | (1 << (tsqlParser.ENCRYPTION - 263)) | (1 << (tsqlParser.EXPAND - 263)) | (1 << (tsqlParser.FAST - 263)) | (1 << (tsqlParser.FAST_FORWARD - 263)) | (1 << (tsqlParser.FIRST - 263)) | (1 << (tsqlParser.FIRST_VALUE - 263)) | (1 << (tsqlParser.FOLLOWING - 263)) | (1 << (tsqlParser.FORCE - 263)) | (1 << (tsqlParser.FORCED - 263)) | (1 << (tsqlParser.FORWARD_ONLY - 263)) | (1 << (tsqlParser.FULLSCAN - 263)) | (1 << (tsqlParser.GLOBAL - 263)) | (1 << (tsqlParser.GO - 263)) | (1 << (tsqlParser.GROUPING - 263)) | (1 << (tsqlParser.GROUPING_ID - 263)) | (1 << (tsqlParser.HASH - 263)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 263)) | (1 << (tsqlParser.IMPERSONATE - 263)) | (1 << (tsqlParser.INSENSITIVE - 263)) | (1 << (tsqlParser.INSERTED - 263)) | (1 << (tsqlParser.ISOLATION - 263)) | (1 << (tsqlParser.IO - 263)) | (1 << (tsqlParser.KEEP - 263)) | (1 << (tsqlParser.KEEPFIXED - 263)) | (1 << (tsqlParser.KEYSET - 263)) | (1 << (tsqlParser.LAG - 263)) | (1 << (tsqlParser.LAST - 263)) | (1 << (tsqlParser.LAST_VALUE - 263)) | (1 << (tsqlParser.LEAD - 263)) | (1 << (tsqlParser.LEVEL - 263)) | (1 << (tsqlParser.LOCAL - 263)) | (1 << (tsqlParser.LOCK_ESCALATION - 263)) | (1 << (tsqlParser.LOGIN - 263)) | (1 << (tsqlParser.LOOP - 263)) | (1 << (tsqlParser.MARK - 263)) | (1 << (tsqlParser.MAX - 263)) | (1 << (tsqlParser.MAXDOP - 263)) | (1 << (tsqlParser.MAXRECURSION - 263)) | (1 << (tsqlParser.MIN - 263)) | (1 << (tsqlParser.MODIFY - 263)) | (1 << (tsqlParser.NAME - 263)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (tsqlParser.NOCOUNT - 329)) | (1 << (tsqlParser.NOEXPAND - 329)) | (1 << (tsqlParser.NORECOMPUTE - 329)) | (1 << (tsqlParser.NTILE - 329)) | (1 << (tsqlParser.NUMBER - 329)) | (1 << (tsqlParser.OFFSET - 329)) | (1 << (tsqlParser.ONLINE - 329)) | (1 << (tsqlParser.ONLY - 329)) | (1 << (tsqlParser.OPTIMISTIC - 329)) | (1 << (tsqlParser.OPTIMIZE - 329)) | (1 << (tsqlParser.OUT - 329)) | (1 << (tsqlParser.OUTPUT - 329)) | (1 << (tsqlParser.OWNER - 329)) | (1 << (tsqlParser.PARAMETERIZATION - 329)) | (1 << (tsqlParser.PARTITION - 329)) | (1 << (tsqlParser.PATH - 329)) | (1 << (tsqlParser.PRECEDING - 329)) | (1 << (tsqlParser.PRIOR - 329)) | (1 << (tsqlParser.PRIVILEGES - 329)) | (1 << (tsqlParser.RANGE - 329)) | (1 << (tsqlParser.RANK - 329)) | (1 << (tsqlParser.READONLY - 329)) | (1 << (tsqlParser.READ_ONLY - 329)) | (1 << (tsqlParser.RECOMPILE - 329)) | (1 << (tsqlParser.RELATIVE - 329)) | (1 << (tsqlParser.REMOTE - 329)) | (1 << (tsqlParser.REPEATABLE - 329)) | (1 << (tsqlParser.ROBUST - 329)) | (1 << (tsqlParser.ROOT - 329)) | (1 << (tsqlParser.ROW - 329)) | (1 << (tsqlParser.ROWGUID - 329)) | (1 << (tsqlParser.ROWS - 329)) | (1 << (tsqlParser.ROW_NUMBER - 329)) | (1 << (tsqlParser.SAMPLE - 329)) | (1 << (tsqlParser.SCHEMABINDING - 329)) | (1 << (tsqlParser.SCROLL - 329)) | (1 << (tsqlParser.SCROLL_LOCKS - 329)) | (1 << (tsqlParser.SELF - 329)) | (1 << (tsqlParser.SERIALIZABLE - 329)) | (1 << (tsqlParser.SIMPLE - 329)) | (1 << (tsqlParser.SIZE - 329)) | (1 << (tsqlParser.SNAPSHOT - 329)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 329)) | (1 << (tsqlParser.STATIC - 329)) | (1 << (tsqlParser.STATS_STREAM - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (tsqlParser.STDEV - 393)) | (1 << (tsqlParser.STDEVP - 393)) | (1 << (tsqlParser.SUM - 393)) | (1 << (tsqlParser.TEXTIMAGE_ON - 393)) | (1 << (tsqlParser.THROW - 393)) | (1 << (tsqlParser.TIES - 393)) | (1 << (tsqlParser.TIME - 393)) | (1 << (tsqlParser.TRY - 393)) | (1 << (tsqlParser.TYPE - 393)) | (1 << (tsqlParser.TYPE_WARNING - 393)) | (1 << (tsqlParser.UNBOUNDED - 393)) | (1 << (tsqlParser.UNCOMMITTED - 393)) | (1 << (tsqlParser.UNKNOWN - 393)) | (1 << (tsqlParser.USING - 393)) | (1 << (tsqlParser.VAR - 393)) | (1 << (tsqlParser.VARP - 393)) | (1 << (tsqlParser.VIEWS - 393)) | (1 << (tsqlParser.VIEW_METADATA - 393)) | (1 << (tsqlParser.WORK - 393)) | (1 << (tsqlParser.XML - 393)) | (1 << (tsqlParser.XMLNAMESPACES - 393)) | (1 << (tsqlParser.ZONE - 393)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 393)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 393)) | (1 << (tsqlParser.ID - 393)) | (1 << (tsqlParser.LR_BRACKET - 393)))) != 0):
                self.state = 366
                self.batch()
                self.state = 371
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 372
            self.match(tsqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BatchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_clauses(self):
            return self.getTypedRuleContext(tsqlParser.Sql_clausesContext,0)


        def go_statement(self):
            return self.getTypedRuleContext(tsqlParser.Go_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_batch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBatch" ):
                listener.enterBatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBatch" ):
                listener.exitBatch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBatch" ):
                return visitor.visitBatch(self)
            else:
                return visitor.visitChildren(self)




    def batch(self):

        localctx = tsqlParser.BatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_batch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 374
            self.sql_clauses()
            self.state = 376
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 375
                self.go_statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Sql_clauseContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Sql_clauseContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.SEMI)
            else:
                return self.getToken(tsqlParser.SEMI, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_sql_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_clauses" ):
                listener.enterSql_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_clauses" ):
                listener.exitSql_clauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_clauses" ):
                return visitor.visitSql_clauses(self)
            else:
                return visitor.visitChildren(self)




    def sql_clauses(self):

        localctx = tsqlParser.Sql_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sql_clauses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 378
                    self.sql_clause()
                    self.state = 380
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                    if la_ == 1:
                        self.state = 379
                        self.match(tsqlParser.SEMI)



                else:
                    raise NoViableAltException(self)
                self.state = 384 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_clause(self):
            return self.getTypedRuleContext(tsqlParser.Dml_clauseContext,0)


        def ddl_clause(self):
            return self.getTypedRuleContext(tsqlParser.Ddl_clauseContext,0)


        def cfl_statement(self):
            return self.getTypedRuleContext(tsqlParser.Cfl_statementContext,0)


        def another_statement(self):
            return self.getTypedRuleContext(tsqlParser.Another_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_sql_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_clause" ):
                listener.enterSql_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_clause" ):
                listener.exitSql_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_clause" ):
                return visitor.visitSql_clause(self)
            else:
                return visitor.visitChildren(self)




    def sql_clause(self):

        localctx = tsqlParser.Sql_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_sql_clause)
        try:
            self.state = 390
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 386
                self.dml_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 387
                self.ddl_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 388
                self.cfl_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 389
                self.another_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dml_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def delete_statement(self):
            return self.getTypedRuleContext(tsqlParser.Delete_statementContext,0)


        def insert_statement(self):
            return self.getTypedRuleContext(tsqlParser.Insert_statementContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def update_statement(self):
            return self.getTypedRuleContext(tsqlParser.Update_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_dml_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_clause" ):
                listener.enterDml_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_clause" ):
                listener.exitDml_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDml_clause" ):
                return visitor.visitDml_clause(self)
            else:
                return visitor.visitChildren(self)




    def dml_clause(self):

        localctx = tsqlParser.Dml_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_dml_clause)
        try:
            self.state = 396
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 392
                self.delete_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 393
                self.insert_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 394
                self.select_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 395
                self.update_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ddl_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def create_database(self):
            return self.getTypedRuleContext(tsqlParser.Create_databaseContext,0)


        def create_index(self):
            return self.getTypedRuleContext(tsqlParser.Create_indexContext,0)


        def create_or_alter_function(self):
            return self.getTypedRuleContext(tsqlParser.Create_or_alter_functionContext,0)


        def create_or_alter_procedure(self):
            return self.getTypedRuleContext(tsqlParser.Create_or_alter_procedureContext,0)


        def create_statistics(self):
            return self.getTypedRuleContext(tsqlParser.Create_statisticsContext,0)


        def create_table(self):
            return self.getTypedRuleContext(tsqlParser.Create_tableContext,0)


        def create_type(self):
            return self.getTypedRuleContext(tsqlParser.Create_typeContext,0)


        def create_view(self):
            return self.getTypedRuleContext(tsqlParser.Create_viewContext,0)


        def alter_table(self):
            return self.getTypedRuleContext(tsqlParser.Alter_tableContext,0)


        def alter_database(self):
            return self.getTypedRuleContext(tsqlParser.Alter_databaseContext,0)


        def drop_index(self):
            return self.getTypedRuleContext(tsqlParser.Drop_indexContext,0)


        def drop_procedure(self):
            return self.getTypedRuleContext(tsqlParser.Drop_procedureContext,0)


        def drop_statistics(self):
            return self.getTypedRuleContext(tsqlParser.Drop_statisticsContext,0)


        def drop_table(self):
            return self.getTypedRuleContext(tsqlParser.Drop_tableContext,0)


        def drop_type(self):
            return self.getTypedRuleContext(tsqlParser.Drop_typeContext,0)


        def drop_view(self):
            return self.getTypedRuleContext(tsqlParser.Drop_viewContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_ddl_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdl_clause" ):
                listener.enterDdl_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdl_clause" ):
                listener.exitDdl_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDdl_clause" ):
                return visitor.visitDdl_clause(self)
            else:
                return visitor.visitChildren(self)




    def ddl_clause(self):

        localctx = tsqlParser.Ddl_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_ddl_clause)
        try:
            self.state = 414
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 398
                self.create_database()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 399
                self.create_index()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 400
                self.create_or_alter_function()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 401
                self.create_or_alter_procedure()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 402
                self.create_statistics()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 403
                self.create_table()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 404
                self.create_type()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 405
                self.create_view()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 406
                self.alter_table()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 407
                self.alter_database()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 408
                self.drop_index()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 409
                self.drop_procedure()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 410
                self.drop_statistics()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 411
                self.drop_table()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 412
                self.drop_type()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 413
                self.drop_view()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cfl_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_cfl_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Waitfor_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WAITFOR(self):
            return self.getToken(tsqlParser.WAITFOR, 0)
        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def DELAY(self):
            return self.getToken(tsqlParser.DELAY, 0)
        def TIME(self):
            return self.getToken(tsqlParser.TIME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWaitfor_statement" ):
                listener.enterWaitfor_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWaitfor_statement" ):
                listener.exitWaitfor_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWaitfor_statement" ):
                return visitor.visitWaitfor_statement(self)
            else:
                return visitor.visitChildren(self)


    class Print_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PRINT(self):
            return self.getToken(tsqlParser.PRINT, 0)
        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_statement" ):
                listener.enterPrint_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_statement" ):
                listener.exitPrint_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrint_statement" ):
                return visitor.visitPrint_statement(self)
            else:
                return visitor.visitChildren(self)


    class Continue_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONTINUE(self):
            return self.getToken(tsqlParser.CONTINUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_statement" ):
                listener.enterContinue_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_statement" ):
                listener.exitContinue_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_statement" ):
                return visitor.visitContinue_statement(self)
            else:
                return visitor.visitChildren(self)


    class If_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.if_expr = None # Sql_clauseContext
            self.else_expr = None # Sql_clauseContext
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(tsqlParser.IF, 0)
        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)

        def sql_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Sql_clauseContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Sql_clauseContext,i)

        def ELSE(self):
            return self.getToken(tsqlParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_statement" ):
                return visitor.visitIf_statement(self)
            else:
                return visitor.visitChildren(self)


    class Raiseerror_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.msg = None # Token
            self.severity = None # Constant_LOCAL_IDContext
            self.state = None # Constant_LOCAL_IDContext
            self.copyFrom(ctx)

        def RAISERROR(self):
            return self.getToken(tsqlParser.RAISERROR, 0)
        def constant_LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Constant_LOCAL_IDContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Constant_LOCAL_IDContext,i)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)
        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)
        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaiseerror_statement" ):
                listener.enterRaiseerror_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaiseerror_statement" ):
                listener.exitRaiseerror_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaiseerror_statement" ):
                return visitor.visitRaiseerror_statement(self)
            else:
                return visitor.visitChildren(self)


    class Throw_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.error_number = None # Token
            self.message = None # Token
            self.state = None # Token
            self.copyFrom(ctx)

        def THROW(self):
            return self.getToken(tsqlParser.THROW, 0)
        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DECIMAL)
            else:
                return self.getToken(tsqlParser.DECIMAL, i)
        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.LOCAL_ID)
            else:
                return self.getToken(tsqlParser.LOCAL_ID, i)
        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrow_statement" ):
                listener.enterThrow_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrow_statement" ):
                listener.exitThrow_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThrow_statement" ):
                return visitor.visitThrow_statement(self)
            else:
                return visitor.visitChildren(self)


    class Try_catch_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.try_clauses = None # Sql_clausesContext
            self.catch_clauses = None # Sql_clausesContext
            self.copyFrom(ctx)

        def BEGIN(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.BEGIN)
            else:
                return self.getToken(tsqlParser.BEGIN, i)
        def TRY(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.TRY)
            else:
                return self.getToken(tsqlParser.TRY, i)
        def END(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.END)
            else:
                return self.getToken(tsqlParser.END, i)
        def CATCH(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.CATCH)
            else:
                return self.getToken(tsqlParser.CATCH, i)
        def sql_clauses(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Sql_clausesContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Sql_clausesContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_catch_statement" ):
                listener.enterTry_catch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_catch_statement" ):
                listener.exitTry_catch_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTry_catch_statement" ):
                return visitor.visitTry_catch_statement(self)
            else:
                return visitor.visitChildren(self)


    class While_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WHILE(self):
            return self.getToken(tsqlParser.WHILE, 0)
        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)

        def sql_clause(self):
            return self.getTypedRuleContext(tsqlParser.Sql_clauseContext,0)

        def BREAK(self):
            return self.getToken(tsqlParser.BREAK, 0)
        def CONTINUE(self):
            return self.getToken(tsqlParser.CONTINUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_statement" ):
                listener.enterWhile_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_statement" ):
                listener.exitWhile_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_statement" ):
                return visitor.visitWhile_statement(self)
            else:
                return visitor.visitChildren(self)


    class Block_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BEGIN(self):
            return self.getToken(tsqlParser.BEGIN, 0)
        def END(self):
            return self.getToken(tsqlParser.END, 0)
        def sql_clauses(self):
            return self.getTypedRuleContext(tsqlParser.Sql_clausesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock_statement" ):
                listener.enterBlock_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock_statement" ):
                listener.exitBlock_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock_statement" ):
                return visitor.visitBlock_statement(self)
            else:
                return visitor.visitChildren(self)


    class Break_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BREAK(self):
            return self.getToken(tsqlParser.BREAK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_statement" ):
                listener.enterBreak_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_statement" ):
                listener.exitBreak_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_statement" ):
                return visitor.visitBreak_statement(self)
            else:
                return visitor.visitChildren(self)


    class Goto_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GOTO(self):
            return self.getToken(tsqlParser.GOTO, 0)
        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoto_statement" ):
                listener.enterGoto_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoto_statement" ):
                listener.exitGoto_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGoto_statement" ):
                return visitor.visitGoto_statement(self)
            else:
                return visitor.visitChildren(self)


    class Return_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(tsqlParser.RETURN, 0)
        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_statement" ):
                listener.enterReturn_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_statement" ):
                listener.exitReturn_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_statement" ):
                return visitor.visitReturn_statement(self)
            else:
                return visitor.visitChildren(self)



    def cfl_statement(self):

        localctx = tsqlParser.Cfl_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_cfl_statement)
        self._la = 0 # Token type
        try:
            self.state = 541
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                localctx = tsqlParser.Block_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 416
                self.match(tsqlParser.BEGIN)
                self.state = 418
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.SEMI:
                    self.state = 417
                    self.match(tsqlParser.SEMI)


                self.state = 421
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << tsqlParser.ALTER) | (1 << tsqlParser.BEGIN) | (1 << tsqlParser.BREAK) | (1 << tsqlParser.CLOSE) | (1 << tsqlParser.COMMIT) | (1 << tsqlParser.CONTINUE) | (1 << tsqlParser.CREATE) | (1 << tsqlParser.DEALLOCATE) | (1 << tsqlParser.DECLARE) | (1 << tsqlParser.DELETE) | (1 << tsqlParser.DROP))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (tsqlParser.EXECUTE - 64)) | (1 << (tsqlParser.FETCH - 64)) | (1 << (tsqlParser.FORCESEEK - 64)) | (1 << (tsqlParser.GOTO - 64)) | (1 << (tsqlParser.GRANT - 64)) | (1 << (tsqlParser.IF - 64)) | (1 << (tsqlParser.INSERT - 64)) | (1 << (tsqlParser.NEXT - 64)) | (1 << (tsqlParser.NUMERIC - 64)) | (1 << (tsqlParser.OPEN - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (tsqlParser.PRINT - 134)) | (1 << (tsqlParser.RAISERROR - 134)) | (1 << (tsqlParser.RETURN - 134)) | (1 << (tsqlParser.REVERT - 134)) | (1 << (tsqlParser.ROLLBACK - 134)) | (1 << (tsqlParser.SAVE - 134)) | (1 << (tsqlParser.SELECT - 134)) | (1 << (tsqlParser.SET - 134)) | (1 << (tsqlParser.UPDATE - 134)) | (1 << (tsqlParser.USE - 134)) | (1 << (tsqlParser.VALUE - 134)) | (1 << (tsqlParser.WAITFOR - 134)))) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & ((1 << (tsqlParser.WHILE - 198)) | (1 << (tsqlParser.WITH - 198)) | (1 << (tsqlParser.ABSOLUTE - 198)) | (1 << (tsqlParser.APPLY - 198)) | (1 << (tsqlParser.AUTO - 198)) | (1 << (tsqlParser.AVG - 198)) | (1 << (tsqlParser.BASE64 - 198)) | (1 << (tsqlParser.CALLER - 198)) | (1 << (tsqlParser.CAST - 198)) | (1 << (tsqlParser.CATCH - 198)) | (1 << (tsqlParser.CHECKSUM_AGG - 198)) | (1 << (tsqlParser.COMMITTED - 198)) | (1 << (tsqlParser.CONCAT - 198)) | (1 << (tsqlParser.CONTROL - 198)) | (1 << (tsqlParser.COOKIE - 198)) | (1 << (tsqlParser.COUNT - 198)) | (1 << (tsqlParser.COUNT_BIG - 198)) | (1 << (tsqlParser.DATE - 198)) | (1 << (tsqlParser.DELAY - 198)) | (1 << (tsqlParser.DELETED - 198)) | (1 << (tsqlParser.DENSE_RANK - 198)) | (1 << (tsqlParser.DISABLE - 198)))) != 0) or ((((_la - 263)) & ~0x3f) == 0 and ((1 << (_la - 263)) & ((1 << (tsqlParser.DYNAMIC - 263)) | (1 << (tsqlParser.ENCRYPTION - 263)) | (1 << (tsqlParser.EXPAND - 263)) | (1 << (tsqlParser.FAST - 263)) | (1 << (tsqlParser.FAST_FORWARD - 263)) | (1 << (tsqlParser.FIRST - 263)) | (1 << (tsqlParser.FIRST_VALUE - 263)) | (1 << (tsqlParser.FOLLOWING - 263)) | (1 << (tsqlParser.FORCE - 263)) | (1 << (tsqlParser.FORCED - 263)) | (1 << (tsqlParser.FORWARD_ONLY - 263)) | (1 << (tsqlParser.FULLSCAN - 263)) | (1 << (tsqlParser.GLOBAL - 263)) | (1 << (tsqlParser.GO - 263)) | (1 << (tsqlParser.GROUPING - 263)) | (1 << (tsqlParser.GROUPING_ID - 263)) | (1 << (tsqlParser.HASH - 263)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 263)) | (1 << (tsqlParser.IMPERSONATE - 263)) | (1 << (tsqlParser.INSENSITIVE - 263)) | (1 << (tsqlParser.INSERTED - 263)) | (1 << (tsqlParser.ISOLATION - 263)) | (1 << (tsqlParser.IO - 263)) | (1 << (tsqlParser.KEEP - 263)) | (1 << (tsqlParser.KEEPFIXED - 263)) | (1 << (tsqlParser.KEYSET - 263)) | (1 << (tsqlParser.LAG - 263)) | (1 << (tsqlParser.LAST - 263)) | (1 << (tsqlParser.LAST_VALUE - 263)) | (1 << (tsqlParser.LEAD - 263)) | (1 << (tsqlParser.LEVEL - 263)) | (1 << (tsqlParser.LOCAL - 263)) | (1 << (tsqlParser.LOCK_ESCALATION - 263)) | (1 << (tsqlParser.LOGIN - 263)) | (1 << (tsqlParser.LOOP - 263)) | (1 << (tsqlParser.MARK - 263)) | (1 << (tsqlParser.MAX - 263)) | (1 << (tsqlParser.MAXDOP - 263)) | (1 << (tsqlParser.MAXRECURSION - 263)) | (1 << (tsqlParser.MIN - 263)) | (1 << (tsqlParser.MODIFY - 263)) | (1 << (tsqlParser.NAME - 263)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (tsqlParser.NOCOUNT - 329)) | (1 << (tsqlParser.NOEXPAND - 329)) | (1 << (tsqlParser.NORECOMPUTE - 329)) | (1 << (tsqlParser.NTILE - 329)) | (1 << (tsqlParser.NUMBER - 329)) | (1 << (tsqlParser.OFFSET - 329)) | (1 << (tsqlParser.ONLINE - 329)) | (1 << (tsqlParser.ONLY - 329)) | (1 << (tsqlParser.OPTIMISTIC - 329)) | (1 << (tsqlParser.OPTIMIZE - 329)) | (1 << (tsqlParser.OUT - 329)) | (1 << (tsqlParser.OUTPUT - 329)) | (1 << (tsqlParser.OWNER - 329)) | (1 << (tsqlParser.PARAMETERIZATION - 329)) | (1 << (tsqlParser.PARTITION - 329)) | (1 << (tsqlParser.PATH - 329)) | (1 << (tsqlParser.PRECEDING - 329)) | (1 << (tsqlParser.PRIOR - 329)) | (1 << (tsqlParser.PRIVILEGES - 329)) | (1 << (tsqlParser.RANGE - 329)) | (1 << (tsqlParser.RANK - 329)) | (1 << (tsqlParser.READONLY - 329)) | (1 << (tsqlParser.READ_ONLY - 329)) | (1 << (tsqlParser.RECOMPILE - 329)) | (1 << (tsqlParser.RELATIVE - 329)) | (1 << (tsqlParser.REMOTE - 329)) | (1 << (tsqlParser.REPEATABLE - 329)) | (1 << (tsqlParser.ROBUST - 329)) | (1 << (tsqlParser.ROOT - 329)) | (1 << (tsqlParser.ROW - 329)) | (1 << (tsqlParser.ROWGUID - 329)) | (1 << (tsqlParser.ROWS - 329)) | (1 << (tsqlParser.ROW_NUMBER - 329)) | (1 << (tsqlParser.SAMPLE - 329)) | (1 << (tsqlParser.SCHEMABINDING - 329)) | (1 << (tsqlParser.SCROLL - 329)) | (1 << (tsqlParser.SCROLL_LOCKS - 329)) | (1 << (tsqlParser.SELF - 329)) | (1 << (tsqlParser.SERIALIZABLE - 329)) | (1 << (tsqlParser.SIMPLE - 329)) | (1 << (tsqlParser.SIZE - 329)) | (1 << (tsqlParser.SNAPSHOT - 329)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 329)) | (1 << (tsqlParser.STATIC - 329)) | (1 << (tsqlParser.STATS_STREAM - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (tsqlParser.STDEV - 393)) | (1 << (tsqlParser.STDEVP - 393)) | (1 << (tsqlParser.SUM - 393)) | (1 << (tsqlParser.TEXTIMAGE_ON - 393)) | (1 << (tsqlParser.THROW - 393)) | (1 << (tsqlParser.TIES - 393)) | (1 << (tsqlParser.TIME - 393)) | (1 << (tsqlParser.TRY - 393)) | (1 << (tsqlParser.TYPE - 393)) | (1 << (tsqlParser.TYPE_WARNING - 393)) | (1 << (tsqlParser.UNBOUNDED - 393)) | (1 << (tsqlParser.UNCOMMITTED - 393)) | (1 << (tsqlParser.UNKNOWN - 393)) | (1 << (tsqlParser.USING - 393)) | (1 << (tsqlParser.VAR - 393)) | (1 << (tsqlParser.VARP - 393)) | (1 << (tsqlParser.VIEWS - 393)) | (1 << (tsqlParser.VIEW_METADATA - 393)) | (1 << (tsqlParser.WORK - 393)) | (1 << (tsqlParser.XML - 393)) | (1 << (tsqlParser.XMLNAMESPACES - 393)) | (1 << (tsqlParser.ZONE - 393)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 393)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 393)) | (1 << (tsqlParser.ID - 393)) | (1 << (tsqlParser.LR_BRACKET - 393)))) != 0):
                    self.state = 420
                    self.sql_clauses()


                self.state = 423
                self.match(tsqlParser.END)
                self.state = 425
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                if la_ == 1:
                    self.state = 424
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                localctx = tsqlParser.Break_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 427
                self.match(tsqlParser.BREAK)
                self.state = 429
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 428
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 3:
                localctx = tsqlParser.Continue_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 431
                self.match(tsqlParser.CONTINUE)
                self.state = 433
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 432
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 4:
                localctx = tsqlParser.Goto_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 435
                self.match(tsqlParser.GOTO)
                self.state = 436
                self.r_id()
                self.state = 438
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 437
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 5:
                localctx = tsqlParser.Goto_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 440
                self.r_id()
                self.state = 441
                self.match(tsqlParser.COLON)
                self.state = 443
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                if la_ == 1:
                    self.state = 442
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 6:
                localctx = tsqlParser.If_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 445
                self.match(tsqlParser.IF)
                self.state = 446
                self.search_condition(0)
                self.state = 447
                localctx.if_expr = self.sql_clause()
                self.state = 450
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                if la_ == 1:
                    self.state = 448
                    self.match(tsqlParser.ELSE)
                    self.state = 449
                    localctx.else_expr = self.sql_clause()


                self.state = 453
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                if la_ == 1:
                    self.state = 452
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 7:
                localctx = tsqlParser.Return_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 455
                self.match(tsqlParser.RETURN)
                self.state = 457
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                if la_ == 1:
                    self.state = 456
                    self.expression(0)


                self.state = 460
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
                if la_ == 1:
                    self.state = 459
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 8:
                localctx = tsqlParser.Throw_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 462
                self.match(tsqlParser.THROW)
                self.state = 468
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.LOCAL_ID or _la==tsqlParser.DECIMAL:
                    self.state = 463
                    localctx.error_number = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.LOCAL_ID or _la==tsqlParser.DECIMAL):
                        localctx.error_number = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 464
                    self.match(tsqlParser.COMMA)
                    self.state = 465
                    localctx.message = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.LOCAL_ID or _la==tsqlParser.STRING):
                        localctx.message = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 466
                    self.match(tsqlParser.COMMA)
                    self.state = 467
                    localctx.state = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.LOCAL_ID or _la==tsqlParser.DECIMAL):
                        localctx.state = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 471
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                if la_ == 1:
                    self.state = 470
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 9:
                localctx = tsqlParser.Try_catch_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 473
                self.match(tsqlParser.BEGIN)
                self.state = 474
                self.match(tsqlParser.TRY)
                self.state = 476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.SEMI:
                    self.state = 475
                    self.match(tsqlParser.SEMI)


                self.state = 479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << tsqlParser.ALTER) | (1 << tsqlParser.BEGIN) | (1 << tsqlParser.BREAK) | (1 << tsqlParser.CLOSE) | (1 << tsqlParser.COMMIT) | (1 << tsqlParser.CONTINUE) | (1 << tsqlParser.CREATE) | (1 << tsqlParser.DEALLOCATE) | (1 << tsqlParser.DECLARE) | (1 << tsqlParser.DELETE) | (1 << tsqlParser.DROP))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (tsqlParser.EXECUTE - 64)) | (1 << (tsqlParser.FETCH - 64)) | (1 << (tsqlParser.FORCESEEK - 64)) | (1 << (tsqlParser.GOTO - 64)) | (1 << (tsqlParser.GRANT - 64)) | (1 << (tsqlParser.IF - 64)) | (1 << (tsqlParser.INSERT - 64)) | (1 << (tsqlParser.NEXT - 64)) | (1 << (tsqlParser.NUMERIC - 64)) | (1 << (tsqlParser.OPEN - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (tsqlParser.PRINT - 134)) | (1 << (tsqlParser.RAISERROR - 134)) | (1 << (tsqlParser.RETURN - 134)) | (1 << (tsqlParser.REVERT - 134)) | (1 << (tsqlParser.ROLLBACK - 134)) | (1 << (tsqlParser.SAVE - 134)) | (1 << (tsqlParser.SELECT - 134)) | (1 << (tsqlParser.SET - 134)) | (1 << (tsqlParser.UPDATE - 134)) | (1 << (tsqlParser.USE - 134)) | (1 << (tsqlParser.VALUE - 134)) | (1 << (tsqlParser.WAITFOR - 134)))) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & ((1 << (tsqlParser.WHILE - 198)) | (1 << (tsqlParser.WITH - 198)) | (1 << (tsqlParser.ABSOLUTE - 198)) | (1 << (tsqlParser.APPLY - 198)) | (1 << (tsqlParser.AUTO - 198)) | (1 << (tsqlParser.AVG - 198)) | (1 << (tsqlParser.BASE64 - 198)) | (1 << (tsqlParser.CALLER - 198)) | (1 << (tsqlParser.CAST - 198)) | (1 << (tsqlParser.CATCH - 198)) | (1 << (tsqlParser.CHECKSUM_AGG - 198)) | (1 << (tsqlParser.COMMITTED - 198)) | (1 << (tsqlParser.CONCAT - 198)) | (1 << (tsqlParser.CONTROL - 198)) | (1 << (tsqlParser.COOKIE - 198)) | (1 << (tsqlParser.COUNT - 198)) | (1 << (tsqlParser.COUNT_BIG - 198)) | (1 << (tsqlParser.DATE - 198)) | (1 << (tsqlParser.DELAY - 198)) | (1 << (tsqlParser.DELETED - 198)) | (1 << (tsqlParser.DENSE_RANK - 198)) | (1 << (tsqlParser.DISABLE - 198)))) != 0) or ((((_la - 263)) & ~0x3f) == 0 and ((1 << (_la - 263)) & ((1 << (tsqlParser.DYNAMIC - 263)) | (1 << (tsqlParser.ENCRYPTION - 263)) | (1 << (tsqlParser.EXPAND - 263)) | (1 << (tsqlParser.FAST - 263)) | (1 << (tsqlParser.FAST_FORWARD - 263)) | (1 << (tsqlParser.FIRST - 263)) | (1 << (tsqlParser.FIRST_VALUE - 263)) | (1 << (tsqlParser.FOLLOWING - 263)) | (1 << (tsqlParser.FORCE - 263)) | (1 << (tsqlParser.FORCED - 263)) | (1 << (tsqlParser.FORWARD_ONLY - 263)) | (1 << (tsqlParser.FULLSCAN - 263)) | (1 << (tsqlParser.GLOBAL - 263)) | (1 << (tsqlParser.GO - 263)) | (1 << (tsqlParser.GROUPING - 263)) | (1 << (tsqlParser.GROUPING_ID - 263)) | (1 << (tsqlParser.HASH - 263)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 263)) | (1 << (tsqlParser.IMPERSONATE - 263)) | (1 << (tsqlParser.INSENSITIVE - 263)) | (1 << (tsqlParser.INSERTED - 263)) | (1 << (tsqlParser.ISOLATION - 263)) | (1 << (tsqlParser.IO - 263)) | (1 << (tsqlParser.KEEP - 263)) | (1 << (tsqlParser.KEEPFIXED - 263)) | (1 << (tsqlParser.KEYSET - 263)) | (1 << (tsqlParser.LAG - 263)) | (1 << (tsqlParser.LAST - 263)) | (1 << (tsqlParser.LAST_VALUE - 263)) | (1 << (tsqlParser.LEAD - 263)) | (1 << (tsqlParser.LEVEL - 263)) | (1 << (tsqlParser.LOCAL - 263)) | (1 << (tsqlParser.LOCK_ESCALATION - 263)) | (1 << (tsqlParser.LOGIN - 263)) | (1 << (tsqlParser.LOOP - 263)) | (1 << (tsqlParser.MARK - 263)) | (1 << (tsqlParser.MAX - 263)) | (1 << (tsqlParser.MAXDOP - 263)) | (1 << (tsqlParser.MAXRECURSION - 263)) | (1 << (tsqlParser.MIN - 263)) | (1 << (tsqlParser.MODIFY - 263)) | (1 << (tsqlParser.NAME - 263)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (tsqlParser.NOCOUNT - 329)) | (1 << (tsqlParser.NOEXPAND - 329)) | (1 << (tsqlParser.NORECOMPUTE - 329)) | (1 << (tsqlParser.NTILE - 329)) | (1 << (tsqlParser.NUMBER - 329)) | (1 << (tsqlParser.OFFSET - 329)) | (1 << (tsqlParser.ONLINE - 329)) | (1 << (tsqlParser.ONLY - 329)) | (1 << (tsqlParser.OPTIMISTIC - 329)) | (1 << (tsqlParser.OPTIMIZE - 329)) | (1 << (tsqlParser.OUT - 329)) | (1 << (tsqlParser.OUTPUT - 329)) | (1 << (tsqlParser.OWNER - 329)) | (1 << (tsqlParser.PARAMETERIZATION - 329)) | (1 << (tsqlParser.PARTITION - 329)) | (1 << (tsqlParser.PATH - 329)) | (1 << (tsqlParser.PRECEDING - 329)) | (1 << (tsqlParser.PRIOR - 329)) | (1 << (tsqlParser.PRIVILEGES - 329)) | (1 << (tsqlParser.RANGE - 329)) | (1 << (tsqlParser.RANK - 329)) | (1 << (tsqlParser.READONLY - 329)) | (1 << (tsqlParser.READ_ONLY - 329)) | (1 << (tsqlParser.RECOMPILE - 329)) | (1 << (tsqlParser.RELATIVE - 329)) | (1 << (tsqlParser.REMOTE - 329)) | (1 << (tsqlParser.REPEATABLE - 329)) | (1 << (tsqlParser.ROBUST - 329)) | (1 << (tsqlParser.ROOT - 329)) | (1 << (tsqlParser.ROW - 329)) | (1 << (tsqlParser.ROWGUID - 329)) | (1 << (tsqlParser.ROWS - 329)) | (1 << (tsqlParser.ROW_NUMBER - 329)) | (1 << (tsqlParser.SAMPLE - 329)) | (1 << (tsqlParser.SCHEMABINDING - 329)) | (1 << (tsqlParser.SCROLL - 329)) | (1 << (tsqlParser.SCROLL_LOCKS - 329)) | (1 << (tsqlParser.SELF - 329)) | (1 << (tsqlParser.SERIALIZABLE - 329)) | (1 << (tsqlParser.SIMPLE - 329)) | (1 << (tsqlParser.SIZE - 329)) | (1 << (tsqlParser.SNAPSHOT - 329)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 329)) | (1 << (tsqlParser.STATIC - 329)) | (1 << (tsqlParser.STATS_STREAM - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (tsqlParser.STDEV - 393)) | (1 << (tsqlParser.STDEVP - 393)) | (1 << (tsqlParser.SUM - 393)) | (1 << (tsqlParser.TEXTIMAGE_ON - 393)) | (1 << (tsqlParser.THROW - 393)) | (1 << (tsqlParser.TIES - 393)) | (1 << (tsqlParser.TIME - 393)) | (1 << (tsqlParser.TRY - 393)) | (1 << (tsqlParser.TYPE - 393)) | (1 << (tsqlParser.TYPE_WARNING - 393)) | (1 << (tsqlParser.UNBOUNDED - 393)) | (1 << (tsqlParser.UNCOMMITTED - 393)) | (1 << (tsqlParser.UNKNOWN - 393)) | (1 << (tsqlParser.USING - 393)) | (1 << (tsqlParser.VAR - 393)) | (1 << (tsqlParser.VARP - 393)) | (1 << (tsqlParser.VIEWS - 393)) | (1 << (tsqlParser.VIEW_METADATA - 393)) | (1 << (tsqlParser.WORK - 393)) | (1 << (tsqlParser.XML - 393)) | (1 << (tsqlParser.XMLNAMESPACES - 393)) | (1 << (tsqlParser.ZONE - 393)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 393)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 393)) | (1 << (tsqlParser.ID - 393)) | (1 << (tsqlParser.LR_BRACKET - 393)))) != 0):
                    self.state = 478
                    localctx.try_clauses = self.sql_clauses()


                self.state = 481
                self.match(tsqlParser.END)
                self.state = 482
                self.match(tsqlParser.TRY)
                self.state = 484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.SEMI:
                    self.state = 483
                    self.match(tsqlParser.SEMI)


                self.state = 486
                self.match(tsqlParser.BEGIN)
                self.state = 487
                self.match(tsqlParser.CATCH)
                self.state = 489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.SEMI:
                    self.state = 488
                    self.match(tsqlParser.SEMI)


                self.state = 492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << tsqlParser.ALTER) | (1 << tsqlParser.BEGIN) | (1 << tsqlParser.BREAK) | (1 << tsqlParser.CLOSE) | (1 << tsqlParser.COMMIT) | (1 << tsqlParser.CONTINUE) | (1 << tsqlParser.CREATE) | (1 << tsqlParser.DEALLOCATE) | (1 << tsqlParser.DECLARE) | (1 << tsqlParser.DELETE) | (1 << tsqlParser.DROP))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (tsqlParser.EXECUTE - 64)) | (1 << (tsqlParser.FETCH - 64)) | (1 << (tsqlParser.FORCESEEK - 64)) | (1 << (tsqlParser.GOTO - 64)) | (1 << (tsqlParser.GRANT - 64)) | (1 << (tsqlParser.IF - 64)) | (1 << (tsqlParser.INSERT - 64)) | (1 << (tsqlParser.NEXT - 64)) | (1 << (tsqlParser.NUMERIC - 64)) | (1 << (tsqlParser.OPEN - 64)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (tsqlParser.PRINT - 134)) | (1 << (tsqlParser.RAISERROR - 134)) | (1 << (tsqlParser.RETURN - 134)) | (1 << (tsqlParser.REVERT - 134)) | (1 << (tsqlParser.ROLLBACK - 134)) | (1 << (tsqlParser.SAVE - 134)) | (1 << (tsqlParser.SELECT - 134)) | (1 << (tsqlParser.SET - 134)) | (1 << (tsqlParser.UPDATE - 134)) | (1 << (tsqlParser.USE - 134)) | (1 << (tsqlParser.VALUE - 134)) | (1 << (tsqlParser.WAITFOR - 134)))) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & ((1 << (tsqlParser.WHILE - 198)) | (1 << (tsqlParser.WITH - 198)) | (1 << (tsqlParser.ABSOLUTE - 198)) | (1 << (tsqlParser.APPLY - 198)) | (1 << (tsqlParser.AUTO - 198)) | (1 << (tsqlParser.AVG - 198)) | (1 << (tsqlParser.BASE64 - 198)) | (1 << (tsqlParser.CALLER - 198)) | (1 << (tsqlParser.CAST - 198)) | (1 << (tsqlParser.CATCH - 198)) | (1 << (tsqlParser.CHECKSUM_AGG - 198)) | (1 << (tsqlParser.COMMITTED - 198)) | (1 << (tsqlParser.CONCAT - 198)) | (1 << (tsqlParser.CONTROL - 198)) | (1 << (tsqlParser.COOKIE - 198)) | (1 << (tsqlParser.COUNT - 198)) | (1 << (tsqlParser.COUNT_BIG - 198)) | (1 << (tsqlParser.DATE - 198)) | (1 << (tsqlParser.DELAY - 198)) | (1 << (tsqlParser.DELETED - 198)) | (1 << (tsqlParser.DENSE_RANK - 198)) | (1 << (tsqlParser.DISABLE - 198)))) != 0) or ((((_la - 263)) & ~0x3f) == 0 and ((1 << (_la - 263)) & ((1 << (tsqlParser.DYNAMIC - 263)) | (1 << (tsqlParser.ENCRYPTION - 263)) | (1 << (tsqlParser.EXPAND - 263)) | (1 << (tsqlParser.FAST - 263)) | (1 << (tsqlParser.FAST_FORWARD - 263)) | (1 << (tsqlParser.FIRST - 263)) | (1 << (tsqlParser.FIRST_VALUE - 263)) | (1 << (tsqlParser.FOLLOWING - 263)) | (1 << (tsqlParser.FORCE - 263)) | (1 << (tsqlParser.FORCED - 263)) | (1 << (tsqlParser.FORWARD_ONLY - 263)) | (1 << (tsqlParser.FULLSCAN - 263)) | (1 << (tsqlParser.GLOBAL - 263)) | (1 << (tsqlParser.GO - 263)) | (1 << (tsqlParser.GROUPING - 263)) | (1 << (tsqlParser.GROUPING_ID - 263)) | (1 << (tsqlParser.HASH - 263)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 263)) | (1 << (tsqlParser.IMPERSONATE - 263)) | (1 << (tsqlParser.INSENSITIVE - 263)) | (1 << (tsqlParser.INSERTED - 263)) | (1 << (tsqlParser.ISOLATION - 263)) | (1 << (tsqlParser.IO - 263)) | (1 << (tsqlParser.KEEP - 263)) | (1 << (tsqlParser.KEEPFIXED - 263)) | (1 << (tsqlParser.KEYSET - 263)) | (1 << (tsqlParser.LAG - 263)) | (1 << (tsqlParser.LAST - 263)) | (1 << (tsqlParser.LAST_VALUE - 263)) | (1 << (tsqlParser.LEAD - 263)) | (1 << (tsqlParser.LEVEL - 263)) | (1 << (tsqlParser.LOCAL - 263)) | (1 << (tsqlParser.LOCK_ESCALATION - 263)) | (1 << (tsqlParser.LOGIN - 263)) | (1 << (tsqlParser.LOOP - 263)) | (1 << (tsqlParser.MARK - 263)) | (1 << (tsqlParser.MAX - 263)) | (1 << (tsqlParser.MAXDOP - 263)) | (1 << (tsqlParser.MAXRECURSION - 263)) | (1 << (tsqlParser.MIN - 263)) | (1 << (tsqlParser.MODIFY - 263)) | (1 << (tsqlParser.NAME - 263)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (tsqlParser.NOCOUNT - 329)) | (1 << (tsqlParser.NOEXPAND - 329)) | (1 << (tsqlParser.NORECOMPUTE - 329)) | (1 << (tsqlParser.NTILE - 329)) | (1 << (tsqlParser.NUMBER - 329)) | (1 << (tsqlParser.OFFSET - 329)) | (1 << (tsqlParser.ONLINE - 329)) | (1 << (tsqlParser.ONLY - 329)) | (1 << (tsqlParser.OPTIMISTIC - 329)) | (1 << (tsqlParser.OPTIMIZE - 329)) | (1 << (tsqlParser.OUT - 329)) | (1 << (tsqlParser.OUTPUT - 329)) | (1 << (tsqlParser.OWNER - 329)) | (1 << (tsqlParser.PARAMETERIZATION - 329)) | (1 << (tsqlParser.PARTITION - 329)) | (1 << (tsqlParser.PATH - 329)) | (1 << (tsqlParser.PRECEDING - 329)) | (1 << (tsqlParser.PRIOR - 329)) | (1 << (tsqlParser.PRIVILEGES - 329)) | (1 << (tsqlParser.RANGE - 329)) | (1 << (tsqlParser.RANK - 329)) | (1 << (tsqlParser.READONLY - 329)) | (1 << (tsqlParser.READ_ONLY - 329)) | (1 << (tsqlParser.RECOMPILE - 329)) | (1 << (tsqlParser.RELATIVE - 329)) | (1 << (tsqlParser.REMOTE - 329)) | (1 << (tsqlParser.REPEATABLE - 329)) | (1 << (tsqlParser.ROBUST - 329)) | (1 << (tsqlParser.ROOT - 329)) | (1 << (tsqlParser.ROW - 329)) | (1 << (tsqlParser.ROWGUID - 329)) | (1 << (tsqlParser.ROWS - 329)) | (1 << (tsqlParser.ROW_NUMBER - 329)) | (1 << (tsqlParser.SAMPLE - 329)) | (1 << (tsqlParser.SCHEMABINDING - 329)) | (1 << (tsqlParser.SCROLL - 329)) | (1 << (tsqlParser.SCROLL_LOCKS - 329)) | (1 << (tsqlParser.SELF - 329)) | (1 << (tsqlParser.SERIALIZABLE - 329)) | (1 << (tsqlParser.SIMPLE - 329)) | (1 << (tsqlParser.SIZE - 329)) | (1 << (tsqlParser.SNAPSHOT - 329)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 329)) | (1 << (tsqlParser.STATIC - 329)) | (1 << (tsqlParser.STATS_STREAM - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (tsqlParser.STDEV - 393)) | (1 << (tsqlParser.STDEVP - 393)) | (1 << (tsqlParser.SUM - 393)) | (1 << (tsqlParser.TEXTIMAGE_ON - 393)) | (1 << (tsqlParser.THROW - 393)) | (1 << (tsqlParser.TIES - 393)) | (1 << (tsqlParser.TIME - 393)) | (1 << (tsqlParser.TRY - 393)) | (1 << (tsqlParser.TYPE - 393)) | (1 << (tsqlParser.TYPE_WARNING - 393)) | (1 << (tsqlParser.UNBOUNDED - 393)) | (1 << (tsqlParser.UNCOMMITTED - 393)) | (1 << (tsqlParser.UNKNOWN - 393)) | (1 << (tsqlParser.USING - 393)) | (1 << (tsqlParser.VAR - 393)) | (1 << (tsqlParser.VARP - 393)) | (1 << (tsqlParser.VIEWS - 393)) | (1 << (tsqlParser.VIEW_METADATA - 393)) | (1 << (tsqlParser.WORK - 393)) | (1 << (tsqlParser.XML - 393)) | (1 << (tsqlParser.XMLNAMESPACES - 393)) | (1 << (tsqlParser.ZONE - 393)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 393)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 393)) | (1 << (tsqlParser.ID - 393)) | (1 << (tsqlParser.LR_BRACKET - 393)))) != 0):
                    self.state = 491
                    localctx.catch_clauses = self.sql_clauses()


                self.state = 494
                self.match(tsqlParser.END)
                self.state = 495
                self.match(tsqlParser.CATCH)
                self.state = 497
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                if la_ == 1:
                    self.state = 496
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 10:
                localctx = tsqlParser.Waitfor_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 499
                self.match(tsqlParser.WAITFOR)
                self.state = 500
                _la = self._input.LA(1)
                if not(_la==tsqlParser.DELAY or _la==tsqlParser.TIME):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 501
                self.expression(0)
                self.state = 503
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
                if la_ == 1:
                    self.state = 502
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 11:
                localctx = tsqlParser.While_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 505
                self.match(tsqlParser.WHILE)
                self.state = 506
                self.search_condition(0)
                self.state = 516
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 507
                    self.sql_clause()
                    pass

                elif la_ == 2:
                    self.state = 508
                    self.match(tsqlParser.BREAK)
                    self.state = 510
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                    if la_ == 1:
                        self.state = 509
                        self.match(tsqlParser.SEMI)


                    pass

                elif la_ == 3:
                    self.state = 512
                    self.match(tsqlParser.CONTINUE)
                    self.state = 514
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                    if la_ == 1:
                        self.state = 513
                        self.match(tsqlParser.SEMI)


                    pass


                pass

            elif la_ == 12:
                localctx = tsqlParser.Print_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 518
                self.match(tsqlParser.PRINT)
                self.state = 519
                self.expression(0)
                self.state = 521
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 520
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 13:
                localctx = tsqlParser.Raiseerror_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 523
                self.match(tsqlParser.RAISERROR)
                self.state = 524
                self.match(tsqlParser.LR_BRACKET)
                self.state = 525
                localctx.msg = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 432)) & ~0x3f) == 0 and ((1 << (_la - 432)) & ((1 << (tsqlParser.LOCAL_ID - 432)) | (1 << (tsqlParser.DECIMAL - 432)) | (1 << (tsqlParser.STRING - 432)))) != 0)):
                    localctx.msg = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 526
                self.match(tsqlParser.COMMA)
                self.state = 527
                localctx.severity = self.constant_LOCAL_ID()
                self.state = 528
                self.match(tsqlParser.COMMA)
                self.state = 529
                localctx.state = self.constant_LOCAL_ID()
                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 530
                    self.match(tsqlParser.COMMA)
                    self.state = 531
                    self.constant_LOCAL_ID()
                    self.state = 536
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 537
                self.match(tsqlParser.RR_BRACKET)
                self.state = 539
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
                if la_ == 1:
                    self.state = 538
                    self.match(tsqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Another_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declare_statement(self):
            return self.getTypedRuleContext(tsqlParser.Declare_statementContext,0)


        def cursor_statement(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_statementContext,0)


        def execute_statement(self):
            return self.getTypedRuleContext(tsqlParser.Execute_statementContext,0)


        def security_statement(self):
            return self.getTypedRuleContext(tsqlParser.Security_statementContext,0)


        def set_statement(self):
            return self.getTypedRuleContext(tsqlParser.Set_statementContext,0)


        def transaction_statement(self):
            return self.getTypedRuleContext(tsqlParser.Transaction_statementContext,0)


        def use_statement(self):
            return self.getTypedRuleContext(tsqlParser.Use_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_another_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnother_statement" ):
                listener.enterAnother_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnother_statement" ):
                listener.exitAnother_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnother_statement" ):
                return visitor.visitAnother_statement(self)
            else:
                return visitor.visitChildren(self)




    def another_statement(self):

        localctx = tsqlParser.Another_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_another_statement)
        try:
            self.state = 550
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 543
                self.declare_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 544
                self.cursor_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 545
                self.execute_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 546
                self.security_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 547
                self.set_statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 548
                self.transaction_statement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 549
                self.use_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delete_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(tsqlParser.DELETE, 0)

        def delete_statement_from(self):
            return self.getTypedRuleContext(tsqlParser.Delete_statement_fromContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(tsqlParser.With_expressionContext,0)


        def top_clause_dm(self):
            return self.getTypedRuleContext(tsqlParser.Top_clause_dmContext,0)


        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.FROM)
            else:
                return self.getToken(tsqlParser.FROM, i)

        def insert_with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.Insert_with_table_hintsContext,0)


        def output_clause(self):
            return self.getTypedRuleContext(tsqlParser.Output_clauseContext,0)


        def table_sources(self):
            return self.getTypedRuleContext(tsqlParser.Table_sourcesContext,0)


        def where_clause_dml(self):
            return self.getTypedRuleContext(tsqlParser.Where_clause_dmlContext,0)


        def for_clause(self):
            return self.getTypedRuleContext(tsqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(tsqlParser.Option_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_delete_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_statement" ):
                listener.enterDelete_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_statement" ):
                listener.exitDelete_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelete_statement" ):
                return visitor.visitDelete_statement(self)
            else:
                return visitor.visitChildren(self)




    def delete_statement(self):

        localctx = tsqlParser.Delete_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_delete_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 552
                self.with_expression()


            self.state = 555
            self.match(tsqlParser.DELETE)
            self.state = 557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.TOP:
                self.state = 556
                self.top_clause_dm()


            self.state = 560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FROM:
                self.state = 559
                self.match(tsqlParser.FROM)


            self.state = 562
            self.delete_statement_from()
            self.state = 564
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 563
                self.insert_with_table_hints()


            self.state = 567
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 566
                self.output_clause()


            self.state = 571
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FROM:
                self.state = 569
                self.match(tsqlParser.FROM)
                self.state = 570
                self.table_sources()


            self.state = 574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WHERE:
                self.state = 573
                self.where_clause_dml()


            self.state = 577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FOR:
                self.state = 576
                self.for_clause()


            self.state = 580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.OPTION:
                self.state = 579
                self.option_clause()


            self.state = 583
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 582
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delete_statement_fromContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.table_var = None # Token

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.With_table_hintsContext,0)


        def ddl_object(self):
            return self.getTypedRuleContext(tsqlParser.Ddl_objectContext,0)


        def rowset_function_limited(self):
            return self.getTypedRuleContext(tsqlParser.Rowset_function_limitedContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_delete_statement_from

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_statement_from" ):
                listener.enterDelete_statement_from(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_statement_from" ):
                listener.exitDelete_statement_from(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelete_statement_from" ):
                return visitor.visitDelete_statement_from(self)
            else:
                return visitor.visitChildren(self)




    def delete_statement_from(self):

        localctx = tsqlParser.Delete_statement_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_delete_statement_from)
        try:
            self.state = 592
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 585
                self.r_id()
                self.state = 587
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 586
                    self.with_table_hints()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 589
                self.ddl_object()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 590
                self.rowset_function_limited()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 591
                localctx.table_var = self.match(tsqlParser.LOCAL_ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(tsqlParser.INSERT, 0)

        def insert_statement_value(self):
            return self.getTypedRuleContext(tsqlParser.Insert_statement_valueContext,0)


        def ddl_object(self):
            return self.getTypedRuleContext(tsqlParser.Ddl_objectContext,0)


        def rowset_function_limited(self):
            return self.getTypedRuleContext(tsqlParser.Rowset_function_limitedContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(tsqlParser.With_expressionContext,0)


        def top_clause_dm(self):
            return self.getTypedRuleContext(tsqlParser.Top_clause_dmContext,0)


        def INTO(self):
            return self.getToken(tsqlParser.INTO, 0)

        def insert_with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.Insert_with_table_hintsContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def output_clause(self):
            return self.getTypedRuleContext(tsqlParser.Output_clauseContext,0)


        def for_clause(self):
            return self.getTypedRuleContext(tsqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(tsqlParser.Option_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_insert_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_statement" ):
                listener.enterInsert_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_statement" ):
                listener.exitInsert_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_statement" ):
                return visitor.visitInsert_statement(self)
            else:
                return visitor.visitChildren(self)




    def insert_statement(self):

        localctx = tsqlParser.Insert_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_insert_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 594
                self.with_expression()


            self.state = 597
            self.match(tsqlParser.INSERT)
            self.state = 599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.TOP:
                self.state = 598
                self.top_clause_dm()


            self.state = 602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.INTO:
                self.state = 601
                self.match(tsqlParser.INTO)


            self.state = 606
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.LOCAL_ID, tsqlParser.ID]:
                self.state = 604
                self.ddl_object()
                pass
            elif token in [tsqlParser.OPENDATASOURCE, tsqlParser.OPENQUERY]:
                self.state = 605
                self.rowset_function_limited()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 609
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.state = 608
                self.insert_with_table_hints()


            self.state = 615
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 611
                self.match(tsqlParser.LR_BRACKET)
                self.state = 612
                self.column_name_list()
                self.state = 613
                self.match(tsqlParser.RR_BRACKET)


            self.state = 618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.OUTPUT:
                self.state = 617
                self.output_clause()


            self.state = 620
            self.insert_statement_value()
            self.state = 622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FOR:
                self.state = 621
                self.for_clause()


            self.state = 625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.OPTION:
                self.state = 624
                self.option_clause()


            self.state = 628
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 627
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_statement_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_value_constructor(self):
            return self.getTypedRuleContext(tsqlParser.Table_value_constructorContext,0)


        def derived_table(self):
            return self.getTypedRuleContext(tsqlParser.Derived_tableContext,0)


        def execute_statement(self):
            return self.getTypedRuleContext(tsqlParser.Execute_statementContext,0)


        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)

        def VALUES(self):
            return self.getToken(tsqlParser.VALUES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_insert_statement_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_statement_value" ):
                listener.enterInsert_statement_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_statement_value" ):
                listener.exitInsert_statement_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_statement_value" ):
                return visitor.visitInsert_statement_value(self)
            else:
                return visitor.visitChildren(self)




    def insert_statement_value(self):

        localctx = tsqlParser.Insert_statement_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_insert_statement_value)
        try:
            self.state = 635
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.VALUES]:
                self.enterOuterAlt(localctx, 1)
                self.state = 630
                self.table_value_constructor()
                pass
            elif token in [tsqlParser.SELECT, tsqlParser.WITH, tsqlParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 631
                self.derived_table()
                pass
            elif token in [tsqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 632
                self.execute_statement()
                pass
            elif token in [tsqlParser.DEFAULT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 633
                self.match(tsqlParser.DEFAULT)
                self.state = 634
                self.match(tsqlParser.VALUES)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_expression(self):
            return self.getTypedRuleContext(tsqlParser.Query_expressionContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(tsqlParser.With_expressionContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(tsqlParser.Order_by_clauseContext,0)


        def for_clause(self):
            return self.getTypedRuleContext(tsqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(tsqlParser.Option_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_select_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_statement" ):
                listener.enterSelect_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_statement" ):
                listener.exitSelect_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_statement" ):
                return visitor.visitSelect_statement(self)
            else:
                return visitor.visitChildren(self)




    def select_statement(self):

        localctx = tsqlParser.Select_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_select_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 637
                self.with_expression()


            self.state = 640
            self.query_expression(0)
            self.state = 642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 641
                self.order_by_clause()


            self.state = 645
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 644
                self.for_clause()


            self.state = 648
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 647
                self.option_clause()


            self.state = 651
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 650
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Update_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(tsqlParser.UPDATE, 0)

        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def update_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Update_elemContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Update_elemContext,i)


        def ddl_object(self):
            return self.getTypedRuleContext(tsqlParser.Ddl_objectContext,0)


        def rowset_function_limited(self):
            return self.getTypedRuleContext(tsqlParser.Rowset_function_limitedContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(tsqlParser.With_expressionContext,0)


        def top_clause_dm(self):
            return self.getTypedRuleContext(tsqlParser.Top_clause_dmContext,0)


        def with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.With_table_hintsContext,0)


        def output_clause(self):
            return self.getTypedRuleContext(tsqlParser.Output_clauseContext,0)


        def FROM(self):
            return self.getToken(tsqlParser.FROM, 0)

        def table_sources(self):
            return self.getTypedRuleContext(tsqlParser.Table_sourcesContext,0)


        def where_clause_dml(self):
            return self.getTypedRuleContext(tsqlParser.Where_clause_dmlContext,0)


        def for_clause(self):
            return self.getTypedRuleContext(tsqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(tsqlParser.Option_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_update_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_statement" ):
                listener.enterUpdate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_statement" ):
                listener.exitUpdate_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_statement" ):
                return visitor.visitUpdate_statement(self)
            else:
                return visitor.visitChildren(self)




    def update_statement(self):

        localctx = tsqlParser.Update_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_update_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 653
                self.with_expression()


            self.state = 656
            self.match(tsqlParser.UPDATE)
            self.state = 658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.TOP:
                self.state = 657
                self.top_clause_dm()


            self.state = 662
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.LOCAL_ID, tsqlParser.ID]:
                self.state = 660
                self.ddl_object()
                pass
            elif token in [tsqlParser.OPENDATASOURCE, tsqlParser.OPENQUERY]:
                self.state = 661
                self.rowset_function_limited()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH or _la==tsqlParser.LR_BRACKET:
                self.state = 664
                self.with_table_hints()


            self.state = 667
            self.match(tsqlParser.SET)
            self.state = 668
            self.update_elem()
            self.state = 673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 669
                self.match(tsqlParser.COMMA)
                self.state = 670
                self.update_elem()
                self.state = 675
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 677
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 676
                self.output_clause()


            self.state = 681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FROM:
                self.state = 679
                self.match(tsqlParser.FROM)
                self.state = 680
                self.table_sources()


            self.state = 684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WHERE:
                self.state = 683
                self.where_clause_dml()


            self.state = 687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FOR:
                self.state = 686
                self.for_clause()


            self.state = 690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.OPTION:
                self.state = 689
                self.option_clause()


            self.state = 693
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 692
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Where_clause_dmlContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cursor_var = None # Token

        def WHERE(self):
            return self.getToken(tsqlParser.WHERE, 0)

        def search_condition_list(self):
            return self.getTypedRuleContext(tsqlParser.Search_condition_listContext,0)


        def CURRENT(self):
            return self.getToken(tsqlParser.CURRENT, 0)

        def OF(self):
            return self.getToken(tsqlParser.OF, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_nameContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_where_clause_dml

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause_dml" ):
                listener.enterWhere_clause_dml(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause_dml" ):
                listener.exitWhere_clause_dml(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhere_clause_dml" ):
                return visitor.visitWhere_clause_dml(self)
            else:
                return visitor.visitChildren(self)




    def where_clause_dml(self):

        localctx = tsqlParser.Where_clause_dmlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_where_clause_dml)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.match(tsqlParser.WHERE)
            self.state = 706
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CASE, tsqlParser.COALESCE, tsqlParser.CONVERT, tsqlParser.CURRENT_TIMESTAMP, tsqlParser.CURRENT_USER, tsqlParser.DEFAULT, tsqlParser.EXISTS, tsqlParser.FORCESEEK, tsqlParser.IDENTITY, tsqlParser.IIF, tsqlParser.LEFT, tsqlParser.NEXT, tsqlParser.NOT, tsqlParser.NULL, tsqlParser.NULLIF, tsqlParser.NUMERIC, tsqlParser.OVER, tsqlParser.RIGHT, tsqlParser.SESSION_USER, tsqlParser.SYSTEM_USER, tsqlParser.TRY_CAST, tsqlParser.TRY_CONVERT, tsqlParser.TRY_PARSE, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.BINARY_CHECKSUM, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DATEADD, tsqlParser.DATEDIFF, tsqlParser.DATENAME, tsqlParser.DATEPART, tsqlParser.DATETIMEOFFSETFROMPARTS, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MIN_ACTIVE_ROWVERSION, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARSE, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PERCENTILE_CONT, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.STRING_AGG, tsqlParser.STRING_SPLIT, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.LOCAL_ID, tsqlParser.DECIMAL, tsqlParser.ID, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.LR_BRACKET, tsqlParser.PLUS, tsqlParser.MINUS, tsqlParser.BIT_NOT]:
                self.state = 696
                self.search_condition_list()
                pass
            elif token in [tsqlParser.CURRENT]:
                self.state = 697
                self.match(tsqlParser.CURRENT)
                self.state = 698
                self.match(tsqlParser.OF)
                self.state = 704
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 700
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                    if la_ == 1:
                        self.state = 699
                        self.match(tsqlParser.GLOBAL)


                    self.state = 702
                    self.cursor_name()
                    pass

                elif la_ == 2:
                    self.state = 703
                    localctx.cursor_var = self.match(tsqlParser.LOCAL_ID)
                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Output_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OUTPUT(self):
            return self.getToken(tsqlParser.OUTPUT, 0)

        def output_dml_list_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Output_dml_list_elemContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Output_dml_list_elemContext,i)


        def INTO(self):
            return self.getToken(tsqlParser.INTO, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_output_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_clause" ):
                listener.enterOutput_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_clause" ):
                listener.exitOutput_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutput_clause" ):
                return visitor.visitOutput_clause(self)
            else:
                return visitor.visitChildren(self)




    def output_clause(self):

        localctx = tsqlParser.Output_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_output_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 708
            self.match(tsqlParser.OUTPUT)
            self.state = 709
            self.output_dml_list_elem()
            self.state = 714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 710
                self.match(tsqlParser.COMMA)
                self.state = 711
                self.output_dml_list_elem()
                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.INTO:
                self.state = 717
                self.match(tsqlParser.INTO)
                self.state = 720
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.LOCAL_ID]:
                    self.state = 718
                    self.match(tsqlParser.LOCAL_ID)
                    pass
                elif token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 719
                    self.table_name()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 726
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                if la_ == 1:
                    self.state = 722
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 723
                    self.column_name_list()
                    self.state = 724
                    self.match(tsqlParser.RR_BRACKET)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Output_dml_list_elemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def output_column_name(self):
            return self.getTypedRuleContext(tsqlParser.Output_column_nameContext,0)


        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(tsqlParser.Column_aliasContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_output_dml_list_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_dml_list_elem" ):
                listener.enterOutput_dml_list_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_dml_list_elem" ):
                listener.exitOutput_dml_list_elem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutput_dml_list_elem" ):
                return visitor.visitOutput_dml_list_elem(self)
            else:
                return visitor.visitChildren(self)




    def output_dml_list_elem(self):

        localctx = tsqlParser.Output_dml_list_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_output_dml_list_elem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 730
                self.output_column_name()
                pass

            elif la_ == 2:
                self.state = 731
                self.expression(0)
                pass


            self.state = 738
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 735
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.AS:
                    self.state = 734
                    self.match(tsqlParser.AS)


                self.state = 737
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Output_column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETED(self):
            return self.getToken(tsqlParser.DELETED, 0)

        def INSERTED(self):
            return self.getToken(tsqlParser.INSERTED, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def STAR(self):
            return self.getToken(tsqlParser.STAR, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def DOLLAR_ACTION(self):
            return self.getToken(tsqlParser.DOLLAR_ACTION, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_output_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_column_name" ):
                listener.enterOutput_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_column_name" ):
                listener.exitOutput_column_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutput_column_name" ):
                return visitor.visitOutput_column_name(self)
            else:
                return visitor.visitChildren(self)




    def output_column_name(self):

        localctx = tsqlParser.Output_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_output_column_name)
        try:
            self.state = 751
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 743
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                if la_ == 1:
                    self.state = 740
                    self.match(tsqlParser.DELETED)
                    pass

                elif la_ == 2:
                    self.state = 741
                    self.match(tsqlParser.INSERTED)
                    pass

                elif la_ == 3:
                    self.state = 742
                    self.table_name()
                    pass


                self.state = 745
                self.match(tsqlParser.DOT)
                self.state = 748
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.STAR]:
                    self.state = 746
                    self.match(tsqlParser.STAR)
                    pass
                elif token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 747
                    self.r_id()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [tsqlParser.DOLLAR_ACTION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 750
                self.match(tsqlParser.DOLLAR_ACTION)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_databaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # R_idContext
            self.collation_name = None # R_idContext

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def DATABASE(self):
            return self.getToken(tsqlParser.DATABASE, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def CONTAINMENT(self):
            return self.getToken(tsqlParser.CONTAINMENT, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ON)
            else:
                return self.getToken(tsqlParser.ON, i)

        def database_file_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Database_file_specContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Database_file_specContext,i)


        def LOG(self):
            return self.getToken(tsqlParser.LOG, 0)

        def COLLATE(self):
            return self.getToken(tsqlParser.COLLATE, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def create_database_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Create_database_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Create_database_optionContext,i)


        def NONE(self):
            return self.getToken(tsqlParser.NONE, 0)

        def PARTIAL(self):
            return self.getToken(tsqlParser.PARTIAL, 0)

        def PRIMARY(self):
            return self.getToken(tsqlParser.PRIMARY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_database

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_database" ):
                listener.enterCreate_database(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_database" ):
                listener.exitCreate_database(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_database" ):
                return visitor.visitCreate_database(self)
            else:
                return visitor.visitChildren(self)




    def create_database(self):

        localctx = tsqlParser.Create_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_create_database)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 753
            self.match(tsqlParser.CREATE)
            self.state = 754
            self.match(tsqlParser.DATABASE)

            self.state = 755
            localctx.database = self.r_id()
            self.state = 759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.CONTAINMENT:
                self.state = 756
                self.match(tsqlParser.CONTAINMENT)
                self.state = 757
                self.match(tsqlParser.EQUAL)
                self.state = 758
                _la = self._input.LA(1)
                if not(_la==tsqlParser.NONE or _la==tsqlParser.PARTIAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ON:
                self.state = 761
                self.match(tsqlParser.ON)
                self.state = 763
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.PRIMARY:
                    self.state = 762
                    self.match(tsqlParser.PRIMARY)


                self.state = 765
                self.database_file_spec()
                self.state = 770
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 766
                    self.match(tsqlParser.COMMA)
                    self.state = 767
                    self.database_file_spec()
                    self.state = 772
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.LOG:
                self.state = 775
                self.match(tsqlParser.LOG)
                self.state = 776
                self.match(tsqlParser.ON)
                self.state = 777
                self.database_file_spec()
                self.state = 782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 778
                    self.match(tsqlParser.COMMA)
                    self.state = 779
                    self.database_file_spec()
                    self.state = 784
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.COLLATE:
                self.state = 787
                self.match(tsqlParser.COLLATE)
                self.state = 788
                localctx.collation_name = self.r_id()


            self.state = 800
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 791
                self.match(tsqlParser.WITH)
                self.state = 792
                self.create_database_option()
                self.state = 797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 793
                    self.match(tsqlParser.COMMA)
                    self.state = 794
                    self.create_database_option()
                    self.state = 799
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_indexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def INDEX(self):
            return self.getToken(tsqlParser.INDEX, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ON)
            else:
                return self.getToken(tsqlParser.ON, i)

        def table_name_with_hint(self):
            return self.getTypedRuleContext(tsqlParser.Table_name_with_hintContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def UNIQUE(self):
            return self.getToken(tsqlParser.UNIQUE, 0)

        def clustered(self):
            return self.getTypedRuleContext(tsqlParser.ClusteredContext,0)


        def index_options(self):
            return self.getTypedRuleContext(tsqlParser.Index_optionsContext,0)


        def ASC(self):
            return self.getToken(tsqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(tsqlParser.DESC, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_index" ):
                listener.enterCreate_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_index" ):
                listener.exitCreate_index(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_index" ):
                return visitor.visitCreate_index(self)
            else:
                return visitor.visitChildren(self)




    def create_index(self):

        localctx = tsqlParser.Create_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_create_index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self.match(tsqlParser.CREATE)
            self.state = 804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.UNIQUE:
                self.state = 803
                self.match(tsqlParser.UNIQUE)


            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.CLUSTERED or _la==tsqlParser.NONCLUSTERED:
                self.state = 806
                self.clustered()


            self.state = 809
            self.match(tsqlParser.INDEX)
            self.state = 810
            self.r_id()
            self.state = 811
            self.match(tsqlParser.ON)
            self.state = 812
            self.table_name_with_hint()
            self.state = 813
            self.match(tsqlParser.LR_BRACKET)
            self.state = 814
            self.column_name_list()
            self.state = 816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ASC or _la==tsqlParser.DESC:
                self.state = 815
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ASC or _la==tsqlParser.DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 818
            self.match(tsqlParser.RR_BRACKET)
            self.state = 820
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 819
                self.index_options()


            self.state = 824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ON:
                self.state = 822
                self.match(tsqlParser.ON)
                self.state = 823
                self.r_id()


            self.state = 827
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.state = 826
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_statisticsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def STATISTICS(self):
            return self.getToken(tsqlParser.STATISTICS, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def table_name_with_hint(self):
            return self.getTypedRuleContext(tsqlParser.Table_name_with_hintContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def FULLSCAN(self):
            return self.getToken(tsqlParser.FULLSCAN, 0)

        def SAMPLE(self):
            return self.getToken(tsqlParser.SAMPLE, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def STATS_STREAM(self):
            return self.getToken(tsqlParser.STATS_STREAM, 0)

        def PERCENT(self):
            return self.getToken(tsqlParser.PERCENT, 0)

        def ROWS(self):
            return self.getToken(tsqlParser.ROWS, 0)

        def NORECOMPUTE(self):
            return self.getToken(tsqlParser.NORECOMPUTE, 0)

        def INCREMENTAL(self):
            return self.getToken(tsqlParser.INCREMENTAL, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_create_statistics

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_statistics" ):
                listener.enterCreate_statistics(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_statistics" ):
                listener.exitCreate_statistics(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_statistics" ):
                return visitor.visitCreate_statistics(self)
            else:
                return visitor.visitChildren(self)




    def create_statistics(self):

        localctx = tsqlParser.Create_statisticsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_create_statistics)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.match(tsqlParser.CREATE)
            self.state = 830
            self.match(tsqlParser.STATISTICS)
            self.state = 831
            self.r_id()
            self.state = 832
            self.match(tsqlParser.ON)
            self.state = 833
            self.table_name_with_hint()
            self.state = 834
            self.match(tsqlParser.LR_BRACKET)
            self.state = 835
            self.column_name_list()
            self.state = 836
            self.match(tsqlParser.RR_BRACKET)
            self.state = 855
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 837
                self.match(tsqlParser.WITH)
                self.state = 843
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.FULLSCAN]:
                    self.state = 838
                    self.match(tsqlParser.FULLSCAN)
                    pass
                elif token in [tsqlParser.SAMPLE]:
                    self.state = 839
                    self.match(tsqlParser.SAMPLE)
                    self.state = 840
                    self.match(tsqlParser.DECIMAL)
                    self.state = 841
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.PERCENT or _la==tsqlParser.ROWS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [tsqlParser.STATS_STREAM]:
                    self.state = 842
                    self.match(tsqlParser.STATS_STREAM)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 847
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                if la_ == 1:
                    self.state = 845
                    self.match(tsqlParser.COMMA)
                    self.state = 846
                    self.match(tsqlParser.NORECOMPUTE)


                self.state = 853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 849
                    self.match(tsqlParser.COMMA)
                    self.state = 850
                    self.match(tsqlParser.INCREMENTAL)
                    self.state = 851
                    self.match(tsqlParser.EQUAL)
                    self.state = 852
                    self.on_off()




            self.state = 858
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 857
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(tsqlParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def column_def_table_constraints(self):
            return self.getTypedRuleContext(tsqlParser.Column_def_table_constraintsContext,0)


        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DEFAULT)
            else:
                return self.getToken(tsqlParser.DEFAULT, i)

        def TEXTIMAGE_ON(self):
            return self.getToken(tsqlParser.TEXTIMAGE_ON, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table" ):
                listener.enterCreate_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table" ):
                listener.exitCreate_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_table" ):
                return visitor.visitCreate_table(self)
            else:
                return visitor.visitChildren(self)




    def create_table(self):

        localctx = tsqlParser.Create_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_create_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.match(tsqlParser.CREATE)
            self.state = 861
            self.match(tsqlParser.TABLE)
            self.state = 862
            self.table_name()
            self.state = 863
            self.match(tsqlParser.LR_BRACKET)
            self.state = 864
            self.column_def_table_constraints()
            self.state = 866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.COMMA:
                self.state = 865
                self.match(tsqlParser.COMMA)


            self.state = 868
            self.match(tsqlParser.RR_BRACKET)
            self.state = 872
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 869
                self.match(tsqlParser.ON)
                self.state = 870
                self.r_id()

            elif la_ == 2:
                self.state = 871
                self.match(tsqlParser.DEFAULT)


            self.state = 877
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 874
                self.match(tsqlParser.TEXTIMAGE_ON)
                self.state = 875
                self.r_id()

            elif la_ == 2:
                self.state = 876
                self.match(tsqlParser.DEFAULT)


            self.state = 880
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.state = 879
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_viewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def VIEW(self):
            return self.getToken(tsqlParser.VIEW, 0)

        def simple_name(self):
            return self.getTypedRuleContext(tsqlParser.Simple_nameContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.WITH)
            else:
                return self.getToken(tsqlParser.WITH, i)

        def view_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.View_attributeContext)
            else:
                return self.getTypedRuleContext(tsqlParser.View_attributeContext,i)


        def CHECK(self):
            return self.getToken(tsqlParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(tsqlParser.OPTION, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_view" ):
                listener.enterCreate_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_view" ):
                listener.exitCreate_view(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_view" ):
                return visitor.visitCreate_view(self)
            else:
                return visitor.visitChildren(self)




    def create_view(self):

        localctx = tsqlParser.Create_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_create_view)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 882
            self.match(tsqlParser.CREATE)
            self.state = 883
            self.match(tsqlParser.VIEW)
            self.state = 884
            self.simple_name()
            self.state = 889
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.LR_BRACKET:
                self.state = 885
                self.match(tsqlParser.LR_BRACKET)
                self.state = 886
                self.column_name_list()
                self.state = 887
                self.match(tsqlParser.RR_BRACKET)


            self.state = 900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 891
                self.match(tsqlParser.WITH)
                self.state = 892
                self.view_attribute()
                self.state = 897
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 893
                    self.match(tsqlParser.COMMA)
                    self.state = 894
                    self.view_attribute()
                    self.state = 899
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 902
            self.match(tsqlParser.AS)
            self.state = 903
            self.select_statement()
            self.state = 907
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 904
                self.match(tsqlParser.WITH)
                self.state = 905
                self.match(tsqlParser.CHECK)
                self.state = 906
                self.match(tsqlParser.OPTION)


            self.state = 910
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 909
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class View_attributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(tsqlParser.ENCRYPTION, 0)

        def SCHEMABINDING(self):
            return self.getToken(tsqlParser.SCHEMABINDING, 0)

        def VIEW_METADATA(self):
            return self.getToken(tsqlParser.VIEW_METADATA, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_view_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterView_attribute" ):
                listener.enterView_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitView_attribute" ):
                listener.exitView_attribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitView_attribute" ):
                return visitor.visitView_attribute(self)
            else:
                return visitor.visitChildren(self)




    def view_attribute(self):

        localctx = tsqlParser.View_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_view_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            _la = self._input.LA(1)
            if not(_la==tsqlParser.ENCRYPTION or _la==tsqlParser.SCHEMABINDING or _la==tsqlParser.VIEW_METADATA):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint = None # R_idContext
            self.fk = None # Column_name_listContext
            self.pk = None # Column_name_listContext

        def ALTER(self):
            return self.getToken(tsqlParser.ALTER, 0)

        def TABLE(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.TABLE)
            else:
                return self.getToken(tsqlParser.TABLE, i)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_nameContext,i)


        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def LOCK_ESCALATION(self):
            return self.getToken(tsqlParser.LOCK_ESCALATION, 0)

        def ADD(self):
            return self.getToken(tsqlParser.ADD, 0)

        def column_def_table_constraint(self):
            return self.getTypedRuleContext(tsqlParser.Column_def_table_constraintContext,0)


        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def CONSTRAINT(self):
            return self.getToken(tsqlParser.CONSTRAINT, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def CHECK(self):
            return self.getToken(tsqlParser.CHECK, 0)

        def FOREIGN(self):
            return self.getToken(tsqlParser.FOREIGN, 0)

        def KEY(self):
            return self.getToken(tsqlParser.KEY, 0)

        def REFERENCES(self):
            return self.getToken(tsqlParser.REFERENCES, 0)

        def AUTO(self):
            return self.getToken(tsqlParser.AUTO, 0)

        def DISABLE(self):
            return self.getToken(tsqlParser.DISABLE, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Column_name_listContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_alter_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table" ):
                listener.enterAlter_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table" ):
                listener.exitAlter_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_table" ):
                return visitor.visitAlter_table(self)
            else:
                return visitor.visitChildren(self)




    def alter_table(self):

        localctx = tsqlParser.Alter_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_alter_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 914
            self.match(tsqlParser.ALTER)
            self.state = 915
            self.match(tsqlParser.TABLE)
            self.state = 916
            self.table_name()
            self.state = 947
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.SET]:
                self.state = 917
                self.match(tsqlParser.SET)
                self.state = 918
                self.match(tsqlParser.LR_BRACKET)
                self.state = 919
                self.match(tsqlParser.LOCK_ESCALATION)
                self.state = 920
                self.match(tsqlParser.EQUAL)
                self.state = 921
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TABLE or _la==tsqlParser.AUTO or _la==tsqlParser.DISABLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 922
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [tsqlParser.ADD]:
                self.state = 923
                self.match(tsqlParser.ADD)
                self.state = 924
                self.column_def_table_constraint()
                pass
            elif token in [tsqlParser.DROP]:
                self.state = 925
                self.match(tsqlParser.DROP)
                self.state = 926
                self.match(tsqlParser.CONSTRAINT)
                self.state = 927
                localctx.constraint = self.r_id()
                pass
            elif token in [tsqlParser.WITH]:
                self.state = 928
                self.match(tsqlParser.WITH)
                self.state = 929
                self.match(tsqlParser.CHECK)
                self.state = 930
                self.match(tsqlParser.ADD)
                self.state = 931
                self.match(tsqlParser.CONSTRAINT)
                self.state = 932
                localctx.constraint = self.r_id()
                self.state = 933
                self.match(tsqlParser.FOREIGN)
                self.state = 934
                self.match(tsqlParser.KEY)
                self.state = 935
                self.match(tsqlParser.LR_BRACKET)
                self.state = 936
                localctx.fk = self.column_name_list()
                self.state = 937
                self.match(tsqlParser.RR_BRACKET)
                self.state = 938
                self.match(tsqlParser.REFERENCES)
                self.state = 939
                self.table_name()
                self.state = 940
                self.match(tsqlParser.LR_BRACKET)
                self.state = 941
                localctx.pk = self.column_name_list()
                self.state = 942
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [tsqlParser.CHECK]:
                self.state = 944
                self.match(tsqlParser.CHECK)
                self.state = 945
                self.match(tsqlParser.CONSTRAINT)
                self.state = 946
                localctx.constraint = self.r_id()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.state = 949
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_databaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # R_idContext
            self.new_name = None # R_idContext
            self.collation = None # R_idContext

        def ALTER(self):
            return self.getToken(tsqlParser.ALTER, 0)

        def DATABASE(self):
            return self.getToken(tsqlParser.DATABASE, 0)

        def CURRENT(self):
            return self.getToken(tsqlParser.CURRENT, 0)

        def MODIFY(self):
            return self.getToken(tsqlParser.MODIFY, 0)

        def NAME(self):
            return self.getToken(tsqlParser.NAME, 0)

        def COLLATE(self):
            return self.getToken(tsqlParser.COLLATE, 0)

        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def database_optionspec(self):
            return self.getTypedRuleContext(tsqlParser.Database_optionspecContext,0)


        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def termination(self):
            return self.getTypedRuleContext(tsqlParser.TerminationContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_alter_database

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_database" ):
                listener.enterAlter_database(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_database" ):
                listener.exitAlter_database(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_database" ):
                return visitor.visitAlter_database(self)
            else:
                return visitor.visitChildren(self)




    def alter_database(self):

        localctx = tsqlParser.Alter_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_alter_database)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 952
            self.match(tsqlParser.ALTER)
            self.state = 953
            self.match(tsqlParser.DATABASE)
            self.state = 956
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.state = 954
                localctx.database = self.r_id()
                pass
            elif token in [tsqlParser.CURRENT]:
                self.state = 955
                self.match(tsqlParser.CURRENT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 970
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.MODIFY]:
                self.state = 958
                self.match(tsqlParser.MODIFY)
                self.state = 959
                self.match(tsqlParser.NAME)
                self.state = 960
                self.match(tsqlParser.EQUAL)
                self.state = 961
                localctx.new_name = self.r_id()
                pass
            elif token in [tsqlParser.COLLATE]:
                self.state = 962
                self.match(tsqlParser.COLLATE)
                self.state = 963
                localctx.collation = self.r_id()
                pass
            elif token in [tsqlParser.SET]:
                self.state = 964
                self.match(tsqlParser.SET)
                self.state = 965
                self.database_optionspec()
                self.state = 968
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                if la_ == 1:
                    self.state = 966
                    self.match(tsqlParser.WITH)
                    self.state = 967
                    self.termination()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 973
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 972
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Database_optionspecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def auto_option(self):
            return self.getTypedRuleContext(tsqlParser.Auto_optionContext,0)


        def change_tracking_option(self):
            return self.getTypedRuleContext(tsqlParser.Change_tracking_optionContext,0)


        def containment_option(self):
            return self.getTypedRuleContext(tsqlParser.Containment_optionContext,0)


        def cursor_option(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_optionContext,0)


        def date_correlation_optimization_option(self):
            return self.getTypedRuleContext(tsqlParser.Date_correlation_optimization_optionContext,0)


        def db_encryption_option(self):
            return self.getTypedRuleContext(tsqlParser.Db_encryption_optionContext,0)


        def db_state_option(self):
            return self.getTypedRuleContext(tsqlParser.Db_state_optionContext,0)


        def db_update_option(self):
            return self.getTypedRuleContext(tsqlParser.Db_update_optionContext,0)


        def db_user_access_option(self):
            return self.getTypedRuleContext(tsqlParser.Db_user_access_optionContext,0)


        def delayed_durability_option(self):
            return self.getTypedRuleContext(tsqlParser.Delayed_durability_optionContext,0)


        def external_access_option(self):
            return self.getTypedRuleContext(tsqlParser.External_access_optionContext,0)


        def FILESTREAM(self):
            return self.getToken(tsqlParser.FILESTREAM, 0)

        def database_filestream_option(self):
            return self.getTypedRuleContext(tsqlParser.Database_filestream_optionContext,0)


        def HADR_options(self):
            return self.getToken(tsqlParser.HADR_options, 0)

        def mixed_page_allocation_option(self):
            return self.getTypedRuleContext(tsqlParser.Mixed_page_allocation_optionContext,0)


        def parameterization_option(self):
            return self.getTypedRuleContext(tsqlParser.Parameterization_optionContext,0)


        def recovery_option(self):
            return self.getTypedRuleContext(tsqlParser.Recovery_optionContext,0)


        def service_broker_option(self):
            return self.getTypedRuleContext(tsqlParser.Service_broker_optionContext,0)


        def snapshot_option(self):
            return self.getTypedRuleContext(tsqlParser.Snapshot_optionContext,0)


        def sql_option(self):
            return self.getTypedRuleContext(tsqlParser.Sql_optionContext,0)


        def target_recovery_time_option(self):
            return self.getTypedRuleContext(tsqlParser.Target_recovery_time_optionContext,0)


        def termination(self):
            return self.getTypedRuleContext(tsqlParser.TerminationContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_database_optionspec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_optionspec" ):
                listener.enterDatabase_optionspec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_optionspec" ):
                listener.exitDatabase_optionspec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabase_optionspec" ):
                return visitor.visitDatabase_optionspec(self)
            else:
                return visitor.visitChildren(self)




    def database_optionspec(self):

        localctx = tsqlParser.Database_optionspecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_database_optionspec)
        try:
            self.state = 997
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 975
                self.auto_option()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 976
                self.change_tracking_option()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 977
                self.containment_option()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 978
                self.cursor_option()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 979
                self.date_correlation_optimization_option()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 980
                self.db_encryption_option()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 981
                self.db_state_option()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 982
                self.db_update_option()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 983
                self.db_user_access_option()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 984
                self.delayed_durability_option()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 985
                self.external_access_option()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 986
                self.match(tsqlParser.FILESTREAM)
                self.state = 987
                self.database_filestream_option()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 988
                self.match(tsqlParser.HADR_options)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 989
                self.mixed_page_allocation_option()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 990
                self.parameterization_option()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 991
                self.recovery_option()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 992
                self.service_broker_option()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 993
                self.snapshot_option()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 994
                self.sql_option()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 995
                self.target_recovery_time_option()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 996
                self.termination()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Auto_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTO_CLOSE(self):
            return self.getToken(tsqlParser.AUTO_CLOSE, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def AUTO_CREATE_STATISTICS(self):
            return self.getToken(tsqlParser.AUTO_CREATE_STATISTICS, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ON)
            else:
                return self.getToken(tsqlParser.ON, i)

        def INCREMENTAL(self):
            return self.getToken(tsqlParser.INCREMENTAL, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def AUTO_SHRINK(self):
            return self.getToken(tsqlParser.AUTO_SHRINK, 0)

        def AUTO_UPDATE_STATISTICS(self):
            return self.getToken(tsqlParser.AUTO_UPDATE_STATISTICS, 0)

        def AUTO_UPDATE_STATISTICS_ASYNC(self):
            return self.getToken(tsqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_auto_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuto_option" ):
                listener.enterAuto_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuto_option" ):
                listener.exitAuto_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAuto_option" ):
                return visitor.visitAuto_option(self)
            else:
                return visitor.visitChildren(self)




    def auto_option(self):

        localctx = tsqlParser.Auto_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_auto_option)
        self._la = 0 # Token type
        try:
            self.state = 1016
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.AUTO_CLOSE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 999
                self.match(tsqlParser.AUTO_CLOSE)
                self.state = 1000
                self.on_off()
                pass
            elif token in [tsqlParser.AUTO_CREATE_STATISTICS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1001
                self.match(tsqlParser.AUTO_CREATE_STATISTICS)
                self.state = 1002
                self.match(tsqlParser.OFF)
                pass
            elif token in [tsqlParser.ON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1003
                self.match(tsqlParser.ON)
                self.state = 1008
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.INCREMENTAL]:
                    self.state = 1004
                    self.match(tsqlParser.INCREMENTAL)
                    self.state = 1005
                    self.match(tsqlParser.EQUAL)
                    self.state = 1006
                    self.match(tsqlParser.ON)
                    pass
                elif token in [tsqlParser.OFF]:
                    self.state = 1007
                    self.match(tsqlParser.OFF)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [tsqlParser.AUTO_SHRINK]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1010
                self.match(tsqlParser.AUTO_SHRINK)
                self.state = 1011
                self.on_off()
                pass
            elif token in [tsqlParser.AUTO_UPDATE_STATISTICS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1012
                self.match(tsqlParser.AUTO_UPDATE_STATISTICS)
                self.state = 1013
                self.on_off()
                pass
            elif token in [tsqlParser.AUTO_UPDATE_STATISTICS_ASYNC]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1014
                self.match(tsqlParser.AUTO_UPDATE_STATISTICS_ASYNC)
                self.state = 1015
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Change_tracking_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGE_TRACKING(self):
            return self.getToken(tsqlParser.CHANGE_TRACKING, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def change_tracking_option_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Change_tracking_option_listContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Change_tracking_option_listContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_change_tracking_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChange_tracking_option" ):
                listener.enterChange_tracking_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChange_tracking_option" ):
                listener.exitChange_tracking_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChange_tracking_option" ):
                return visitor.visitChange_tracking_option(self)
            else:
                return visitor.visitChildren(self)




    def change_tracking_option(self):

        localctx = tsqlParser.Change_tracking_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_change_tracking_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            self.match(tsqlParser.CHANGE_TRACKING)
            self.state = 1019
            self.match(tsqlParser.EQUAL)
            self.state = 1035
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.OFF]:
                self.state = 1020
                self.match(tsqlParser.OFF)
                pass
            elif token in [tsqlParser.ON]:
                self.state = 1021
                self.match(tsqlParser.ON)
                self.state = 1032
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.AUTO_CLEANUP or _la==tsqlParser.CHANGE_RETENTION:
                    self.state = 1022
                    self.change_tracking_option_list()
                    self.state = 1027
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==tsqlParser.COMMA:
                        self.state = 1023
                        self.match(tsqlParser.COMMA)
                        self.state = 1024
                        self.change_tracking_option_list()
                        self.state = 1029
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1034
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Change_tracking_option_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTO_CLEANUP(self):
            return self.getToken(tsqlParser.AUTO_CLEANUP, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def CHANGE_RETENTION(self):
            return self.getToken(tsqlParser.CHANGE_RETENTION, 0)

        def DAYS(self):
            return self.getToken(tsqlParser.DAYS, 0)

        def HOURS(self):
            return self.getToken(tsqlParser.HOURS, 0)

        def MINUTES(self):
            return self.getToken(tsqlParser.MINUTES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_change_tracking_option_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChange_tracking_option_list" ):
                listener.enterChange_tracking_option_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChange_tracking_option_list" ):
                listener.exitChange_tracking_option_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChange_tracking_option_list" ):
                return visitor.visitChange_tracking_option_list(self)
            else:
                return visitor.visitChildren(self)




    def change_tracking_option_list(self):

        localctx = tsqlParser.Change_tracking_option_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_change_tracking_option_list)
        self._la = 0 # Token type
        try:
            self.state = 1043
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.AUTO_CLEANUP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1037
                self.match(tsqlParser.AUTO_CLEANUP)
                self.state = 1038
                self.match(tsqlParser.EQUAL)
                self.state = 1039
                self.on_off()
                pass
            elif token in [tsqlParser.CHANGE_RETENTION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1040
                self.match(tsqlParser.CHANGE_RETENTION)
                self.state = 1041
                self.match(tsqlParser.EQUAL)
                self.state = 1042
                _la = self._input.LA(1)
                if not(_la==tsqlParser.DAYS or _la==tsqlParser.HOURS or _la==tsqlParser.MINUTES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Containment_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTAINMENT(self):
            return self.getToken(tsqlParser.CONTAINMENT, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def NONE(self):
            return self.getToken(tsqlParser.NONE, 0)

        def PARTIAL(self):
            return self.getToken(tsqlParser.PARTIAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_containment_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContainment_option" ):
                listener.enterContainment_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContainment_option" ):
                listener.exitContainment_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContainment_option" ):
                return visitor.visitContainment_option(self)
            else:
                return visitor.visitChildren(self)




    def containment_option(self):

        localctx = tsqlParser.Containment_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_containment_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1045
            self.match(tsqlParser.CONTAINMENT)
            self.state = 1046
            self.match(tsqlParser.EQUAL)
            self.state = 1047
            _la = self._input.LA(1)
            if not(_la==tsqlParser.NONE or _la==tsqlParser.PARTIAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURSOR_CLOSE_ON_COMMIT(self):
            return self.getToken(tsqlParser.CURSOR_CLOSE_ON_COMMIT, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def CURSOR_DEFAULT(self):
            return self.getToken(tsqlParser.CURSOR_DEFAULT, 0)

        def LOCAL(self):
            return self.getToken(tsqlParser.LOCAL, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_cursor_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_option" ):
                listener.enterCursor_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_option" ):
                listener.exitCursor_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_option" ):
                return visitor.visitCursor_option(self)
            else:
                return visitor.visitChildren(self)




    def cursor_option(self):

        localctx = tsqlParser.Cursor_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_cursor_option)
        self._la = 0 # Token type
        try:
            self.state = 1053
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CURSOR_CLOSE_ON_COMMIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1049
                self.match(tsqlParser.CURSOR_CLOSE_ON_COMMIT)
                self.state = 1050
                self.on_off()
                pass
            elif token in [tsqlParser.CURSOR_DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1051
                self.match(tsqlParser.CURSOR_DEFAULT)
                self.state = 1052
                _la = self._input.LA(1)
                if not(_la==tsqlParser.GLOBAL or _la==tsqlParser.LOCAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Date_correlation_optimization_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_CORRELATION_OPTIMIZATION(self):
            return self.getToken(tsqlParser.DATE_CORRELATION_OPTIMIZATION, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_date_correlation_optimization_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate_correlation_optimization_option" ):
                listener.enterDate_correlation_optimization_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate_correlation_optimization_option" ):
                listener.exitDate_correlation_optimization_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDate_correlation_optimization_option" ):
                return visitor.visitDate_correlation_optimization_option(self)
            else:
                return visitor.visitChildren(self)




    def date_correlation_optimization_option(self):

        localctx = tsqlParser.Date_correlation_optimization_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_date_correlation_optimization_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            self.match(tsqlParser.DATE_CORRELATION_OPTIMIZATION)
            self.state = 1056
            self.on_off()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Db_encryption_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(tsqlParser.ENCRYPTION, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_db_encryption_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb_encryption_option" ):
                listener.enterDb_encryption_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb_encryption_option" ):
                listener.exitDb_encryption_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDb_encryption_option" ):
                return visitor.visitDb_encryption_option(self)
            else:
                return visitor.visitChildren(self)




    def db_encryption_option(self):

        localctx = tsqlParser.Db_encryption_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_db_encryption_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1058
            self.match(tsqlParser.ENCRYPTION)
            self.state = 1059
            self.on_off()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Db_state_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ONLINE(self):
            return self.getToken(tsqlParser.ONLINE, 0)

        def OFFLINE(self):
            return self.getToken(tsqlParser.OFFLINE, 0)

        def EMERGENCY(self):
            return self.getToken(tsqlParser.EMERGENCY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_db_state_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb_state_option" ):
                listener.enterDb_state_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb_state_option" ):
                listener.exitDb_state_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDb_state_option" ):
                return visitor.visitDb_state_option(self)
            else:
                return visitor.visitChildren(self)




    def db_state_option(self):

        localctx = tsqlParser.Db_state_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_db_state_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1061
            _la = self._input.LA(1)
            if not(_la==tsqlParser.EMERGENCY or _la==tsqlParser.OFFLINE or _la==tsqlParser.ONLINE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Db_update_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ_ONLY(self):
            return self.getToken(tsqlParser.READ_ONLY, 0)

        def READ_WRITE(self):
            return self.getToken(tsqlParser.READ_WRITE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_db_update_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb_update_option" ):
                listener.enterDb_update_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb_update_option" ):
                listener.exitDb_update_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDb_update_option" ):
                return visitor.visitDb_update_option(self)
            else:
                return visitor.visitChildren(self)




    def db_update_option(self):

        localctx = tsqlParser.Db_update_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_db_update_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1063
            _la = self._input.LA(1)
            if not(_la==tsqlParser.READ_ONLY or _la==tsqlParser.READ_WRITE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Db_user_access_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SINGLE_USER(self):
            return self.getToken(tsqlParser.SINGLE_USER, 0)

        def RESTRICTED_USER(self):
            return self.getToken(tsqlParser.RESTRICTED_USER, 0)

        def MULTI_USER(self):
            return self.getToken(tsqlParser.MULTI_USER, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_db_user_access_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb_user_access_option" ):
                listener.enterDb_user_access_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb_user_access_option" ):
                listener.exitDb_user_access_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDb_user_access_option" ):
                return visitor.visitDb_user_access_option(self)
            else:
                return visitor.visitChildren(self)




    def db_user_access_option(self):

        localctx = tsqlParser.Db_user_access_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_db_user_access_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1065
            _la = self._input.LA(1)
            if not(((((_la - 325)) & ~0x3f) == 0 and ((1 << (_la - 325)) & ((1 << (tsqlParser.MULTI_USER - 325)) | (1 << (tsqlParser.RESTRICTED_USER - 325)) | (1 << (tsqlParser.SINGLE_USER - 325)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delayed_durability_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELAYED_DURABILITY(self):
            return self.getToken(tsqlParser.DELAYED_DURABILITY, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def DISABLED(self):
            return self.getToken(tsqlParser.DISABLED, 0)

        def ALLOWED(self):
            return self.getToken(tsqlParser.ALLOWED, 0)

        def FORCED(self):
            return self.getToken(tsqlParser.FORCED, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_delayed_durability_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelayed_durability_option" ):
                listener.enterDelayed_durability_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelayed_durability_option" ):
                listener.exitDelayed_durability_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelayed_durability_option" ):
                return visitor.visitDelayed_durability_option(self)
            else:
                return visitor.visitChildren(self)




    def delayed_durability_option(self):

        localctx = tsqlParser.Delayed_durability_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_delayed_durability_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1067
            self.match(tsqlParser.DELAYED_DURABILITY)
            self.state = 1068
            self.match(tsqlParser.EQUAL)
            self.state = 1069
            _la = self._input.LA(1)
            if not(_la==tsqlParser.ALLOWED or _la==tsqlParser.DISABLED or _la==tsqlParser.FORCED):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class External_access_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DB_CHAINING(self):
            return self.getToken(tsqlParser.DB_CHAINING, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def TRUSTWORTHY(self):
            return self.getToken(tsqlParser.TRUSTWORTHY, 0)

        def DEFAULT_LANGUAGE(self):
            return self.getToken(tsqlParser.DEFAULT_LANGUAGE, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def DEFAULT_FULLTEXT_LANGUAGE(self):
            return self.getToken(tsqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0)

        def NESTED_TRIGGERS(self):
            return self.getToken(tsqlParser.NESTED_TRIGGERS, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def TRANSFORM_NOISE_WORDS(self):
            return self.getToken(tsqlParser.TRANSFORM_NOISE_WORDS, 0)

        def TWO_DIGIT_YEAR_CUTOFF(self):
            return self.getToken(tsqlParser.TWO_DIGIT_YEAR_CUTOFF, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_external_access_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_access_option" ):
                listener.enterExternal_access_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_access_option" ):
                listener.exitExternal_access_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternal_access_option" ):
                return visitor.visitExternal_access_option(self)
            else:
                return visitor.visitChildren(self)




    def external_access_option(self):

        localctx = tsqlParser.External_access_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_external_access_option)
        self._la = 0 # Token type
        try:
            self.state = 1096
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.DB_CHAINING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1071
                self.match(tsqlParser.DB_CHAINING)
                self.state = 1072
                self.on_off()
                pass
            elif token in [tsqlParser.TRUSTWORTHY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1073
                self.match(tsqlParser.TRUSTWORTHY)
                self.state = 1074
                self.on_off()
                pass
            elif token in [tsqlParser.DEFAULT_LANGUAGE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1075
                self.match(tsqlParser.DEFAULT_LANGUAGE)
                self.state = 1076
                self.match(tsqlParser.EQUAL)
                self.state = 1079
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 1077
                    self.r_id()
                    pass
                elif token in [tsqlParser.STRING]:
                    self.state = 1078
                    self.match(tsqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [tsqlParser.DEFAULT_FULLTEXT_LANGUAGE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1081
                self.match(tsqlParser.DEFAULT_FULLTEXT_LANGUAGE)
                self.state = 1082
                self.match(tsqlParser.EQUAL)
                self.state = 1085
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 1083
                    self.r_id()
                    pass
                elif token in [tsqlParser.STRING]:
                    self.state = 1084
                    self.match(tsqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [tsqlParser.NESTED_TRIGGERS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1087
                self.match(tsqlParser.NESTED_TRIGGERS)
                self.state = 1088
                self.match(tsqlParser.EQUAL)
                self.state = 1089
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.TRANSFORM_NOISE_WORDS]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1090
                self.match(tsqlParser.TRANSFORM_NOISE_WORDS)
                self.state = 1091
                self.match(tsqlParser.EQUAL)
                self.state = 1092
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.TWO_DIGIT_YEAR_CUTOFF]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1093
                self.match(tsqlParser.TWO_DIGIT_YEAR_CUTOFF)
                self.state = 1094
                self.match(tsqlParser.EQUAL)
                self.state = 1095
                self.match(tsqlParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Mixed_page_allocation_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MIXED_PAGE_ALLOCATION(self):
            return self.getToken(tsqlParser.MIXED_PAGE_ALLOCATION, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_mixed_page_allocation_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMixed_page_allocation_option" ):
                listener.enterMixed_page_allocation_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMixed_page_allocation_option" ):
                listener.exitMixed_page_allocation_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMixed_page_allocation_option" ):
                return visitor.visitMixed_page_allocation_option(self)
            else:
                return visitor.visitChildren(self)




    def mixed_page_allocation_option(self):

        localctx = tsqlParser.Mixed_page_allocation_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_mixed_page_allocation_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1098
            self.match(tsqlParser.MIXED_PAGE_ALLOCATION)
            self.state = 1099
            _la = self._input.LA(1)
            if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parameterization_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMETERIZATION(self):
            return self.getToken(tsqlParser.PARAMETERIZATION, 0)

        def SIMPLE(self):
            return self.getToken(tsqlParser.SIMPLE, 0)

        def FORCED(self):
            return self.getToken(tsqlParser.FORCED, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_parameterization_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterization_option" ):
                listener.enterParameterization_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterization_option" ):
                listener.exitParameterization_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterization_option" ):
                return visitor.visitParameterization_option(self)
            else:
                return visitor.visitChildren(self)




    def parameterization_option(self):

        localctx = tsqlParser.Parameterization_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_parameterization_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1101
            self.match(tsqlParser.PARAMETERIZATION)
            self.state = 1102
            _la = self._input.LA(1)
            if not(_la==tsqlParser.FORCED or _la==tsqlParser.SIMPLE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Recovery_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECOVERY(self):
            return self.getToken(tsqlParser.RECOVERY, 0)

        def FULL(self):
            return self.getToken(tsqlParser.FULL, 0)

        def BULK_LOGGED(self):
            return self.getToken(tsqlParser.BULK_LOGGED, 0)

        def SIMPLE(self):
            return self.getToken(tsqlParser.SIMPLE, 0)

        def TORN_PAGE_DETECTION(self):
            return self.getToken(tsqlParser.TORN_PAGE_DETECTION, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def PAGE_VERIFY(self):
            return self.getToken(tsqlParser.PAGE_VERIFY, 0)

        def CHECKSUM(self):
            return self.getToken(tsqlParser.CHECKSUM, 0)

        def NONE(self):
            return self.getToken(tsqlParser.NONE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_recovery_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecovery_option" ):
                listener.enterRecovery_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecovery_option" ):
                listener.exitRecovery_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecovery_option" ):
                return visitor.visitRecovery_option(self)
            else:
                return visitor.visitChildren(self)




    def recovery_option(self):

        localctx = tsqlParser.Recovery_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_recovery_option)
        self._la = 0 # Token type
        try:
            self.state = 1110
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.RECOVERY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1104
                self.match(tsqlParser.RECOVERY)
                self.state = 1105
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FULL or _la==tsqlParser.BULK_LOGGED or _la==tsqlParser.SIMPLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.TORN_PAGE_DETECTION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1106
                self.match(tsqlParser.TORN_PAGE_DETECTION)
                self.state = 1107
                self.on_off()
                pass
            elif token in [tsqlParser.PAGE_VERIFY]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1108
                self.match(tsqlParser.PAGE_VERIFY)
                self.state = 1109
                _la = self._input.LA(1)
                if not(_la==tsqlParser.NONE or _la==tsqlParser.CHECKSUM or _la==tsqlParser.TORN_PAGE_DETECTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Service_broker_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLE_BROKER(self):
            return self.getToken(tsqlParser.ENABLE_BROKER, 0)

        def DISABLE_BROKER(self):
            return self.getToken(tsqlParser.DISABLE_BROKER, 0)

        def NEW_BROKER(self):
            return self.getToken(tsqlParser.NEW_BROKER, 0)

        def ERROR_BROKER_CONVERSATIONS(self):
            return self.getToken(tsqlParser.ERROR_BROKER_CONVERSATIONS, 0)

        def HONOR_BROKER_PRIORITY(self):
            return self.getToken(tsqlParser.HONOR_BROKER_PRIORITY, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_service_broker_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterService_broker_option" ):
                listener.enterService_broker_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitService_broker_option" ):
                listener.exitService_broker_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitService_broker_option" ):
                return visitor.visitService_broker_option(self)
            else:
                return visitor.visitChildren(self)




    def service_broker_option(self):

        localctx = tsqlParser.Service_broker_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_service_broker_option)
        try:
            self.state = 1118
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.ENABLE_BROKER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1112
                self.match(tsqlParser.ENABLE_BROKER)
                pass
            elif token in [tsqlParser.DISABLE_BROKER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1113
                self.match(tsqlParser.DISABLE_BROKER)
                pass
            elif token in [tsqlParser.NEW_BROKER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1114
                self.match(tsqlParser.NEW_BROKER)
                pass
            elif token in [tsqlParser.ERROR_BROKER_CONVERSATIONS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1115
                self.match(tsqlParser.ERROR_BROKER_CONVERSATIONS)
                pass
            elif token in [tsqlParser.HONOR_BROKER_PRIORITY]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1116
                self.match(tsqlParser.HONOR_BROKER_PRIORITY)
                self.state = 1117
                self.on_off()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Snapshot_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = None # Token

        def ALLOW_SNAPSHOT_ISOLATION(self):
            return self.getToken(tsqlParser.ALLOW_SNAPSHOT_ISOLATION, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def READ_COMMITTED_SNAPSHOT(self):
            return self.getToken(tsqlParser.READ_COMMITTED_SNAPSHOT, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_snapshot_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSnapshot_option" ):
                listener.enterSnapshot_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSnapshot_option" ):
                listener.exitSnapshot_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSnapshot_option" ):
                return visitor.visitSnapshot_option(self)
            else:
                return visitor.visitChildren(self)




    def snapshot_option(self):

        localctx = tsqlParser.Snapshot_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_snapshot_option)
        self._la = 0 # Token type
        try:
            self.state = 1125
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.ALLOW_SNAPSHOT_ISOLATION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1120
                self.match(tsqlParser.ALLOW_SNAPSHOT_ISOLATION)
                self.state = 1121
                self.on_off()
                pass
            elif token in [tsqlParser.READ_COMMITTED_SNAPSHOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1122
                self.match(tsqlParser.READ_COMMITTED_SNAPSHOT)
                self.state = 1123
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.OFF, tsqlParser.ON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1124
                localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANSI_NULL_DEFAULT(self):
            return self.getToken(tsqlParser.ANSI_NULL_DEFAULT, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def ANSI_NULLS(self):
            return self.getToken(tsqlParser.ANSI_NULLS, 0)

        def ANSI_PADDING(self):
            return self.getToken(tsqlParser.ANSI_PADDING, 0)

        def ANSI_WARNINGS(self):
            return self.getToken(tsqlParser.ANSI_WARNINGS, 0)

        def ARITHABORT(self):
            return self.getToken(tsqlParser.ARITHABORT, 0)

        def COMPATIBILITY_LEVEL(self):
            return self.getToken(tsqlParser.COMPATIBILITY_LEVEL, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def CONCAT_NULL_YIELDS_NULL(self):
            return self.getToken(tsqlParser.CONCAT_NULL_YIELDS_NULL, 0)

        def NUMERIC_ROUNDABORT(self):
            return self.getToken(tsqlParser.NUMERIC_ROUNDABORT, 0)

        def QUOTED_IDENTIFIER(self):
            return self.getToken(tsqlParser.QUOTED_IDENTIFIER, 0)

        def RECURSIVE_TRIGGERS(self):
            return self.getToken(tsqlParser.RECURSIVE_TRIGGERS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_sql_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_option" ):
                listener.enterSql_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_option" ):
                listener.exitSql_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_option" ):
                return visitor.visitSql_option(self)
            else:
                return visitor.visitChildren(self)




    def sql_option(self):

        localctx = tsqlParser.Sql_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_sql_option)
        try:
            self.state = 1148
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.ANSI_NULL_DEFAULT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1127
                self.match(tsqlParser.ANSI_NULL_DEFAULT)
                self.state = 1128
                self.on_off()
                pass
            elif token in [tsqlParser.ANSI_NULLS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1129
                self.match(tsqlParser.ANSI_NULLS)
                self.state = 1130
                self.on_off()
                pass
            elif token in [tsqlParser.ANSI_PADDING]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1131
                self.match(tsqlParser.ANSI_PADDING)
                self.state = 1132
                self.on_off()
                pass
            elif token in [tsqlParser.ANSI_WARNINGS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1133
                self.match(tsqlParser.ANSI_WARNINGS)
                self.state = 1134
                self.on_off()
                pass
            elif token in [tsqlParser.ARITHABORT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1135
                self.match(tsqlParser.ARITHABORT)
                self.state = 1136
                self.on_off()
                pass
            elif token in [tsqlParser.COMPATIBILITY_LEVEL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1137
                self.match(tsqlParser.COMPATIBILITY_LEVEL)
                self.state = 1138
                self.match(tsqlParser.EQUAL)
                self.state = 1139
                self.match(tsqlParser.DECIMAL)
                pass
            elif token in [tsqlParser.CONCAT_NULL_YIELDS_NULL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1140
                self.match(tsqlParser.CONCAT_NULL_YIELDS_NULL)
                self.state = 1141
                self.on_off()
                pass
            elif token in [tsqlParser.NUMERIC_ROUNDABORT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1142
                self.match(tsqlParser.NUMERIC_ROUNDABORT)
                self.state = 1143
                self.on_off()
                pass
            elif token in [tsqlParser.QUOTED_IDENTIFIER]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1144
                self.match(tsqlParser.QUOTED_IDENTIFIER)
                self.state = 1145
                self.on_off()
                pass
            elif token in [tsqlParser.RECURSIVE_TRIGGERS]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1146
                self.match(tsqlParser.RECURSIVE_TRIGGERS)
                self.state = 1147
                self.on_off()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Target_recovery_time_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TARGET_RECOVERY_TIME(self):
            return self.getToken(tsqlParser.TARGET_RECOVERY_TIME, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def SECONDS(self):
            return self.getToken(tsqlParser.SECONDS, 0)

        def MINUTES(self):
            return self.getToken(tsqlParser.MINUTES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_target_recovery_time_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_recovery_time_option" ):
                listener.enterTarget_recovery_time_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_recovery_time_option" ):
                listener.exitTarget_recovery_time_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTarget_recovery_time_option" ):
                return visitor.visitTarget_recovery_time_option(self)
            else:
                return visitor.visitChildren(self)




    def target_recovery_time_option(self):

        localctx = tsqlParser.Target_recovery_time_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_target_recovery_time_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1150
            self.match(tsqlParser.TARGET_RECOVERY_TIME)
            self.state = 1151
            self.match(tsqlParser.EQUAL)
            self.state = 1152
            self.match(tsqlParser.DECIMAL)
            self.state = 1153
            _la = self._input.LA(1)
            if not(_la==tsqlParser.MINUTES or _la==tsqlParser.SECONDS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TerminationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.seconds = None # Token

        def ROLLBACK(self):
            return self.getToken(tsqlParser.ROLLBACK, 0)

        def AFTER(self):
            return self.getToken(tsqlParser.AFTER, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def IMMEDIATE(self):
            return self.getToken(tsqlParser.IMMEDIATE, 0)

        def NO_WAIT(self):
            return self.getToken(tsqlParser.NO_WAIT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_termination

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTermination" ):
                listener.enterTermination(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTermination" ):
                listener.exitTermination(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTermination" ):
                return visitor.visitTermination(self)
            else:
                return visitor.visitChildren(self)




    def termination(self):

        localctx = tsqlParser.TerminationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_termination)
        try:
            self.state = 1161
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1155
                self.match(tsqlParser.ROLLBACK)
                self.state = 1156
                self.match(tsqlParser.AFTER)
                self.state = 1157
                localctx.seconds = self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1158
                self.match(tsqlParser.ROLLBACK)
                self.state = 1159
                self.match(tsqlParser.IMMEDIATE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1160
                self.match(tsqlParser.NO_WAIT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_indexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # R_idContext

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def INDEX(self):
            return self.getToken(tsqlParser.INDEX, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_drop_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_index" ):
                listener.enterDrop_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_index" ):
                listener.exitDrop_index(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_index" ):
                return visitor.visitDrop_index(self)
            else:
                return visitor.visitChildren(self)




    def drop_index(self):

        localctx = tsqlParser.Drop_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_drop_index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1163
            self.match(tsqlParser.DROP)
            self.state = 1164
            self.match(tsqlParser.INDEX)
            self.state = 1167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1165
                self.match(tsqlParser.IF)
                self.state = 1166
                self.match(tsqlParser.EXISTS)


            self.state = 1169
            localctx.name = self.r_id()
            self.state = 1172
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ON:
                self.state = 1170
                self.match(tsqlParser.ON)
                self.state = 1171
                self.table_name()


            self.state = 1175
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.state = 1174
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_procedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def PROCEDURE(self):
            return self.getToken(tsqlParser.PROCEDURE, 0)

        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_procedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_procedure" ):
                listener.enterDrop_procedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_procedure" ):
                listener.exitDrop_procedure(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_procedure" ):
                return visitor.visitDrop_procedure(self)
            else:
                return visitor.visitChildren(self)




    def drop_procedure(self):

        localctx = tsqlParser.Drop_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_drop_procedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1177
            self.match(tsqlParser.DROP)
            self.state = 1178
            self.match(tsqlParser.PROCEDURE)
            self.state = 1181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1179
                self.match(tsqlParser.IF)
                self.state = 1180
                self.match(tsqlParser.EXISTS)


            self.state = 1183
            self.func_proc_name()
            self.state = 1185
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.state = 1184
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_statisticsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # R_idContext

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def STATISTICS(self):
            return self.getToken(tsqlParser.STATISTICS, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_drop_statistics

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_statistics" ):
                listener.enterDrop_statistics(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_statistics" ):
                listener.exitDrop_statistics(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_statistics" ):
                return visitor.visitDrop_statistics(self)
            else:
                return visitor.visitChildren(self)




    def drop_statistics(self):

        localctx = tsqlParser.Drop_statisticsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_drop_statistics)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1187
            self.match(tsqlParser.DROP)
            self.state = 1188
            self.match(tsqlParser.STATISTICS)
            self.state = 1192
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.state = 1189
                self.table_name()
                self.state = 1190
                self.match(tsqlParser.DOT)


            self.state = 1194
            localctx.name = self.r_id()
            self.state = 1195
            self.match(tsqlParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def TABLE(self):
            return self.getToken(tsqlParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_table" ):
                listener.enterDrop_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_table" ):
                listener.exitDrop_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_table" ):
                return visitor.visitDrop_table(self)
            else:
                return visitor.visitChildren(self)




    def drop_table(self):

        localctx = tsqlParser.Drop_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_drop_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1197
            self.match(tsqlParser.DROP)
            self.state = 1198
            self.match(tsqlParser.TABLE)
            self.state = 1201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1199
                self.match(tsqlParser.IF)
                self.state = 1200
                self.match(tsqlParser.EXISTS)


            self.state = 1203
            self.table_name()
            self.state = 1205
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.state = 1204
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_viewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def VIEW(self):
            return self.getToken(tsqlParser.VIEW, 0)

        def simple_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Simple_nameContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Simple_nameContext,i)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_view" ):
                listener.enterDrop_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_view" ):
                listener.exitDrop_view(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_view" ):
                return visitor.visitDrop_view(self)
            else:
                return visitor.visitChildren(self)




    def drop_view(self):

        localctx = tsqlParser.Drop_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_drop_view)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1207
            self.match(tsqlParser.DROP)
            self.state = 1208
            self.match(tsqlParser.VIEW)
            self.state = 1211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1209
                self.match(tsqlParser.IF)
                self.state = 1210
                self.match(tsqlParser.EXISTS)


            self.state = 1213
            self.simple_name()
            self.state = 1218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 1214
                self.match(tsqlParser.COMMA)
                self.state = 1215
                self.simple_name()
                self.state = 1220
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1222
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.state = 1221
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Simple_nameContext

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def TYPE(self):
            return self.getToken(tsqlParser.TYPE, 0)

        def FROM(self):
            return self.getToken(tsqlParser.FROM, 0)

        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def default_value(self):
            return self.getTypedRuleContext(tsqlParser.Default_valueContext,0)


        def simple_name(self):
            return self.getTypedRuleContext(tsqlParser.Simple_nameContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_create_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_type" ):
                listener.enterCreate_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_type" ):
                listener.exitCreate_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_type" ):
                return visitor.visitCreate_type(self)
            else:
                return visitor.visitChildren(self)




    def create_type(self):

        localctx = tsqlParser.Create_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_create_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1224
            self.match(tsqlParser.CREATE)
            self.state = 1225
            self.match(tsqlParser.TYPE)
            self.state = 1226
            localctx.name = self.simple_name()
            self.state = 1227
            self.match(tsqlParser.FROM)
            self.state = 1228
            self.data_type()
            self.state = 1229
            self.default_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Simple_nameContext

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def TYPE(self):
            return self.getToken(tsqlParser.TYPE, 0)

        def simple_name(self):
            return self.getTypedRuleContext(tsqlParser.Simple_nameContext,0)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_type" ):
                listener.enterDrop_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_type" ):
                listener.exitDrop_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_type" ):
                return visitor.visitDrop_type(self)
            else:
                return visitor.visitChildren(self)




    def drop_type(self):

        localctx = tsqlParser.Drop_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_drop_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1231
            self.match(tsqlParser.DROP)
            self.state = 1232
            self.match(tsqlParser.TYPE)
            self.state = 1235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1233
                self.match(tsqlParser.IF)
                self.state = 1234
                self.match(tsqlParser.EXISTS)


            self.state = 1237
            localctx.name = self.simple_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rowset_function_limitedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def openquery(self):
            return self.getTypedRuleContext(tsqlParser.OpenqueryContext,0)


        def opendatasource(self):
            return self.getTypedRuleContext(tsqlParser.OpendatasourceContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_rowset_function_limited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowset_function_limited" ):
                listener.enterRowset_function_limited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowset_function_limited" ):
                listener.exitRowset_function_limited(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowset_function_limited" ):
                return visitor.visitRowset_function_limited(self)
            else:
                return visitor.visitChildren(self)




    def rowset_function_limited(self):

        localctx = tsqlParser.Rowset_function_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_rowset_function_limited)
        try:
            self.state = 1241
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.OPENQUERY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1239
                self.openquery()
                pass
            elif token in [tsqlParser.OPENDATASOURCE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1240
                self.opendatasource()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OpenqueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.linked_server = None # R_idContext
            self.query = None # Token

        def OPENQUERY(self):
            return self.getToken(tsqlParser.OPENQUERY, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_openquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenquery" ):
                listener.enterOpenquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenquery" ):
                listener.exitOpenquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpenquery" ):
                return visitor.visitOpenquery(self)
            else:
                return visitor.visitChildren(self)




    def openquery(self):

        localctx = tsqlParser.OpenqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_openquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1243
            self.match(tsqlParser.OPENQUERY)
            self.state = 1244
            self.match(tsqlParser.LR_BRACKET)
            self.state = 1245
            localctx.linked_server = self.r_id()
            self.state = 1246
            self.match(tsqlParser.COMMA)
            self.state = 1247
            localctx.query = self.match(tsqlParser.STRING)
            self.state = 1248
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OpendatasourceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.provider = None # Token
            self.init = None # Token
            self.database = None # R_idContext
            self.scheme = None # R_idContext
            self.table = None # R_idContext

        def OPENDATASOURCE(self):
            return self.getToken(tsqlParser.OPENDATASOURCE, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.STRING)
            else:
                return self.getToken(tsqlParser.STRING, i)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_opendatasource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpendatasource" ):
                listener.enterOpendatasource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpendatasource" ):
                listener.exitOpendatasource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpendatasource" ):
                return visitor.visitOpendatasource(self)
            else:
                return visitor.visitChildren(self)




    def opendatasource(self):

        localctx = tsqlParser.OpendatasourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_opendatasource)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1250
            self.match(tsqlParser.OPENDATASOURCE)
            self.state = 1251
            self.match(tsqlParser.LR_BRACKET)
            self.state = 1252
            localctx.provider = self.match(tsqlParser.STRING)
            self.state = 1253
            self.match(tsqlParser.COMMA)
            self.state = 1254
            localctx.init = self.match(tsqlParser.STRING)
            self.state = 1255
            self.match(tsqlParser.RR_BRACKET)
            self.state = 1256
            self.match(tsqlParser.DOT)
            self.state = 1258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (tsqlParser.FORCESEEK - 73)) | (1 << (tsqlParser.NEXT - 73)) | (1 << (tsqlParser.NUMERIC - 73)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (tsqlParser.VALUE - 192)) | (1 << (tsqlParser.ABSOLUTE - 192)) | (1 << (tsqlParser.APPLY - 192)) | (1 << (tsqlParser.AUTO - 192)) | (1 << (tsqlParser.AVG - 192)) | (1 << (tsqlParser.BASE64 - 192)) | (1 << (tsqlParser.CALLER - 192)) | (1 << (tsqlParser.CAST - 192)) | (1 << (tsqlParser.CATCH - 192)) | (1 << (tsqlParser.CHECKSUM_AGG - 192)) | (1 << (tsqlParser.COMMITTED - 192)) | (1 << (tsqlParser.CONCAT - 192)) | (1 << (tsqlParser.CONTROL - 192)) | (1 << (tsqlParser.COOKIE - 192)) | (1 << (tsqlParser.COUNT - 192)) | (1 << (tsqlParser.COUNT_BIG - 192)) | (1 << (tsqlParser.DATE - 192)) | (1 << (tsqlParser.DELAY - 192)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (tsqlParser.DELETED - 257)) | (1 << (tsqlParser.DENSE_RANK - 257)) | (1 << (tsqlParser.DISABLE - 257)) | (1 << (tsqlParser.DYNAMIC - 257)) | (1 << (tsqlParser.ENCRYPTION - 257)) | (1 << (tsqlParser.EXPAND - 257)) | (1 << (tsqlParser.FAST - 257)) | (1 << (tsqlParser.FAST_FORWARD - 257)) | (1 << (tsqlParser.FIRST - 257)) | (1 << (tsqlParser.FIRST_VALUE - 257)) | (1 << (tsqlParser.FOLLOWING - 257)) | (1 << (tsqlParser.FORCE - 257)) | (1 << (tsqlParser.FORCED - 257)) | (1 << (tsqlParser.FORWARD_ONLY - 257)) | (1 << (tsqlParser.FULLSCAN - 257)) | (1 << (tsqlParser.GLOBAL - 257)) | (1 << (tsqlParser.GO - 257)) | (1 << (tsqlParser.GROUPING - 257)) | (1 << (tsqlParser.GROUPING_ID - 257)) | (1 << (tsqlParser.HASH - 257)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 257)) | (1 << (tsqlParser.IMPERSONATE - 257)) | (1 << (tsqlParser.INSENSITIVE - 257)) | (1 << (tsqlParser.INSERTED - 257)) | (1 << (tsqlParser.ISOLATION - 257)) | (1 << (tsqlParser.IO - 257)) | (1 << (tsqlParser.KEEP - 257)) | (1 << (tsqlParser.KEEPFIXED - 257)) | (1 << (tsqlParser.KEYSET - 257)) | (1 << (tsqlParser.LAG - 257)) | (1 << (tsqlParser.LAST - 257)) | (1 << (tsqlParser.LAST_VALUE - 257)) | (1 << (tsqlParser.LEAD - 257)) | (1 << (tsqlParser.LEVEL - 257)) | (1 << (tsqlParser.LOCAL - 257)) | (1 << (tsqlParser.LOCK_ESCALATION - 257)) | (1 << (tsqlParser.LOGIN - 257)) | (1 << (tsqlParser.LOOP - 257)) | (1 << (tsqlParser.MARK - 257)) | (1 << (tsqlParser.MAX - 257)) | (1 << (tsqlParser.MAXDOP - 257)) | (1 << (tsqlParser.MAXRECURSION - 257)) | (1 << (tsqlParser.MIN - 257)))) != 0) or ((((_la - 324)) & ~0x3f) == 0 and ((1 << (_la - 324)) & ((1 << (tsqlParser.MODIFY - 324)) | (1 << (tsqlParser.NAME - 324)) | (1 << (tsqlParser.NOCOUNT - 324)) | (1 << (tsqlParser.NOEXPAND - 324)) | (1 << (tsqlParser.NORECOMPUTE - 324)) | (1 << (tsqlParser.NTILE - 324)) | (1 << (tsqlParser.NUMBER - 324)) | (1 << (tsqlParser.OFFSET - 324)) | (1 << (tsqlParser.ONLINE - 324)) | (1 << (tsqlParser.ONLY - 324)) | (1 << (tsqlParser.OPTIMISTIC - 324)) | (1 << (tsqlParser.OPTIMIZE - 324)) | (1 << (tsqlParser.OUT - 324)) | (1 << (tsqlParser.OUTPUT - 324)) | (1 << (tsqlParser.OWNER - 324)) | (1 << (tsqlParser.PARAMETERIZATION - 324)) | (1 << (tsqlParser.PARTITION - 324)) | (1 << (tsqlParser.PATH - 324)) | (1 << (tsqlParser.PRECEDING - 324)) | (1 << (tsqlParser.PRIOR - 324)) | (1 << (tsqlParser.PRIVILEGES - 324)) | (1 << (tsqlParser.RANGE - 324)) | (1 << (tsqlParser.RANK - 324)) | (1 << (tsqlParser.READONLY - 324)) | (1 << (tsqlParser.READ_ONLY - 324)) | (1 << (tsqlParser.RECOMPILE - 324)) | (1 << (tsqlParser.RELATIVE - 324)) | (1 << (tsqlParser.REMOTE - 324)) | (1 << (tsqlParser.REPEATABLE - 324)) | (1 << (tsqlParser.ROBUST - 324)) | (1 << (tsqlParser.ROOT - 324)) | (1 << (tsqlParser.ROW - 324)) | (1 << (tsqlParser.ROWGUID - 324)) | (1 << (tsqlParser.ROWS - 324)) | (1 << (tsqlParser.ROW_NUMBER - 324)) | (1 << (tsqlParser.SAMPLE - 324)) | (1 << (tsqlParser.SCHEMABINDING - 324)) | (1 << (tsqlParser.SCROLL - 324)) | (1 << (tsqlParser.SCROLL_LOCKS - 324)) | (1 << (tsqlParser.SELF - 324)) | (1 << (tsqlParser.SERIALIZABLE - 324)) | (1 << (tsqlParser.SIMPLE - 324)) | (1 << (tsqlParser.SIZE - 324)))) != 0) or ((((_la - 389)) & ~0x3f) == 0 and ((1 << (_la - 389)) & ((1 << (tsqlParser.SNAPSHOT - 389)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 389)) | (1 << (tsqlParser.STATIC - 389)) | (1 << (tsqlParser.STATS_STREAM - 389)) | (1 << (tsqlParser.STDEV - 389)) | (1 << (tsqlParser.STDEVP - 389)) | (1 << (tsqlParser.SUM - 389)) | (1 << (tsqlParser.TEXTIMAGE_ON - 389)) | (1 << (tsqlParser.THROW - 389)) | (1 << (tsqlParser.TIES - 389)) | (1 << (tsqlParser.TIME - 389)) | (1 << (tsqlParser.TRY - 389)) | (1 << (tsqlParser.TYPE - 389)) | (1 << (tsqlParser.TYPE_WARNING - 389)) | (1 << (tsqlParser.UNBOUNDED - 389)) | (1 << (tsqlParser.UNCOMMITTED - 389)) | (1 << (tsqlParser.UNKNOWN - 389)) | (1 << (tsqlParser.USING - 389)) | (1 << (tsqlParser.VAR - 389)) | (1 << (tsqlParser.VARP - 389)) | (1 << (tsqlParser.VIEWS - 389)) | (1 << (tsqlParser.VIEW_METADATA - 389)) | (1 << (tsqlParser.WORK - 389)) | (1 << (tsqlParser.XML - 389)) | (1 << (tsqlParser.XMLNAMESPACES - 389)) | (1 << (tsqlParser.ZONE - 389)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 389)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 389)) | (1 << (tsqlParser.ID - 389)))) != 0):
                self.state = 1257
                localctx.database = self.r_id()


            self.state = 1260
            self.match(tsqlParser.DOT)
            self.state = 1262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (tsqlParser.FORCESEEK - 73)) | (1 << (tsqlParser.NEXT - 73)) | (1 << (tsqlParser.NUMERIC - 73)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (tsqlParser.VALUE - 192)) | (1 << (tsqlParser.ABSOLUTE - 192)) | (1 << (tsqlParser.APPLY - 192)) | (1 << (tsqlParser.AUTO - 192)) | (1 << (tsqlParser.AVG - 192)) | (1 << (tsqlParser.BASE64 - 192)) | (1 << (tsqlParser.CALLER - 192)) | (1 << (tsqlParser.CAST - 192)) | (1 << (tsqlParser.CATCH - 192)) | (1 << (tsqlParser.CHECKSUM_AGG - 192)) | (1 << (tsqlParser.COMMITTED - 192)) | (1 << (tsqlParser.CONCAT - 192)) | (1 << (tsqlParser.CONTROL - 192)) | (1 << (tsqlParser.COOKIE - 192)) | (1 << (tsqlParser.COUNT - 192)) | (1 << (tsqlParser.COUNT_BIG - 192)) | (1 << (tsqlParser.DATE - 192)) | (1 << (tsqlParser.DELAY - 192)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (tsqlParser.DELETED - 257)) | (1 << (tsqlParser.DENSE_RANK - 257)) | (1 << (tsqlParser.DISABLE - 257)) | (1 << (tsqlParser.DYNAMIC - 257)) | (1 << (tsqlParser.ENCRYPTION - 257)) | (1 << (tsqlParser.EXPAND - 257)) | (1 << (tsqlParser.FAST - 257)) | (1 << (tsqlParser.FAST_FORWARD - 257)) | (1 << (tsqlParser.FIRST - 257)) | (1 << (tsqlParser.FIRST_VALUE - 257)) | (1 << (tsqlParser.FOLLOWING - 257)) | (1 << (tsqlParser.FORCE - 257)) | (1 << (tsqlParser.FORCED - 257)) | (1 << (tsqlParser.FORWARD_ONLY - 257)) | (1 << (tsqlParser.FULLSCAN - 257)) | (1 << (tsqlParser.GLOBAL - 257)) | (1 << (tsqlParser.GO - 257)) | (1 << (tsqlParser.GROUPING - 257)) | (1 << (tsqlParser.GROUPING_ID - 257)) | (1 << (tsqlParser.HASH - 257)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 257)) | (1 << (tsqlParser.IMPERSONATE - 257)) | (1 << (tsqlParser.INSENSITIVE - 257)) | (1 << (tsqlParser.INSERTED - 257)) | (1 << (tsqlParser.ISOLATION - 257)) | (1 << (tsqlParser.IO - 257)) | (1 << (tsqlParser.KEEP - 257)) | (1 << (tsqlParser.KEEPFIXED - 257)) | (1 << (tsqlParser.KEYSET - 257)) | (1 << (tsqlParser.LAG - 257)) | (1 << (tsqlParser.LAST - 257)) | (1 << (tsqlParser.LAST_VALUE - 257)) | (1 << (tsqlParser.LEAD - 257)) | (1 << (tsqlParser.LEVEL - 257)) | (1 << (tsqlParser.LOCAL - 257)) | (1 << (tsqlParser.LOCK_ESCALATION - 257)) | (1 << (tsqlParser.LOGIN - 257)) | (1 << (tsqlParser.LOOP - 257)) | (1 << (tsqlParser.MARK - 257)) | (1 << (tsqlParser.MAX - 257)) | (1 << (tsqlParser.MAXDOP - 257)) | (1 << (tsqlParser.MAXRECURSION - 257)) | (1 << (tsqlParser.MIN - 257)))) != 0) or ((((_la - 324)) & ~0x3f) == 0 and ((1 << (_la - 324)) & ((1 << (tsqlParser.MODIFY - 324)) | (1 << (tsqlParser.NAME - 324)) | (1 << (tsqlParser.NOCOUNT - 324)) | (1 << (tsqlParser.NOEXPAND - 324)) | (1 << (tsqlParser.NORECOMPUTE - 324)) | (1 << (tsqlParser.NTILE - 324)) | (1 << (tsqlParser.NUMBER - 324)) | (1 << (tsqlParser.OFFSET - 324)) | (1 << (tsqlParser.ONLINE - 324)) | (1 << (tsqlParser.ONLY - 324)) | (1 << (tsqlParser.OPTIMISTIC - 324)) | (1 << (tsqlParser.OPTIMIZE - 324)) | (1 << (tsqlParser.OUT - 324)) | (1 << (tsqlParser.OUTPUT - 324)) | (1 << (tsqlParser.OWNER - 324)) | (1 << (tsqlParser.PARAMETERIZATION - 324)) | (1 << (tsqlParser.PARTITION - 324)) | (1 << (tsqlParser.PATH - 324)) | (1 << (tsqlParser.PRECEDING - 324)) | (1 << (tsqlParser.PRIOR - 324)) | (1 << (tsqlParser.PRIVILEGES - 324)) | (1 << (tsqlParser.RANGE - 324)) | (1 << (tsqlParser.RANK - 324)) | (1 << (tsqlParser.READONLY - 324)) | (1 << (tsqlParser.READ_ONLY - 324)) | (1 << (tsqlParser.RECOMPILE - 324)) | (1 << (tsqlParser.RELATIVE - 324)) | (1 << (tsqlParser.REMOTE - 324)) | (1 << (tsqlParser.REPEATABLE - 324)) | (1 << (tsqlParser.ROBUST - 324)) | (1 << (tsqlParser.ROOT - 324)) | (1 << (tsqlParser.ROW - 324)) | (1 << (tsqlParser.ROWGUID - 324)) | (1 << (tsqlParser.ROWS - 324)) | (1 << (tsqlParser.ROW_NUMBER - 324)) | (1 << (tsqlParser.SAMPLE - 324)) | (1 << (tsqlParser.SCHEMABINDING - 324)) | (1 << (tsqlParser.SCROLL - 324)) | (1 << (tsqlParser.SCROLL_LOCKS - 324)) | (1 << (tsqlParser.SELF - 324)) | (1 << (tsqlParser.SERIALIZABLE - 324)) | (1 << (tsqlParser.SIMPLE - 324)) | (1 << (tsqlParser.SIZE - 324)))) != 0) or ((((_la - 389)) & ~0x3f) == 0 and ((1 << (_la - 389)) & ((1 << (tsqlParser.SNAPSHOT - 389)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 389)) | (1 << (tsqlParser.STATIC - 389)) | (1 << (tsqlParser.STATS_STREAM - 389)) | (1 << (tsqlParser.STDEV - 389)) | (1 << (tsqlParser.STDEVP - 389)) | (1 << (tsqlParser.SUM - 389)) | (1 << (tsqlParser.TEXTIMAGE_ON - 389)) | (1 << (tsqlParser.THROW - 389)) | (1 << (tsqlParser.TIES - 389)) | (1 << (tsqlParser.TIME - 389)) | (1 << (tsqlParser.TRY - 389)) | (1 << (tsqlParser.TYPE - 389)) | (1 << (tsqlParser.TYPE_WARNING - 389)) | (1 << (tsqlParser.UNBOUNDED - 389)) | (1 << (tsqlParser.UNCOMMITTED - 389)) | (1 << (tsqlParser.UNKNOWN - 389)) | (1 << (tsqlParser.USING - 389)) | (1 << (tsqlParser.VAR - 389)) | (1 << (tsqlParser.VARP - 389)) | (1 << (tsqlParser.VIEWS - 389)) | (1 << (tsqlParser.VIEW_METADATA - 389)) | (1 << (tsqlParser.WORK - 389)) | (1 << (tsqlParser.XML - 389)) | (1 << (tsqlParser.XMLNAMESPACES - 389)) | (1 << (tsqlParser.ZONE - 389)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 389)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 389)) | (1 << (tsqlParser.ID - 389)))) != 0):
                self.state = 1261
                localctx.scheme = self.r_id()


            self.state = 1264
            self.match(tsqlParser.DOT)

            self.state = 1265
            localctx.table = self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Declare_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(tsqlParser.DECLARE, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def table_type_definition(self):
            return self.getTypedRuleContext(tsqlParser.Table_type_definitionContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def declare_local(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Declare_localContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Declare_localContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_declare_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_statement" ):
                listener.enterDeclare_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_statement" ):
                listener.exitDeclare_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclare_statement" ):
                return visitor.visitDeclare_statement(self)
            else:
                return visitor.visitChildren(self)




    def declare_statement(self):

        localctx = tsqlParser.Declare_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_declare_statement)
        self._la = 0 # Token type
        try:
            self.state = 1288
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1267
                self.match(tsqlParser.DECLARE)
                self.state = 1268
                self.match(tsqlParser.LOCAL_ID)
                self.state = 1270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.AS:
                    self.state = 1269
                    self.match(tsqlParser.AS)


                self.state = 1272
                self.table_type_definition()
                self.state = 1274
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
                if la_ == 1:
                    self.state = 1273
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1276
                self.match(tsqlParser.DECLARE)
                self.state = 1277
                self.declare_local()
                self.state = 1282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 1278
                    self.match(tsqlParser.COMMA)
                    self.state = 1279
                    self.declare_local()
                    self.state = 1284
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1286
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
                if la_ == 1:
                    self.state = 1285
                    self.match(tsqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSE(self):
            return self.getToken(tsqlParser.CLOSE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_nameContext,0)


        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def DEALLOCATE(self):
            return self.getToken(tsqlParser.DEALLOCATE, 0)

        def declare_cursor(self):
            return self.getTypedRuleContext(tsqlParser.Declare_cursorContext,0)


        def fetch_cursor(self):
            return self.getTypedRuleContext(tsqlParser.Fetch_cursorContext,0)


        def OPEN(self):
            return self.getToken(tsqlParser.OPEN, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_cursor_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_statement" ):
                listener.enterCursor_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_statement" ):
                listener.exitCursor_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_statement" ):
                return visitor.visitCursor_statement(self)
            else:
                return visitor.visitChildren(self)




    def cursor_statement(self):

        localctx = tsqlParser.Cursor_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_cursor_statement)
        try:
            self.state = 1316
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CLOSE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1290
                self.match(tsqlParser.CLOSE)
                self.state = 1292
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                if la_ == 1:
                    self.state = 1291
                    self.match(tsqlParser.GLOBAL)


                self.state = 1294
                self.cursor_name()
                self.state = 1296
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
                if la_ == 1:
                    self.state = 1295
                    self.match(tsqlParser.SEMI)


                pass
            elif token in [tsqlParser.DEALLOCATE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1298
                self.match(tsqlParser.DEALLOCATE)
                self.state = 1300
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
                if la_ == 1:
                    self.state = 1299
                    self.match(tsqlParser.GLOBAL)


                self.state = 1302
                self.cursor_name()
                self.state = 1304
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
                if la_ == 1:
                    self.state = 1303
                    self.match(tsqlParser.SEMI)


                pass
            elif token in [tsqlParser.DECLARE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1306
                self.declare_cursor()
                pass
            elif token in [tsqlParser.FETCH]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1307
                self.fetch_cursor()
                pass
            elif token in [tsqlParser.OPEN]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1308
                self.match(tsqlParser.OPEN)
                self.state = 1310
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
                if la_ == 1:
                    self.state = 1309
                    self.match(tsqlParser.GLOBAL)


                self.state = 1312
                self.cursor_name()
                self.state = 1314
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
                if la_ == 1:
                    self.state = 1313
                    self.match(tsqlParser.SEMI)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Execute_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.return_status = None # Token

        def EXECUTE(self):
            return self.getToken(tsqlParser.EXECUTE, 0)

        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def execute_statement_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Execute_statement_argContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Execute_statement_argContext,i)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def execute_var_string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Execute_var_stringContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Execute_var_stringContext,i)


        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def LOGIN(self):
            return self.getToken(tsqlParser.LOGIN, 0)

        def USER(self):
            return self.getToken(tsqlParser.USER, 0)

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_execute_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_statement" ):
                listener.enterExecute_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_statement" ):
                listener.exitExecute_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecute_statement" ):
                return visitor.visitExecute_statement(self)
            else:
                return visitor.visitChildren(self)




    def execute_statement(self):

        localctx = tsqlParser.Execute_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_execute_statement)
        self._la = 0 # Token type
        try:
            self.state = 1359
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1318
                self.match(tsqlParser.EXECUTE)
                self.state = 1321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.LOCAL_ID:
                    self.state = 1319
                    localctx.return_status = self.match(tsqlParser.LOCAL_ID)
                    self.state = 1320
                    self.match(tsqlParser.EQUAL)


                self.state = 1323
                self.func_proc_name()
                self.state = 1332
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                if la_ == 1:
                    self.state = 1324
                    self.execute_statement_arg()
                    self.state = 1329
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==tsqlParser.COMMA:
                        self.state = 1325
                        self.match(tsqlParser.COMMA)
                        self.state = 1326
                        self.execute_statement_arg()
                        self.state = 1331
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1335
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                if la_ == 1:
                    self.state = 1334
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1337
                self.match(tsqlParser.EXECUTE)
                self.state = 1338
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1339
                self.execute_var_string()
                self.state = 1344
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.PLUS:
                    self.state = 1340
                    self.match(tsqlParser.PLUS)
                    self.state = 1341
                    self.execute_var_string()
                    self.state = 1346
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1347
                self.match(tsqlParser.RR_BRACKET)
                self.state = 1354
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
                if la_ == 1:
                    self.state = 1349
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.AS:
                        self.state = 1348
                        self.match(tsqlParser.AS)


                    self.state = 1351
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.USER or _la==tsqlParser.LOGIN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1352
                    self.match(tsqlParser.EQUAL)
                    self.state = 1353
                    self.match(tsqlParser.STRING)


                self.state = 1357
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                if la_ == 1:
                    self.state = 1356
                    self.match(tsqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Execute_statement_argContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.parameter = None # Token

        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)

        def NULL(self):
            return self.getToken(tsqlParser.NULL, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def constant_LOCAL_ID(self):
            return self.getTypedRuleContext(tsqlParser.Constant_LOCAL_IDContext,0)


        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def OUTPUT(self):
            return self.getToken(tsqlParser.OUTPUT, 0)

        def OUT(self):
            return self.getToken(tsqlParser.OUT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_execute_statement_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_statement_arg" ):
                listener.enterExecute_statement_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_statement_arg" ):
                listener.exitExecute_statement_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecute_statement_arg" ):
                return visitor.visitExecute_statement_arg(self)
            else:
                return visitor.visitChildren(self)




    def execute_statement_arg(self):

        localctx = tsqlParser.Execute_statement_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_execute_statement_arg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1363
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.state = 1361
                localctx.parameter = self.match(tsqlParser.LOCAL_ID)
                self.state = 1362
                self.match(tsqlParser.EQUAL)


            self.state = 1374
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.LOCAL_ID, tsqlParser.DECIMAL, tsqlParser.ID, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                self.state = 1367
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.LOCAL_ID, tsqlParser.DECIMAL, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                    self.state = 1365
                    self.constant_LOCAL_ID()
                    pass
                elif token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 1366
                    self.r_id()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1370
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
                if la_ == 1:
                    self.state = 1369
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.OUT or _la==tsqlParser.OUTPUT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [tsqlParser.DEFAULT]:
                self.state = 1372
                self.match(tsqlParser.DEFAULT)
                pass
            elif token in [tsqlParser.NULL]:
                self.state = 1373
                self.match(tsqlParser.NULL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Execute_var_stringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_execute_var_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_var_string" ):
                listener.enterExecute_var_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_var_string" ):
                listener.exitExecute_var_string(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecute_var_string" ):
                return visitor.visitExecute_var_string(self)
            else:
                return visitor.visitChildren(self)




    def execute_var_string(self):

        localctx = tsqlParser.Execute_var_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_execute_var_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1376
            _la = self._input.LA(1)
            if not(_la==tsqlParser.LOCAL_ID or _la==tsqlParser.STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Security_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.on_id = None # Table_nameContext
            self.to_principal = None # R_idContext
            self.as_principal = None # R_idContext

        def execute_clause(self):
            return self.getTypedRuleContext(tsqlParser.Execute_clauseContext,0)


        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.GRANT)
            else:
                return self.getToken(tsqlParser.GRANT, i)

        def TO(self):
            return self.getToken(tsqlParser.TO, 0)

        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)

        def grant_permission(self):
            return self.getTypedRuleContext(tsqlParser.Grant_permissionContext,0)


        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def OPTION(self):
            return self.getToken(tsqlParser.OPTION, 0)

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def PRIVILEGES(self):
            return self.getToken(tsqlParser.PRIVILEGES, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def REVERT(self):
            return self.getToken(tsqlParser.REVERT, 0)

        def COOKIE(self):
            return self.getToken(tsqlParser.COOKIE, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_security_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecurity_statement" ):
                listener.enterSecurity_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecurity_statement" ):
                listener.exitSecurity_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSecurity_statement" ):
                return visitor.visitSecurity_statement(self)
            else:
                return visitor.visitChildren(self)




    def security_statement(self):

        localctx = tsqlParser.Security_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_security_statement)
        self._la = 0 # Token type
        try:
            self.state = 1426
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1378
                self.execute_clause()
                self.state = 1380
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
                if la_ == 1:
                    self.state = 1379
                    self.match(tsqlParser.SEMI)


                pass
            elif token in [tsqlParser.GRANT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1382
                self.match(tsqlParser.GRANT)
                self.state = 1394
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.ALL]:
                    self.state = 1383
                    self.match(tsqlParser.ALL)
                    self.state = 1385
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.PRIVILEGES:
                        self.state = 1384
                        self.match(tsqlParser.PRIVILEGES)


                    pass
                elif token in [tsqlParser.ALTER, tsqlParser.CREATE, tsqlParser.EXECUTE, tsqlParser.INSERT, tsqlParser.REFERENCES, tsqlParser.SELECT, tsqlParser.VIEW, tsqlParser.CONTROL, tsqlParser.IMPERSONATE, tsqlParser.SHOWPLAN, tsqlParser.TAKE]:
                    self.state = 1387
                    self.grant_permission()
                    self.state = 1392
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.LR_BRACKET:
                        self.state = 1388
                        self.match(tsqlParser.LR_BRACKET)
                        self.state = 1389
                        self.column_name_list()
                        self.state = 1390
                        self.match(tsqlParser.RR_BRACKET)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1398
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ON:
                    self.state = 1396
                    self.match(tsqlParser.ON)
                    self.state = 1397
                    localctx.on_id = self.table_name()


                self.state = 1400
                self.match(tsqlParser.TO)

                self.state = 1401
                localctx.to_principal = self.r_id()
                self.state = 1405
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
                if la_ == 1:
                    self.state = 1402
                    self.match(tsqlParser.WITH)
                    self.state = 1403
                    self.match(tsqlParser.GRANT)
                    self.state = 1404
                    self.match(tsqlParser.OPTION)


                self.state = 1409
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.AS:
                    self.state = 1407
                    self.match(tsqlParser.AS)
                    self.state = 1408
                    localctx.as_principal = self.r_id()


                self.state = 1412
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
                if la_ == 1:
                    self.state = 1411
                    self.match(tsqlParser.SEMI)


                pass
            elif token in [tsqlParser.REVERT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1414
                self.match(tsqlParser.REVERT)
                self.state = 1421
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
                if la_ == 1:
                    self.state = 1415
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 1416
                    self.match(tsqlParser.WITH)
                    self.state = 1417
                    self.match(tsqlParser.COOKIE)
                    self.state = 1418
                    self.match(tsqlParser.EQUAL)
                    self.state = 1419
                    self.match(tsqlParser.LOCAL_ID)
                    self.state = 1420
                    self.match(tsqlParser.RR_BRACKET)


                self.state = 1424
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
                if la_ == 1:
                    self.state = 1423
                    self.match(tsqlParser.SEMI)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Grant_permissionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(tsqlParser.EXECUTE, 0)

        def VIEW(self):
            return self.getToken(tsqlParser.VIEW, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def TAKE(self):
            return self.getToken(tsqlParser.TAKE, 0)

        def CONTROL(self):
            return self.getToken(tsqlParser.CONTROL, 0)

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(tsqlParser.TABLE, 0)

        def SHOWPLAN(self):
            return self.getToken(tsqlParser.SHOWPLAN, 0)

        def IMPERSONATE(self):
            return self.getToken(tsqlParser.IMPERSONATE, 0)

        def SELECT(self):
            return self.getToken(tsqlParser.SELECT, 0)

        def REFERENCES(self):
            return self.getToken(tsqlParser.REFERENCES, 0)

        def INSERT(self):
            return self.getToken(tsqlParser.INSERT, 0)

        def ALTER(self):
            return self.getToken(tsqlParser.ALTER, 0)

        def DATABASE(self):
            return self.getToken(tsqlParser.DATABASE, 0)

        def ANY(self):
            return self.getToken(tsqlParser.ANY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_grant_permission

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_permission" ):
                listener.enterGrant_permission(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_permission" ):
                listener.exitGrant_permission(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrant_permission" ):
                return visitor.visitGrant_permission(self)
            else:
                return visitor.visitChildren(self)




    def grant_permission(self):

        localctx = tsqlParser.Grant_permissionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_grant_permission)
        self._la = 0 # Token type
        try:
            self.state = 1454
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1428
                self.match(tsqlParser.EXECUTE)
                pass
            elif token in [tsqlParser.VIEW]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1429
                self.match(tsqlParser.VIEW)
                self.state = 1430
                self.r_id()
                pass
            elif token in [tsqlParser.TAKE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1431
                self.match(tsqlParser.TAKE)
                self.state = 1432
                self.r_id()
                pass
            elif token in [tsqlParser.CONTROL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1433
                self.match(tsqlParser.CONTROL)
                self.state = 1435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (tsqlParser.FORCESEEK - 73)) | (1 << (tsqlParser.NEXT - 73)) | (1 << (tsqlParser.NUMERIC - 73)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (tsqlParser.VALUE - 192)) | (1 << (tsqlParser.ABSOLUTE - 192)) | (1 << (tsqlParser.APPLY - 192)) | (1 << (tsqlParser.AUTO - 192)) | (1 << (tsqlParser.AVG - 192)) | (1 << (tsqlParser.BASE64 - 192)) | (1 << (tsqlParser.CALLER - 192)) | (1 << (tsqlParser.CAST - 192)) | (1 << (tsqlParser.CATCH - 192)) | (1 << (tsqlParser.CHECKSUM_AGG - 192)) | (1 << (tsqlParser.COMMITTED - 192)) | (1 << (tsqlParser.CONCAT - 192)) | (1 << (tsqlParser.CONTROL - 192)) | (1 << (tsqlParser.COOKIE - 192)) | (1 << (tsqlParser.COUNT - 192)) | (1 << (tsqlParser.COUNT_BIG - 192)) | (1 << (tsqlParser.DATE - 192)) | (1 << (tsqlParser.DELAY - 192)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (tsqlParser.DELETED - 257)) | (1 << (tsqlParser.DENSE_RANK - 257)) | (1 << (tsqlParser.DISABLE - 257)) | (1 << (tsqlParser.DYNAMIC - 257)) | (1 << (tsqlParser.ENCRYPTION - 257)) | (1 << (tsqlParser.EXPAND - 257)) | (1 << (tsqlParser.FAST - 257)) | (1 << (tsqlParser.FAST_FORWARD - 257)) | (1 << (tsqlParser.FIRST - 257)) | (1 << (tsqlParser.FIRST_VALUE - 257)) | (1 << (tsqlParser.FOLLOWING - 257)) | (1 << (tsqlParser.FORCE - 257)) | (1 << (tsqlParser.FORCED - 257)) | (1 << (tsqlParser.FORWARD_ONLY - 257)) | (1 << (tsqlParser.FULLSCAN - 257)) | (1 << (tsqlParser.GLOBAL - 257)) | (1 << (tsqlParser.GO - 257)) | (1 << (tsqlParser.GROUPING - 257)) | (1 << (tsqlParser.GROUPING_ID - 257)) | (1 << (tsqlParser.HASH - 257)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 257)) | (1 << (tsqlParser.IMPERSONATE - 257)) | (1 << (tsqlParser.INSENSITIVE - 257)) | (1 << (tsqlParser.INSERTED - 257)) | (1 << (tsqlParser.ISOLATION - 257)) | (1 << (tsqlParser.IO - 257)) | (1 << (tsqlParser.KEEP - 257)) | (1 << (tsqlParser.KEEPFIXED - 257)) | (1 << (tsqlParser.KEYSET - 257)) | (1 << (tsqlParser.LAG - 257)) | (1 << (tsqlParser.LAST - 257)) | (1 << (tsqlParser.LAST_VALUE - 257)) | (1 << (tsqlParser.LEAD - 257)) | (1 << (tsqlParser.LEVEL - 257)) | (1 << (tsqlParser.LOCAL - 257)) | (1 << (tsqlParser.LOCK_ESCALATION - 257)) | (1 << (tsqlParser.LOGIN - 257)) | (1 << (tsqlParser.LOOP - 257)) | (1 << (tsqlParser.MARK - 257)) | (1 << (tsqlParser.MAX - 257)) | (1 << (tsqlParser.MAXDOP - 257)) | (1 << (tsqlParser.MAXRECURSION - 257)) | (1 << (tsqlParser.MIN - 257)))) != 0) or ((((_la - 324)) & ~0x3f) == 0 and ((1 << (_la - 324)) & ((1 << (tsqlParser.MODIFY - 324)) | (1 << (tsqlParser.NAME - 324)) | (1 << (tsqlParser.NOCOUNT - 324)) | (1 << (tsqlParser.NOEXPAND - 324)) | (1 << (tsqlParser.NORECOMPUTE - 324)) | (1 << (tsqlParser.NTILE - 324)) | (1 << (tsqlParser.NUMBER - 324)) | (1 << (tsqlParser.OFFSET - 324)) | (1 << (tsqlParser.ONLINE - 324)) | (1 << (tsqlParser.ONLY - 324)) | (1 << (tsqlParser.OPTIMISTIC - 324)) | (1 << (tsqlParser.OPTIMIZE - 324)) | (1 << (tsqlParser.OUT - 324)) | (1 << (tsqlParser.OUTPUT - 324)) | (1 << (tsqlParser.OWNER - 324)) | (1 << (tsqlParser.PARAMETERIZATION - 324)) | (1 << (tsqlParser.PARTITION - 324)) | (1 << (tsqlParser.PATH - 324)) | (1 << (tsqlParser.PRECEDING - 324)) | (1 << (tsqlParser.PRIOR - 324)) | (1 << (tsqlParser.PRIVILEGES - 324)) | (1 << (tsqlParser.RANGE - 324)) | (1 << (tsqlParser.RANK - 324)) | (1 << (tsqlParser.READONLY - 324)) | (1 << (tsqlParser.READ_ONLY - 324)) | (1 << (tsqlParser.RECOMPILE - 324)) | (1 << (tsqlParser.RELATIVE - 324)) | (1 << (tsqlParser.REMOTE - 324)) | (1 << (tsqlParser.REPEATABLE - 324)) | (1 << (tsqlParser.ROBUST - 324)) | (1 << (tsqlParser.ROOT - 324)) | (1 << (tsqlParser.ROW - 324)) | (1 << (tsqlParser.ROWGUID - 324)) | (1 << (tsqlParser.ROWS - 324)) | (1 << (tsqlParser.ROW_NUMBER - 324)) | (1 << (tsqlParser.SAMPLE - 324)) | (1 << (tsqlParser.SCHEMABINDING - 324)) | (1 << (tsqlParser.SCROLL - 324)) | (1 << (tsqlParser.SCROLL_LOCKS - 324)) | (1 << (tsqlParser.SELF - 324)) | (1 << (tsqlParser.SERIALIZABLE - 324)) | (1 << (tsqlParser.SIMPLE - 324)) | (1 << (tsqlParser.SIZE - 324)))) != 0) or ((((_la - 389)) & ~0x3f) == 0 and ((1 << (_la - 389)) & ((1 << (tsqlParser.SNAPSHOT - 389)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 389)) | (1 << (tsqlParser.STATIC - 389)) | (1 << (tsqlParser.STATS_STREAM - 389)) | (1 << (tsqlParser.STDEV - 389)) | (1 << (tsqlParser.STDEVP - 389)) | (1 << (tsqlParser.SUM - 389)) | (1 << (tsqlParser.TEXTIMAGE_ON - 389)) | (1 << (tsqlParser.THROW - 389)) | (1 << (tsqlParser.TIES - 389)) | (1 << (tsqlParser.TIME - 389)) | (1 << (tsqlParser.TRY - 389)) | (1 << (tsqlParser.TYPE - 389)) | (1 << (tsqlParser.TYPE_WARNING - 389)) | (1 << (tsqlParser.UNBOUNDED - 389)) | (1 << (tsqlParser.UNCOMMITTED - 389)) | (1 << (tsqlParser.UNKNOWN - 389)) | (1 << (tsqlParser.USING - 389)) | (1 << (tsqlParser.VAR - 389)) | (1 << (tsqlParser.VARP - 389)) | (1 << (tsqlParser.VIEWS - 389)) | (1 << (tsqlParser.VIEW_METADATA - 389)) | (1 << (tsqlParser.WORK - 389)) | (1 << (tsqlParser.XML - 389)) | (1 << (tsqlParser.XMLNAMESPACES - 389)) | (1 << (tsqlParser.ZONE - 389)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 389)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 389)) | (1 << (tsqlParser.ID - 389)))) != 0):
                    self.state = 1434
                    self.r_id()


                pass
            elif token in [tsqlParser.CREATE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1437
                self.match(tsqlParser.CREATE)
                self.state = 1438
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TABLE or _la==tsqlParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.SHOWPLAN]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1439
                self.match(tsqlParser.SHOWPLAN)
                pass
            elif token in [tsqlParser.IMPERSONATE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1440
                self.match(tsqlParser.IMPERSONATE)
                pass
            elif token in [tsqlParser.SELECT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1441
                self.match(tsqlParser.SELECT)
                pass
            elif token in [tsqlParser.REFERENCES]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1442
                self.match(tsqlParser.REFERENCES)
                pass
            elif token in [tsqlParser.INSERT]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1443
                self.match(tsqlParser.INSERT)
                pass
            elif token in [tsqlParser.ALTER]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1444
                self.match(tsqlParser.ALTER)
                self.state = 1452
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ANY or _la==tsqlParser.DATABASE or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (tsqlParser.FORCESEEK - 73)) | (1 << (tsqlParser.NEXT - 73)) | (1 << (tsqlParser.NUMERIC - 73)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (tsqlParser.VALUE - 192)) | (1 << (tsqlParser.ABSOLUTE - 192)) | (1 << (tsqlParser.APPLY - 192)) | (1 << (tsqlParser.AUTO - 192)) | (1 << (tsqlParser.AVG - 192)) | (1 << (tsqlParser.BASE64 - 192)) | (1 << (tsqlParser.CALLER - 192)) | (1 << (tsqlParser.CAST - 192)) | (1 << (tsqlParser.CATCH - 192)) | (1 << (tsqlParser.CHECKSUM_AGG - 192)) | (1 << (tsqlParser.COMMITTED - 192)) | (1 << (tsqlParser.CONCAT - 192)) | (1 << (tsqlParser.CONTROL - 192)) | (1 << (tsqlParser.COOKIE - 192)) | (1 << (tsqlParser.COUNT - 192)) | (1 << (tsqlParser.COUNT_BIG - 192)) | (1 << (tsqlParser.DATE - 192)) | (1 << (tsqlParser.DELAY - 192)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (tsqlParser.DELETED - 257)) | (1 << (tsqlParser.DENSE_RANK - 257)) | (1 << (tsqlParser.DISABLE - 257)) | (1 << (tsqlParser.DYNAMIC - 257)) | (1 << (tsqlParser.ENCRYPTION - 257)) | (1 << (tsqlParser.EXPAND - 257)) | (1 << (tsqlParser.FAST - 257)) | (1 << (tsqlParser.FAST_FORWARD - 257)) | (1 << (tsqlParser.FIRST - 257)) | (1 << (tsqlParser.FIRST_VALUE - 257)) | (1 << (tsqlParser.FOLLOWING - 257)) | (1 << (tsqlParser.FORCE - 257)) | (1 << (tsqlParser.FORCED - 257)) | (1 << (tsqlParser.FORWARD_ONLY - 257)) | (1 << (tsqlParser.FULLSCAN - 257)) | (1 << (tsqlParser.GLOBAL - 257)) | (1 << (tsqlParser.GO - 257)) | (1 << (tsqlParser.GROUPING - 257)) | (1 << (tsqlParser.GROUPING_ID - 257)) | (1 << (tsqlParser.HASH - 257)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 257)) | (1 << (tsqlParser.IMPERSONATE - 257)) | (1 << (tsqlParser.INSENSITIVE - 257)) | (1 << (tsqlParser.INSERTED - 257)) | (1 << (tsqlParser.ISOLATION - 257)) | (1 << (tsqlParser.IO - 257)) | (1 << (tsqlParser.KEEP - 257)) | (1 << (tsqlParser.KEEPFIXED - 257)) | (1 << (tsqlParser.KEYSET - 257)) | (1 << (tsqlParser.LAG - 257)) | (1 << (tsqlParser.LAST - 257)) | (1 << (tsqlParser.LAST_VALUE - 257)) | (1 << (tsqlParser.LEAD - 257)) | (1 << (tsqlParser.LEVEL - 257)) | (1 << (tsqlParser.LOCAL - 257)) | (1 << (tsqlParser.LOCK_ESCALATION - 257)) | (1 << (tsqlParser.LOGIN - 257)) | (1 << (tsqlParser.LOOP - 257)) | (1 << (tsqlParser.MARK - 257)) | (1 << (tsqlParser.MAX - 257)) | (1 << (tsqlParser.MAXDOP - 257)) | (1 << (tsqlParser.MAXRECURSION - 257)) | (1 << (tsqlParser.MIN - 257)))) != 0) or ((((_la - 324)) & ~0x3f) == 0 and ((1 << (_la - 324)) & ((1 << (tsqlParser.MODIFY - 324)) | (1 << (tsqlParser.NAME - 324)) | (1 << (tsqlParser.NOCOUNT - 324)) | (1 << (tsqlParser.NOEXPAND - 324)) | (1 << (tsqlParser.NORECOMPUTE - 324)) | (1 << (tsqlParser.NTILE - 324)) | (1 << (tsqlParser.NUMBER - 324)) | (1 << (tsqlParser.OFFSET - 324)) | (1 << (tsqlParser.ONLINE - 324)) | (1 << (tsqlParser.ONLY - 324)) | (1 << (tsqlParser.OPTIMISTIC - 324)) | (1 << (tsqlParser.OPTIMIZE - 324)) | (1 << (tsqlParser.OUT - 324)) | (1 << (tsqlParser.OUTPUT - 324)) | (1 << (tsqlParser.OWNER - 324)) | (1 << (tsqlParser.PARAMETERIZATION - 324)) | (1 << (tsqlParser.PARTITION - 324)) | (1 << (tsqlParser.PATH - 324)) | (1 << (tsqlParser.PRECEDING - 324)) | (1 << (tsqlParser.PRIOR - 324)) | (1 << (tsqlParser.PRIVILEGES - 324)) | (1 << (tsqlParser.RANGE - 324)) | (1 << (tsqlParser.RANK - 324)) | (1 << (tsqlParser.READONLY - 324)) | (1 << (tsqlParser.READ_ONLY - 324)) | (1 << (tsqlParser.RECOMPILE - 324)) | (1 << (tsqlParser.RELATIVE - 324)) | (1 << (tsqlParser.REMOTE - 324)) | (1 << (tsqlParser.REPEATABLE - 324)) | (1 << (tsqlParser.ROBUST - 324)) | (1 << (tsqlParser.ROOT - 324)) | (1 << (tsqlParser.ROW - 324)) | (1 << (tsqlParser.ROWGUID - 324)) | (1 << (tsqlParser.ROWS - 324)) | (1 << (tsqlParser.ROW_NUMBER - 324)) | (1 << (tsqlParser.SAMPLE - 324)) | (1 << (tsqlParser.SCHEMABINDING - 324)) | (1 << (tsqlParser.SCROLL - 324)) | (1 << (tsqlParser.SCROLL_LOCKS - 324)) | (1 << (tsqlParser.SELF - 324)) | (1 << (tsqlParser.SERIALIZABLE - 324)) | (1 << (tsqlParser.SIMPLE - 324)) | (1 << (tsqlParser.SIZE - 324)))) != 0) or ((((_la - 389)) & ~0x3f) == 0 and ((1 << (_la - 389)) & ((1 << (tsqlParser.SNAPSHOT - 389)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 389)) | (1 << (tsqlParser.STATIC - 389)) | (1 << (tsqlParser.STATS_STREAM - 389)) | (1 << (tsqlParser.STDEV - 389)) | (1 << (tsqlParser.STDEVP - 389)) | (1 << (tsqlParser.SUM - 389)) | (1 << (tsqlParser.TEXTIMAGE_ON - 389)) | (1 << (tsqlParser.THROW - 389)) | (1 << (tsqlParser.TIES - 389)) | (1 << (tsqlParser.TIME - 389)) | (1 << (tsqlParser.TRY - 389)) | (1 << (tsqlParser.TYPE - 389)) | (1 << (tsqlParser.TYPE_WARNING - 389)) | (1 << (tsqlParser.UNBOUNDED - 389)) | (1 << (tsqlParser.UNCOMMITTED - 389)) | (1 << (tsqlParser.UNKNOWN - 389)) | (1 << (tsqlParser.USING - 389)) | (1 << (tsqlParser.VAR - 389)) | (1 << (tsqlParser.VARP - 389)) | (1 << (tsqlParser.VIEWS - 389)) | (1 << (tsqlParser.VIEW_METADATA - 389)) | (1 << (tsqlParser.WORK - 389)) | (1 << (tsqlParser.XML - 389)) | (1 << (tsqlParser.XMLNAMESPACES - 389)) | (1 << (tsqlParser.ZONE - 389)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 389)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 389)) | (1 << (tsqlParser.ID - 389)))) != 0):
                    self.state = 1446
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.ANY:
                        self.state = 1445
                        self.match(tsqlParser.ANY)


                    self.state = 1450
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                        self.state = 1448
                        self.r_id()
                        pass
                    elif token in [tsqlParser.DATABASE]:
                        self.state = 1449
                        self.match(tsqlParser.DATABASE)
                        pass
                    else:
                        raise NoViableAltException(self)



                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.member_name = None # R_idContext

        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def assignment_operator(self):
            return self.getTypedRuleContext(tsqlParser.Assignment_operatorContext,0)


        def CURSOR(self):
            return self.getToken(tsqlParser.CURSOR, 0)

        def declare_set_cursor_common(self):
            return self.getTypedRuleContext(tsqlParser.Declare_set_cursor_commonContext,0)


        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def READ(self):
            return self.getToken(tsqlParser.READ, 0)

        def ONLY(self):
            return self.getToken(tsqlParser.ONLY, 0)

        def UPDATE(self):
            return self.getToken(tsqlParser.UPDATE, 0)

        def OF(self):
            return self.getToken(tsqlParser.OF, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def set_special(self):
            return self.getTypedRuleContext(tsqlParser.Set_specialContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_set_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_statement" ):
                listener.enterSet_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_statement" ):
                listener.exitSet_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_statement" ):
                return visitor.visitSet_statement(self)
            else:
                return visitor.visitChildren(self)




    def set_statement(self):

        localctx = tsqlParser.Set_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_set_statement)
        self._la = 0 # Token type
        try:
            self.state = 1495
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1456
                self.match(tsqlParser.SET)
                self.state = 1457
                self.match(tsqlParser.LOCAL_ID)
                self.state = 1460
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.DOT:
                    self.state = 1458
                    self.match(tsqlParser.DOT)
                    self.state = 1459
                    localctx.member_name = self.r_id()


                self.state = 1462
                self.match(tsqlParser.EQUAL)
                self.state = 1463
                self.expression(0)
                self.state = 1465
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
                if la_ == 1:
                    self.state = 1464
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1467
                self.match(tsqlParser.SET)
                self.state = 1468
                self.match(tsqlParser.LOCAL_ID)
                self.state = 1469
                self.assignment_operator()
                self.state = 1470
                self.expression(0)
                self.state = 1472
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
                if la_ == 1:
                    self.state = 1471
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1474
                self.match(tsqlParser.SET)
                self.state = 1475
                self.match(tsqlParser.LOCAL_ID)
                self.state = 1476
                self.match(tsqlParser.EQUAL)
                self.state = 1477
                self.match(tsqlParser.CURSOR)
                self.state = 1478
                self.declare_set_cursor_common()
                self.state = 1489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.FOR:
                    self.state = 1479
                    self.match(tsqlParser.FOR)
                    self.state = 1487
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [tsqlParser.READ]:
                        self.state = 1480
                        self.match(tsqlParser.READ)
                        self.state = 1481
                        self.match(tsqlParser.ONLY)
                        pass
                    elif token in [tsqlParser.UPDATE]:
                        self.state = 1482
                        self.match(tsqlParser.UPDATE)
                        self.state = 1485
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==tsqlParser.OF:
                            self.state = 1483
                            self.match(tsqlParser.OF)
                            self.state = 1484
                            self.column_name_list()


                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 1492
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
                if la_ == 1:
                    self.state = 1491
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1494
                self.set_special()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Transaction_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(tsqlParser.BEGIN, 0)

        def DISTRIBUTED(self):
            return self.getToken(tsqlParser.DISTRIBUTED, 0)

        def TRAN(self):
            return self.getToken(tsqlParser.TRAN, 0)

        def TRANSACTION(self):
            return self.getToken(tsqlParser.TRANSACTION, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def MARK(self):
            return self.getToken(tsqlParser.MARK, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def COMMIT(self):
            return self.getToken(tsqlParser.COMMIT, 0)

        def DELAYED_DURABILITY(self):
            return self.getToken(tsqlParser.DELAYED_DURABILITY, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def WORK(self):
            return self.getToken(tsqlParser.WORK, 0)

        def ROLLBACK(self):
            return self.getToken(tsqlParser.ROLLBACK, 0)

        def SAVE(self):
            return self.getToken(tsqlParser.SAVE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_transaction_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_statement" ):
                listener.enterTransaction_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_statement" ):
                listener.exitTransaction_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransaction_statement" ):
                return visitor.visitTransaction_statement(self)
            else:
                return visitor.visitChildren(self)




    def transaction_statement(self):

        localctx = tsqlParser.Transaction_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_transaction_statement)
        self._la = 0 # Token type
        try:
            self.state = 1574
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1497
                self.match(tsqlParser.BEGIN)
                self.state = 1498
                self.match(tsqlParser.DISTRIBUTED)
                self.state = 1499
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TRAN or _la==tsqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1502
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
                if la_ == 1:
                    self.state = 1500
                    self.r_id()

                elif la_ == 2:
                    self.state = 1501
                    self.match(tsqlParser.LOCAL_ID)


                self.state = 1505
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
                if la_ == 1:
                    self.state = 1504
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1507
                self.match(tsqlParser.BEGIN)
                self.state = 1508
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TRAN or _la==tsqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1518
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
                if la_ == 1:
                    self.state = 1511
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                        self.state = 1509
                        self.r_id()
                        pass
                    elif token in [tsqlParser.LOCAL_ID]:
                        self.state = 1510
                        self.match(tsqlParser.LOCAL_ID)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1516
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
                    if la_ == 1:
                        self.state = 1513
                        self.match(tsqlParser.WITH)
                        self.state = 1514
                        self.match(tsqlParser.MARK)
                        self.state = 1515
                        self.match(tsqlParser.STRING)




                self.state = 1521
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
                if la_ == 1:
                    self.state = 1520
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1523
                self.match(tsqlParser.COMMIT)
                self.state = 1524
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TRAN or _la==tsqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1537
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
                if la_ == 1:
                    self.state = 1527
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                        self.state = 1525
                        self.r_id()
                        pass
                    elif token in [tsqlParser.LOCAL_ID]:
                        self.state = 1526
                        self.match(tsqlParser.LOCAL_ID)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1535
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
                    if la_ == 1:
                        self.state = 1529
                        self.match(tsqlParser.WITH)
                        self.state = 1530
                        self.match(tsqlParser.LR_BRACKET)
                        self.state = 1531
                        self.match(tsqlParser.DELAYED_DURABILITY)
                        self.state = 1532
                        self.match(tsqlParser.EQUAL)
                        self.state = 1533
                        _la = self._input.LA(1)
                        if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1534
                        self.match(tsqlParser.RR_BRACKET)




                self.state = 1540
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
                if la_ == 1:
                    self.state = 1539
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1542
                self.match(tsqlParser.COMMIT)
                self.state = 1544
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
                if la_ == 1:
                    self.state = 1543
                    self.match(tsqlParser.WORK)


                self.state = 1547
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
                if la_ == 1:
                    self.state = 1546
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1549
                self.match(tsqlParser.ROLLBACK)
                self.state = 1550
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TRAN or _la==tsqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1553
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
                if la_ == 1:
                    self.state = 1551
                    self.r_id()

                elif la_ == 2:
                    self.state = 1552
                    self.match(tsqlParser.LOCAL_ID)


                self.state = 1556
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
                if la_ == 1:
                    self.state = 1555
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1558
                self.match(tsqlParser.ROLLBACK)
                self.state = 1560
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
                if la_ == 1:
                    self.state = 1559
                    self.match(tsqlParser.WORK)


                self.state = 1563
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
                if la_ == 1:
                    self.state = 1562
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1565
                self.match(tsqlParser.SAVE)
                self.state = 1566
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TRAN or _la==tsqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1569
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
                if la_ == 1:
                    self.state = 1567
                    self.r_id()

                elif la_ == 2:
                    self.state = 1568
                    self.match(tsqlParser.LOCAL_ID)


                self.state = 1572
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
                if la_ == 1:
                    self.state = 1571
                    self.match(tsqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Go_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.count = None # Token

        def GO(self):
            return self.getToken(tsqlParser.GO, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_go_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGo_statement" ):
                listener.enterGo_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGo_statement" ):
                listener.exitGo_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGo_statement" ):
                return visitor.visitGo_statement(self)
            else:
                return visitor.visitChildren(self)




    def go_statement(self):

        localctx = tsqlParser.Go_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_go_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1576
            self.match(tsqlParser.GO)
            self.state = 1578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.DECIMAL:
                self.state = 1577
                localctx.count = self.match(tsqlParser.DECIMAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Use_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # R_idContext

        def USE(self):
            return self.getToken(tsqlParser.USE, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_use_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse_statement" ):
                listener.enterUse_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse_statement" ):
                listener.exitUse_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUse_statement" ):
                return visitor.visitUse_statement(self)
            else:
                return visitor.visitChildren(self)




    def use_statement(self):

        localctx = tsqlParser.Use_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_use_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1580
            self.match(tsqlParser.USE)
            self.state = 1581
            localctx.database = self.r_id()
            self.state = 1583
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
            if la_ == 1:
                self.state = 1582
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Execute_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.clause = None # Token

        def EXECUTE(self):
            return self.getToken(tsqlParser.EXECUTE, 0)

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def CALLER(self):
            return self.getToken(tsqlParser.CALLER, 0)

        def SELF(self):
            return self.getToken(tsqlParser.SELF, 0)

        def OWNER(self):
            return self.getToken(tsqlParser.OWNER, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_execute_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_clause" ):
                listener.enterExecute_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_clause" ):
                listener.exitExecute_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecute_clause" ):
                return visitor.visitExecute_clause(self)
            else:
                return visitor.visitChildren(self)




    def execute_clause(self):

        localctx = tsqlParser.Execute_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_execute_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1585
            self.match(tsqlParser.EXECUTE)
            self.state = 1586
            self.match(tsqlParser.AS)
            self.state = 1587
            localctx.clause = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==tsqlParser.CALLER or _la==tsqlParser.OWNER or _la==tsqlParser.SELF or _la==tsqlParser.STRING):
                localctx.clause = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Declare_localContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_declare_local

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_local" ):
                listener.enterDeclare_local(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_local" ):
                listener.exitDeclare_local(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclare_local" ):
                return visitor.visitDeclare_local(self)
            else:
                return visitor.visitChildren(self)




    def declare_local(self):

        localctx = tsqlParser.Declare_localContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_declare_local)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1589
            self.match(tsqlParser.LOCAL_ID)
            self.state = 1591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.AS:
                self.state = 1590
                self.match(tsqlParser.AS)


            self.state = 1593
            self.data_type()
            self.state = 1596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.EQUAL:
                self.state = 1594
                self.match(tsqlParser.EQUAL)
                self.state = 1595
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_type_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(tsqlParser.TABLE, 0)

        def column_def_table_constraints(self):
            return self.getTypedRuleContext(tsqlParser.Column_def_table_constraintsContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_table_type_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_type_definition" ):
                listener.enterTable_type_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_type_definition" ):
                listener.exitTable_type_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_type_definition" ):
                return visitor.visitTable_type_definition(self)
            else:
                return visitor.visitChildren(self)




    def table_type_definition(self):

        localctx = tsqlParser.Table_type_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_table_type_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1598
            self.match(tsqlParser.TABLE)
            self.state = 1599
            self.match(tsqlParser.LR_BRACKET)
            self.state = 1600
            self.column_def_table_constraints()
            self.state = 1601
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_def_table_constraintsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_def_table_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Column_def_table_constraintContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Column_def_table_constraintContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_column_def_table_constraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_def_table_constraints" ):
                listener.enterColumn_def_table_constraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_def_table_constraints" ):
                listener.exitColumn_def_table_constraints(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_def_table_constraints" ):
                return visitor.visitColumn_def_table_constraints(self)
            else:
                return visitor.visitChildren(self)




    def column_def_table_constraints(self):

        localctx = tsqlParser.Column_def_table_constraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_column_def_table_constraints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1603
            self.column_def_table_constraint()
            self.state = 1610
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,226,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1605
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.COMMA:
                        self.state = 1604
                        self.match(tsqlParser.COMMA)


                    self.state = 1607
                    self.column_def_table_constraint() 
                self.state = 1612
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,226,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_def_table_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_definition(self):
            return self.getTypedRuleContext(tsqlParser.Column_definitionContext,0)


        def table_constraint(self):
            return self.getTypedRuleContext(tsqlParser.Table_constraintContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_column_def_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_def_table_constraint" ):
                listener.enterColumn_def_table_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_def_table_constraint" ):
                listener.exitColumn_def_table_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_def_table_constraint" ):
                return visitor.visitColumn_def_table_constraint(self)
            else:
                return visitor.visitChildren(self)




    def column_def_table_constraint(self):

        localctx = tsqlParser.Column_def_table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_column_def_table_constraint)
        try:
            self.state = 1615
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1613
                self.column_definition()
                pass
            elif token in [tsqlParser.CHECK, tsqlParser.CONSTRAINT, tsqlParser.PRIMARY, tsqlParser.UNIQUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1614
                self.table_constraint()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint = None # R_idContext
            self.seed = None # Token
            self.increment = None # Token

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def COLLATE(self):
            return self.getToken(tsqlParser.COLLATE, 0)

        def null_notnull(self):
            return self.getTypedRuleContext(tsqlParser.Null_notnullContext,0)


        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(tsqlParser.Constant_expressionContext,0)


        def IDENTITY(self):
            return self.getToken(tsqlParser.IDENTITY, 0)

        def ROWGUIDCOL(self):
            return self.getToken(tsqlParser.ROWGUIDCOL, 0)

        def column_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Column_constraintContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Column_constraintContext,i)


        def CONSTRAINT(self):
            return self.getToken(tsqlParser.CONSTRAINT, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def VALUES(self):
            return self.getToken(tsqlParser.VALUES, 0)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(tsqlParser.REPLICATION, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DECIMAL)
            else:
                return self.getToken(tsqlParser.DECIMAL, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_column_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_definition" ):
                listener.enterColumn_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_definition" ):
                listener.exitColumn_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_definition" ):
                return visitor.visitColumn_definition(self)
            else:
                return visitor.visitChildren(self)




    def column_definition(self):

        localctx = tsqlParser.Column_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_column_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1617
            self.r_id()
            self.state = 1621
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.DOUBLE, tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.BIGINT, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DATETIME2, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INT, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SMALLINT, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TINYINT, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.state = 1618
                self.data_type()
                pass
            elif token in [tsqlParser.AS]:
                self.state = 1619
                self.match(tsqlParser.AS)
                self.state = 1620
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.COLLATE:
                self.state = 1623
                self.match(tsqlParser.COLLATE)
                self.state = 1624
                self.r_id()


            self.state = 1628
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
            if la_ == 1:
                self.state = 1627
                self.null_notnull()


            self.state = 1653
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
            if la_ == 1:
                self.state = 1632
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.CONSTRAINT:
                    self.state = 1630
                    self.match(tsqlParser.CONSTRAINT)
                    self.state = 1631
                    localctx.constraint = self.r_id()


                self.state = 1634
                self.match(tsqlParser.DEFAULT)
                self.state = 1635
                self.constant_expression()
                self.state = 1638
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
                if la_ == 1:
                    self.state = 1636
                    self.match(tsqlParser.WITH)
                    self.state = 1637
                    self.match(tsqlParser.VALUES)



            elif la_ == 2:
                self.state = 1640
                self.match(tsqlParser.IDENTITY)
                self.state = 1646
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
                if la_ == 1:
                    self.state = 1641
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 1642
                    localctx.seed = self.match(tsqlParser.DECIMAL)
                    self.state = 1643
                    self.match(tsqlParser.COMMA)
                    self.state = 1644
                    localctx.increment = self.match(tsqlParser.DECIMAL)
                    self.state = 1645
                    self.match(tsqlParser.RR_BRACKET)


                self.state = 1651
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
                if la_ == 1:
                    self.state = 1648
                    self.match(tsqlParser.NOT)
                    self.state = 1649
                    self.match(tsqlParser.FOR)
                    self.state = 1650
                    self.match(tsqlParser.REPLICATION)




            self.state = 1656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ROWGUIDCOL:
                self.state = 1655
                self.match(tsqlParser.ROWGUIDCOL)


            self.state = 1661
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,237,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1658
                    self.column_constraint() 
                self.state = 1663
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,237,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECK(self):
            return self.getToken(tsqlParser.CHECK, 0)

        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def CONSTRAINT(self):
            return self.getToken(tsqlParser.CONSTRAINT, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def null_notnull(self):
            return self.getTypedRuleContext(tsqlParser.Null_notnullContext,0)


        def PRIMARY(self):
            return self.getToken(tsqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(tsqlParser.KEY, 0)

        def UNIQUE(self):
            return self.getToken(tsqlParser.UNIQUE, 0)

        def clustered(self):
            return self.getTypedRuleContext(tsqlParser.ClusteredContext,0)


        def index_options(self):
            return self.getTypedRuleContext(tsqlParser.Index_optionsContext,0)


        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(tsqlParser.REPLICATION, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_column_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_constraint" ):
                listener.enterColumn_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_constraint" ):
                listener.exitColumn_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_constraint" ):
                return visitor.visitColumn_constraint(self)
            else:
                return visitor.visitChildren(self)




    def column_constraint(self):

        localctx = tsqlParser.Column_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_column_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.CONSTRAINT:
                self.state = 1664
                self.match(tsqlParser.CONSTRAINT)
                self.state = 1665
                self.r_id()


            self.state = 1669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.NOT or _la==tsqlParser.NULL:
                self.state = 1668
                self.null_notnull()


            self.state = 1692
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.PRIMARY, tsqlParser.UNIQUE]:
                self.state = 1674
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.PRIMARY]:
                    self.state = 1671
                    self.match(tsqlParser.PRIMARY)
                    self.state = 1672
                    self.match(tsqlParser.KEY)
                    pass
                elif token in [tsqlParser.UNIQUE]:
                    self.state = 1673
                    self.match(tsqlParser.UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.CLUSTERED or _la==tsqlParser.NONCLUSTERED:
                    self.state = 1676
                    self.clustered()


                self.state = 1680
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
                if la_ == 1:
                    self.state = 1679
                    self.index_options()


                pass
            elif token in [tsqlParser.CHECK]:
                self.state = 1682
                self.match(tsqlParser.CHECK)
                self.state = 1686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.NOT:
                    self.state = 1683
                    self.match(tsqlParser.NOT)
                    self.state = 1684
                    self.match(tsqlParser.FOR)
                    self.state = 1685
                    self.match(tsqlParser.REPLICATION)


                self.state = 1688
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1689
                self.search_condition(0)
                self.state = 1690
                self.match(tsqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def CHECK(self):
            return self.getToken(tsqlParser.CHECK, 0)

        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def CONSTRAINT(self):
            return self.getToken(tsqlParser.CONSTRAINT, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def PRIMARY(self):
            return self.getToken(tsqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(tsqlParser.KEY, 0)

        def UNIQUE(self):
            return self.getToken(tsqlParser.UNIQUE, 0)

        def clustered(self):
            return self.getTypedRuleContext(tsqlParser.ClusteredContext,0)


        def index_options(self):
            return self.getTypedRuleContext(tsqlParser.Index_optionsContext,0)


        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(tsqlParser.REPLICATION, 0)

        def ASC(self):
            return self.getToken(tsqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(tsqlParser.DESC, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_constraint" ):
                listener.enterTable_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_constraint" ):
                listener.exitTable_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_constraint" ):
                return visitor.visitTable_constraint(self)
            else:
                return visitor.visitChildren(self)




    def table_constraint(self):

        localctx = tsqlParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_table_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.CONSTRAINT:
                self.state = 1694
                self.match(tsqlParser.CONSTRAINT)
                self.state = 1695
                self.r_id()


            self.state = 1729
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.PRIMARY, tsqlParser.UNIQUE]:
                self.state = 1701
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.PRIMARY]:
                    self.state = 1698
                    self.match(tsqlParser.PRIMARY)
                    self.state = 1699
                    self.match(tsqlParser.KEY)
                    pass
                elif token in [tsqlParser.UNIQUE]:
                    self.state = 1700
                    self.match(tsqlParser.UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.CLUSTERED or _la==tsqlParser.NONCLUSTERED:
                    self.state = 1703
                    self.clustered()


                self.state = 1706
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1707
                self.column_name_list()
                self.state = 1709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ASC or _la==tsqlParser.DESC:
                    self.state = 1708
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.ASC or _la==tsqlParser.DESC):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1711
                self.match(tsqlParser.RR_BRACKET)
                self.state = 1713
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
                if la_ == 1:
                    self.state = 1712
                    self.index_options()


                self.state = 1717
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ON:
                    self.state = 1715
                    self.match(tsqlParser.ON)
                    self.state = 1716
                    self.r_id()


                pass
            elif token in [tsqlParser.CHECK]:
                self.state = 1719
                self.match(tsqlParser.CHECK)
                self.state = 1723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.NOT:
                    self.state = 1720
                    self.match(tsqlParser.NOT)
                    self.state = 1721
                    self.match(tsqlParser.FOR)
                    self.state = 1722
                    self.match(tsqlParser.REPLICATION)


                self.state = 1725
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1726
                self.search_condition(0)
                self.state = 1727
                self.match(tsqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def index_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Index_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Index_optionContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_index_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_options" ):
                listener.enterIndex_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_options" ):
                listener.exitIndex_options(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_options" ):
                return visitor.visitIndex_options(self)
            else:
                return visitor.visitChildren(self)




    def index_options(self):

        localctx = tsqlParser.Index_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_index_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1731
            self.match(tsqlParser.WITH)
            self.state = 1732
            self.match(tsqlParser.LR_BRACKET)
            self.state = 1733
            self.index_option()
            self.state = 1738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 1734
                self.match(tsqlParser.COMMA)
                self.state = 1735
                self.index_option()
                self.state = 1740
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1741
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Simple_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Simple_idContext,i)


        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_index_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_option" ):
                listener.enterIndex_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_option" ):
                listener.exitIndex_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_option" ):
                return visitor.visitIndex_option(self)
            else:
                return visitor.visitChildren(self)




    def index_option(self):

        localctx = tsqlParser.Index_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_index_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1743
            self.simple_id()
            self.state = 1744
            self.match(tsqlParser.EQUAL)
            self.state = 1748
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.ID]:
                self.state = 1745
                self.simple_id()
                pass
            elif token in [tsqlParser.OFF, tsqlParser.ON]:
                self.state = 1746
                self.on_off()
                pass
            elif token in [tsqlParser.DECIMAL]:
                self.state = 1747
                self.match(tsqlParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Declare_cursorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(tsqlParser.DECLARE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_nameContext,0)


        def CURSOR(self):
            return self.getToken(tsqlParser.CURSOR, 0)

        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.FOR)
            else:
                return self.getToken(tsqlParser.FOR, i)

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def declare_set_cursor_common(self):
            return self.getTypedRuleContext(tsqlParser.Declare_set_cursor_commonContext,0)


        def INSENSITIVE(self):
            return self.getToken(tsqlParser.INSENSITIVE, 0)

        def SCROLL(self):
            return self.getToken(tsqlParser.SCROLL, 0)

        def READ(self):
            return self.getToken(tsqlParser.READ, 0)

        def ONLY(self):
            return self.getToken(tsqlParser.ONLY, 0)

        def UPDATE(self):
            return self.getToken(tsqlParser.UPDATE, 0)

        def OF(self):
            return self.getToken(tsqlParser.OF, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_declare_cursor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_cursor" ):
                listener.enterDeclare_cursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_cursor" ):
                listener.exitDeclare_cursor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclare_cursor" ):
                return visitor.visitDeclare_cursor(self)
            else:
                return visitor.visitChildren(self)




    def declare_cursor(self):

        localctx = tsqlParser.Declare_cursorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_declare_cursor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1750
            self.match(tsqlParser.DECLARE)
            self.state = 1751
            self.cursor_name()
            self.state = 1783
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
            if la_ == 1:
                self.state = 1752
                self.match(tsqlParser.CURSOR)
                self.state = 1762
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
                if la_ == 1:
                    self.state = 1753
                    self.declare_set_cursor_common()
                    self.state = 1760
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.FOR:
                        self.state = 1754
                        self.match(tsqlParser.FOR)
                        self.state = 1755
                        self.match(tsqlParser.UPDATE)
                        self.state = 1758
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==tsqlParser.OF:
                            self.state = 1756
                            self.match(tsqlParser.OF)
                            self.state = 1757
                            self.column_name_list()






                pass

            elif la_ == 2:
                self.state = 1765
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.INSENSITIVE:
                    self.state = 1764
                    self.match(tsqlParser.INSENSITIVE)


                self.state = 1768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.SCROLL:
                    self.state = 1767
                    self.match(tsqlParser.SCROLL)


                self.state = 1770
                self.match(tsqlParser.CURSOR)
                self.state = 1771
                self.match(tsqlParser.FOR)
                self.state = 1772
                self.select_statement()
                self.state = 1781
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.FOR:
                    self.state = 1773
                    self.match(tsqlParser.FOR)
                    self.state = 1779
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [tsqlParser.READ]:
                        self.state = 1774
                        self.match(tsqlParser.READ)
                        self.state = 1775
                        self.match(tsqlParser.ONLY)
                        pass
                    elif token in [tsqlParser.UPDATE]:
                        self.state = 1776
                        self.match(tsqlParser.UPDATE)
                        pass
                    elif token in [tsqlParser.OF]:
                        self.state = 1777
                        self.match(tsqlParser.OF)
                        self.state = 1778
                        self.column_name_list()
                        pass
                    else:
                        raise NoViableAltException(self)



                pass


            self.state = 1786
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
            if la_ == 1:
                self.state = 1785
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Declare_set_cursor_commonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def TYPE_WARNING(self):
            return self.getToken(tsqlParser.TYPE_WARNING, 0)

        def LOCAL(self):
            return self.getToken(tsqlParser.LOCAL, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def FORWARD_ONLY(self):
            return self.getToken(tsqlParser.FORWARD_ONLY, 0)

        def SCROLL(self):
            return self.getToken(tsqlParser.SCROLL, 0)

        def STATIC(self):
            return self.getToken(tsqlParser.STATIC, 0)

        def KEYSET(self):
            return self.getToken(tsqlParser.KEYSET, 0)

        def DYNAMIC(self):
            return self.getToken(tsqlParser.DYNAMIC, 0)

        def FAST_FORWARD(self):
            return self.getToken(tsqlParser.FAST_FORWARD, 0)

        def READ_ONLY(self):
            return self.getToken(tsqlParser.READ_ONLY, 0)

        def SCROLL_LOCKS(self):
            return self.getToken(tsqlParser.SCROLL_LOCKS, 0)

        def OPTIMISTIC(self):
            return self.getToken(tsqlParser.OPTIMISTIC, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_declare_set_cursor_common

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_set_cursor_common" ):
                listener.enterDeclare_set_cursor_common(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_set_cursor_common" ):
                listener.exitDeclare_set_cursor_common(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclare_set_cursor_common" ):
                return visitor.visitDeclare_set_cursor_common(self)
            else:
                return visitor.visitChildren(self)




    def declare_set_cursor_common(self):

        localctx = tsqlParser.Declare_set_cursor_commonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_declare_set_cursor_common)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.GLOBAL or _la==tsqlParser.LOCAL:
                self.state = 1788
                _la = self._input.LA(1)
                if not(_la==tsqlParser.GLOBAL or _la==tsqlParser.LOCAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FORWARD_ONLY or _la==tsqlParser.SCROLL:
                self.state = 1791
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FORWARD_ONLY or _la==tsqlParser.SCROLL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1795
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 263)) & ~0x3f) == 0 and ((1 << (_la - 263)) & ((1 << (tsqlParser.DYNAMIC - 263)) | (1 << (tsqlParser.FAST_FORWARD - 263)) | (1 << (tsqlParser.KEYSET - 263)))) != 0) or _la==tsqlParser.STATIC:
                self.state = 1794
                _la = self._input.LA(1)
                if not(((((_la - 263)) & ~0x3f) == 0 and ((1 << (_la - 263)) & ((1 << (tsqlParser.DYNAMIC - 263)) | (1 << (tsqlParser.FAST_FORWARD - 263)) | (1 << (tsqlParser.KEYSET - 263)))) != 0) or _la==tsqlParser.STATIC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 341)) & ~0x3f) == 0 and ((1 << (_la - 341)) & ((1 << (tsqlParser.OPTIMISTIC - 341)) | (1 << (tsqlParser.READ_ONLY - 341)) | (1 << (tsqlParser.SCROLL_LOCKS - 341)))) != 0):
                self.state = 1797
                _la = self._input.LA(1)
                if not(((((_la - 341)) & ~0x3f) == 0 and ((1 << (_la - 341)) & ((1 << (tsqlParser.OPTIMISTIC - 341)) | (1 << (tsqlParser.READ_ONLY - 341)) | (1 << (tsqlParser.SCROLL_LOCKS - 341)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.TYPE_WARNING:
                self.state = 1800
                self.match(tsqlParser.TYPE_WARNING)


            self.state = 1803
            self.match(tsqlParser.FOR)
            self.state = 1804
            self.select_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fetch_cursorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FETCH(self):
            return self.getToken(tsqlParser.FETCH, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_nameContext,0)


        def FROM(self):
            return self.getToken(tsqlParser.FROM, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def INTO(self):
            return self.getToken(tsqlParser.INTO, 0)

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.LOCAL_ID)
            else:
                return self.getToken(tsqlParser.LOCAL_ID, i)

        def NEXT(self):
            return self.getToken(tsqlParser.NEXT, 0)

        def PRIOR(self):
            return self.getToken(tsqlParser.PRIOR, 0)

        def FIRST(self):
            return self.getToken(tsqlParser.FIRST, 0)

        def LAST(self):
            return self.getToken(tsqlParser.LAST, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def ABSOLUTE(self):
            return self.getToken(tsqlParser.ABSOLUTE, 0)

        def RELATIVE(self):
            return self.getToken(tsqlParser.RELATIVE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_fetch_cursor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetch_cursor" ):
                listener.enterFetch_cursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetch_cursor" ):
                listener.exitFetch_cursor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFetch_cursor" ):
                return visitor.visitFetch_cursor(self)
            else:
                return visitor.visitChildren(self)




    def fetch_cursor(self):

        localctx = tsqlParser.Fetch_cursorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_fetch_cursor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1806
            self.match(tsqlParser.FETCH)
            self.state = 1816
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
            if la_ == 1:
                self.state = 1813
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.NEXT]:
                    self.state = 1807
                    self.match(tsqlParser.NEXT)
                    pass
                elif token in [tsqlParser.PRIOR]:
                    self.state = 1808
                    self.match(tsqlParser.PRIOR)
                    pass
                elif token in [tsqlParser.FIRST]:
                    self.state = 1809
                    self.match(tsqlParser.FIRST)
                    pass
                elif token in [tsqlParser.LAST]:
                    self.state = 1810
                    self.match(tsqlParser.LAST)
                    pass
                elif token in [tsqlParser.ABSOLUTE, tsqlParser.RELATIVE]:
                    self.state = 1811
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.ABSOLUTE or _la==tsqlParser.RELATIVE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1812
                    self.expression(0)
                    pass
                elif token in [tsqlParser.FROM]:
                    pass
                else:
                    pass
                self.state = 1815
                self.match(tsqlParser.FROM)


            self.state = 1819
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.state = 1818
                self.match(tsqlParser.GLOBAL)


            self.state = 1821
            self.cursor_name()
            self.state = 1831
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.INTO:
                self.state = 1822
                self.match(tsqlParser.INTO)
                self.state = 1823
                self.match(tsqlParser.LOCAL_ID)
                self.state = 1828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 1824
                    self.match(tsqlParser.COMMA)
                    self.state = 1825
                    self.match(tsqlParser.LOCAL_ID)
                    self.state = 1830
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1834
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
            if la_ == 1:
                self.state = 1833
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_specialContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # R_idContext
            self.value = None # R_idContext
            self.set_type = None # Token

        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def constant_LOCAL_ID(self):
            return self.getTypedRuleContext(tsqlParser.Constant_LOCAL_IDContext,0)


        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def ISOLATION(self):
            return self.getToken(tsqlParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(tsqlParser.LEVEL, 0)

        def TRANSACTION(self):
            return self.getToken(tsqlParser.TRANSACTION, 0)

        def READ(self):
            return self.getToken(tsqlParser.READ, 0)

        def UNCOMMITTED(self):
            return self.getToken(tsqlParser.UNCOMMITTED, 0)

        def COMMITTED(self):
            return self.getToken(tsqlParser.COMMITTED, 0)

        def REPEATABLE(self):
            return self.getToken(tsqlParser.REPEATABLE, 0)

        def SNAPSHOT(self):
            return self.getToken(tsqlParser.SNAPSHOT, 0)

        def SERIALIZABLE(self):
            return self.getToken(tsqlParser.SERIALIZABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def IDENTITY_INSERT(self):
            return self.getToken(tsqlParser.IDENTITY_INSERT, 0)

        def ANSI_NULLS(self):
            return self.getToken(tsqlParser.ANSI_NULLS, 0)

        def QUOTED_IDENTIFIER(self):
            return self.getToken(tsqlParser.QUOTED_IDENTIFIER, 0)

        def ANSI_PADDING(self):
            return self.getToken(tsqlParser.ANSI_PADDING, 0)

        def STATISTICS(self):
            return self.getToken(tsqlParser.STATISTICS, 0)

        def TIME(self):
            return self.getToken(tsqlParser.TIME, 0)

        def IO(self):
            return self.getToken(tsqlParser.IO, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_set_special

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_special" ):
                listener.enterSet_special(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_special" ):
                listener.exitSet_special(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_special" ):
                return visitor.visitSet_special(self)
            else:
                return visitor.visitChildren(self)




    def set_special(self):

        localctx = tsqlParser.Set_specialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_set_special)
        self._la = 0 # Token type
        try:
            self.state = 1883
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1836
                self.match(tsqlParser.SET)
                self.state = 1837
                localctx.key = self.r_id()
                self.state = 1841
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 1838
                    localctx.value = self.r_id()
                    pass
                elif token in [tsqlParser.LOCAL_ID, tsqlParser.DECIMAL, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                    self.state = 1839
                    self.constant_LOCAL_ID()
                    pass
                elif token in [tsqlParser.OFF, tsqlParser.ON]:
                    self.state = 1840
                    self.on_off()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1844
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
                if la_ == 1:
                    self.state = 1843
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1846
                self.match(tsqlParser.SET)
                self.state = 1847
                localctx.set_type = self.match(tsqlParser.TRANSACTION)
                self.state = 1848
                self.match(tsqlParser.ISOLATION)
                self.state = 1849
                self.match(tsqlParser.LEVEL)
                self.state = 1858
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
                if la_ == 1:
                    self.state = 1850
                    self.match(tsqlParser.READ)
                    self.state = 1851
                    self.match(tsqlParser.UNCOMMITTED)
                    pass

                elif la_ == 2:
                    self.state = 1852
                    self.match(tsqlParser.READ)
                    self.state = 1853
                    self.match(tsqlParser.COMMITTED)
                    pass

                elif la_ == 3:
                    self.state = 1854
                    self.match(tsqlParser.REPEATABLE)
                    self.state = 1855
                    self.match(tsqlParser.READ)
                    pass

                elif la_ == 4:
                    self.state = 1856
                    self.match(tsqlParser.SNAPSHOT)
                    pass

                elif la_ == 5:
                    self.state = 1857
                    self.match(tsqlParser.SERIALIZABLE)
                    pass


                self.state = 1861
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
                if la_ == 1:
                    self.state = 1860
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1863
                self.match(tsqlParser.SET)
                self.state = 1864
                localctx.set_type = self.match(tsqlParser.IDENTITY_INSERT)
                self.state = 1865
                self.table_name()
                self.state = 1866
                self.on_off()
                self.state = 1868
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
                if la_ == 1:
                    self.state = 1867
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1870
                self.match(tsqlParser.SET)
                self.state = 1871
                localctx.set_type = self.match(tsqlParser.ANSI_NULLS)
                self.state = 1872
                self.on_off()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1873
                self.match(tsqlParser.SET)
                self.state = 1874
                localctx.set_type = self.match(tsqlParser.QUOTED_IDENTIFIER)
                self.state = 1875
                self.on_off()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1876
                self.match(tsqlParser.SET)
                self.state = 1877
                localctx.set_type = self.match(tsqlParser.ANSI_PADDING)
                self.state = 1878
                self.on_off()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1879
                self.match(tsqlParser.SET)
                self.state = 1880
                localctx.set_type = self.match(tsqlParser.STATISTICS)
                self.state = 1881
                _la = self._input.LA(1)
                if not(_la==tsqlParser.IO or _la==tsqlParser.TIME):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1882
                self.on_off()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constant_LOCAL_IDContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_constant_LOCAL_ID

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_LOCAL_ID" ):
                listener.enterConstant_LOCAL_ID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_LOCAL_ID" ):
                listener.exitConstant_LOCAL_ID(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant_LOCAL_ID" ):
                return visitor.visitConstant_LOCAL_ID(self)
            else:
                return visitor.visitChildren(self)




    def constant_LOCAL_ID(self):

        localctx = tsqlParser.Constant_LOCAL_IDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_constant_LOCAL_ID)
        try:
            self.state = 1887
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.DECIMAL, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1885
                self.constant()
                pass
            elif token in [tsqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1886
                self.match(tsqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Binary_operator_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)

        def STAR(self):
            return self.getToken(tsqlParser.STAR, 0)
        def comparison_operator(self):
            return self.getTypedRuleContext(tsqlParser.Comparison_operatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_operator_expression" ):
                listener.enterBinary_operator_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_operator_expression" ):
                listener.exitBinary_operator_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinary_operator_expression" ):
                return visitor.visitBinary_operator_expression(self)
            else:
                return visitor.visitChildren(self)


    class Percentile_cont_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def percentile_cont(self):
            return self.getTypedRuleContext(tsqlParser.Percentile_contContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPercentile_cont_expression" ):
                listener.enterPercentile_cont_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPercentile_cont_expression" ):
                listener.exitPercentile_cont_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPercentile_cont_expression" ):
                return visitor.visitPercentile_cont_expression(self)
            else:
                return visitor.visitChildren(self)


    class Primitive_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)
        def NULL(self):
            return self.getToken(tsqlParser.NULL, 0)
        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)
        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitive_expression" ):
                listener.enterPrimitive_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitive_expression" ):
                listener.exitPrimitive_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimitive_expression" ):
                return visitor.visitPrimitive_expression(self)
            else:
                return visitor.visitChildren(self)


    class Bracket_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracket_expression" ):
                listener.enterBracket_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracket_expression" ):
                listener.exitBracket_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBracket_expression" ):
                return visitor.visitBracket_expression(self)
            else:
                return visitor.visitChildren(self)


    class Unary_operator_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator_expression" ):
                listener.enterUnary_operator_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator_expression" ):
                listener.exitUnary_operator_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnary_operator_expression" ):
                return visitor.visitUnary_operator_expression(self)
            else:
                return visitor.visitChildren(self)


    class Function_call_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def function_call(self):
            return self.getTypedRuleContext(tsqlParser.Function_callContext,0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def COLLATE(self):
            return self.getToken(tsqlParser.COLLATE, 0)
        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call_expression" ):
                listener.enterFunction_call_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call_expression" ):
                listener.exitFunction_call_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_call_expression" ):
                return visitor.visitFunction_call_expression(self)
            else:
                return visitor.visitChildren(self)


    class Conversion_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def AT(self):
            return self.getToken(tsqlParser.AT, 0)
        def TIME(self):
            return self.getToken(tsqlParser.TIME, 0)
        def ZONE(self):
            return self.getToken(tsqlParser.ZONE, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversion_expression" ):
                listener.enterConversion_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversion_expression" ):
                listener.exitConversion_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConversion_expression" ):
                return visitor.visitConversion_expression(self)
            else:
                return visitor.visitChildren(self)


    class Case_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.caseExpr = None # ExpressionContext
            self.elseExpr = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(tsqlParser.CASE, 0)
        def END(self):
            return self.getToken(tsqlParser.END, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)

        def switch_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Switch_sectionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Switch_sectionContext,i)

        def ELSE(self):
            return self.getToken(tsqlParser.ELSE, 0)
        def switch_search_condition_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Switch_search_condition_sectionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Switch_search_condition_sectionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_expression" ):
                listener.enterCase_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_expression" ):
                listener.exitCase_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_expression" ):
                return visitor.visitCase_expression(self)
            else:
                return visitor.visitChildren(self)


    class Column_ref_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def full_column_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_column_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_ref_expression" ):
                listener.enterColumn_ref_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_ref_expression" ):
                listener.exitColumn_ref_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_ref_expression" ):
                return visitor.visitColumn_ref_expression(self)
            else:
                return visitor.visitChildren(self)


    class String_agg_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def string_agg(self):
            return self.getTypedRuleContext(tsqlParser.String_aggContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_agg_expression" ):
                listener.enterString_agg_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_agg_expression" ):
                listener.exitString_agg_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString_agg_expression" ):
                return visitor.visitString_agg_expression(self)
            else:
                return visitor.visitChildren(self)


    class Subquery_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def subquery(self):
            return self.getTypedRuleContext(tsqlParser.SubqueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery_expression" ):
                listener.enterSubquery_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery_expression" ):
                listener.exitSubquery_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery_expression" ):
                return visitor.visitSubquery_expression(self)
            else:
                return visitor.visitChildren(self)


    class Over_clause_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def over_clause(self):
            return self.getTypedRuleContext(tsqlParser.Over_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause_expression" ):
                listener.enterOver_clause_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause_expression" ):
                listener.exitOver_clause_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOver_clause_expression" ):
                return visitor.visitOver_clause_expression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = tsqlParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 166
        self.enterRecursionRule(localctx, 166, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1936
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
            if la_ == 1:
                localctx = tsqlParser.Primitive_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1890
                self.match(tsqlParser.DEFAULT)
                pass

            elif la_ == 2:
                localctx = tsqlParser.Primitive_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1891
                self.match(tsqlParser.NULL)
                pass

            elif la_ == 3:
                localctx = tsqlParser.Primitive_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1892
                self.match(tsqlParser.LOCAL_ID)
                pass

            elif la_ == 4:
                localctx = tsqlParser.Primitive_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1893
                self.constant()
                pass

            elif la_ == 5:
                localctx = tsqlParser.Function_call_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1894
                self.function_call()
                pass

            elif la_ == 6:
                localctx = tsqlParser.Case_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1895
                self.match(tsqlParser.CASE)
                self.state = 1896
                localctx.caseExpr = self.expression(0)
                self.state = 1898 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1897
                    self.switch_section()
                    self.state = 1900 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==tsqlParser.WHEN):
                        break

                self.state = 1904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ELSE:
                    self.state = 1902
                    self.match(tsqlParser.ELSE)
                    self.state = 1903
                    localctx.elseExpr = self.expression(0)


                self.state = 1906
                self.match(tsqlParser.END)
                pass

            elif la_ == 7:
                localctx = tsqlParser.Case_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1908
                self.match(tsqlParser.CASE)
                self.state = 1910 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1909
                    self.switch_search_condition_section()
                    self.state = 1912 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==tsqlParser.WHEN):
                        break

                self.state = 1916
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ELSE:
                    self.state = 1914
                    self.match(tsqlParser.ELSE)
                    self.state = 1915
                    localctx.elseExpr = self.expression(0)


                self.state = 1918
                self.match(tsqlParser.END)
                pass

            elif la_ == 8:
                localctx = tsqlParser.Column_ref_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1920
                self.full_column_name()
                pass

            elif la_ == 9:
                localctx = tsqlParser.Bracket_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1921
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1922
                self.expression(0)
                self.state = 1923
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = tsqlParser.Subquery_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1925
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1926
                self.subquery()
                self.state = 1927
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 11:
                localctx = tsqlParser.Unary_operator_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1929
                localctx.op = self.match(tsqlParser.BIT_NOT)
                self.state = 1930
                self.expression(8)
                pass

            elif la_ == 12:
                localctx = tsqlParser.Unary_operator_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1931
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==tsqlParser.PLUS or _la==tsqlParser.MINUS):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1932
                self.expression(6)
                pass

            elif la_ == 13:
                localctx = tsqlParser.Over_clause_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1933
                self.over_clause()
                pass

            elif la_ == 14:
                localctx = tsqlParser.Percentile_cont_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1934
                self.percentile_cont()
                pass

            elif la_ == 15:
                localctx = tsqlParser.String_agg_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1935
                self.string_agg()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1958
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,288,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1956
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
                    if la_ == 1:
                        localctx = tsqlParser.Conversion_expressionContext(self, tsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1938
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1939
                        self.match(tsqlParser.AT)
                        self.state = 1940
                        self.match(tsqlParser.TIME)
                        self.state = 1941
                        self.match(tsqlParser.ZONE)
                        self.state = 1942
                        localctx.right = self.expression(15)
                        pass

                    elif la_ == 2:
                        localctx = tsqlParser.Binary_operator_expressionContext(self, tsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1943
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1944
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 461)) & ~0x3f) == 0 and ((1 << (_la - 461)) & ((1 << (tsqlParser.STAR - 461)) | (1 << (tsqlParser.DIVIDE - 461)) | (1 << (tsqlParser.MODULE - 461)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1945
                        localctx.right = self.expression(8)
                        pass

                    elif la_ == 3:
                        localctx = tsqlParser.Binary_operator_expressionContext(self, tsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1946
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1947
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 464)) & ~0x3f) == 0 and ((1 << (_la - 464)) & ((1 << (tsqlParser.PLUS - 464)) | (1 << (tsqlParser.MINUS - 464)) | (1 << (tsqlParser.BIT_OR - 464)) | (1 << (tsqlParser.BIT_AND - 464)) | (1 << (tsqlParser.BIT_XOR - 464)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1948
                        localctx.right = self.expression(6)
                        pass

                    elif la_ == 4:
                        localctx = tsqlParser.Binary_operator_expressionContext(self, tsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1949
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1950
                        self.comparison_operator()
                        self.state = 1951
                        localctx.right = self.expression(5)
                        pass

                    elif la_ == 5:
                        localctx = tsqlParser.Function_call_expressionContext(self, tsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1953
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 1954
                        self.match(tsqlParser.COLLATE)
                        self.state = 1955
                        self.r_id()
                        pass

             
                self.state = 1960
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,288,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Constant_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(tsqlParser.NULL, 0)

        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)


        def function_call(self):
            return self.getTypedRuleContext(tsqlParser.Function_callContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(tsqlParser.Constant_expressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_constant_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_expression" ):
                listener.enterConstant_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_expression" ):
                listener.exitConstant_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant_expression" ):
                return visitor.visitConstant_expression(self)
            else:
                return visitor.visitChildren(self)




    def constant_expression(self):

        localctx = tsqlParser.Constant_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_constant_expression)
        try:
            self.state = 1969
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.NULL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1961
                self.match(tsqlParser.NULL)
                pass
            elif token in [tsqlParser.DECIMAL, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1962
                self.constant()
                pass
            elif token in [tsqlParser.COALESCE, tsqlParser.CONVERT, tsqlParser.CURRENT_TIMESTAMP, tsqlParser.CURRENT_USER, tsqlParser.FORCESEEK, tsqlParser.IDENTITY, tsqlParser.IIF, tsqlParser.LEFT, tsqlParser.NEXT, tsqlParser.NULLIF, tsqlParser.NUMERIC, tsqlParser.RIGHT, tsqlParser.SESSION_USER, tsqlParser.SYSTEM_USER, tsqlParser.TRY_CAST, tsqlParser.TRY_CONVERT, tsqlParser.TRY_PARSE, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.BINARY_CHECKSUM, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DATEADD, tsqlParser.DATEDIFF, tsqlParser.DATENAME, tsqlParser.DATEPART, tsqlParser.DATETIMEOFFSETFROMPARTS, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MIN_ACTIVE_ROWVERSION, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARSE, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.STRING_SPLIT, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1963
                self.function_call()
                pass
            elif token in [tsqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1964
                self.match(tsqlParser.LOCAL_ID)
                pass
            elif token in [tsqlParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1965
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1966
                self.constant_expression()
                self.state = 1967
                self.match(tsqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubqueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery" ):
                return visitor.visitSubquery(self)
            else:
                return visitor.visitChildren(self)




    def subquery(self):

        localctx = tsqlParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_subquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1971
            self.select_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def common_table_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Common_table_expressionContext,i)


        def XMLNAMESPACES(self):
            return self.getToken(tsqlParser.XMLNAMESPACES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_with_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_expression" ):
                listener.enterWith_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_expression" ):
                listener.exitWith_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_expression" ):
                return visitor.visitWith_expression(self)
            else:
                return visitor.visitChildren(self)




    def with_expression(self):

        localctx = tsqlParser.With_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_with_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1973
            self.match(tsqlParser.WITH)
            self.state = 1976
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
            if la_ == 1:
                self.state = 1974
                self.match(tsqlParser.XMLNAMESPACES)
                self.state = 1975
                self.match(tsqlParser.COMMA)


            self.state = 1978
            self.common_table_expression()
            self.state = 1983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 1979
                self.match(tsqlParser.COMMA)
                self.state = 1980
                self.common_table_expression()
                self.state = 1985
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Common_table_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expression_name = None # R_idContext

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_common_table_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_expression" ):
                listener.enterCommon_table_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_expression" ):
                listener.exitCommon_table_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommon_table_expression" ):
                return visitor.visitCommon_table_expression(self)
            else:
                return visitor.visitChildren(self)




    def common_table_expression(self):

        localctx = tsqlParser.Common_table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_common_table_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1986
            localctx.expression_name = self.r_id()
            self.state = 1991
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.LR_BRACKET:
                self.state = 1987
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1988
                self.column_name_list()
                self.state = 1989
                self.match(tsqlParser.RR_BRACKET)


            self.state = 1993
            self.match(tsqlParser.AS)
            self.state = 1994
            self.match(tsqlParser.LR_BRACKET)
            self.state = 1995
            self.select_statement()
            self.state = 1996
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Update_elemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.udt_column_name = None # R_idContext
            self.method_name = None # R_idContext

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def full_column_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_column_nameContext,0)


        def assignment_operator(self):
            return self.getTypedRuleContext(tsqlParser.Assignment_operatorContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)


        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_update_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_elem" ):
                listener.enterUpdate_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_elem" ):
                listener.exitUpdate_elem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_elem" ):
                return visitor.visitUpdate_elem(self)
            else:
                return visitor.visitChildren(self)




    def update_elem(self):

        localctx = tsqlParser.Update_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_update_elem)
        try:
            self.state = 2014
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2000
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 1998
                    self.full_column_name()
                    pass
                elif token in [tsqlParser.LOCAL_ID]:
                    self.state = 1999
                    localctx.name = self.match(tsqlParser.LOCAL_ID)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2004
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.EQUAL]:
                    self.state = 2002
                    self.match(tsqlParser.EQUAL)
                    pass
                elif token in [tsqlParser.PLUS_ASSIGN, tsqlParser.MINUS_ASSIGN, tsqlParser.MULT_ASSIGN, tsqlParser.DIV_ASSIGN, tsqlParser.MOD_ASSIGN, tsqlParser.AND_ASSIGN, tsqlParser.XOR_ASSIGN, tsqlParser.OR_ASSIGN]:
                    self.state = 2003
                    self.assignment_operator()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2006
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2007
                localctx.udt_column_name = self.r_id()
                self.state = 2008
                self.match(tsqlParser.DOT)
                self.state = 2009
                localctx.method_name = self.r_id()
                self.state = 2010
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2011
                self.expression_list()
                self.state = 2012
                self.match(tsqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Search_condition_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Search_conditionContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_search_condition_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_condition_list" ):
                listener.enterSearch_condition_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_condition_list" ):
                listener.exitSearch_condition_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearch_condition_list" ):
                return visitor.visitSearch_condition_list(self)
            else:
                return visitor.visitChildren(self)




    def search_condition_list(self):

        localctx = tsqlParser.Search_condition_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_search_condition_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2016
            self.search_condition(0)
            self.state = 2021
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2017
                self.match(tsqlParser.COMMA)
                self.state = 2018
                self.search_condition(0)
                self.state = 2023
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Search_conditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_search_condition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Search_cond_orContext(Search_conditionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Search_conditionContext
            super().__init__(parser)
            self.left = None # Search_conditionContext
            self.op = None # Token
            self.right = None # Search_conditionContext
            self.copyFrom(ctx)

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Search_conditionContext,i)

        def OR(self):
            return self.getToken(tsqlParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_cond_or" ):
                listener.enterSearch_cond_or(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_cond_or" ):
                listener.exitSearch_cond_or(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearch_cond_or" ):
                return visitor.visitSearch_cond_or(self)
            else:
                return visitor.visitChildren(self)


    class Search_cond_predContext(Search_conditionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Search_conditionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(tsqlParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_cond_pred" ):
                listener.enterSearch_cond_pred(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_cond_pred" ):
                listener.exitSearch_cond_pred(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearch_cond_pred" ):
                return visitor.visitSearch_cond_pred(self)
            else:
                return visitor.visitChildren(self)


    class Search_cond_andContext(Search_conditionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Search_conditionContext
            super().__init__(parser)
            self.left = None # Search_conditionContext
            self.op = None # Token
            self.right = None # Search_conditionContext
            self.copyFrom(ctx)

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Search_conditionContext,i)

        def AND(self):
            return self.getToken(tsqlParser.AND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_cond_and" ):
                listener.enterSearch_cond_and(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_cond_and" ):
                listener.exitSearch_cond_and(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearch_cond_and" ):
                return visitor.visitSearch_cond_and(self)
            else:
                return visitor.visitChildren(self)



    def search_condition(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = tsqlParser.Search_conditionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 180
        self.enterRecursionRule(localctx, 180, self.RULE_search_condition, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = tsqlParser.Search_cond_predContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 2025
            self.predicate()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2035
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,298,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2033
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
                    if la_ == 1:
                        localctx = tsqlParser.Search_cond_andContext(self, tsqlParser.Search_conditionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_search_condition)
                        self.state = 2027
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2028
                        localctx.op = self.match(tsqlParser.AND)
                        self.state = 2029
                        localctx.right = self.search_condition(4)
                        pass

                    elif la_ == 2:
                        localctx = tsqlParser.Search_cond_orContext(self, tsqlParser.Search_conditionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_search_condition)
                        self.state = 2030
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2031
                        localctx.op = self.match(tsqlParser.OR)
                        self.state = 2032
                        localctx.right = self.search_condition(3)
                        pass

             
                self.state = 2037
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,298,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class PredicateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_predicate

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Binary_in_expressionContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def IN(self):
            return self.getToken(tsqlParser.IN, 0)
        def subquery(self):
            return self.getTypedRuleContext(tsqlParser.SubqueryContext,0)

        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_in_expression" ):
                listener.enterBinary_in_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_in_expression" ):
                listener.exitBinary_in_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinary_in_expression" ):
                return visitor.visitBinary_in_expression(self)
            else:
                return visitor.visitChildren(self)


    class Unary_operator_expression2Context(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.op = None # Token
            self.expr = None # SubqueryContext
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)
        def subquery(self):
            return self.getTypedRuleContext(tsqlParser.SubqueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator_expression2" ):
                listener.enterUnary_operator_expression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator_expression2" ):
                listener.exitUnary_operator_expression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnary_operator_expression2" ):
                return visitor.visitUnary_operator_expression2(self)
            else:
                return visitor.visitChildren(self)


    class Binary_mod_expressionContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Token
            self._expression = None # ExpressionContext
            self.right = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def AND(self):
            return self.getToken(tsqlParser.AND, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)

        def BETWEEN(self):
            return self.getToken(tsqlParser.BETWEEN, 0)
        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)
        def LIKE(self):
            return self.getToken(tsqlParser.LIKE, 0)
        def ESCAPE(self):
            return self.getToken(tsqlParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_mod_expression" ):
                listener.enterBinary_mod_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_mod_expression" ):
                listener.exitBinary_mod_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinary_mod_expression" ):
                return visitor.visitBinary_mod_expression(self)
            else:
                return visitor.visitChildren(self)


    class Unary_operator_expression3Context(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.op = None # Token
            self.expr = None # PredicateContext
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)
        def predicate(self):
            return self.getTypedRuleContext(tsqlParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator_expression3" ):
                listener.enterUnary_operator_expression3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator_expression3" ):
                listener.exitUnary_operator_expression3(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnary_operator_expression3" ):
                return visitor.visitUnary_operator_expression3(self)
            else:
                return visitor.visitChildren(self)


    class Bracket_search_expressionContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracket_search_expression" ):
                listener.enterBracket_search_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracket_search_expression" ):
                listener.exitBracket_search_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBracket_search_expression" ):
                return visitor.visitBracket_search_expression(self)
            else:
                return visitor.visitChildren(self)


    class Sublink_expressionContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.test_expr = None # ExpressionContext
            self.op = None # Comparison_operatorContext
            self.pref = None # Token
            self.copyFrom(ctx)

        def subquery(self):
            return self.getTypedRuleContext(tsqlParser.SubqueryContext,0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def comparison_operator(self):
            return self.getTypedRuleContext(tsqlParser.Comparison_operatorContext,0)

        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)
        def SOME(self):
            return self.getToken(tsqlParser.SOME, 0)
        def ANY(self):
            return self.getToken(tsqlParser.ANY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSublink_expression" ):
                listener.enterSublink_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSublink_expression" ):
                listener.exitSublink_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSublink_expression" ):
                return visitor.visitSublink_expression(self)
            else:
                return visitor.visitChildren(self)


    class Binary_operator_expression2Context(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Comparison_operatorContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)

        def comparison_operator(self):
            return self.getTypedRuleContext(tsqlParser.Comparison_operatorContext,0)

        def IS(self):
            return self.getToken(tsqlParser.IS, 0)
        def null_notnull(self):
            return self.getTypedRuleContext(tsqlParser.Null_notnullContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_operator_expression2" ):
                listener.enterBinary_operator_expression2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_operator_expression2" ):
                listener.exitBinary_operator_expression2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinary_operator_expression2" ):
                return visitor.visitBinary_operator_expression2(self)
            else:
                return visitor.visitChildren(self)


    class Decimal_expressionContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimal_expression" ):
                listener.enterDecimal_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimal_expression" ):
                listener.exitDecimal_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimal_expression" ):
                return visitor.visitDecimal_expression(self)
            else:
                return visitor.visitChildren(self)



    def predicate(self):

        localctx = tsqlParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.state = 2096
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
            if la_ == 1:
                localctx = tsqlParser.Unary_operator_expression3Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2038
                localctx.op = self.match(tsqlParser.NOT)
                self.state = 2039
                localctx.expr = self.predicate()
                pass

            elif la_ == 2:
                localctx = tsqlParser.Unary_operator_expression2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2040
                localctx.op = self.match(tsqlParser.EXISTS)
                self.state = 2041
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2042
                localctx.expr = self.subquery()
                self.state = 2043
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                localctx = tsqlParser.Binary_operator_expression2Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2045
                localctx.left = self.expression(0)
                self.state = 2046
                localctx.op = self.comparison_operator()
                self.state = 2047
                localctx.right = self.expression(0)
                pass

            elif la_ == 4:
                localctx = tsqlParser.Sublink_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2049
                localctx.test_expr = self.expression(0)
                self.state = 2050
                localctx.op = self.comparison_operator()
                self.state = 2051
                localctx.pref = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ALL or _la==tsqlParser.ANY or _la==tsqlParser.SOME):
                    localctx.pref = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2052
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2053
                self.subquery()
                self.state = 2054
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 5:
                localctx = tsqlParser.Binary_mod_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2056
                localctx.left = self.expression(0)
                self.state = 2058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.NOT:
                    self.state = 2057
                    self.match(tsqlParser.NOT)


                self.state = 2060
                localctx.op = self.match(tsqlParser.BETWEEN)
                self.state = 2061
                localctx._expression = self.expression(0)
                localctx.right.append(localctx._expression)
                self.state = 2062
                self.match(tsqlParser.AND)
                self.state = 2063
                localctx._expression = self.expression(0)
                localctx.right.append(localctx._expression)
                pass

            elif la_ == 6:
                localctx = tsqlParser.Binary_in_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2065
                localctx.left = self.expression(0)
                self.state = 2067
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.NOT:
                    self.state = 2066
                    self.match(tsqlParser.NOT)


                self.state = 2069
                localctx.op = self.match(tsqlParser.IN)
                self.state = 2070
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2073
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
                if la_ == 1:
                    self.state = 2071
                    self.subquery()
                    pass

                elif la_ == 2:
                    self.state = 2072
                    self.expression_list()
                    pass


                self.state = 2075
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 7:
                localctx = tsqlParser.Binary_mod_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2077
                localctx.left = self.expression(0)
                self.state = 2079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.NOT:
                    self.state = 2078
                    self.match(tsqlParser.NOT)


                self.state = 2081
                localctx.op = self.match(tsqlParser.LIKE)
                self.state = 2082
                localctx._expression = self.expression(0)
                localctx.right.append(localctx._expression)
                self.state = 2085
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
                if la_ == 1:
                    self.state = 2083
                    self.match(tsqlParser.ESCAPE)
                    self.state = 2084
                    localctx._expression = self.expression(0)
                    localctx.right.append(localctx._expression)


                pass

            elif la_ == 8:
                localctx = tsqlParser.Binary_operator_expression2Context(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2087
                localctx.left = self.expression(0)
                self.state = 2088
                localctx.op = self.match(tsqlParser.IS)
                self.state = 2089
                localctx.right = self.null_notnull()
                pass

            elif la_ == 9:
                localctx = tsqlParser.Bracket_search_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 2091
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2092
                self.search_condition(0)
                self.state = 2093
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = tsqlParser.Decimal_expressionContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 2095
                self.match(tsqlParser.DECIMAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_query_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Bracket_query_expressionContext(Query_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Query_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query_expression(self):
            return self.getTypedRuleContext(tsqlParser.Query_expressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracket_query_expression" ):
                listener.enterBracket_query_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracket_query_expression" ):
                listener.exitBracket_query_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBracket_query_expression" ):
                return visitor.visitBracket_query_expression(self)
            else:
                return visitor.visitChildren(self)


    class Query_specification_expressionContext(Query_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Query_expressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query_specification(self):
            return self.getTypedRuleContext(tsqlParser.Query_specificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_specification_expression" ):
                listener.enterQuery_specification_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_specification_expression" ):
                listener.exitQuery_specification_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_specification_expression" ):
                return visitor.visitQuery_specification_expression(self)
            else:
                return visitor.visitChildren(self)


    class Union_query_expressionContext(Query_expressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Query_expressionContext
            super().__init__(parser)
            self.left = None # Query_expressionContext
            self.op = None # Union_opContext
            self.right = None # Query_expressionContext
            self.copyFrom(ctx)

        def query_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Query_expressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Query_expressionContext,i)

        def union_op(self):
            return self.getTypedRuleContext(tsqlParser.Union_opContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnion_query_expression" ):
                listener.enterUnion_query_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnion_query_expression" ):
                listener.exitUnion_query_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnion_query_expression" ):
                return visitor.visitUnion_query_expression(self)
            else:
                return visitor.visitChildren(self)



    def query_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = tsqlParser.Query_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 184
        self.enterRecursionRule(localctx, 184, self.RULE_query_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2104
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.LR_BRACKET]:
                localctx = tsqlParser.Bracket_query_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2099
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2100
                self.query_expression(0)
                self.state = 2101
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [tsqlParser.SELECT]:
                localctx = tsqlParser.Query_specification_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2103
                self.query_specification()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2112
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,306,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = tsqlParser.Union_query_expressionContext(self, tsqlParser.Query_expressionContext(self, _parentctx, _parentState))
                    localctx.left = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_query_expression)
                    self.state = 2106
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 2107
                    localctx.op = self.union_op()
                    self.state = 2108
                    localctx.right = self.query_expression(3) 
                self.state = 2114
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,306,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Union_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(tsqlParser.UNION, 0)

        def EXCEPT(self):
            return self.getToken(tsqlParser.EXCEPT, 0)

        def INTERSECT(self):
            return self.getToken(tsqlParser.INTERSECT, 0)

        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_union_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnion_op" ):
                listener.enterUnion_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnion_op" ):
                listener.exitUnion_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnion_op" ):
                return visitor.visitUnion_op(self)
            else:
                return visitor.visitChildren(self)




    def union_op(self):

        localctx = tsqlParser.Union_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_union_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2121
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.UNION]:
                self.state = 2115
                self.match(tsqlParser.UNION)
                self.state = 2117
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ALL:
                    self.state = 2116
                    self.match(tsqlParser.ALL)


                pass
            elif token in [tsqlParser.EXCEPT]:
                self.state = 2119
                self.match(tsqlParser.EXCEPT)
                pass
            elif token in [tsqlParser.INTERSECT]:
                self.state = 2120
                self.match(tsqlParser.INTERSECT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_specificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pref = None # Token
            self.where = None # Search_conditionContext
            self.having = None # Search_conditionContext

        def SELECT(self):
            return self.getToken(tsqlParser.SELECT, 0)

        def select_list(self):
            return self.getTypedRuleContext(tsqlParser.Select_listContext,0)


        def top_clause(self):
            return self.getTypedRuleContext(tsqlParser.Top_clauseContext,0)


        def INTO(self):
            return self.getToken(tsqlParser.INTO, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def FROM(self):
            return self.getToken(tsqlParser.FROM, 0)

        def table_sources(self):
            return self.getTypedRuleContext(tsqlParser.Table_sourcesContext,0)


        def WHERE(self):
            return self.getToken(tsqlParser.WHERE, 0)

        def GROUP(self):
            return self.getToken(tsqlParser.GROUP, 0)

        def BY(self):
            return self.getToken(tsqlParser.BY, 0)

        def group_by_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Group_by_itemContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Group_by_itemContext,i)


        def group_by_grouping_sets(self):
            return self.getTypedRuleContext(tsqlParser.Group_by_grouping_setsContext,0)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def HAVING(self):
            return self.getToken(tsqlParser.HAVING, 0)

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Search_conditionContext,i)


        def CUBE(self):
            return self.getToken(tsqlParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(tsqlParser.ROLLUP, 0)

        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(tsqlParser.DISTINCT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_query_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_specification" ):
                listener.enterQuery_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_specification" ):
                listener.exitQuery_specification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_specification" ):
                return visitor.visitQuery_specification(self)
            else:
                return visitor.visitChildren(self)




    def query_specification(self):

        localctx = tsqlParser.Query_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_query_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2123
            self.match(tsqlParser.SELECT)
            self.state = 2125
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ALL or _la==tsqlParser.DISTINCT:
                self.state = 2124
                localctx.pref = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ALL or _la==tsqlParser.DISTINCT):
                    localctx.pref = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2128
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.TOP:
                self.state = 2127
                self.top_clause()


            self.state = 2130
            self.select_list()
            self.state = 2133
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
            if la_ == 1:
                self.state = 2131
                self.match(tsqlParser.INTO)
                self.state = 2132
                self.table_name()


            self.state = 2137
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,312,self._ctx)
            if la_ == 1:
                self.state = 2135
                self.match(tsqlParser.FROM)
                self.state = 2136
                self.table_sources()


            self.state = 2141
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
            if la_ == 1:
                self.state = 2139
                self.match(tsqlParser.WHERE)
                self.state = 2140
                localctx.where = self.search_condition(0)


            self.state = 2153
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,315,self._ctx)
            if la_ == 1:
                self.state = 2143
                self.match(tsqlParser.GROUP)
                self.state = 2144
                self.match(tsqlParser.BY)
                self.state = 2145
                self.group_by_item()
                self.state = 2150
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,314,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2146
                        self.match(tsqlParser.COMMA)
                        self.state = 2147
                        self.group_by_item() 
                    self.state = 2152
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,314,self._ctx)



            self.state = 2156
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,316,self._ctx)
            if la_ == 1:
                self.state = 2155
                self.group_by_grouping_sets()


            self.state = 2160
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,317,self._ctx)
            if la_ == 1:
                self.state = 2158
                self.match(tsqlParser.WITH)
                self.state = 2159
                _la = self._input.LA(1)
                if not(_la==tsqlParser.CUBE or _la==tsqlParser.ROLLUP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2164
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,318,self._ctx)
            if la_ == 1:
                self.state = 2162
                self.match(tsqlParser.HAVING)
                self.state = 2163
                localctx.having = self.search_condition(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_by_grouping_setsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(tsqlParser.GROUP, 0)

        def BY(self):
            return self.getToken(tsqlParser.BY, 0)

        def GROUPING(self):
            return self.getToken(tsqlParser.GROUPING, 0)

        def SETS(self):
            return self.getToken(tsqlParser.SETS, 0)

        def grouping_set(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Grouping_setContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Grouping_setContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_group_by_grouping_sets

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_grouping_sets" ):
                listener.enterGroup_by_grouping_sets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_grouping_sets" ):
                listener.exitGroup_by_grouping_sets(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_by_grouping_sets" ):
                return visitor.visitGroup_by_grouping_sets(self)
            else:
                return visitor.visitChildren(self)




    def group_by_grouping_sets(self):

        localctx = tsqlParser.Group_by_grouping_setsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_group_by_grouping_sets)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2166
            self.match(tsqlParser.GROUP)
            self.state = 2167
            self.match(tsqlParser.BY)
            self.state = 2168
            self.match(tsqlParser.GROUPING)
            self.state = 2169
            self.match(tsqlParser.SETS)
            self.state = 2170
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2171
            self.grouping_set()
            self.state = 2176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2172
                self.match(tsqlParser.COMMA)
                self.state = 2173
                self.grouping_set()
                self.state = 2178
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2179
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Grouping_setContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group_by_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Group_by_itemContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Group_by_itemContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_grouping_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_set" ):
                listener.enterGrouping_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_set" ):
                listener.exitGrouping_set(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrouping_set" ):
                return visitor.visitGrouping_set(self)
            else:
                return visitor.visitChildren(self)




    def grouping_set(self):

        localctx = tsqlParser.Grouping_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_grouping_set)
        self._la = 0 # Token type
        try:
            self.state = 2195
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,321,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2181
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2182
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2183
                self.group_by_item()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2184
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2185
                self.group_by_item()
                self.state = 2190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 2186
                    self.match(tsqlParser.COMMA)
                    self.state = 2187
                    self.group_by_item()
                    self.state = 2192
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2193
                self.match(tsqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Top_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(tsqlParser.TOP, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def PERCENT(self):
            return self.getToken(tsqlParser.PERCENT, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def TIES(self):
            return self.getToken(tsqlParser.TIES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_top_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_clause" ):
                listener.enterTop_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_clause" ):
                listener.exitTop_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTop_clause" ):
                return visitor.visitTop_clause(self)
            else:
                return visitor.visitChildren(self)




    def top_clause(self):

        localctx = tsqlParser.Top_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_top_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2197
            self.match(tsqlParser.TOP)
            self.state = 2198
            self.expression(0)
            self.state = 2200
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.PERCENT:
                self.state = 2199
                self.match(tsqlParser.PERCENT)


            self.state = 2204
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 2202
                self.match(tsqlParser.WITH)
                self.state = 2203
                self.match(tsqlParser.TIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Top_clause_dmContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(tsqlParser.TOP, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def PERCENT(self):
            return self.getToken(tsqlParser.PERCENT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_top_clause_dm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_clause_dm" ):
                listener.enterTop_clause_dm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_clause_dm" ):
                listener.exitTop_clause_dm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTop_clause_dm" ):
                return visitor.visitTop_clause_dm(self)
            else:
                return visitor.visitChildren(self)




    def top_clause_dm(self):

        localctx = tsqlParser.Top_clause_dmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_top_clause_dm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2206
            self.match(tsqlParser.TOP)
            self.state = 2207
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2208
            self.expression(0)
            self.state = 2209
            self.match(tsqlParser.RR_BRACKET)
            self.state = 2211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.PERCENT:
                self.state = 2210
                self.match(tsqlParser.PERCENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.offset = None # ExpressionContext

        def ORDER(self):
            return self.getToken(tsqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(tsqlParser.BY, 0)

        def order_by_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Order_by_expressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Order_by_expressionContext,i)


        def OFFSET(self):
            return self.getToken(tsqlParser.OFFSET, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def ROW(self):
            return self.getToken(tsqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(tsqlParser.ROWS, 0)

        def fetch_expression(self):
            return self.getTypedRuleContext(tsqlParser.Fetch_expressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_clause" ):
                listener.enterOrder_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_clause" ):
                listener.exitOrder_by_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrder_by_clause" ):
                return visitor.visitOrder_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def order_by_clause(self):

        localctx = tsqlParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_order_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2213
            self.match(tsqlParser.ORDER)
            self.state = 2214
            self.match(tsqlParser.BY)
            self.state = 2215
            self.order_by_expression()
            self.state = 2220
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,325,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2216
                    self.match(tsqlParser.COMMA)
                    self.state = 2217
                    self.order_by_expression() 
                self.state = 2222
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,325,self._ctx)

            self.state = 2229
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,327,self._ctx)
            if la_ == 1:
                self.state = 2223
                self.match(tsqlParser.OFFSET)
                self.state = 2224
                localctx.offset = self.expression(0)
                self.state = 2225
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ROW or _la==tsqlParser.ROWS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2227
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
                if la_ == 1:
                    self.state = 2226
                    self.fetch_expression()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fetch_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FETCH(self):
            return self.getToken(tsqlParser.FETCH, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def ONLY(self):
            return self.getToken(tsqlParser.ONLY, 0)

        def FIRST(self):
            return self.getToken(tsqlParser.FIRST, 0)

        def NEXT(self):
            return self.getToken(tsqlParser.NEXT, 0)

        def ROW(self):
            return self.getToken(tsqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(tsqlParser.ROWS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_fetch_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetch_expression" ):
                listener.enterFetch_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetch_expression" ):
                listener.exitFetch_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFetch_expression" ):
                return visitor.visitFetch_expression(self)
            else:
                return visitor.visitChildren(self)




    def fetch_expression(self):

        localctx = tsqlParser.Fetch_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_fetch_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2231
            self.match(tsqlParser.FETCH)
            self.state = 2232
            _la = self._input.LA(1)
            if not(_la==tsqlParser.NEXT or _la==tsqlParser.FIRST):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2233
            self.expression(0)
            self.state = 2234
            _la = self._input.LA(1)
            if not(_la==tsqlParser.ROW or _la==tsqlParser.ROWS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2235
            self.match(tsqlParser.ONLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def BROWSE(self):
            return self.getToken(tsqlParser.BROWSE, 0)

        def XML(self):
            return self.getToken(tsqlParser.XML, 0)

        def AUTO(self):
            return self.getToken(tsqlParser.AUTO, 0)

        def xml_common_directives(self):
            return self.getTypedRuleContext(tsqlParser.Xml_common_directivesContext,0)


        def PATH(self):
            return self.getToken(tsqlParser.PATH, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_for_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_clause" ):
                listener.enterFor_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_clause" ):
                listener.exitFor_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_clause" ):
                return visitor.visitFor_clause(self)
            else:
                return visitor.visitChildren(self)




    def for_clause(self):

        localctx = tsqlParser.For_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_for_clause)
        try:
            self.state = 2256
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2237
                self.match(tsqlParser.FOR)
                self.state = 2238
                self.match(tsqlParser.BROWSE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2239
                self.match(tsqlParser.FOR)
                self.state = 2240
                self.match(tsqlParser.XML)
                self.state = 2241
                self.match(tsqlParser.AUTO)
                self.state = 2243
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
                if la_ == 1:
                    self.state = 2242
                    self.xml_common_directives()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2245
                self.match(tsqlParser.FOR)
                self.state = 2246
                self.match(tsqlParser.XML)
                self.state = 2247
                self.match(tsqlParser.PATH)
                self.state = 2251
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,329,self._ctx)
                if la_ == 1:
                    self.state = 2248
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 2249
                    self.match(tsqlParser.STRING)
                    self.state = 2250
                    self.match(tsqlParser.RR_BRACKET)


                self.state = 2254
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,330,self._ctx)
                if la_ == 1:
                    self.state = 2253
                    self.xml_common_directives()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_common_directivesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY(self):
            return self.getToken(tsqlParser.BINARY, 0)

        def BASE64(self):
            return self.getToken(tsqlParser.BASE64, 0)

        def TYPE(self):
            return self.getToken(tsqlParser.TYPE, 0)

        def ROOT(self):
            return self.getToken(tsqlParser.ROOT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_xml_common_directives

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_common_directives" ):
                listener.enterXml_common_directives(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_common_directives" ):
                listener.exitXml_common_directives(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_common_directives" ):
                return visitor.visitXml_common_directives(self)
            else:
                return visitor.visitChildren(self)




    def xml_common_directives(self):

        localctx = tsqlParser.Xml_common_directivesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_xml_common_directives)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2258
            self.match(tsqlParser.COMMA)
            self.state = 2263
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.BINARY]:
                self.state = 2259
                self.match(tsqlParser.BINARY)
                self.state = 2260
                self.match(tsqlParser.BASE64)
                pass
            elif token in [tsqlParser.TYPE]:
                self.state = 2261
                self.match(tsqlParser.TYPE)
                pass
            elif token in [tsqlParser.ROOT]:
                self.state = 2262
                self.match(tsqlParser.ROOT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_by_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.direction = None # Token

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(tsqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(tsqlParser.DESC, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_order_by_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_expression" ):
                listener.enterOrder_by_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_expression" ):
                listener.exitOrder_by_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrder_by_expression" ):
                return visitor.visitOrder_by_expression(self)
            else:
                return visitor.visitChildren(self)




    def order_by_expression(self):

        localctx = tsqlParser.Order_by_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_order_by_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2265
            self.expression(0)
            self.state = 2267
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,333,self._ctx)
            if la_ == 1:
                self.state = 2266
                localctx.direction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ASC or _la==tsqlParser.DESC):
                    localctx.direction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_by_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_group_by_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_item" ):
                listener.enterGroup_by_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_item" ):
                listener.exitGroup_by_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_by_item" ):
                return visitor.visitGroup_by_item(self)
            else:
                return visitor.visitChildren(self)




    def group_by_item(self):

        localctx = tsqlParser.Group_by_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_group_by_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2269
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Option_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTION(self):
            return self.getToken(tsqlParser.OPTION, 0)

        def option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.OptionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.OptionContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_option_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOption_clause" ):
                listener.enterOption_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOption_clause" ):
                listener.exitOption_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOption_clause" ):
                return visitor.visitOption_clause(self)
            else:
                return visitor.visitChildren(self)




    def option_clause(self):

        localctx = tsqlParser.Option_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_option_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2271
            self.match(tsqlParser.OPTION)
            self.state = 2272
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2273
            self.option()
            self.state = 2278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2274
                self.match(tsqlParser.COMMA)
                self.state = 2275
                self.option()
                self.state = 2280
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2281
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.number_rows = None # Token
            self.number_of_processors = None # Token
            self.number_recursion = None # Token

        def FAST(self):
            return self.getToken(tsqlParser.FAST, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def GROUP(self):
            return self.getToken(tsqlParser.GROUP, 0)

        def HASH(self):
            return self.getToken(tsqlParser.HASH, 0)

        def ORDER(self):
            return self.getToken(tsqlParser.ORDER, 0)

        def UNION(self):
            return self.getToken(tsqlParser.UNION, 0)

        def MERGE(self):
            return self.getToken(tsqlParser.MERGE, 0)

        def CONCAT(self):
            return self.getToken(tsqlParser.CONCAT, 0)

        def JOIN(self):
            return self.getToken(tsqlParser.JOIN, 0)

        def LOOP(self):
            return self.getToken(tsqlParser.LOOP, 0)

        def EXPAND(self):
            return self.getToken(tsqlParser.EXPAND, 0)

        def VIEWS(self):
            return self.getToken(tsqlParser.VIEWS, 0)

        def FORCE(self):
            return self.getToken(tsqlParser.FORCE, 0)

        def IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX(self):
            return self.getToken(tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0)

        def KEEP(self):
            return self.getToken(tsqlParser.KEEP, 0)

        def PLAN(self):
            return self.getToken(tsqlParser.PLAN, 0)

        def KEEPFIXED(self):
            return self.getToken(tsqlParser.KEEPFIXED, 0)

        def MAXDOP(self):
            return self.getToken(tsqlParser.MAXDOP, 0)

        def MAXRECURSION(self):
            return self.getToken(tsqlParser.MAXRECURSION, 0)

        def OPTIMIZE(self):
            return self.getToken(tsqlParser.OPTIMIZE, 0)

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def optimize_for_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Optimize_for_argContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Optimize_for_argContext,i)


        def UNKNOWN(self):
            return self.getToken(tsqlParser.UNKNOWN, 0)

        def PARAMETERIZATION(self):
            return self.getToken(tsqlParser.PARAMETERIZATION, 0)

        def SIMPLE(self):
            return self.getToken(tsqlParser.SIMPLE, 0)

        def FORCED(self):
            return self.getToken(tsqlParser.FORCED, 0)

        def RECOMPILE(self):
            return self.getToken(tsqlParser.RECOMPILE, 0)

        def ROBUST(self):
            return self.getToken(tsqlParser.ROBUST, 0)

        def USE(self):
            return self.getToken(tsqlParser.USE, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOption" ):
                listener.enterOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOption" ):
                listener.exitOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOption" ):
                return visitor.visitOption(self)
            else:
                return visitor.visitChildren(self)




    def option(self):

        localctx = tsqlParser.OptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_option)
        self._la = 0 # Token type
        try:
            self.state = 2328
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,336,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2283
                self.match(tsqlParser.FAST)
                self.state = 2284
                localctx.number_rows = self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2285
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ORDER or _la==tsqlParser.HASH):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2286
                self.match(tsqlParser.GROUP)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2287
                _la = self._input.LA(1)
                if not(_la==tsqlParser.MERGE or _la==tsqlParser.CONCAT or _la==tsqlParser.HASH):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2288
                self.match(tsqlParser.UNION)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2289
                _la = self._input.LA(1)
                if not(_la==tsqlParser.MERGE or _la==tsqlParser.HASH or _la==tsqlParser.LOOP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2290
                self.match(tsqlParser.JOIN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2291
                self.match(tsqlParser.EXPAND)
                self.state = 2292
                self.match(tsqlParser.VIEWS)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2293
                self.match(tsqlParser.FORCE)
                self.state = 2294
                self.match(tsqlParser.ORDER)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2295
                self.match(tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2296
                self.match(tsqlParser.KEEP)
                self.state = 2297
                self.match(tsqlParser.PLAN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2298
                self.match(tsqlParser.KEEPFIXED)
                self.state = 2299
                self.match(tsqlParser.PLAN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2300
                self.match(tsqlParser.MAXDOP)
                self.state = 2301
                localctx.number_of_processors = self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2302
                self.match(tsqlParser.MAXRECURSION)
                self.state = 2303
                localctx.number_recursion = self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2304
                self.match(tsqlParser.OPTIMIZE)
                self.state = 2305
                self.match(tsqlParser.FOR)
                self.state = 2306
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2307
                self.optimize_for_arg()
                self.state = 2312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 2308
                    self.match(tsqlParser.COMMA)
                    self.state = 2309
                    self.optimize_for_arg()
                    self.state = 2314
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2315
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2317
                self.match(tsqlParser.OPTIMIZE)
                self.state = 2318
                self.match(tsqlParser.FOR)
                self.state = 2319
                self.match(tsqlParser.UNKNOWN)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2320
                self.match(tsqlParser.PARAMETERIZATION)
                self.state = 2321
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FORCED or _la==tsqlParser.SIMPLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2322
                self.match(tsqlParser.RECOMPILE)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2323
                self.match(tsqlParser.ROBUST)
                self.state = 2324
                self.match(tsqlParser.PLAN)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2325
                self.match(tsqlParser.USE)
                self.state = 2326
                self.match(tsqlParser.PLAN)
                self.state = 2327
                self.match(tsqlParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Optimize_for_argContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def UNKNOWN(self):
            return self.getToken(tsqlParser.UNKNOWN, 0)

        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_optimize_for_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptimize_for_arg" ):
                listener.enterOptimize_for_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptimize_for_arg" ):
                listener.exitOptimize_for_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptimize_for_arg" ):
                return visitor.visitOptimize_for_arg(self)
            else:
                return visitor.visitChildren(self)




    def optimize_for_arg(self):

        localctx = tsqlParser.Optimize_for_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_optimize_for_arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2330
            self.match(tsqlParser.LOCAL_ID)
            self.state = 2334
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.UNKNOWN]:
                self.state = 2331
                self.match(tsqlParser.UNKNOWN)
                pass
            elif token in [tsqlParser.EQUAL]:
                self.state = 2332
                self.match(tsqlParser.EQUAL)
                self.state = 2333
                self.constant()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_list_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Select_list_elemContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Select_list_elemContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_select_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list" ):
                listener.enterSelect_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list" ):
                listener.exitSelect_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_list" ):
                return visitor.visitSelect_list(self)
            else:
                return visitor.visitChildren(self)




    def select_list(self):

        localctx = tsqlParser.Select_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_select_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2336
            self.select_list_elem()
            self.state = 2341
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,338,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2337
                    self.match(tsqlParser.COMMA)
                    self.state = 2338
                    self.select_list_elem() 
                self.state = 2343
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,338,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_list_elemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.alias = None # Column_aliasContext

        def a_star(self):
            return self.getTypedRuleContext(tsqlParser.A_starContext,0)


        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def IDENTITY(self):
            return self.getToken(tsqlParser.IDENTITY, 0)

        def ROWGUID(self):
            return self.getToken(tsqlParser.ROWGUID, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(tsqlParser.Column_aliasContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_select_list_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list_elem" ):
                listener.enterSelect_list_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list_elem" ):
                listener.exitSelect_list_elem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_list_elem" ):
                return visitor.visitSelect_list_elem(self)
            else:
                return visitor.visitChildren(self)




    def select_list_elem(self):

        localctx = tsqlParser.Select_list_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_select_list_elem)
        self._la = 0 # Token type
        try:
            self.state = 2365
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,343,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (tsqlParser.FORCESEEK - 73)) | (1 << (tsqlParser.NEXT - 73)) | (1 << (tsqlParser.NUMERIC - 73)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (tsqlParser.VALUE - 192)) | (1 << (tsqlParser.ABSOLUTE - 192)) | (1 << (tsqlParser.APPLY - 192)) | (1 << (tsqlParser.AUTO - 192)) | (1 << (tsqlParser.AVG - 192)) | (1 << (tsqlParser.BASE64 - 192)) | (1 << (tsqlParser.CALLER - 192)) | (1 << (tsqlParser.CAST - 192)) | (1 << (tsqlParser.CATCH - 192)) | (1 << (tsqlParser.CHECKSUM_AGG - 192)) | (1 << (tsqlParser.COMMITTED - 192)) | (1 << (tsqlParser.CONCAT - 192)) | (1 << (tsqlParser.CONTROL - 192)) | (1 << (tsqlParser.COOKIE - 192)) | (1 << (tsqlParser.COUNT - 192)) | (1 << (tsqlParser.COUNT_BIG - 192)) | (1 << (tsqlParser.DATE - 192)) | (1 << (tsqlParser.DELAY - 192)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (tsqlParser.DELETED - 257)) | (1 << (tsqlParser.DENSE_RANK - 257)) | (1 << (tsqlParser.DISABLE - 257)) | (1 << (tsqlParser.DYNAMIC - 257)) | (1 << (tsqlParser.ENCRYPTION - 257)) | (1 << (tsqlParser.EXPAND - 257)) | (1 << (tsqlParser.FAST - 257)) | (1 << (tsqlParser.FAST_FORWARD - 257)) | (1 << (tsqlParser.FIRST - 257)) | (1 << (tsqlParser.FIRST_VALUE - 257)) | (1 << (tsqlParser.FOLLOWING - 257)) | (1 << (tsqlParser.FORCE - 257)) | (1 << (tsqlParser.FORCED - 257)) | (1 << (tsqlParser.FORWARD_ONLY - 257)) | (1 << (tsqlParser.FULLSCAN - 257)) | (1 << (tsqlParser.GLOBAL - 257)) | (1 << (tsqlParser.GO - 257)) | (1 << (tsqlParser.GROUPING - 257)) | (1 << (tsqlParser.GROUPING_ID - 257)) | (1 << (tsqlParser.HASH - 257)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 257)) | (1 << (tsqlParser.IMPERSONATE - 257)) | (1 << (tsqlParser.INSENSITIVE - 257)) | (1 << (tsqlParser.INSERTED - 257)) | (1 << (tsqlParser.ISOLATION - 257)) | (1 << (tsqlParser.IO - 257)) | (1 << (tsqlParser.KEEP - 257)) | (1 << (tsqlParser.KEEPFIXED - 257)) | (1 << (tsqlParser.KEYSET - 257)) | (1 << (tsqlParser.LAG - 257)) | (1 << (tsqlParser.LAST - 257)) | (1 << (tsqlParser.LAST_VALUE - 257)) | (1 << (tsqlParser.LEAD - 257)) | (1 << (tsqlParser.LEVEL - 257)) | (1 << (tsqlParser.LOCAL - 257)) | (1 << (tsqlParser.LOCK_ESCALATION - 257)) | (1 << (tsqlParser.LOGIN - 257)) | (1 << (tsqlParser.LOOP - 257)) | (1 << (tsqlParser.MARK - 257)) | (1 << (tsqlParser.MAX - 257)) | (1 << (tsqlParser.MAXDOP - 257)) | (1 << (tsqlParser.MAXRECURSION - 257)) | (1 << (tsqlParser.MIN - 257)))) != 0) or ((((_la - 324)) & ~0x3f) == 0 and ((1 << (_la - 324)) & ((1 << (tsqlParser.MODIFY - 324)) | (1 << (tsqlParser.NAME - 324)) | (1 << (tsqlParser.NOCOUNT - 324)) | (1 << (tsqlParser.NOEXPAND - 324)) | (1 << (tsqlParser.NORECOMPUTE - 324)) | (1 << (tsqlParser.NTILE - 324)) | (1 << (tsqlParser.NUMBER - 324)) | (1 << (tsqlParser.OFFSET - 324)) | (1 << (tsqlParser.ONLINE - 324)) | (1 << (tsqlParser.ONLY - 324)) | (1 << (tsqlParser.OPTIMISTIC - 324)) | (1 << (tsqlParser.OPTIMIZE - 324)) | (1 << (tsqlParser.OUT - 324)) | (1 << (tsqlParser.OUTPUT - 324)) | (1 << (tsqlParser.OWNER - 324)) | (1 << (tsqlParser.PARAMETERIZATION - 324)) | (1 << (tsqlParser.PARTITION - 324)) | (1 << (tsqlParser.PATH - 324)) | (1 << (tsqlParser.PRECEDING - 324)) | (1 << (tsqlParser.PRIOR - 324)) | (1 << (tsqlParser.PRIVILEGES - 324)) | (1 << (tsqlParser.RANGE - 324)) | (1 << (tsqlParser.RANK - 324)) | (1 << (tsqlParser.READONLY - 324)) | (1 << (tsqlParser.READ_ONLY - 324)) | (1 << (tsqlParser.RECOMPILE - 324)) | (1 << (tsqlParser.RELATIVE - 324)) | (1 << (tsqlParser.REMOTE - 324)) | (1 << (tsqlParser.REPEATABLE - 324)) | (1 << (tsqlParser.ROBUST - 324)) | (1 << (tsqlParser.ROOT - 324)) | (1 << (tsqlParser.ROW - 324)) | (1 << (tsqlParser.ROWGUID - 324)) | (1 << (tsqlParser.ROWS - 324)) | (1 << (tsqlParser.ROW_NUMBER - 324)) | (1 << (tsqlParser.SAMPLE - 324)) | (1 << (tsqlParser.SCHEMABINDING - 324)) | (1 << (tsqlParser.SCROLL - 324)) | (1 << (tsqlParser.SCROLL_LOCKS - 324)) | (1 << (tsqlParser.SELF - 324)) | (1 << (tsqlParser.SERIALIZABLE - 324)) | (1 << (tsqlParser.SIMPLE - 324)) | (1 << (tsqlParser.SIZE - 324)))) != 0) or ((((_la - 389)) & ~0x3f) == 0 and ((1 << (_la - 389)) & ((1 << (tsqlParser.SNAPSHOT - 389)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 389)) | (1 << (tsqlParser.STATIC - 389)) | (1 << (tsqlParser.STATS_STREAM - 389)) | (1 << (tsqlParser.STDEV - 389)) | (1 << (tsqlParser.STDEVP - 389)) | (1 << (tsqlParser.SUM - 389)) | (1 << (tsqlParser.TEXTIMAGE_ON - 389)) | (1 << (tsqlParser.THROW - 389)) | (1 << (tsqlParser.TIES - 389)) | (1 << (tsqlParser.TIME - 389)) | (1 << (tsqlParser.TRY - 389)) | (1 << (tsqlParser.TYPE - 389)) | (1 << (tsqlParser.TYPE_WARNING - 389)) | (1 << (tsqlParser.UNBOUNDED - 389)) | (1 << (tsqlParser.UNCOMMITTED - 389)) | (1 << (tsqlParser.UNKNOWN - 389)) | (1 << (tsqlParser.USING - 389)) | (1 << (tsqlParser.VAR - 389)) | (1 << (tsqlParser.VARP - 389)) | (1 << (tsqlParser.VIEWS - 389)) | (1 << (tsqlParser.VIEW_METADATA - 389)) | (1 << (tsqlParser.WORK - 389)) | (1 << (tsqlParser.XML - 389)) | (1 << (tsqlParser.XMLNAMESPACES - 389)) | (1 << (tsqlParser.ZONE - 389)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 389)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 389)) | (1 << (tsqlParser.ID - 389)))) != 0):
                    self.state = 2344
                    self.table_name()
                    self.state = 2345
                    self.match(tsqlParser.DOT)


                self.state = 2352
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.STAR]:
                    self.state = 2349
                    self.a_star()
                    pass
                elif token in [tsqlParser.DOLLAR]:
                    self.state = 2350
                    self.match(tsqlParser.DOLLAR)
                    self.state = 2351
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.IDENTITY or _la==tsqlParser.ROWGUID):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2354
                localctx.alias = self.column_alias()
                self.state = 2355
                self.match(tsqlParser.EQUAL)
                self.state = 2356
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2358
                self.expression(0)
                self.state = 2363
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,342,self._ctx)
                if la_ == 1:
                    self.state = 2360
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.AS:
                        self.state = 2359
                        self.match(tsqlParser.AS)


                    self.state = 2362
                    localctx.alias = self.column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_sourcesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_sourceContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_sourceContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_table_sources

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_sources" ):
                listener.enterTable_sources(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_sources" ):
                listener.exitTable_sources(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_sources" ):
                return visitor.visitTable_sources(self)
            else:
                return visitor.visitChildren(self)




    def table_sources(self):

        localctx = tsqlParser.Table_sourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_table_sources)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2367
            self.table_source(0)
            self.state = 2372
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,344,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2368
                    self.match(tsqlParser.COMMA)
                    self.state = 2369
                    self.table_source(0) 
                self.state = 2374
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,344,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_sourceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_table_source

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Cross_joinContext(Table_sourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_sourceContext
            super().__init__(parser)
            self.left = None # Table_sourceContext
            self.op = None # Token
            self.right = None # Table_sourceContext
            self.copyFrom(ctx)

        def JOIN(self):
            return self.getToken(tsqlParser.JOIN, 0)
        def table_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_sourceContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_sourceContext,i)

        def CROSS(self):
            return self.getToken(tsqlParser.CROSS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCross_join" ):
                listener.enterCross_join(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCross_join" ):
                listener.exitCross_join(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCross_join" ):
                return visitor.visitCross_join(self)
            else:
                return visitor.visitChildren(self)


    class Table_source_item_joinContext(Table_sourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_sourceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def table_source_item(self):
            return self.getTypedRuleContext(tsqlParser.Table_source_itemContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_source_item_join" ):
                listener.enterTable_source_item_join(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_source_item_join" ):
                listener.exitTable_source_item_join(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_source_item_join" ):
                return visitor.visitTable_source_item_join(self)
            else:
                return visitor.visitChildren(self)


    class Standard_joinContext(Table_sourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_sourceContext
            super().__init__(parser)
            self.left = None # Table_sourceContext
            self.right = None # Table_sourceContext
            self.copyFrom(ctx)

        def join_type(self):
            return self.getTypedRuleContext(tsqlParser.Join_typeContext,0)

        def JOIN(self):
            return self.getToken(tsqlParser.JOIN, 0)
        def ON(self):
            return self.getToken(tsqlParser.ON, 0)
        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)

        def table_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_sourceContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_sourceContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandard_join" ):
                listener.enterStandard_join(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandard_join" ):
                listener.exitStandard_join(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandard_join" ):
                return visitor.visitStandard_join(self)
            else:
                return visitor.visitChildren(self)


    class Apply_joinContext(Table_sourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_sourceContext
            super().__init__(parser)
            self.left = None # Table_sourceContext
            self.op = None # Token
            self.right = None # Table_sourceContext
            self.copyFrom(ctx)

        def APPLY(self):
            return self.getToken(tsqlParser.APPLY, 0)
        def table_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_sourceContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_sourceContext,i)

        def CROSS(self):
            return self.getToken(tsqlParser.CROSS, 0)
        def OUTER(self):
            return self.getToken(tsqlParser.OUTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterApply_join" ):
                listener.enterApply_join(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitApply_join" ):
                listener.exitApply_join(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitApply_join" ):
                return visitor.visitApply_join(self)
            else:
                return visitor.visitChildren(self)


    class Bracket_table_sourceContext(Table_sourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_sourceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def table_source(self):
            return self.getTypedRuleContext(tsqlParser.Table_sourceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracket_table_source" ):
                listener.enterBracket_table_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracket_table_source" ):
                listener.exitBracket_table_source(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBracket_table_source" ):
                return visitor.visitBracket_table_source(self)
            else:
                return visitor.visitChildren(self)



    def table_source(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = tsqlParser.Table_sourceContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 222
        self.enterRecursionRule(localctx, 222, self.RULE_table_source, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2381
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,345,self._ctx)
            if la_ == 1:
                localctx = tsqlParser.Bracket_table_sourceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2376
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2377
                self.table_source(0)
                self.state = 2378
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                localctx = tsqlParser.Table_source_item_joinContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2380
                self.table_source_item()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2400
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,347,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2398
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,346,self._ctx)
                    if la_ == 1:
                        localctx = tsqlParser.Cross_joinContext(self, tsqlParser.Table_sourceContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_table_source)
                        self.state = 2383
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2384
                        localctx.op = self.match(tsqlParser.CROSS)
                        self.state = 2385
                        self.match(tsqlParser.JOIN)
                        self.state = 2386
                        localctx.right = self.table_source(4)
                        pass

                    elif la_ == 2:
                        localctx = tsqlParser.Apply_joinContext(self, tsqlParser.Table_sourceContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_table_source)
                        self.state = 2387
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2388
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==tsqlParser.CROSS or _la==tsqlParser.OUTER):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2389
                        self.match(tsqlParser.APPLY)
                        self.state = 2390
                        localctx.right = self.table_source(3)
                        pass

                    elif la_ == 3:
                        localctx = tsqlParser.Standard_joinContext(self, tsqlParser.Table_sourceContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_table_source)
                        self.state = 2391
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 2392
                        self.join_type()
                        self.state = 2393
                        self.match(tsqlParser.JOIN)
                        self.state = 2394
                        localctx.right = self.table_source(0)
                        self.state = 2395
                        self.match(tsqlParser.ON)
                        self.state = 2396
                        self.search_condition(0)
                        pass

             
                self.state = 2402
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,347,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Table_source_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_table_source_item

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Table_source_item_simpleContext(Table_source_itemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_source_itemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rowset_function(self):
            return self.getTypedRuleContext(tsqlParser.Rowset_functionContext,0)

        def table_alias(self):
            return self.getTypedRuleContext(tsqlParser.Table_aliasContext,0)

        def change_table(self):
            return self.getTypedRuleContext(tsqlParser.Change_tableContext,0)

        def function_call(self):
            return self.getTypedRuleContext(tsqlParser.Function_callContext,0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_source_item_simple" ):
                listener.enterTable_source_item_simple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_source_item_simple" ):
                listener.exitTable_source_item_simple(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_source_item_simple" ):
                return visitor.visitTable_source_item_simple(self)
            else:
                return visitor.visitChildren(self)


    class Table_source_item_complexContext(Table_source_itemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_source_itemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def derived_table(self):
            return self.getTypedRuleContext(tsqlParser.Derived_tableContext,0)

        def table_alias(self):
            return self.getTypedRuleContext(tsqlParser.Table_aliasContext,0)

        def column_alias_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_alias_listContext,0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)
        def function_call(self):
            return self.getTypedRuleContext(tsqlParser.Function_callContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_source_item_complex" ):
                listener.enterTable_source_item_complex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_source_item_complex" ):
                listener.exitTable_source_item_complex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_source_item_complex" ):
                return visitor.visitTable_source_item_complex(self)
            else:
                return visitor.visitChildren(self)


    class Table_source_item_nameContext(Table_source_itemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Table_source_itemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)

        def tablesample_clause(self):
            return self.getTypedRuleContext(tsqlParser.Tablesample_clauseContext,0)

        def table_alias(self):
            return self.getTypedRuleContext(tsqlParser.Table_aliasContext,0)

        def with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.With_table_hintsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_source_item_name" ):
                listener.enterTable_source_item_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_source_item_name" ):
                listener.exitTable_source_item_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_source_item_name" ):
                return visitor.visitTable_source_item_name(self)
            else:
                return visitor.visitChildren(self)



    def table_source_item(self):

        localctx = tsqlParser.Table_source_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_table_source_item)
        try:
            self.state = 2445
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,359,self._ctx)
            if la_ == 1:
                localctx = tsqlParser.Table_source_item_nameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2403
                self.table_name()
                self.state = 2405
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,348,self._ctx)
                if la_ == 1:
                    self.state = 2404
                    self.tablesample_clause()


                self.state = 2408
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,349,self._ctx)
                if la_ == 1:
                    self.state = 2407
                    self.table_alias()


                self.state = 2411
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,350,self._ctx)
                if la_ == 1:
                    self.state = 2410
                    self.with_table_hints()


                pass

            elif la_ == 2:
                localctx = tsqlParser.Table_source_item_simpleContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2413
                self.rowset_function()
                self.state = 2415
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,351,self._ctx)
                if la_ == 1:
                    self.state = 2414
                    self.table_alias()


                pass

            elif la_ == 3:
                localctx = tsqlParser.Table_source_item_complexContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2417
                self.derived_table()
                self.state = 2422
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,353,self._ctx)
                if la_ == 1:
                    self.state = 2418
                    self.table_alias()
                    self.state = 2420
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,352,self._ctx)
                    if la_ == 1:
                        self.state = 2419
                        self.column_alias_list()




                pass

            elif la_ == 4:
                localctx = tsqlParser.Table_source_item_simpleContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2424
                self.change_table()
                self.state = 2426
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,354,self._ctx)
                if la_ == 1:
                    self.state = 2425
                    self.table_alias()


                pass

            elif la_ == 5:
                localctx = tsqlParser.Table_source_item_simpleContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2428
                self.function_call()
                self.state = 2430
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,355,self._ctx)
                if la_ == 1:
                    self.state = 2429
                    self.table_alias()


                pass

            elif la_ == 6:
                localctx = tsqlParser.Table_source_item_simpleContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2432
                self.match(tsqlParser.LOCAL_ID)
                self.state = 2434
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,356,self._ctx)
                if la_ == 1:
                    self.state = 2433
                    self.table_alias()


                pass

            elif la_ == 7:
                localctx = tsqlParser.Table_source_item_complexContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2436
                self.match(tsqlParser.LOCAL_ID)
                self.state = 2437
                self.match(tsqlParser.DOT)
                self.state = 2438
                self.function_call()
                self.state = 2443
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,358,self._ctx)
                if la_ == 1:
                    self.state = 2439
                    self.table_alias()
                    self.state = 2441
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,357,self._ctx)
                    if la_ == 1:
                        self.state = 2440
                        self.column_alias_list()




                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Tablesample_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESAMPLE(self):
            return self.getToken(tsqlParser.TABLESAMPLE, 0)

        def sample_number(self):
            return self.getTypedRuleContext(tsqlParser.Sample_numberContext,0)


        def SYSTEM(self):
            return self.getToken(tsqlParser.SYSTEM, 0)

        def REPEATABLE(self):
            return self.getToken(tsqlParser.REPEATABLE, 0)

        def PERCENT(self):
            return self.getToken(tsqlParser.PERCENT, 0)

        def ROWS(self):
            return self.getToken(tsqlParser.ROWS, 0)

        def repeat_seed(self):
            return self.getTypedRuleContext(tsqlParser.Repeat_seedContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_tablesample_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablesample_clause" ):
                listener.enterTablesample_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablesample_clause" ):
                listener.exitTablesample_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablesample_clause" ):
                return visitor.visitTablesample_clause(self)
            else:
                return visitor.visitChildren(self)




    def tablesample_clause(self):

        localctx = tsqlParser.Tablesample_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_tablesample_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2447
            self.match(tsqlParser.TABLESAMPLE)
            self.state = 2449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.SYSTEM:
                self.state = 2448
                self.match(tsqlParser.SYSTEM)


            self.state = 2451
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2452
            self.sample_number()
            self.state = 2454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.PERCENT or _la==tsqlParser.ROWS:
                self.state = 2453
                _la = self._input.LA(1)
                if not(_la==tsqlParser.PERCENT or _la==tsqlParser.ROWS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2456
            self.match(tsqlParser.RR_BRACKET)
            self.state = 2459
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,362,self._ctx)
            if la_ == 1:
                self.state = 2457
                self.match(tsqlParser.REPEATABLE)

                self.state = 2458
                self.repeat_seed()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sample_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_sample_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_number" ):
                listener.enterSample_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_number" ):
                listener.exitSample_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSample_number" ):
                return visitor.visitSample_number(self)
            else:
                return visitor.visitChildren(self)




    def sample_number(self):

        localctx = tsqlParser.Sample_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_sample_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2461
            self.match(tsqlParser.DECIMAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Repeat_seedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_repeat_seed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeat_seed" ):
                listener.enterRepeat_seed(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeat_seed" ):
                listener.exitRepeat_seed(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRepeat_seed" ):
                return visitor.visitRepeat_seed(self)
            else:
                return visitor.visitChildren(self)




    def repeat_seed(self):

        localctx = tsqlParser.Repeat_seedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_repeat_seed)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2463
            self.match(tsqlParser.DECIMAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_alias" ):
                listener.enterTable_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_alias" ):
                listener.exitTable_alias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_alias" ):
                return visitor.visitTable_alias(self)
            else:
                return visitor.visitChildren(self)




    def table_alias(self):

        localctx = tsqlParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_table_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.AS:
                self.state = 2465
                self.match(tsqlParser.AS)


            self.state = 2468
            self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Change_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGETABLE(self):
            return self.getToken(tsqlParser.CHANGETABLE, 0)

        def CHANGES(self):
            return self.getToken(tsqlParser.CHANGES, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def NULL(self):
            return self.getToken(tsqlParser.NULL, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_change_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChange_table" ):
                listener.enterChange_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChange_table" ):
                listener.exitChange_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChange_table" ):
                return visitor.visitChange_table(self)
            else:
                return visitor.visitChildren(self)




    def change_table(self):

        localctx = tsqlParser.Change_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_change_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2470
            self.match(tsqlParser.CHANGETABLE)
            self.state = 2471
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2472
            self.match(tsqlParser.CHANGES)
            self.state = 2473
            self.table_name()
            self.state = 2474
            self.match(tsqlParser.COMMA)
            self.state = 2475
            _la = self._input.LA(1)
            if not(_la==tsqlParser.NULL or _la==tsqlParser.LOCAL_ID or _la==tsqlParser.DECIMAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2476
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.join_hint = None # Token

        def LEFT(self):
            return self.getToken(tsqlParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(tsqlParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(tsqlParser.FULL, 0)

        def INNER(self):
            return self.getToken(tsqlParser.INNER, 0)

        def OUTER(self):
            return self.getToken(tsqlParser.OUTER, 0)

        def LOOP(self):
            return self.getToken(tsqlParser.LOOP, 0)

        def HASH(self):
            return self.getToken(tsqlParser.HASH, 0)

        def MERGE(self):
            return self.getToken(tsqlParser.MERGE, 0)

        def REMOTE(self):
            return self.getToken(tsqlParser.REMOTE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_join_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_type" ):
                listener.enterJoin_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_type" ):
                listener.exitJoin_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_type" ):
                return visitor.visitJoin_type(self)
            else:
                return visitor.visitChildren(self)




    def join_type(self):

        localctx = tsqlParser.Join_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_join_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2485
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.INNER, tsqlParser.JOIN, tsqlParser.MERGE, tsqlParser.HASH, tsqlParser.LOOP, tsqlParser.REMOTE]:
                self.state = 2479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.INNER:
                    self.state = 2478
                    self.match(tsqlParser.INNER)


                pass
            elif token in [tsqlParser.FULL, tsqlParser.LEFT, tsqlParser.RIGHT]:
                self.state = 2481
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FULL or _la==tsqlParser.LEFT or _la==tsqlParser.RIGHT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2483
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.OUTER:
                    self.state = 2482
                    self.match(tsqlParser.OUTER)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 2488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.MERGE or _la==tsqlParser.HASH or _la==tsqlParser.LOOP or _la==tsqlParser.REMOTE:
                self.state = 2487
                localctx.join_hint = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==tsqlParser.MERGE or _la==tsqlParser.HASH or _la==tsqlParser.LOOP or _la==tsqlParser.REMOTE):
                    localctx.join_hint = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_name_with_hintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.With_table_hintsContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_table_name_with_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name_with_hint" ):
                listener.enterTable_name_with_hint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name_with_hint" ):
                listener.exitTable_name_with_hint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_name_with_hint" ):
                return visitor.visitTable_name_with_hint(self)
            else:
                return visitor.visitChildren(self)




    def table_name_with_hint(self):

        localctx = tsqlParser.Table_name_with_hintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_table_name_with_hint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2490
            self.table_name()
            self.state = 2492
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,368,self._ctx)
            if la_ == 1:
                self.state = 2491
                self.with_table_hints()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rowset_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.provider_name = None # Token
            self.connectionString = None # Token
            self.sql = None # Token
            self.data_file = None # Token

        def OPENROWSET(self):
            return self.getToken(tsqlParser.OPENROWSET, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.STRING)
            else:
                return self.getToken(tsqlParser.STRING, i)

        def BULK(self):
            return self.getToken(tsqlParser.BULK, 0)

        def bulk_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Bulk_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Bulk_optionContext,i)


        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_rowset_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowset_function" ):
                listener.enterRowset_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowset_function" ):
                listener.exitRowset_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowset_function" ):
                return visitor.visitRowset_function(self)
            else:
                return visitor.visitChildren(self)




    def rowset_function(self):

        localctx = tsqlParser.Rowset_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_rowset_function)
        self._la = 0 # Token type
        try:
            self.state = 2520
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,371,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2494
                self.match(tsqlParser.OPENROWSET)
                self.state = 2495
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2496
                localctx.provider_name = self.match(tsqlParser.STRING)
                self.state = 2497
                self.match(tsqlParser.COMMA)
                self.state = 2498
                localctx.connectionString = self.match(tsqlParser.STRING)
                self.state = 2499
                self.match(tsqlParser.COMMA)
                self.state = 2500
                localctx.sql = self.match(tsqlParser.STRING)
                self.state = 2501
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2502
                self.match(tsqlParser.OPENROWSET)
                self.state = 2503
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2504
                self.match(tsqlParser.BULK)
                self.state = 2505
                localctx.data_file = self.match(tsqlParser.STRING)
                self.state = 2506
                self.match(tsqlParser.COMMA)
                self.state = 2516
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,370,self._ctx)
                if la_ == 1:
                    self.state = 2507
                    self.bulk_option()
                    self.state = 2512
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==tsqlParser.COMMA:
                        self.state = 2508
                        self.match(tsqlParser.COMMA)
                        self.state = 2509
                        self.bulk_option()
                        self.state = 2514
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 2515
                    self.r_id()
                    pass


                self.state = 2518
                self.match(tsqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bulk_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.bulk_option_value = None # Token

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_bulk_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBulk_option" ):
                listener.enterBulk_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBulk_option" ):
                listener.exitBulk_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBulk_option" ):
                return visitor.visitBulk_option(self)
            else:
                return visitor.visitChildren(self)




    def bulk_option(self):

        localctx = tsqlParser.Bulk_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_bulk_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2522
            self.r_id()
            self.state = 2523
            self.match(tsqlParser.EQUAL)
            self.state = 2524
            localctx.bulk_option_value = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==tsqlParser.DECIMAL or _la==tsqlParser.STRING):
                localctx.bulk_option_value = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Derived_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(tsqlParser.SubqueryContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_derived_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDerived_table" ):
                listener.enterDerived_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDerived_table" ):
                listener.exitDerived_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDerived_table" ):
                return visitor.visitDerived_table(self)
            else:
                return visitor.visitChildren(self)




    def derived_table(self):

        localctx = tsqlParser.Derived_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_derived_table)
        try:
            self.state = 2531
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,372,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2526
                self.subquery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2527
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2528
                self.subquery()
                self.state = 2529
                self.match(tsqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_function_call

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Standard_callContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Function_callContext
            super().__init__(parser)
            self.style = None # ExpressionContext
            self.seed = None # Token
            self.increment = None # Token
            self.copyFrom(ctx)

        def scalar_function_name(self):
            return self.getTypedRuleContext(tsqlParser.Scalar_function_nameContext,0)

        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)

        def BINARY_CHECKSUM(self):
            return self.getToken(tsqlParser.BINARY_CHECKSUM, 0)
        def STAR(self):
            return self.getToken(tsqlParser.STAR, 0)
        def CONVERT(self):
            return self.getToken(tsqlParser.CONVERT, 0)
        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)

        def COALESCE(self):
            return self.getToken(tsqlParser.COALESCE, 0)
        def DATEADD(self):
            return self.getToken(tsqlParser.DATEADD, 0)
        def ID(self):
            return self.getToken(tsqlParser.ID, 0)
        def DATEDIFF(self):
            return self.getToken(tsqlParser.DATEDIFF, 0)
        def DATENAME(self):
            return self.getToken(tsqlParser.DATENAME, 0)
        def DATEPART(self):
            return self.getToken(tsqlParser.DATEPART, 0)
        def DATETIMEOFFSETFROMPARTS(self):
            return self.getToken(tsqlParser.DATETIMEOFFSETFROMPARTS, 0)
        def IDENTITY(self):
            return self.getToken(tsqlParser.IDENTITY, 0)
        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DECIMAL)
            else:
                return self.getToken(tsqlParser.DECIMAL, i)
        def IIF(self):
            return self.getToken(tsqlParser.IIF, 0)
        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)

        def NULLIF(self):
            return self.getToken(tsqlParser.NULLIF, 0)
        def STRING_SPLIT(self):
            return self.getToken(tsqlParser.STRING_SPLIT, 0)
        def TRY_CONVERT(self):
            return self.getToken(tsqlParser.TRY_CONVERT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandard_call" ):
                listener.enterStandard_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandard_call" ):
                listener.exitStandard_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandard_call" ):
                return visitor.visitStandard_call(self)
            else:
                return visitor.visitChildren(self)


    class Aggregate_callContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aggregate_windowed_function(self):
            return self.getTypedRuleContext(tsqlParser.Aggregate_windowed_functionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_call" ):
                listener.enterAggregate_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_call" ):
                listener.exitAggregate_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregate_call" ):
                return visitor.visitAggregate_call(self)
            else:
                return visitor.visitChildren(self)


    class Nvf_callContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def next_value_for_function(self):
            return self.getTypedRuleContext(tsqlParser.Next_value_for_functionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNvf_call" ):
                listener.enterNvf_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNvf_call" ):
                listener.exitNvf_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNvf_call" ):
                return visitor.visitNvf_call(self)
            else:
                return visitor.visitChildren(self)


    class Rank_callContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ranking_windowed_function(self):
            return self.getTypedRuleContext(tsqlParser.Ranking_windowed_functionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRank_call" ):
                listener.enterRank_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRank_call" ):
                listener.exitRank_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRank_call" ):
                return visitor.visitRank_call(self)
            else:
                return visitor.visitChildren(self)


    class Expression_callContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Function_callContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.alias = None # Data_typeContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def PARSE(self):
            return self.getToken(tsqlParser.PARSE, 0)
        def AS(self):
            return self.getToken(tsqlParser.AS, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)

        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)

        def USING(self):
            return self.getToken(tsqlParser.USING, 0)
        def TRY_PARSE(self):
            return self.getToken(tsqlParser.TRY_PARSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_call" ):
                listener.enterExpression_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_call" ):
                listener.exitExpression_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression_call" ):
                return visitor.visitExpression_call(self)
            else:
                return visitor.visitChildren(self)


    class Simple_callContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHECKSUM(self):
            return self.getToken(tsqlParser.CHECKSUM, 0)
        def STAR(self):
            return self.getToken(tsqlParser.STAR, 0)
        def CURRENT_TIMESTAMP(self):
            return self.getToken(tsqlParser.CURRENT_TIMESTAMP, 0)
        def CURRENT_USER(self):
            return self.getToken(tsqlParser.CURRENT_USER, 0)
        def MIN_ACTIVE_ROWVERSION(self):
            return self.getToken(tsqlParser.MIN_ACTIVE_ROWVERSION, 0)
        def SESSION_USER(self):
            return self.getToken(tsqlParser.SESSION_USER, 0)
        def SYSTEM_USER(self):
            return self.getToken(tsqlParser.SYSTEM_USER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_call" ):
                listener.enterSimple_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_call" ):
                listener.exitSimple_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_call" ):
                return visitor.visitSimple_call(self)
            else:
                return visitor.visitChildren(self)


    class Cast_callContext(Function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Function_callContext
            super().__init__(parser)
            self.alias = None # Data_typeContext
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(tsqlParser.CAST, 0)
        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)
        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)

        def TRY_CAST(self):
            return self.getToken(tsqlParser.TRY_CAST, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_call" ):
                listener.enterCast_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_call" ):
                listener.exitCast_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCast_call" ):
                return visitor.visitCast_call(self)
            else:
                return visitor.visitChildren(self)



    def function_call(self):

        localctx = tsqlParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.state = 2706
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,379,self._ctx)
            if la_ == 1:
                localctx = tsqlParser.Rank_callContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2533
                self.ranking_windowed_function()
                pass

            elif la_ == 2:
                localctx = tsqlParser.Aggregate_callContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2534
                self.aggregate_windowed_function()
                pass

            elif la_ == 3:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2535
                self.scalar_function_name()
                self.state = 2536
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << tsqlParser.CASE) | (1 << tsqlParser.COALESCE) | (1 << tsqlParser.CONVERT) | (1 << tsqlParser.CURRENT_TIMESTAMP) | (1 << tsqlParser.CURRENT_USER) | (1 << tsqlParser.DEFAULT))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (tsqlParser.FORCESEEK - 73)) | (1 << (tsqlParser.IDENTITY - 73)) | (1 << (tsqlParser.IIF - 73)) | (1 << (tsqlParser.LEFT - 73)) | (1 << (tsqlParser.NEXT - 73)) | (1 << (tsqlParser.NULL - 73)) | (1 << (tsqlParser.NULLIF - 73)) | (1 << (tsqlParser.NUMERIC - 73)) | (1 << (tsqlParser.OVER - 73)))) != 0) or ((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & ((1 << (tsqlParser.RIGHT - 150)) | (1 << (tsqlParser.SESSION_USER - 150)) | (1 << (tsqlParser.SYSTEM_USER - 150)) | (1 << (tsqlParser.TRY_CAST - 150)) | (1 << (tsqlParser.TRY_CONVERT - 150)) | (1 << (tsqlParser.TRY_PARSE - 150)) | (1 << (tsqlParser.VALUE - 150)) | (1 << (tsqlParser.ABSOLUTE - 150)) | (1 << (tsqlParser.APPLY - 150)) | (1 << (tsqlParser.AUTO - 150)))) != 0) or ((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (tsqlParser.AVG - 220)) | (1 << (tsqlParser.BASE64 - 220)) | (1 << (tsqlParser.BINARY_CHECKSUM - 220)) | (1 << (tsqlParser.CALLER - 220)) | (1 << (tsqlParser.CAST - 220)) | (1 << (tsqlParser.CATCH - 220)) | (1 << (tsqlParser.CHECKSUM - 220)) | (1 << (tsqlParser.CHECKSUM_AGG - 220)) | (1 << (tsqlParser.COMMITTED - 220)) | (1 << (tsqlParser.CONCAT - 220)) | (1 << (tsqlParser.CONTROL - 220)) | (1 << (tsqlParser.COOKIE - 220)) | (1 << (tsqlParser.COUNT - 220)) | (1 << (tsqlParser.COUNT_BIG - 220)) | (1 << (tsqlParser.DATE - 220)) | (1 << (tsqlParser.DATEADD - 220)) | (1 << (tsqlParser.DATEDIFF - 220)) | (1 << (tsqlParser.DATENAME - 220)) | (1 << (tsqlParser.DATEPART - 220)) | (1 << (tsqlParser.DATETIMEOFFSETFROMPARTS - 220)) | (1 << (tsqlParser.DELAY - 220)) | (1 << (tsqlParser.DELETED - 220)) | (1 << (tsqlParser.DENSE_RANK - 220)) | (1 << (tsqlParser.DISABLE - 220)) | (1 << (tsqlParser.DYNAMIC - 220)) | (1 << (tsqlParser.ENCRYPTION - 220)) | (1 << (tsqlParser.EXPAND - 220)) | (1 << (tsqlParser.FAST - 220)) | (1 << (tsqlParser.FAST_FORWARD - 220)) | (1 << (tsqlParser.FIRST - 220)) | (1 << (tsqlParser.FIRST_VALUE - 220)) | (1 << (tsqlParser.FOLLOWING - 220)) | (1 << (tsqlParser.FORCE - 220)) | (1 << (tsqlParser.FORCED - 220)) | (1 << (tsqlParser.FORWARD_ONLY - 220)) | (1 << (tsqlParser.FULLSCAN - 220)) | (1 << (tsqlParser.GLOBAL - 220)) | (1 << (tsqlParser.GO - 220)))) != 0) or ((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & ((1 << (tsqlParser.GROUPING - 284)) | (1 << (tsqlParser.GROUPING_ID - 284)) | (1 << (tsqlParser.HASH - 284)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 284)) | (1 << (tsqlParser.IMPERSONATE - 284)) | (1 << (tsqlParser.INSENSITIVE - 284)) | (1 << (tsqlParser.INSERTED - 284)) | (1 << (tsqlParser.ISOLATION - 284)) | (1 << (tsqlParser.IO - 284)) | (1 << (tsqlParser.KEEP - 284)) | (1 << (tsqlParser.KEEPFIXED - 284)) | (1 << (tsqlParser.KEYSET - 284)) | (1 << (tsqlParser.LAG - 284)) | (1 << (tsqlParser.LAST - 284)) | (1 << (tsqlParser.LAST_VALUE - 284)) | (1 << (tsqlParser.LEAD - 284)) | (1 << (tsqlParser.LEVEL - 284)) | (1 << (tsqlParser.LOCAL - 284)) | (1 << (tsqlParser.LOCK_ESCALATION - 284)) | (1 << (tsqlParser.LOGIN - 284)) | (1 << (tsqlParser.LOOP - 284)) | (1 << (tsqlParser.MARK - 284)) | (1 << (tsqlParser.MAX - 284)) | (1 << (tsqlParser.MAXDOP - 284)) | (1 << (tsqlParser.MAXRECURSION - 284)) | (1 << (tsqlParser.MIN - 284)) | (1 << (tsqlParser.MIN_ACTIVE_ROWVERSION - 284)) | (1 << (tsqlParser.MODIFY - 284)) | (1 << (tsqlParser.NAME - 284)) | (1 << (tsqlParser.NOCOUNT - 284)) | (1 << (tsqlParser.NOEXPAND - 284)) | (1 << (tsqlParser.NORECOMPUTE - 284)) | (1 << (tsqlParser.NTILE - 284)) | (1 << (tsqlParser.NUMBER - 284)) | (1 << (tsqlParser.OFFSET - 284)) | (1 << (tsqlParser.ONLINE - 284)) | (1 << (tsqlParser.ONLY - 284)) | (1 << (tsqlParser.OPTIMISTIC - 284)) | (1 << (tsqlParser.OPTIMIZE - 284)) | (1 << (tsqlParser.OUT - 284)) | (1 << (tsqlParser.OUTPUT - 284)) | (1 << (tsqlParser.OWNER - 284)) | (1 << (tsqlParser.PARAMETERIZATION - 284)))) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & ((1 << (tsqlParser.PARSE - 348)) | (1 << (tsqlParser.PARTITION - 348)) | (1 << (tsqlParser.PATH - 348)) | (1 << (tsqlParser.PERCENTILE_CONT - 348)) | (1 << (tsqlParser.PRECEDING - 348)) | (1 << (tsqlParser.PRIOR - 348)) | (1 << (tsqlParser.PRIVILEGES - 348)) | (1 << (tsqlParser.RANGE - 348)) | (1 << (tsqlParser.RANK - 348)) | (1 << (tsqlParser.READONLY - 348)) | (1 << (tsqlParser.READ_ONLY - 348)) | (1 << (tsqlParser.RECOMPILE - 348)) | (1 << (tsqlParser.RELATIVE - 348)) | (1 << (tsqlParser.REMOTE - 348)) | (1 << (tsqlParser.REPEATABLE - 348)) | (1 << (tsqlParser.ROBUST - 348)) | (1 << (tsqlParser.ROOT - 348)) | (1 << (tsqlParser.ROW - 348)) | (1 << (tsqlParser.ROWGUID - 348)) | (1 << (tsqlParser.ROWS - 348)) | (1 << (tsqlParser.ROW_NUMBER - 348)) | (1 << (tsqlParser.SAMPLE - 348)) | (1 << (tsqlParser.SCHEMABINDING - 348)) | (1 << (tsqlParser.SCROLL - 348)) | (1 << (tsqlParser.SCROLL_LOCKS - 348)) | (1 << (tsqlParser.SELF - 348)) | (1 << (tsqlParser.SERIALIZABLE - 348)) | (1 << (tsqlParser.SIMPLE - 348)) | (1 << (tsqlParser.SIZE - 348)) | (1 << (tsqlParser.SNAPSHOT - 348)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 348)) | (1 << (tsqlParser.STATIC - 348)) | (1 << (tsqlParser.STATS_STREAM - 348)) | (1 << (tsqlParser.STDEV - 348)) | (1 << (tsqlParser.STDEVP - 348)) | (1 << (tsqlParser.STRING_AGG - 348)) | (1 << (tsqlParser.STRING_SPLIT - 348)) | (1 << (tsqlParser.SUM - 348)) | (1 << (tsqlParser.TEXTIMAGE_ON - 348)) | (1 << (tsqlParser.THROW - 348)) | (1 << (tsqlParser.TIES - 348)) | (1 << (tsqlParser.TIME - 348)) | (1 << (tsqlParser.TRY - 348)) | (1 << (tsqlParser.TYPE - 348)))) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & ((1 << (tsqlParser.TYPE_WARNING - 412)) | (1 << (tsqlParser.UNBOUNDED - 412)) | (1 << (tsqlParser.UNCOMMITTED - 412)) | (1 << (tsqlParser.UNKNOWN - 412)) | (1 << (tsqlParser.USING - 412)) | (1 << (tsqlParser.VAR - 412)) | (1 << (tsqlParser.VARP - 412)) | (1 << (tsqlParser.VIEWS - 412)) | (1 << (tsqlParser.VIEW_METADATA - 412)) | (1 << (tsqlParser.WORK - 412)) | (1 << (tsqlParser.XML - 412)) | (1 << (tsqlParser.XMLNAMESPACES - 412)) | (1 << (tsqlParser.ZONE - 412)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 412)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 412)) | (1 << (tsqlParser.LOCAL_ID - 412)) | (1 << (tsqlParser.DECIMAL - 412)) | (1 << (tsqlParser.ID - 412)) | (1 << (tsqlParser.STRING - 412)) | (1 << (tsqlParser.BINARY - 412)) | (1 << (tsqlParser.FLOAT - 412)) | (1 << (tsqlParser.REAL - 412)) | (1 << (tsqlParser.DOLLAR - 412)) | (1 << (tsqlParser.LR_BRACKET - 412)) | (1 << (tsqlParser.PLUS - 412)) | (1 << (tsqlParser.MINUS - 412)) | (1 << (tsqlParser.BIT_NOT - 412)))) != 0):
                    self.state = 2537
                    self.expression_list()


                self.state = 2540
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 4:
                localctx = tsqlParser.Nvf_callContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2542
                self.next_value_for_function()
                pass

            elif la_ == 5:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2543
                self.match(tsqlParser.BINARY_CHECKSUM)
                self.state = 2544
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2545
                self.match(tsqlParser.STAR)
                self.state = 2546
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 6:
                localctx = tsqlParser.Cast_callContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2547
                self.match(tsqlParser.CAST)
                self.state = 2548
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2549
                self.expression(0)
                self.state = 2550
                self.match(tsqlParser.AS)
                self.state = 2551
                localctx.alias = self.data_type()
                self.state = 2552
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 7:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2554
                self.match(tsqlParser.CONVERT)
                self.state = 2555
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2556
                self.data_type()
                self.state = 2557
                self.match(tsqlParser.COMMA)
                self.state = 2558
                self.expression(0)
                self.state = 2561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 2559
                    self.match(tsqlParser.COMMA)
                    self.state = 2560
                    localctx.style = self.expression(0)


                self.state = 2563
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 8:
                localctx = tsqlParser.Simple_callContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2565
                self.match(tsqlParser.CHECKSUM)
                self.state = 2566
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2567
                self.match(tsqlParser.STAR)
                self.state = 2568
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 9:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 2569
                self.match(tsqlParser.COALESCE)
                self.state = 2570
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2571
                self.expression_list()
                self.state = 2572
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = tsqlParser.Simple_callContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 2574
                self.match(tsqlParser.CURRENT_TIMESTAMP)
                pass

            elif la_ == 11:
                localctx = tsqlParser.Simple_callContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 2575
                self.match(tsqlParser.CURRENT_USER)
                pass

            elif la_ == 12:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 2576
                self.match(tsqlParser.DATEADD)
                self.state = 2577
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2578
                self.match(tsqlParser.ID)
                self.state = 2579
                self.match(tsqlParser.COMMA)
                self.state = 2580
                self.expression(0)
                self.state = 2581
                self.match(tsqlParser.COMMA)
                self.state = 2582
                self.expression(0)
                self.state = 2583
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 13:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 2585
                self.match(tsqlParser.DATEDIFF)
                self.state = 2586
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2587
                self.match(tsqlParser.ID)
                self.state = 2588
                self.match(tsqlParser.COMMA)
                self.state = 2589
                self.expression(0)
                self.state = 2590
                self.match(tsqlParser.COMMA)
                self.state = 2591
                self.expression(0)
                self.state = 2592
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 14:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 2594
                self.match(tsqlParser.DATENAME)
                self.state = 2595
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2596
                self.match(tsqlParser.ID)
                self.state = 2597
                self.match(tsqlParser.COMMA)
                self.state = 2598
                self.expression(0)
                self.state = 2599
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 15:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 2601
                self.match(tsqlParser.DATEPART)
                self.state = 2602
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2603
                self.match(tsqlParser.ID)
                self.state = 2604
                self.match(tsqlParser.COMMA)
                self.state = 2605
                self.expression(0)
                self.state = 2606
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 16:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 2608
                self.match(tsqlParser.DATETIMEOFFSETFROMPARTS)
                self.state = 2609
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2610
                self.expression(0)
                self.state = 2611
                self.match(tsqlParser.COMMA)
                self.state = 2612
                self.expression(0)
                self.state = 2613
                self.match(tsqlParser.COMMA)
                self.state = 2614
                self.expression(0)
                self.state = 2615
                self.match(tsqlParser.COMMA)
                self.state = 2616
                self.expression(0)
                self.state = 2617
                self.match(tsqlParser.COMMA)
                self.state = 2618
                self.expression(0)
                self.state = 2619
                self.match(tsqlParser.COMMA)
                self.state = 2620
                self.expression(0)
                self.state = 2621
                self.match(tsqlParser.COMMA)
                self.state = 2622
                self.expression(0)
                self.state = 2623
                self.match(tsqlParser.COMMA)
                self.state = 2624
                self.expression(0)
                self.state = 2625
                self.match(tsqlParser.COMMA)
                self.state = 2626
                self.expression(0)
                self.state = 2627
                self.match(tsqlParser.COMMA)
                self.state = 2628
                self.expression(0)
                self.state = 2629
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 17:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 2631
                self.match(tsqlParser.IDENTITY)
                self.state = 2632
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2633
                self.data_type()
                self.state = 2636
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,375,self._ctx)
                if la_ == 1:
                    self.state = 2634
                    self.match(tsqlParser.COMMA)
                    self.state = 2635
                    localctx.seed = self.match(tsqlParser.DECIMAL)


                self.state = 2640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 2638
                    self.match(tsqlParser.COMMA)
                    self.state = 2639
                    localctx.increment = self.match(tsqlParser.DECIMAL)


                self.state = 2642
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 18:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 2644
                self.match(tsqlParser.IIF)
                self.state = 2645
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2646
                self.search_condition(0)
                self.state = 2647
                self.match(tsqlParser.COMMA)
                self.state = 2648
                self.expression(0)
                self.state = 2649
                self.match(tsqlParser.COMMA)
                self.state = 2650
                self.expression(0)
                self.state = 2651
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 19:
                localctx = tsqlParser.Simple_callContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 2653
                self.match(tsqlParser.MIN_ACTIVE_ROWVERSION)
                pass

            elif la_ == 20:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 2654
                self.match(tsqlParser.NULLIF)
                self.state = 2655
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2656
                self.expression(0)
                self.state = 2657
                self.match(tsqlParser.COMMA)
                self.state = 2658
                self.expression(0)
                self.state = 2659
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 21:
                localctx = tsqlParser.Expression_callContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 2661
                self.match(tsqlParser.PARSE)
                self.state = 2662
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2663
                localctx.left = self.expression(0)
                self.state = 2664
                self.match(tsqlParser.AS)
                self.state = 2665
                localctx.alias = self.data_type()
                self.state = 2668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.USING:
                    self.state = 2666
                    self.match(tsqlParser.USING)
                    self.state = 2667
                    localctx.right = self.expression(0)


                self.state = 2670
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 22:
                localctx = tsqlParser.Simple_callContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 2672
                self.match(tsqlParser.SESSION_USER)
                pass

            elif la_ == 23:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 2673
                self.match(tsqlParser.STRING_SPLIT)
                self.state = 2674
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2675
                self.expression(0)
                self.state = 2676
                self.match(tsqlParser.COMMA)
                self.state = 2677
                self.expression(0)
                self.state = 2678
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 24:
                localctx = tsqlParser.Simple_callContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 2680
                self.match(tsqlParser.SYSTEM_USER)
                pass

            elif la_ == 25:
                localctx = tsqlParser.Standard_callContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 2681
                self.match(tsqlParser.TRY_CONVERT)
                self.state = 2682
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2683
                self.data_type()
                self.state = 2684
                self.match(tsqlParser.COMMA)
                self.state = 2685
                self.expression(0)
                self.state = 2686
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 26:
                localctx = tsqlParser.Cast_callContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 2688
                self.match(tsqlParser.TRY_CAST)
                self.state = 2689
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2690
                self.expression(0)
                self.state = 2691
                self.match(tsqlParser.AS)
                self.state = 2692
                localctx.alias = self.data_type()
                self.state = 2693
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 27:
                localctx = tsqlParser.Expression_callContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 2695
                self.match(tsqlParser.TRY_PARSE)
                self.state = 2696
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2697
                localctx.left = self.expression(0)
                self.state = 2698
                self.match(tsqlParser.AS)
                self.state = 2699
                localctx.alias = self.data_type()
                self.state = 2702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.USING:
                    self.state = 2700
                    self.match(tsqlParser.USING)
                    self.state = 2701
                    localctx.right = self.expression(0)


                self.state = 2704
                self.match(tsqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Switch_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.whenExpr = None # ExpressionContext
            self.thenExpr = None # ExpressionContext

        def WHEN(self):
            return self.getToken(tsqlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(tsqlParser.THEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_switch_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_section" ):
                listener.enterSwitch_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_section" ):
                listener.exitSwitch_section(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitch_section" ):
                return visitor.visitSwitch_section(self)
            else:
                return visitor.visitChildren(self)




    def switch_section(self):

        localctx = tsqlParser.Switch_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_switch_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2708
            self.match(tsqlParser.WHEN)
            self.state = 2709
            localctx.whenExpr = self.expression(0)
            self.state = 2710
            self.match(tsqlParser.THEN)
            self.state = 2711
            localctx.thenExpr = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Switch_search_condition_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.whenExpr = None # Search_conditionContext
            self.thenExpr = None # ExpressionContext

        def WHEN(self):
            return self.getToken(tsqlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(tsqlParser.THEN, 0)

        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_switch_search_condition_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_search_condition_section" ):
                listener.enterSwitch_search_condition_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_search_condition_section" ):
                listener.exitSwitch_search_condition_section(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitch_search_condition_section" ):
                return visitor.visitSwitch_search_condition_section(self)
            else:
                return visitor.visitChildren(self)




    def switch_search_condition_section(self):

        localctx = tsqlParser.Switch_search_condition_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_switch_search_condition_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2713
            self.match(tsqlParser.WHEN)
            self.state = 2714
            localctx.whenExpr = self.search_condition(0)
            self.state = 2715
            self.match(tsqlParser.THEN)
            self.state = 2716
            localctx.thenExpr = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_table_hintsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_hintContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_hintContext,i)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_with_table_hints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_table_hints" ):
                listener.enterWith_table_hints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_table_hints" ):
                listener.exitWith_table_hints(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_table_hints" ):
                return visitor.visitWith_table_hints(self)
            else:
                return visitor.visitChildren(self)




    def with_table_hints(self):

        localctx = tsqlParser.With_table_hintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_with_table_hints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2719
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 2718
                self.match(tsqlParser.WITH)


            self.state = 2721
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2722
            self.table_hint()
            self.state = 2727
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2723
                self.match(tsqlParser.COMMA)
                self.state = 2724
                self.table_hint()
                self.state = 2729
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2730
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_with_table_hintsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def table_hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_hintContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_hintContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_insert_with_table_hints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_with_table_hints" ):
                listener.enterInsert_with_table_hints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_with_table_hints" ):
                listener.exitInsert_with_table_hints(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_with_table_hints" ):
                return visitor.visitInsert_with_table_hints(self)
            else:
                return visitor.visitChildren(self)




    def insert_with_table_hints(self):

        localctx = tsqlParser.Insert_with_table_hintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_insert_with_table_hints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2732
            self.match(tsqlParser.WITH)
            self.state = 2733
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2734
            self.table_hint()
            self.state = 2739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2735
                self.match(tsqlParser.COMMA)
                self.state = 2736
                self.table_hint()
                self.state = 2741
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2742
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_hintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOEXPAND(self):
            return self.getToken(tsqlParser.NOEXPAND, 0)

        def INDEX(self):
            return self.getToken(tsqlParser.INDEX, 0)

        def index_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Index_valueContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Index_valueContext,i)


        def FORCESEEK(self):
            return self.getToken(tsqlParser.FORCESEEK, 0)

        def SERIALIZABLE(self):
            return self.getToken(tsqlParser.SERIALIZABLE, 0)

        def SNAPSHOT(self):
            return self.getToken(tsqlParser.SNAPSHOT, 0)

        def SPATIAL_WINDOW_MAX_CELLS(self):
            return self.getToken(tsqlParser.SPATIAL_WINDOW_MAX_CELLS, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ID)
            else:
                return self.getToken(tsqlParser.ID, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_table_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_hint" ):
                listener.enterTable_hint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_hint" ):
                listener.exitTable_hint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_hint" ):
                return visitor.visitTable_hint(self)
            else:
                return visitor.visitChildren(self)




    def table_hint(self):

        localctx = tsqlParser.Table_hintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_table_hint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.NOEXPAND:
                self.state = 2744
                self.match(tsqlParser.NOEXPAND)


            self.state = 2785
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,387,self._ctx)
            if la_ == 1:
                self.state = 2747
                self.match(tsqlParser.INDEX)
                self.state = 2748
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2749
                self.index_value()
                self.state = 2754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 2750
                    self.match(tsqlParser.COMMA)
                    self.state = 2751
                    self.index_value()
                    self.state = 2756
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2757
                self.match(tsqlParser.RR_BRACKET)

            elif la_ == 2:
                self.state = 2759
                self.match(tsqlParser.INDEX)
                self.state = 2760
                self.match(tsqlParser.EQUAL)
                self.state = 2761
                self.index_value()

            elif la_ == 3:
                self.state = 2762
                self.match(tsqlParser.FORCESEEK)
                self.state = 2777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.LR_BRACKET:
                    self.state = 2763
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 2764
                    self.index_value()
                    self.state = 2765
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 2766
                    self.match(tsqlParser.ID)
                    self.state = 2771
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==tsqlParser.COMMA:
                        self.state = 2767
                        self.match(tsqlParser.COMMA)
                        self.state = 2768
                        self.match(tsqlParser.ID)
                        self.state = 2773
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2774
                    self.match(tsqlParser.RR_BRACKET)
                    self.state = 2775
                    self.match(tsqlParser.RR_BRACKET)



            elif la_ == 4:
                self.state = 2779
                self.match(tsqlParser.SERIALIZABLE)

            elif la_ == 5:
                self.state = 2780
                self.match(tsqlParser.SNAPSHOT)

            elif la_ == 6:
                self.state = 2781
                self.match(tsqlParser.SPATIAL_WINDOW_MAX_CELLS)
                self.state = 2782
                self.match(tsqlParser.EQUAL)
                self.state = 2783
                self.match(tsqlParser.DECIMAL)

            elif la_ == 7:
                self.state = 2784
                self.match(tsqlParser.ID)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_index_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_value" ):
                listener.enterIndex_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_value" ):
                listener.exitIndex_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_value" ):
                return visitor.visitIndex_value(self)
            else:
                return visitor.visitChildren(self)




    def index_value(self):

        localctx = tsqlParser.Index_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_index_value)
        try:
            self.state = 2789
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2787
                self.r_id()
                pass
            elif token in [tsqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2788
                self.match(tsqlParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_alias_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Column_aliasContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_column_alias_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias_list" ):
                listener.enterColumn_alias_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias_list" ):
                listener.exitColumn_alias_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_alias_list" ):
                return visitor.visitColumn_alias_list(self)
            else:
                return visitor.visitChildren(self)




    def column_alias_list(self):

        localctx = tsqlParser.Column_alias_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_column_alias_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2791
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2792
            self.column_alias()
            self.state = 2797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2793
                self.match(tsqlParser.COMMA)
                self.state = 2794
                self.column_alias()
                self.state = 2799
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2800
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_column_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias" ):
                listener.enterColumn_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias" ):
                listener.exitColumn_alias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_alias" ):
                return visitor.visitColumn_alias(self)
            else:
                return visitor.visitChildren(self)




    def column_alias(self):

        localctx = tsqlParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_column_alias)
        try:
            self.state = 2804
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2802
                self.r_id()
                pass
            elif token in [tsqlParser.STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2803
                self.match(tsqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class A_starContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(tsqlParser.STAR, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_a_star

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterA_star" ):
                listener.enterA_star(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitA_star" ):
                listener.exitA_star(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitA_star" ):
                return visitor.visitA_star(self)
            else:
                return visitor.visitChildren(self)




    def a_star(self):

        localctx = tsqlParser.A_starContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_a_star)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2806
            self.match(tsqlParser.STAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_value_constructorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(tsqlParser.VALUES, 0)

        def value_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Value_listContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Value_listContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_table_value_constructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_value_constructor" ):
                listener.enterTable_value_constructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_value_constructor" ):
                listener.exitTable_value_constructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_value_constructor" ):
                return visitor.visitTable_value_constructor(self)
            else:
                return visitor.visitChildren(self)




    def table_value_constructor(self):

        localctx = tsqlParser.Table_value_constructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_table_value_constructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2808
            self.match(tsqlParser.VALUES)
            self.state = 2809
            self.value_list()
            self.state = 2814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2810
                self.match(tsqlParser.COMMA)
                self.state = 2811
                self.value_list()
                self.state = 2816
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression_list" ):
                return visitor.visitExpression_list(self)
            else:
                return visitor.visitChildren(self)




    def expression_list(self):

        localctx = tsqlParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2817
            self.expression(0)
            self.state = 2822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2818
                self.match(tsqlParser.COMMA)
                self.state = 2819
                self.expression(0)
                self.state = 2824
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Value_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_value_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_list" ):
                listener.enterValue_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_list" ):
                listener.exitValue_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValue_list" ):
                return visitor.visitValue_list(self)
            else:
                return visitor.visitChildren(self)




    def value_list(self):

        localctx = tsqlParser.Value_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_value_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2825
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2826
            self.expression_list()
            self.state = 2827
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Next_value_forContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEXT(self):
            return self.getToken(tsqlParser.NEXT, 0)

        def VALUE(self):
            return self.getToken(tsqlParser.VALUE, 0)

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_next_value_for

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNext_value_for" ):
                listener.enterNext_value_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNext_value_for" ):
                listener.exitNext_value_for(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNext_value_for" ):
                return visitor.visitNext_value_for(self)
            else:
                return visitor.visitChildren(self)




    def next_value_for(self):

        localctx = tsqlParser.Next_value_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_next_value_for)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2829
            self.match(tsqlParser.NEXT)
            self.state = 2830
            self.match(tsqlParser.VALUE)
            self.state = 2831
            self.match(tsqlParser.FOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Next_value_for_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.args = None # Func_proc_nameContext

        def next_value_for(self):
            return self.getTypedRuleContext(tsqlParser.Next_value_forContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(tsqlParser.Over_clauseContext,0)


        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_next_value_for_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNext_value_for_function" ):
                listener.enterNext_value_for_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNext_value_for_function" ):
                listener.exitNext_value_for_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNext_value_for_function" ):
                return visitor.visitNext_value_for_function(self)
            else:
                return visitor.visitChildren(self)




    def next_value_for_function(self):

        localctx = tsqlParser.Next_value_for_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_next_value_for_function)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2833
            self.next_value_for()
            self.state = 2834
            localctx.args = self.func_proc_name()
            self.state = 2835
            self.over_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ranking_windowed_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def over_clause(self):
            return self.getTypedRuleContext(tsqlParser.Over_clauseContext,0)


        def RANK(self):
            return self.getToken(tsqlParser.RANK, 0)

        def DENSE_RANK(self):
            return self.getToken(tsqlParser.DENSE_RANK, 0)

        def ROW_NUMBER(self):
            return self.getToken(tsqlParser.ROW_NUMBER, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)


        def NTILE(self):
            return self.getToken(tsqlParser.NTILE, 0)

        def FIRST_VALUE(self):
            return self.getToken(tsqlParser.FIRST_VALUE, 0)

        def LAST_VALUE(self):
            return self.getToken(tsqlParser.LAST_VALUE, 0)

        def LEAD(self):
            return self.getToken(tsqlParser.LEAD, 0)

        def LAG(self):
            return self.getToken(tsqlParser.LAG, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_ranking_windowed_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRanking_windowed_function" ):
                listener.enterRanking_windowed_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRanking_windowed_function" ):
                listener.exitRanking_windowed_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRanking_windowed_function" ):
                return visitor.visitRanking_windowed_function(self)
            else:
                return visitor.visitChildren(self)




    def ranking_windowed_function(self):

        localctx = tsqlParser.Ranking_windowed_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_ranking_windowed_function)
        self._la = 0 # Token type
        try:
            self.state = 2860
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.DENSE_RANK, tsqlParser.RANK, tsqlParser.ROW_NUMBER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2837
                _la = self._input.LA(1)
                if not(_la==tsqlParser.DENSE_RANK or _la==tsqlParser.RANK or _la==tsqlParser.ROW_NUMBER):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2838
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2839
                self.match(tsqlParser.RR_BRACKET)
                self.state = 2840
                self.over_clause()
                pass
            elif token in [tsqlParser.FIRST_VALUE, tsqlParser.LAST_VALUE, tsqlParser.NTILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2841
                _la = self._input.LA(1)
                if not(((((_la - 275)) & ~0x3f) == 0 and ((1 << (_la - 275)) & ((1 << (tsqlParser.FIRST_VALUE - 275)) | (1 << (tsqlParser.LAST_VALUE - 275)) | (1 << (tsqlParser.NTILE - 275)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2842
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2843
                self.expression(0)
                self.state = 2844
                self.match(tsqlParser.RR_BRACKET)
                self.state = 2845
                self.over_clause()
                pass
            elif token in [tsqlParser.LAG, tsqlParser.LEAD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2847
                _la = self._input.LA(1)
                if not(_la==tsqlParser.LAG or _la==tsqlParser.LEAD):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2848
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2849
                self.expression(0)
                self.state = 2854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 2850
                    self.match(tsqlParser.COMMA)
                    self.state = 2851
                    self.expression(0)
                    self.state = 2856
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2857
                self.match(tsqlParser.RR_BRACKET)
                self.state = 2858
                self.over_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Aggregate_windowed_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.args = None # Token

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def AVG(self):
            return self.getToken(tsqlParser.AVG, 0)

        def MAX(self):
            return self.getToken(tsqlParser.MAX, 0)

        def MIN(self):
            return self.getToken(tsqlParser.MIN, 0)

        def SUM(self):
            return self.getToken(tsqlParser.SUM, 0)

        def STDEV(self):
            return self.getToken(tsqlParser.STDEV, 0)

        def STDEVP(self):
            return self.getToken(tsqlParser.STDEVP, 0)

        def VAR(self):
            return self.getToken(tsqlParser.VAR, 0)

        def VARP(self):
            return self.getToken(tsqlParser.VARP, 0)

        def all_distinct(self):
            return self.getTypedRuleContext(tsqlParser.All_distinctContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(tsqlParser.Over_clauseContext,0)


        def COUNT(self):
            return self.getToken(tsqlParser.COUNT, 0)

        def COUNT_BIG(self):
            return self.getToken(tsqlParser.COUNT_BIG, 0)

        def STAR(self):
            return self.getToken(tsqlParser.STAR, 0)

        def CHECKSUM_AGG(self):
            return self.getToken(tsqlParser.CHECKSUM_AGG, 0)

        def GROUPING(self):
            return self.getToken(tsqlParser.GROUPING, 0)

        def GROUPING_ID(self):
            return self.getToken(tsqlParser.GROUPING_ID, 0)

        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_aggregate_windowed_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_windowed_function" ):
                listener.enterAggregate_windowed_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_windowed_function" ):
                listener.exitAggregate_windowed_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregate_windowed_function" ):
                return visitor.visitAggregate_windowed_function(self)
            else:
                return visitor.visitChildren(self)




    def aggregate_windowed_function(self):

        localctx = tsqlParser.Aggregate_windowed_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_aggregate_windowed_function)
        self._la = 0 # Token type
        try:
            self.state = 2903
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.AVG, tsqlParser.MAX, tsqlParser.MIN, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.VAR, tsqlParser.VARP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2862
                _la = self._input.LA(1)
                if not(_la==tsqlParser.AVG or _la==tsqlParser.MAX or _la==tsqlParser.MIN or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (tsqlParser.STDEV - 393)) | (1 << (tsqlParser.STDEVP - 393)) | (1 << (tsqlParser.SUM - 393)) | (1 << (tsqlParser.VAR - 393)) | (1 << (tsqlParser.VARP - 393)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2863
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2865
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ALL or _la==tsqlParser.DISTINCT:
                    self.state = 2864
                    self.all_distinct()


                self.state = 2867
                self.expression(0)
                self.state = 2868
                self.match(tsqlParser.RR_BRACKET)
                self.state = 2870
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,396,self._ctx)
                if la_ == 1:
                    self.state = 2869
                    self.over_clause()


                pass
            elif token in [tsqlParser.COUNT, tsqlParser.COUNT_BIG]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2872
                _la = self._input.LA(1)
                if not(_la==tsqlParser.COUNT or _la==tsqlParser.COUNT_BIG):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2873
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2879
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.STAR]:
                    self.state = 2874
                    localctx.args = self.match(tsqlParser.STAR)
                    pass
                elif token in [tsqlParser.ALL, tsqlParser.CASE, tsqlParser.COALESCE, tsqlParser.CONVERT, tsqlParser.CURRENT_TIMESTAMP, tsqlParser.CURRENT_USER, tsqlParser.DEFAULT, tsqlParser.DISTINCT, tsqlParser.FORCESEEK, tsqlParser.IDENTITY, tsqlParser.IIF, tsqlParser.LEFT, tsqlParser.NEXT, tsqlParser.NULL, tsqlParser.NULLIF, tsqlParser.NUMERIC, tsqlParser.OVER, tsqlParser.RIGHT, tsqlParser.SESSION_USER, tsqlParser.SYSTEM_USER, tsqlParser.TRY_CAST, tsqlParser.TRY_CONVERT, tsqlParser.TRY_PARSE, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.BINARY_CHECKSUM, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DATEADD, tsqlParser.DATEDIFF, tsqlParser.DATENAME, tsqlParser.DATEPART, tsqlParser.DATETIMEOFFSETFROMPARTS, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MIN_ACTIVE_ROWVERSION, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARSE, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PERCENTILE_CONT, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.STRING_AGG, tsqlParser.STRING_SPLIT, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.LOCAL_ID, tsqlParser.DECIMAL, tsqlParser.ID, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.LR_BRACKET, tsqlParser.PLUS, tsqlParser.MINUS, tsqlParser.BIT_NOT]:
                    self.state = 2876
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.ALL or _la==tsqlParser.DISTINCT:
                        self.state = 2875
                        self.all_distinct()


                    self.state = 2878
                    self.expression(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2881
                self.match(tsqlParser.RR_BRACKET)
                self.state = 2883
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,399,self._ctx)
                if la_ == 1:
                    self.state = 2882
                    self.over_clause()


                pass
            elif token in [tsqlParser.CHECKSUM_AGG]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2885
                self.match(tsqlParser.CHECKSUM_AGG)
                self.state = 2886
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2888
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ALL or _la==tsqlParser.DISTINCT:
                    self.state = 2887
                    self.all_distinct()


                self.state = 2890
                self.expression(0)
                self.state = 2891
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [tsqlParser.GROUPING]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2893
                self.match(tsqlParser.GROUPING)
                self.state = 2894
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2895
                self.expression(0)
                self.state = 2896
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [tsqlParser.GROUPING_ID]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2898
                self.match(tsqlParser.GROUPING_ID)
                self.state = 2899
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2900
                self.expression_list()
                self.state = 2901
                self.match(tsqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class All_distinctContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(tsqlParser.DISTINCT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_all_distinct

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_distinct" ):
                listener.enterAll_distinct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_distinct" ):
                listener.exitAll_distinct(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAll_distinct" ):
                return visitor.visitAll_distinct(self)
            else:
                return visitor.visitChildren(self)




    def all_distinct(self):

        localctx = tsqlParser.All_distinctContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_all_distinct)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2905
            _la = self._input.LA(1)
            if not(_la==tsqlParser.ALL or _la==tsqlParser.DISTINCT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Over_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(tsqlParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(tsqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(tsqlParser.BY, 0)

        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(tsqlParser.Order_by_clauseContext,0)


        def row_or_range_clause(self):
            return self.getTypedRuleContext(tsqlParser.Row_or_range_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_over_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause" ):
                listener.enterOver_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause" ):
                listener.exitOver_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOver_clause" ):
                return visitor.visitOver_clause(self)
            else:
                return visitor.visitChildren(self)




    def over_clause(self):

        localctx = tsqlParser.Over_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_over_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2907
            self.match(tsqlParser.OVER)
            self.state = 2908
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2912
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.PARTITION:
                self.state = 2909
                self.match(tsqlParser.PARTITION)
                self.state = 2910
                self.match(tsqlParser.BY)
                self.state = 2911
                self.expression_list()


            self.state = 2915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ORDER:
                self.state = 2914
                self.order_by_clause()


            self.state = 2918
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.RANGE or _la==tsqlParser.ROWS:
                self.state = 2917
                self.row_or_range_clause()


            self.state = 2920
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Row_or_range_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_frame_extent(self):
            return self.getTypedRuleContext(tsqlParser.Window_frame_extentContext,0)


        def ROWS(self):
            return self.getToken(tsqlParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(tsqlParser.RANGE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_row_or_range_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_or_range_clause" ):
                listener.enterRow_or_range_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_or_range_clause" ):
                listener.exitRow_or_range_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRow_or_range_clause" ):
                return visitor.visitRow_or_range_clause(self)
            else:
                return visitor.visitChildren(self)




    def row_or_range_clause(self):

        localctx = tsqlParser.Row_or_range_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_row_or_range_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2922
            _la = self._input.LA(1)
            if not(_la==tsqlParser.RANGE or _la==tsqlParser.ROWS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2923
            self.window_frame_extent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_frame_extentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_frame_preceding(self):
            return self.getTypedRuleContext(tsqlParser.Window_frame_precedingContext,0)


        def BETWEEN(self):
            return self.getToken(tsqlParser.BETWEEN, 0)

        def window_frame_bound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Window_frame_boundContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Window_frame_boundContext,i)


        def AND(self):
            return self.getToken(tsqlParser.AND, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_window_frame_extent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_extent" ):
                listener.enterWindow_frame_extent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_extent" ):
                listener.exitWindow_frame_extent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindow_frame_extent" ):
                return visitor.visitWindow_frame_extent(self)
            else:
                return visitor.visitChildren(self)




    def window_frame_extent(self):

        localctx = tsqlParser.Window_frame_extentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_window_frame_extent)
        try:
            self.state = 2931
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CURRENT, tsqlParser.UNBOUNDED, tsqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2925
                self.window_frame_preceding()
                pass
            elif token in [tsqlParser.BETWEEN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2926
                self.match(tsqlParser.BETWEEN)
                self.state = 2927
                self.window_frame_bound()
                self.state = 2928
                self.match(tsqlParser.AND)
                self.state = 2929
                self.window_frame_bound()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_frame_boundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_frame_preceding(self):
            return self.getTypedRuleContext(tsqlParser.Window_frame_precedingContext,0)


        def window_frame_following(self):
            return self.getTypedRuleContext(tsqlParser.Window_frame_followingContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_window_frame_bound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_bound" ):
                listener.enterWindow_frame_bound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_bound" ):
                listener.exitWindow_frame_bound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindow_frame_bound" ):
                return visitor.visitWindow_frame_bound(self)
            else:
                return visitor.visitChildren(self)




    def window_frame_bound(self):

        localctx = tsqlParser.Window_frame_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_window_frame_bound)
        try:
            self.state = 2935
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,406,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2933
                self.window_frame_preceding()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2934
                self.window_frame_following()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_frame_precedingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNBOUNDED(self):
            return self.getToken(tsqlParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(tsqlParser.PRECEDING, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def CURRENT(self):
            return self.getToken(tsqlParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(tsqlParser.ROW, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_window_frame_preceding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_preceding" ):
                listener.enterWindow_frame_preceding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_preceding" ):
                listener.exitWindow_frame_preceding(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindow_frame_preceding" ):
                return visitor.visitWindow_frame_preceding(self)
            else:
                return visitor.visitChildren(self)




    def window_frame_preceding(self):

        localctx = tsqlParser.Window_frame_precedingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_window_frame_preceding)
        try:
            self.state = 2943
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.UNBOUNDED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2937
                self.match(tsqlParser.UNBOUNDED)
                self.state = 2938
                self.match(tsqlParser.PRECEDING)
                pass
            elif token in [tsqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2939
                self.match(tsqlParser.DECIMAL)
                self.state = 2940
                self.match(tsqlParser.PRECEDING)
                pass
            elif token in [tsqlParser.CURRENT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2941
                self.match(tsqlParser.CURRENT)
                self.state = 2942
                self.match(tsqlParser.ROW)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_frame_followingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNBOUNDED(self):
            return self.getToken(tsqlParser.UNBOUNDED, 0)

        def FOLLOWING(self):
            return self.getToken(tsqlParser.FOLLOWING, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_window_frame_following

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_following" ):
                listener.enterWindow_frame_following(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_following" ):
                listener.exitWindow_frame_following(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindow_frame_following" ):
                return visitor.visitWindow_frame_following(self)
            else:
                return visitor.visitChildren(self)




    def window_frame_following(self):

        localctx = tsqlParser.Window_frame_followingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_window_frame_following)
        try:
            self.state = 2949
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.UNBOUNDED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2945
                self.match(tsqlParser.UNBOUNDED)
                self.state = 2946
                self.match(tsqlParser.FOLLOWING)
                pass
            elif token in [tsqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2947
                self.match(tsqlParser.DECIMAL)
                self.state = 2948
                self.match(tsqlParser.FOLLOWING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_database_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILESTREAM(self):
            return self.getToken(tsqlParser.FILESTREAM, 0)

        def database_filestream_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Database_filestream_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Database_filestream_optionContext,i)


        def DEFAULT_LANGUAGE(self):
            return self.getToken(tsqlParser.DEFAULT_LANGUAGE, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def DEFAULT_FULLTEXT_LANGUAGE(self):
            return self.getToken(tsqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0)

        def NESTED_TRIGGERS(self):
            return self.getToken(tsqlParser.NESTED_TRIGGERS, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def TRANSFORM_NOISE_WORDS(self):
            return self.getToken(tsqlParser.TRANSFORM_NOISE_WORDS, 0)

        def TWO_DIGIT_YEAR_CUTOFF(self):
            return self.getToken(tsqlParser.TWO_DIGIT_YEAR_CUTOFF, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def DB_CHAINING(self):
            return self.getToken(tsqlParser.DB_CHAINING, 0)

        def TRUSTWORTHY(self):
            return self.getToken(tsqlParser.TRUSTWORTHY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_database_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_database_option" ):
                listener.enterCreate_database_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_database_option" ):
                listener.exitCreate_database_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_database_option" ):
                return visitor.visitCreate_database_option(self)
            else:
                return visitor.visitChildren(self)




    def create_database_option(self):

        localctx = tsqlParser.Create_database_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_create_database_option)
        self._la = 0 # Token type
        try:
            self.state = 2985
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FILESTREAM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2951
                self.match(tsqlParser.FILESTREAM)

                self.state = 2952
                self.database_filestream_option()
                self.state = 2957
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,409,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2953
                        self.match(tsqlParser.COMMA)
                        self.state = 2954
                        self.database_filestream_option() 
                    self.state = 2959
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,409,self._ctx)

                pass
            elif token in [tsqlParser.DEFAULT_LANGUAGE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2960
                self.match(tsqlParser.DEFAULT_LANGUAGE)
                self.state = 2961
                self.match(tsqlParser.EQUAL)
                self.state = 2964
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 2962
                    self.r_id()
                    pass
                elif token in [tsqlParser.STRING]:
                    self.state = 2963
                    self.match(tsqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [tsqlParser.DEFAULT_FULLTEXT_LANGUAGE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2966
                self.match(tsqlParser.DEFAULT_FULLTEXT_LANGUAGE)
                self.state = 2967
                self.match(tsqlParser.EQUAL)
                self.state = 2970
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 2968
                    self.r_id()
                    pass
                elif token in [tsqlParser.STRING]:
                    self.state = 2969
                    self.match(tsqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [tsqlParser.NESTED_TRIGGERS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2972
                self.match(tsqlParser.NESTED_TRIGGERS)
                self.state = 2973
                self.match(tsqlParser.EQUAL)
                self.state = 2974
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.TRANSFORM_NOISE_WORDS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2975
                self.match(tsqlParser.TRANSFORM_NOISE_WORDS)
                self.state = 2976
                self.match(tsqlParser.EQUAL)
                self.state = 2977
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.TWO_DIGIT_YEAR_CUTOFF]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2978
                self.match(tsqlParser.TWO_DIGIT_YEAR_CUTOFF)
                self.state = 2979
                self.match(tsqlParser.EQUAL)
                self.state = 2980
                self.match(tsqlParser.DECIMAL)
                pass
            elif token in [tsqlParser.DB_CHAINING]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2981
                self.match(tsqlParser.DB_CHAINING)
                self.state = 2982
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.TRUSTWORTHY]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2983
                self.match(tsqlParser.TRUSTWORTHY)
                self.state = 2984
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Database_filestream_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def NON_TRANSACTED_ACCESS(self):
            return self.getToken(tsqlParser.NON_TRANSACTED_ACCESS, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def DIRECTORY_NAME(self):
            return self.getToken(tsqlParser.DIRECTORY_NAME, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def READ_ONLY(self):
            return self.getToken(tsqlParser.READ_ONLY, 0)

        def FULL(self):
            return self.getToken(tsqlParser.FULL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_database_filestream_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_filestream_option" ):
                listener.enterDatabase_filestream_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_filestream_option" ):
                listener.exitDatabase_filestream_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabase_filestream_option" ):
                return visitor.visitDatabase_filestream_option(self)
            else:
                return visitor.visitChildren(self)




    def database_filestream_option(self):

        localctx = tsqlParser.Database_filestream_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_database_filestream_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2987
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2994
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.NON_TRANSACTED_ACCESS]:
                self.state = 2988
                self.match(tsqlParser.NON_TRANSACTED_ACCESS)
                self.state = 2989
                self.match(tsqlParser.EQUAL)
                self.state = 2990
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FULL or _la==tsqlParser.OFF or _la==tsqlParser.READ_ONLY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.DIRECTORY_NAME]:
                self.state = 2991
                self.match(tsqlParser.DIRECTORY_NAME)
                self.state = 2992
                self.match(tsqlParser.EQUAL)
                self.state = 2993
                self.match(tsqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2996
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Database_file_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def file_group(self):
            return self.getTypedRuleContext(tsqlParser.File_groupContext,0)


        def file_spec(self):
            return self.getTypedRuleContext(tsqlParser.File_specContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_database_file_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_file_spec" ):
                listener.enterDatabase_file_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_file_spec" ):
                listener.exitDatabase_file_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabase_file_spec" ):
                return visitor.visitDatabase_file_spec(self)
            else:
                return visitor.visitChildren(self)




    def database_file_spec(self):

        localctx = tsqlParser.Database_file_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_database_file_spec)
        try:
            self.state = 3000
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FILEGROUP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2998
                self.file_group()
                pass
            elif token in [tsqlParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2999
                self.file_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class File_groupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILEGROUP(self):
            return self.getToken(tsqlParser.FILEGROUP, 0)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def file_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.File_specContext)
            else:
                return self.getTypedRuleContext(tsqlParser.File_specContext,i)


        def CONTAINS(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.CONTAINS)
            else:
                return self.getToken(tsqlParser.CONTAINS, i)

        def FILESTREAM(self):
            return self.getToken(tsqlParser.FILESTREAM, 0)

        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)

        def MEMORY_OPTIMIZED_DATA(self):
            return self.getToken(tsqlParser.MEMORY_OPTIMIZED_DATA, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_file_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_group" ):
                listener.enterFile_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_group" ):
                listener.exitFile_group(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_group" ):
                return visitor.visitFile_group(self)
            else:
                return visitor.visitChildren(self)




    def file_group(self):

        localctx = tsqlParser.File_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_file_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3002
            self.match(tsqlParser.FILEGROUP)
            self.state = 3003
            self.r_id()
            self.state = 3006
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,415,self._ctx)
            if la_ == 1:
                self.state = 3004
                self.match(tsqlParser.CONTAINS)
                self.state = 3005
                self.match(tsqlParser.FILESTREAM)


            self.state = 3009
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.DEFAULT:
                self.state = 3008
                self.match(tsqlParser.DEFAULT)


            self.state = 3013
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.CONTAINS:
                self.state = 3011
                self.match(tsqlParser.CONTAINS)
                self.state = 3012
                self.match(tsqlParser.MEMORY_OPTIMIZED_DATA)


            self.state = 3015
            self.file_spec()
            self.state = 3020
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,418,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3016
                    self.match(tsqlParser.COMMA)
                    self.state = 3017
                    self.file_spec() 
                self.state = 3022
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,418,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class File_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.r_file = None # Token

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def NAME(self):
            return self.getToken(tsqlParser.NAME, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.EQUAL)
            else:
                return self.getToken(tsqlParser.EQUAL, i)

        def FILENAME(self):
            return self.getToken(tsqlParser.FILENAME, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.STRING)
            else:
                return self.getToken(tsqlParser.STRING, i)

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def SIZE(self):
            return self.getToken(tsqlParser.SIZE, 0)

        def file_size(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.File_sizeContext)
            else:
                return self.getTypedRuleContext(tsqlParser.File_sizeContext,i)


        def MAXSIZE(self):
            return self.getToken(tsqlParser.MAXSIZE, 0)

        def FILEGROWTH(self):
            return self.getToken(tsqlParser.FILEGROWTH, 0)

        def UNLIMITED(self):
            return self.getToken(tsqlParser.UNLIMITED, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_file_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_spec" ):
                listener.enterFile_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_spec" ):
                listener.exitFile_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_spec" ):
                return visitor.visitFile_spec(self)
            else:
                return visitor.visitChildren(self)




    def file_spec(self):

        localctx = tsqlParser.File_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_file_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3023
            self.match(tsqlParser.LR_BRACKET)
            self.state = 3024
            self.match(tsqlParser.NAME)
            self.state = 3025
            self.match(tsqlParser.EQUAL)
            self.state = 3028
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.state = 3026
                self.r_id()
                pass
            elif token in [tsqlParser.STRING]:
                self.state = 3027
                self.match(tsqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.COMMA:
                self.state = 3030
                self.match(tsqlParser.COMMA)


            self.state = 3033
            self.match(tsqlParser.FILENAME)
            self.state = 3034
            self.match(tsqlParser.EQUAL)
            self.state = 3035
            localctx.r_file = self.match(tsqlParser.STRING)
            self.state = 3037
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.COMMA:
                self.state = 3036
                self.match(tsqlParser.COMMA)


            self.state = 3045
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.SIZE:
                self.state = 3039
                self.match(tsqlParser.SIZE)
                self.state = 3040
                self.match(tsqlParser.EQUAL)
                self.state = 3041
                self.file_size()
                self.state = 3043
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 3042
                    self.match(tsqlParser.COMMA)




            self.state = 3056
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.MAXSIZE:
                self.state = 3047
                self.match(tsqlParser.MAXSIZE)
                self.state = 3048
                self.match(tsqlParser.EQUAL)
                self.state = 3051
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.DECIMAL]:
                    self.state = 3049
                    self.file_size()
                    pass
                elif token in [tsqlParser.UNLIMITED]:
                    self.state = 3050
                    self.match(tsqlParser.UNLIMITED)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3054
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 3053
                    self.match(tsqlParser.COMMA)




            self.state = 3064
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FILEGROWTH:
                self.state = 3058
                self.match(tsqlParser.FILEGROWTH)
                self.state = 3059
                self.match(tsqlParser.EQUAL)
                self.state = 3060
                self.file_size()
                self.state = 3062
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 3061
                    self.match(tsqlParser.COMMA)




            self.state = 3066
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Full_table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.server = None # R_idContext
            self.database = None # R_idContext
            self.schema = None # R_idContext
            self.table = None # R_idContext

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_full_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_table_name" ):
                listener.enterFull_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_table_name" ):
                listener.exitFull_table_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFull_table_name" ):
                return visitor.visitFull_table_name(self)
            else:
                return visitor.visitChildren(self)




    def full_table_name(self):

        localctx = tsqlParser.Full_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_full_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3085
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,430,self._ctx)
            if la_ == 1:
                self.state = 3068
                localctx.server = self.r_id()
                self.state = 3069
                self.match(tsqlParser.DOT)
                self.state = 3070
                localctx.database = self.r_id()
                self.state = 3071
                self.match(tsqlParser.DOT)
                self.state = 3072
                localctx.schema = self.r_id()
                self.state = 3073
                self.match(tsqlParser.DOT)

            elif la_ == 2:
                self.state = 3075
                localctx.database = self.r_id()
                self.state = 3076
                self.match(tsqlParser.DOT)
                self.state = 3078
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (tsqlParser.FORCESEEK - 73)) | (1 << (tsqlParser.NEXT - 73)) | (1 << (tsqlParser.NUMERIC - 73)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (tsqlParser.VALUE - 192)) | (1 << (tsqlParser.ABSOLUTE - 192)) | (1 << (tsqlParser.APPLY - 192)) | (1 << (tsqlParser.AUTO - 192)) | (1 << (tsqlParser.AVG - 192)) | (1 << (tsqlParser.BASE64 - 192)) | (1 << (tsqlParser.CALLER - 192)) | (1 << (tsqlParser.CAST - 192)) | (1 << (tsqlParser.CATCH - 192)) | (1 << (tsqlParser.CHECKSUM_AGG - 192)) | (1 << (tsqlParser.COMMITTED - 192)) | (1 << (tsqlParser.CONCAT - 192)) | (1 << (tsqlParser.CONTROL - 192)) | (1 << (tsqlParser.COOKIE - 192)) | (1 << (tsqlParser.COUNT - 192)) | (1 << (tsqlParser.COUNT_BIG - 192)) | (1 << (tsqlParser.DATE - 192)) | (1 << (tsqlParser.DELAY - 192)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (tsqlParser.DELETED - 257)) | (1 << (tsqlParser.DENSE_RANK - 257)) | (1 << (tsqlParser.DISABLE - 257)) | (1 << (tsqlParser.DYNAMIC - 257)) | (1 << (tsqlParser.ENCRYPTION - 257)) | (1 << (tsqlParser.EXPAND - 257)) | (1 << (tsqlParser.FAST - 257)) | (1 << (tsqlParser.FAST_FORWARD - 257)) | (1 << (tsqlParser.FIRST - 257)) | (1 << (tsqlParser.FIRST_VALUE - 257)) | (1 << (tsqlParser.FOLLOWING - 257)) | (1 << (tsqlParser.FORCE - 257)) | (1 << (tsqlParser.FORCED - 257)) | (1 << (tsqlParser.FORWARD_ONLY - 257)) | (1 << (tsqlParser.FULLSCAN - 257)) | (1 << (tsqlParser.GLOBAL - 257)) | (1 << (tsqlParser.GO - 257)) | (1 << (tsqlParser.GROUPING - 257)) | (1 << (tsqlParser.GROUPING_ID - 257)) | (1 << (tsqlParser.HASH - 257)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 257)) | (1 << (tsqlParser.IMPERSONATE - 257)) | (1 << (tsqlParser.INSENSITIVE - 257)) | (1 << (tsqlParser.INSERTED - 257)) | (1 << (tsqlParser.ISOLATION - 257)) | (1 << (tsqlParser.IO - 257)) | (1 << (tsqlParser.KEEP - 257)) | (1 << (tsqlParser.KEEPFIXED - 257)) | (1 << (tsqlParser.KEYSET - 257)) | (1 << (tsqlParser.LAG - 257)) | (1 << (tsqlParser.LAST - 257)) | (1 << (tsqlParser.LAST_VALUE - 257)) | (1 << (tsqlParser.LEAD - 257)) | (1 << (tsqlParser.LEVEL - 257)) | (1 << (tsqlParser.LOCAL - 257)) | (1 << (tsqlParser.LOCK_ESCALATION - 257)) | (1 << (tsqlParser.LOGIN - 257)) | (1 << (tsqlParser.LOOP - 257)) | (1 << (tsqlParser.MARK - 257)) | (1 << (tsqlParser.MAX - 257)) | (1 << (tsqlParser.MAXDOP - 257)) | (1 << (tsqlParser.MAXRECURSION - 257)) | (1 << (tsqlParser.MIN - 257)))) != 0) or ((((_la - 324)) & ~0x3f) == 0 and ((1 << (_la - 324)) & ((1 << (tsqlParser.MODIFY - 324)) | (1 << (tsqlParser.NAME - 324)) | (1 << (tsqlParser.NOCOUNT - 324)) | (1 << (tsqlParser.NOEXPAND - 324)) | (1 << (tsqlParser.NORECOMPUTE - 324)) | (1 << (tsqlParser.NTILE - 324)) | (1 << (tsqlParser.NUMBER - 324)) | (1 << (tsqlParser.OFFSET - 324)) | (1 << (tsqlParser.ONLINE - 324)) | (1 << (tsqlParser.ONLY - 324)) | (1 << (tsqlParser.OPTIMISTIC - 324)) | (1 << (tsqlParser.OPTIMIZE - 324)) | (1 << (tsqlParser.OUT - 324)) | (1 << (tsqlParser.OUTPUT - 324)) | (1 << (tsqlParser.OWNER - 324)) | (1 << (tsqlParser.PARAMETERIZATION - 324)) | (1 << (tsqlParser.PARTITION - 324)) | (1 << (tsqlParser.PATH - 324)) | (1 << (tsqlParser.PRECEDING - 324)) | (1 << (tsqlParser.PRIOR - 324)) | (1 << (tsqlParser.PRIVILEGES - 324)) | (1 << (tsqlParser.RANGE - 324)) | (1 << (tsqlParser.RANK - 324)) | (1 << (tsqlParser.READONLY - 324)) | (1 << (tsqlParser.READ_ONLY - 324)) | (1 << (tsqlParser.RECOMPILE - 324)) | (1 << (tsqlParser.RELATIVE - 324)) | (1 << (tsqlParser.REMOTE - 324)) | (1 << (tsqlParser.REPEATABLE - 324)) | (1 << (tsqlParser.ROBUST - 324)) | (1 << (tsqlParser.ROOT - 324)) | (1 << (tsqlParser.ROW - 324)) | (1 << (tsqlParser.ROWGUID - 324)) | (1 << (tsqlParser.ROWS - 324)) | (1 << (tsqlParser.ROW_NUMBER - 324)) | (1 << (tsqlParser.SAMPLE - 324)) | (1 << (tsqlParser.SCHEMABINDING - 324)) | (1 << (tsqlParser.SCROLL - 324)) | (1 << (tsqlParser.SCROLL_LOCKS - 324)) | (1 << (tsqlParser.SELF - 324)) | (1 << (tsqlParser.SERIALIZABLE - 324)) | (1 << (tsqlParser.SIMPLE - 324)) | (1 << (tsqlParser.SIZE - 324)))) != 0) or ((((_la - 389)) & ~0x3f) == 0 and ((1 << (_la - 389)) & ((1 << (tsqlParser.SNAPSHOT - 389)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 389)) | (1 << (tsqlParser.STATIC - 389)) | (1 << (tsqlParser.STATS_STREAM - 389)) | (1 << (tsqlParser.STDEV - 389)) | (1 << (tsqlParser.STDEVP - 389)) | (1 << (tsqlParser.SUM - 389)) | (1 << (tsqlParser.TEXTIMAGE_ON - 389)) | (1 << (tsqlParser.THROW - 389)) | (1 << (tsqlParser.TIES - 389)) | (1 << (tsqlParser.TIME - 389)) | (1 << (tsqlParser.TRY - 389)) | (1 << (tsqlParser.TYPE - 389)) | (1 << (tsqlParser.TYPE_WARNING - 389)) | (1 << (tsqlParser.UNBOUNDED - 389)) | (1 << (tsqlParser.UNCOMMITTED - 389)) | (1 << (tsqlParser.UNKNOWN - 389)) | (1 << (tsqlParser.USING - 389)) | (1 << (tsqlParser.VAR - 389)) | (1 << (tsqlParser.VARP - 389)) | (1 << (tsqlParser.VIEWS - 389)) | (1 << (tsqlParser.VIEW_METADATA - 389)) | (1 << (tsqlParser.WORK - 389)) | (1 << (tsqlParser.XML - 389)) | (1 << (tsqlParser.XMLNAMESPACES - 389)) | (1 << (tsqlParser.ZONE - 389)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 389)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 389)) | (1 << (tsqlParser.ID - 389)))) != 0):
                    self.state = 3077
                    localctx.schema = self.r_id()


                self.state = 3080
                self.match(tsqlParser.DOT)

            elif la_ == 3:
                self.state = 3082
                localctx.schema = self.r_id()
                self.state = 3083
                self.match(tsqlParser.DOT)


            self.state = 3087
            localctx.table = self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # R_idContext
            self.schema = None # R_idContext
            self.table = None # R_idContext

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_name" ):
                return visitor.visitTable_name(self)
            else:
                return visitor.visitChildren(self)




    def table_name(self):

        localctx = tsqlParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3099
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,432,self._ctx)
            if la_ == 1:
                self.state = 3089
                localctx.database = self.r_id()
                self.state = 3090
                self.match(tsqlParser.DOT)
                self.state = 3092
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (tsqlParser.FORCESEEK - 73)) | (1 << (tsqlParser.NEXT - 73)) | (1 << (tsqlParser.NUMERIC - 73)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (tsqlParser.VALUE - 192)) | (1 << (tsqlParser.ABSOLUTE - 192)) | (1 << (tsqlParser.APPLY - 192)) | (1 << (tsqlParser.AUTO - 192)) | (1 << (tsqlParser.AVG - 192)) | (1 << (tsqlParser.BASE64 - 192)) | (1 << (tsqlParser.CALLER - 192)) | (1 << (tsqlParser.CAST - 192)) | (1 << (tsqlParser.CATCH - 192)) | (1 << (tsqlParser.CHECKSUM_AGG - 192)) | (1 << (tsqlParser.COMMITTED - 192)) | (1 << (tsqlParser.CONCAT - 192)) | (1 << (tsqlParser.CONTROL - 192)) | (1 << (tsqlParser.COOKIE - 192)) | (1 << (tsqlParser.COUNT - 192)) | (1 << (tsqlParser.COUNT_BIG - 192)) | (1 << (tsqlParser.DATE - 192)) | (1 << (tsqlParser.DELAY - 192)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (tsqlParser.DELETED - 257)) | (1 << (tsqlParser.DENSE_RANK - 257)) | (1 << (tsqlParser.DISABLE - 257)) | (1 << (tsqlParser.DYNAMIC - 257)) | (1 << (tsqlParser.ENCRYPTION - 257)) | (1 << (tsqlParser.EXPAND - 257)) | (1 << (tsqlParser.FAST - 257)) | (1 << (tsqlParser.FAST_FORWARD - 257)) | (1 << (tsqlParser.FIRST - 257)) | (1 << (tsqlParser.FIRST_VALUE - 257)) | (1 << (tsqlParser.FOLLOWING - 257)) | (1 << (tsqlParser.FORCE - 257)) | (1 << (tsqlParser.FORCED - 257)) | (1 << (tsqlParser.FORWARD_ONLY - 257)) | (1 << (tsqlParser.FULLSCAN - 257)) | (1 << (tsqlParser.GLOBAL - 257)) | (1 << (tsqlParser.GO - 257)) | (1 << (tsqlParser.GROUPING - 257)) | (1 << (tsqlParser.GROUPING_ID - 257)) | (1 << (tsqlParser.HASH - 257)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 257)) | (1 << (tsqlParser.IMPERSONATE - 257)) | (1 << (tsqlParser.INSENSITIVE - 257)) | (1 << (tsqlParser.INSERTED - 257)) | (1 << (tsqlParser.ISOLATION - 257)) | (1 << (tsqlParser.IO - 257)) | (1 << (tsqlParser.KEEP - 257)) | (1 << (tsqlParser.KEEPFIXED - 257)) | (1 << (tsqlParser.KEYSET - 257)) | (1 << (tsqlParser.LAG - 257)) | (1 << (tsqlParser.LAST - 257)) | (1 << (tsqlParser.LAST_VALUE - 257)) | (1 << (tsqlParser.LEAD - 257)) | (1 << (tsqlParser.LEVEL - 257)) | (1 << (tsqlParser.LOCAL - 257)) | (1 << (tsqlParser.LOCK_ESCALATION - 257)) | (1 << (tsqlParser.LOGIN - 257)) | (1 << (tsqlParser.LOOP - 257)) | (1 << (tsqlParser.MARK - 257)) | (1 << (tsqlParser.MAX - 257)) | (1 << (tsqlParser.MAXDOP - 257)) | (1 << (tsqlParser.MAXRECURSION - 257)) | (1 << (tsqlParser.MIN - 257)))) != 0) or ((((_la - 324)) & ~0x3f) == 0 and ((1 << (_la - 324)) & ((1 << (tsqlParser.MODIFY - 324)) | (1 << (tsqlParser.NAME - 324)) | (1 << (tsqlParser.NOCOUNT - 324)) | (1 << (tsqlParser.NOEXPAND - 324)) | (1 << (tsqlParser.NORECOMPUTE - 324)) | (1 << (tsqlParser.NTILE - 324)) | (1 << (tsqlParser.NUMBER - 324)) | (1 << (tsqlParser.OFFSET - 324)) | (1 << (tsqlParser.ONLINE - 324)) | (1 << (tsqlParser.ONLY - 324)) | (1 << (tsqlParser.OPTIMISTIC - 324)) | (1 << (tsqlParser.OPTIMIZE - 324)) | (1 << (tsqlParser.OUT - 324)) | (1 << (tsqlParser.OUTPUT - 324)) | (1 << (tsqlParser.OWNER - 324)) | (1 << (tsqlParser.PARAMETERIZATION - 324)) | (1 << (tsqlParser.PARTITION - 324)) | (1 << (tsqlParser.PATH - 324)) | (1 << (tsqlParser.PRECEDING - 324)) | (1 << (tsqlParser.PRIOR - 324)) | (1 << (tsqlParser.PRIVILEGES - 324)) | (1 << (tsqlParser.RANGE - 324)) | (1 << (tsqlParser.RANK - 324)) | (1 << (tsqlParser.READONLY - 324)) | (1 << (tsqlParser.READ_ONLY - 324)) | (1 << (tsqlParser.RECOMPILE - 324)) | (1 << (tsqlParser.RELATIVE - 324)) | (1 << (tsqlParser.REMOTE - 324)) | (1 << (tsqlParser.REPEATABLE - 324)) | (1 << (tsqlParser.ROBUST - 324)) | (1 << (tsqlParser.ROOT - 324)) | (1 << (tsqlParser.ROW - 324)) | (1 << (tsqlParser.ROWGUID - 324)) | (1 << (tsqlParser.ROWS - 324)) | (1 << (tsqlParser.ROW_NUMBER - 324)) | (1 << (tsqlParser.SAMPLE - 324)) | (1 << (tsqlParser.SCHEMABINDING - 324)) | (1 << (tsqlParser.SCROLL - 324)) | (1 << (tsqlParser.SCROLL_LOCKS - 324)) | (1 << (tsqlParser.SELF - 324)) | (1 << (tsqlParser.SERIALIZABLE - 324)) | (1 << (tsqlParser.SIMPLE - 324)) | (1 << (tsqlParser.SIZE - 324)))) != 0) or ((((_la - 389)) & ~0x3f) == 0 and ((1 << (_la - 389)) & ((1 << (tsqlParser.SNAPSHOT - 389)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 389)) | (1 << (tsqlParser.STATIC - 389)) | (1 << (tsqlParser.STATS_STREAM - 389)) | (1 << (tsqlParser.STDEV - 389)) | (1 << (tsqlParser.STDEVP - 389)) | (1 << (tsqlParser.SUM - 389)) | (1 << (tsqlParser.TEXTIMAGE_ON - 389)) | (1 << (tsqlParser.THROW - 389)) | (1 << (tsqlParser.TIES - 389)) | (1 << (tsqlParser.TIME - 389)) | (1 << (tsqlParser.TRY - 389)) | (1 << (tsqlParser.TYPE - 389)) | (1 << (tsqlParser.TYPE_WARNING - 389)) | (1 << (tsqlParser.UNBOUNDED - 389)) | (1 << (tsqlParser.UNCOMMITTED - 389)) | (1 << (tsqlParser.UNKNOWN - 389)) | (1 << (tsqlParser.USING - 389)) | (1 << (tsqlParser.VAR - 389)) | (1 << (tsqlParser.VARP - 389)) | (1 << (tsqlParser.VIEWS - 389)) | (1 << (tsqlParser.VIEW_METADATA - 389)) | (1 << (tsqlParser.WORK - 389)) | (1 << (tsqlParser.XML - 389)) | (1 << (tsqlParser.XMLNAMESPACES - 389)) | (1 << (tsqlParser.ZONE - 389)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 389)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 389)) | (1 << (tsqlParser.ID - 389)))) != 0):
                    self.state = 3091
                    localctx.schema = self.r_id()


                self.state = 3094
                self.match(tsqlParser.DOT)

            elif la_ == 2:
                self.state = 3096
                localctx.schema = self.r_id()
                self.state = 3097
                self.match(tsqlParser.DOT)


            self.state = 3101
            localctx.table = self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema = None # R_idContext
            self.name = None # R_idContext

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_simple_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_name" ):
                listener.enterSimple_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_name" ):
                listener.exitSimple_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_name" ):
                return visitor.visitSimple_name(self)
            else:
                return visitor.visitChildren(self)




    def simple_name(self):

        localctx = tsqlParser.Simple_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_simple_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3106
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,433,self._ctx)
            if la_ == 1:
                self.state = 3103
                localctx.schema = self.r_id()
                self.state = 3104
                self.match(tsqlParser.DOT)


            self.state = 3108
            localctx.name = self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_proc_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # R_idContext
            self.schema = None # R_idContext
            self.procedure = None # R_idContext

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_func_proc_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_proc_name" ):
                listener.enterFunc_proc_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_proc_name" ):
                listener.exitFunc_proc_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_proc_name" ):
                return visitor.visitFunc_proc_name(self)
            else:
                return visitor.visitChildren(self)




    def func_proc_name(self):

        localctx = tsqlParser.Func_proc_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_func_proc_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3120
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,435,self._ctx)
            if la_ == 1:
                self.state = 3110
                localctx.database = self.r_id()
                self.state = 3111
                self.match(tsqlParser.DOT)
                self.state = 3113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (tsqlParser.FORCESEEK - 73)) | (1 << (tsqlParser.NEXT - 73)) | (1 << (tsqlParser.NUMERIC - 73)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (tsqlParser.VALUE - 192)) | (1 << (tsqlParser.ABSOLUTE - 192)) | (1 << (tsqlParser.APPLY - 192)) | (1 << (tsqlParser.AUTO - 192)) | (1 << (tsqlParser.AVG - 192)) | (1 << (tsqlParser.BASE64 - 192)) | (1 << (tsqlParser.CALLER - 192)) | (1 << (tsqlParser.CAST - 192)) | (1 << (tsqlParser.CATCH - 192)) | (1 << (tsqlParser.CHECKSUM_AGG - 192)) | (1 << (tsqlParser.COMMITTED - 192)) | (1 << (tsqlParser.CONCAT - 192)) | (1 << (tsqlParser.CONTROL - 192)) | (1 << (tsqlParser.COOKIE - 192)) | (1 << (tsqlParser.COUNT - 192)) | (1 << (tsqlParser.COUNT_BIG - 192)) | (1 << (tsqlParser.DATE - 192)) | (1 << (tsqlParser.DELAY - 192)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (tsqlParser.DELETED - 257)) | (1 << (tsqlParser.DENSE_RANK - 257)) | (1 << (tsqlParser.DISABLE - 257)) | (1 << (tsqlParser.DYNAMIC - 257)) | (1 << (tsqlParser.ENCRYPTION - 257)) | (1 << (tsqlParser.EXPAND - 257)) | (1 << (tsqlParser.FAST - 257)) | (1 << (tsqlParser.FAST_FORWARD - 257)) | (1 << (tsqlParser.FIRST - 257)) | (1 << (tsqlParser.FIRST_VALUE - 257)) | (1 << (tsqlParser.FOLLOWING - 257)) | (1 << (tsqlParser.FORCE - 257)) | (1 << (tsqlParser.FORCED - 257)) | (1 << (tsqlParser.FORWARD_ONLY - 257)) | (1 << (tsqlParser.FULLSCAN - 257)) | (1 << (tsqlParser.GLOBAL - 257)) | (1 << (tsqlParser.GO - 257)) | (1 << (tsqlParser.GROUPING - 257)) | (1 << (tsqlParser.GROUPING_ID - 257)) | (1 << (tsqlParser.HASH - 257)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 257)) | (1 << (tsqlParser.IMPERSONATE - 257)) | (1 << (tsqlParser.INSENSITIVE - 257)) | (1 << (tsqlParser.INSERTED - 257)) | (1 << (tsqlParser.ISOLATION - 257)) | (1 << (tsqlParser.IO - 257)) | (1 << (tsqlParser.KEEP - 257)) | (1 << (tsqlParser.KEEPFIXED - 257)) | (1 << (tsqlParser.KEYSET - 257)) | (1 << (tsqlParser.LAG - 257)) | (1 << (tsqlParser.LAST - 257)) | (1 << (tsqlParser.LAST_VALUE - 257)) | (1 << (tsqlParser.LEAD - 257)) | (1 << (tsqlParser.LEVEL - 257)) | (1 << (tsqlParser.LOCAL - 257)) | (1 << (tsqlParser.LOCK_ESCALATION - 257)) | (1 << (tsqlParser.LOGIN - 257)) | (1 << (tsqlParser.LOOP - 257)) | (1 << (tsqlParser.MARK - 257)) | (1 << (tsqlParser.MAX - 257)) | (1 << (tsqlParser.MAXDOP - 257)) | (1 << (tsqlParser.MAXRECURSION - 257)) | (1 << (tsqlParser.MIN - 257)))) != 0) or ((((_la - 324)) & ~0x3f) == 0 and ((1 << (_la - 324)) & ((1 << (tsqlParser.MODIFY - 324)) | (1 << (tsqlParser.NAME - 324)) | (1 << (tsqlParser.NOCOUNT - 324)) | (1 << (tsqlParser.NOEXPAND - 324)) | (1 << (tsqlParser.NORECOMPUTE - 324)) | (1 << (tsqlParser.NTILE - 324)) | (1 << (tsqlParser.NUMBER - 324)) | (1 << (tsqlParser.OFFSET - 324)) | (1 << (tsqlParser.ONLINE - 324)) | (1 << (tsqlParser.ONLY - 324)) | (1 << (tsqlParser.OPTIMISTIC - 324)) | (1 << (tsqlParser.OPTIMIZE - 324)) | (1 << (tsqlParser.OUT - 324)) | (1 << (tsqlParser.OUTPUT - 324)) | (1 << (tsqlParser.OWNER - 324)) | (1 << (tsqlParser.PARAMETERIZATION - 324)) | (1 << (tsqlParser.PARTITION - 324)) | (1 << (tsqlParser.PATH - 324)) | (1 << (tsqlParser.PRECEDING - 324)) | (1 << (tsqlParser.PRIOR - 324)) | (1 << (tsqlParser.PRIVILEGES - 324)) | (1 << (tsqlParser.RANGE - 324)) | (1 << (tsqlParser.RANK - 324)) | (1 << (tsqlParser.READONLY - 324)) | (1 << (tsqlParser.READ_ONLY - 324)) | (1 << (tsqlParser.RECOMPILE - 324)) | (1 << (tsqlParser.RELATIVE - 324)) | (1 << (tsqlParser.REMOTE - 324)) | (1 << (tsqlParser.REPEATABLE - 324)) | (1 << (tsqlParser.ROBUST - 324)) | (1 << (tsqlParser.ROOT - 324)) | (1 << (tsqlParser.ROW - 324)) | (1 << (tsqlParser.ROWGUID - 324)) | (1 << (tsqlParser.ROWS - 324)) | (1 << (tsqlParser.ROW_NUMBER - 324)) | (1 << (tsqlParser.SAMPLE - 324)) | (1 << (tsqlParser.SCHEMABINDING - 324)) | (1 << (tsqlParser.SCROLL - 324)) | (1 << (tsqlParser.SCROLL_LOCKS - 324)) | (1 << (tsqlParser.SELF - 324)) | (1 << (tsqlParser.SERIALIZABLE - 324)) | (1 << (tsqlParser.SIMPLE - 324)) | (1 << (tsqlParser.SIZE - 324)))) != 0) or ((((_la - 389)) & ~0x3f) == 0 and ((1 << (_la - 389)) & ((1 << (tsqlParser.SNAPSHOT - 389)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 389)) | (1 << (tsqlParser.STATIC - 389)) | (1 << (tsqlParser.STATS_STREAM - 389)) | (1 << (tsqlParser.STDEV - 389)) | (1 << (tsqlParser.STDEVP - 389)) | (1 << (tsqlParser.SUM - 389)) | (1 << (tsqlParser.TEXTIMAGE_ON - 389)) | (1 << (tsqlParser.THROW - 389)) | (1 << (tsqlParser.TIES - 389)) | (1 << (tsqlParser.TIME - 389)) | (1 << (tsqlParser.TRY - 389)) | (1 << (tsqlParser.TYPE - 389)) | (1 << (tsqlParser.TYPE_WARNING - 389)) | (1 << (tsqlParser.UNBOUNDED - 389)) | (1 << (tsqlParser.UNCOMMITTED - 389)) | (1 << (tsqlParser.UNKNOWN - 389)) | (1 << (tsqlParser.USING - 389)) | (1 << (tsqlParser.VAR - 389)) | (1 << (tsqlParser.VARP - 389)) | (1 << (tsqlParser.VIEWS - 389)) | (1 << (tsqlParser.VIEW_METADATA - 389)) | (1 << (tsqlParser.WORK - 389)) | (1 << (tsqlParser.XML - 389)) | (1 << (tsqlParser.XMLNAMESPACES - 389)) | (1 << (tsqlParser.ZONE - 389)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 389)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 389)) | (1 << (tsqlParser.ID - 389)))) != 0):
                    self.state = 3112
                    localctx.schema = self.r_id()


                self.state = 3115
                self.match(tsqlParser.DOT)

            elif la_ == 2:
                self.state = 3117
                localctx.schema = self.r_id()
                self.state = 3118
                self.match(tsqlParser.DOT)


            self.state = 3122
            localctx.procedure = self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ddl_objectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def full_table_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_table_nameContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_ddl_object

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdl_object" ):
                listener.enterDdl_object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdl_object" ):
                listener.exitDdl_object(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDdl_object" ):
                return visitor.visitDdl_object(self)
            else:
                return visitor.visitChildren(self)




    def ddl_object(self):

        localctx = tsqlParser.Ddl_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_ddl_object)
        try:
            self.state = 3126
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3124
                self.full_table_name()
                pass
            elif token in [tsqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3125
                self.match(tsqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Full_column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.table = None # Table_nameContext
            self.name = None # R_idContext

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_full_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_column_name" ):
                listener.enterFull_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_column_name" ):
                listener.exitFull_column_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFull_column_name" ):
                return visitor.visitFull_column_name(self)
            else:
                return visitor.visitChildren(self)




    def full_column_name(self):

        localctx = tsqlParser.Full_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_full_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3131
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,437,self._ctx)
            if la_ == 1:
                self.state = 3128
                localctx.table = self.table_name()
                self.state = 3129
                self.match(tsqlParser.DOT)


            self.state = 3133
            localctx.name = self.r_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_name_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.R_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.R_idContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_column_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name_list" ):
                listener.enterColumn_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name_list" ):
                listener.exitColumn_name_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_name_list" ):
                return visitor.visitColumn_name_list(self)
            else:
                return visitor.visitChildren(self)




    def column_name_list(self):

        localctx = tsqlParser.Column_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_column_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3135
            self.r_id()
            self.state = 3140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 3136
                self.match(tsqlParser.COMMA)
                self.state = 3137
                self.r_id()
                self.state = 3142
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_cursor_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_name" ):
                listener.enterCursor_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_name" ):
                listener.exitCursor_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_name" ):
                return visitor.visitCursor_name(self)
            else:
                return visitor.visitChildren(self)




    def cursor_name(self):

        localctx = tsqlParser.Cursor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_cursor_name)
        try:
            self.state = 3145
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3143
                self.r_id()
                pass
            elif token in [tsqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3144
                self.match(tsqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class On_offContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_on_off

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn_off" ):
                listener.enterOn_off(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn_off" ):
                listener.exitOn_off(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOn_off" ):
                return visitor.visitOn_off(self)
            else:
                return visitor.visitChildren(self)




    def on_off(self):

        localctx = tsqlParser.On_offContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_on_off)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3147
            _la = self._input.LA(1)
            if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClusteredContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLUSTERED(self):
            return self.getToken(tsqlParser.CLUSTERED, 0)

        def NONCLUSTERED(self):
            return self.getToken(tsqlParser.NONCLUSTERED, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_clustered

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClustered" ):
                listener.enterClustered(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClustered" ):
                listener.exitClustered(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClustered" ):
                return visitor.visitClustered(self)
            else:
                return visitor.visitChildren(self)




    def clustered(self):

        localctx = tsqlParser.ClusteredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_clustered)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3149
            _la = self._input.LA(1)
            if not(_la==tsqlParser.CLUSTERED or _la==tsqlParser.NONCLUSTERED):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Null_notnullContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(tsqlParser.NULL, 0)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_null_notnull

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_notnull" ):
                listener.enterNull_notnull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_notnull" ):
                listener.exitNull_notnull(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNull_notnull" ):
                return visitor.visitNull_notnull(self)
            else:
                return visitor.visitChildren(self)




    def null_notnull(self):

        localctx = tsqlParser.Null_notnullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_null_notnull)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.NOT:
                self.state = 3151
                self.match(tsqlParser.NOT)


            self.state = 3154
            self.match(tsqlParser.NULL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Scalar_function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def RIGHT(self):
            return self.getToken(tsqlParser.RIGHT, 0)

        def LEFT(self):
            return self.getToken(tsqlParser.LEFT, 0)

        def BINARY_CHECKSUM(self):
            return self.getToken(tsqlParser.BINARY_CHECKSUM, 0)

        def CHECKSUM(self):
            return self.getToken(tsqlParser.CHECKSUM, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_scalar_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalar_function_name" ):
                listener.enterScalar_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalar_function_name" ):
                listener.exitScalar_function_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScalar_function_name" ):
                return visitor.visitScalar_function_name(self)
            else:
                return visitor.visitChildren(self)




    def scalar_function_name(self):

        localctx = tsqlParser.Scalar_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_scalar_function_name)
        try:
            self.state = 3161
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3156
                self.func_proc_name()
                pass
            elif token in [tsqlParser.RIGHT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3157
                self.match(tsqlParser.RIGHT)
                pass
            elif token in [tsqlParser.LEFT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3158
                self.match(tsqlParser.LEFT)
                pass
            elif token in [tsqlParser.BINARY_CHECKSUM]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3159
                self.match(tsqlParser.BINARY_CHECKSUM)
                pass
            elif token in [tsqlParser.CHECKSUM]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3160
                self.match(tsqlParser.CHECKSUM)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Default_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(tsqlParser.NULL, 0)

        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_default_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value" ):
                listener.enterDefault_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value" ):
                listener.exitDefault_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefault_value" ):
                return visitor.visitDefault_value(self)
            else:
                return visitor.visitChildren(self)




    def default_value(self):

        localctx = tsqlParser.Default_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_default_value)
        try:
            self.state = 3165
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.NULL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3163
                self.match(tsqlParser.NULL)
                pass
            elif token in [tsqlParser.DECIMAL, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3164
                self.constant()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dollar = None # Token

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def BINARY(self):
            return self.getToken(tsqlParser.BINARY, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def sign(self):
            return self.getTypedRuleContext(tsqlParser.SignContext,0)


        def REAL(self):
            return self.getToken(tsqlParser.REAL, 0)

        def FLOAT(self):
            return self.getToken(tsqlParser.FLOAT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant" ):
                return visitor.visitConstant(self)
            else:
                return visitor.visitChildren(self)




    def constant(self):

        localctx = tsqlParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 3182
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,446,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3167
                self.match(tsqlParser.STRING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3168
                self.match(tsqlParser.BINARY)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3170
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.PLUS or _la==tsqlParser.MINUS:
                    self.state = 3169
                    self.sign()


                self.state = 3172
                self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3174
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.PLUS or _la==tsqlParser.MINUS:
                    self.state = 3173
                    self.sign()


                self.state = 3176
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FLOAT or _la==tsqlParser.REAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.PLUS or _la==tsqlParser.MINUS:
                    self.state = 3177
                    self.sign()


                self.state = 3180
                localctx.dollar = self.match(tsqlParser.DOLLAR)
                self.state = 3181
                _la = self._input.LA(1)
                if not(_la==tsqlParser.DECIMAL or _la==tsqlParser.FLOAT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_sign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSign" ):
                listener.enterSign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSign" ):
                listener.exitSign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSign" ):
                return visitor.visitSign(self)
            else:
                return visitor.visitChildren(self)




    def sign(self):

        localctx = tsqlParser.SignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_sign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3184
            _la = self._input.LA(1)
            if not(_la==tsqlParser.PLUS or _la==tsqlParser.MINUS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class R_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_id(self):
            return self.getTypedRuleContext(tsqlParser.Simple_idContext,0)


        def DOUBLE_QUOTE_ID(self):
            return self.getToken(tsqlParser.DOUBLE_QUOTE_ID, 0)

        def SQUARE_BRACKET_ID(self):
            return self.getToken(tsqlParser.SQUARE_BRACKET_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_r_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterR_id" ):
                listener.enterR_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitR_id" ):
                listener.exitR_id(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitR_id" ):
                return visitor.visitR_id(self)
            else:
                return visitor.visitChildren(self)




    def r_id(self):

        localctx = tsqlParser.R_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_r_id)
        try:
            self.state = 3189
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FORCESEEK, tsqlParser.NEXT, tsqlParser.NUMERIC, tsqlParser.VALUE, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FIRST_VALUE, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.IO, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAG, tsqlParser.LAST, tsqlParser.LAST_VALUE, tsqlParser.LEAD, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ZONE, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3186
                self.simple_id()
                pass
            elif token in [tsqlParser.DOUBLE_QUOTE_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3187
                self.match(tsqlParser.DOUBLE_QUOTE_ID)
                pass
            elif token in [tsqlParser.SQUARE_BRACKET_ID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3188
                self.match(tsqlParser.SQUARE_BRACKET_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(tsqlParser.ID, 0)

        def IO(self):
            return self.getToken(tsqlParser.IO, 0)

        def ABSOLUTE(self):
            return self.getToken(tsqlParser.ABSOLUTE, 0)

        def APPLY(self):
            return self.getToken(tsqlParser.APPLY, 0)

        def AUTO(self):
            return self.getToken(tsqlParser.AUTO, 0)

        def AVG(self):
            return self.getToken(tsqlParser.AVG, 0)

        def BASE64(self):
            return self.getToken(tsqlParser.BASE64, 0)

        def CALLER(self):
            return self.getToken(tsqlParser.CALLER, 0)

        def CAST(self):
            return self.getToken(tsqlParser.CAST, 0)

        def CATCH(self):
            return self.getToken(tsqlParser.CATCH, 0)

        def CHECKSUM_AGG(self):
            return self.getToken(tsqlParser.CHECKSUM_AGG, 0)

        def COMMITTED(self):
            return self.getToken(tsqlParser.COMMITTED, 0)

        def CONCAT(self):
            return self.getToken(tsqlParser.CONCAT, 0)

        def CONTROL(self):
            return self.getToken(tsqlParser.CONTROL, 0)

        def COOKIE(self):
            return self.getToken(tsqlParser.COOKIE, 0)

        def COUNT(self):
            return self.getToken(tsqlParser.COUNT, 0)

        def COUNT_BIG(self):
            return self.getToken(tsqlParser.COUNT_BIG, 0)

        def DATE(self):
            return self.getToken(tsqlParser.DATE, 0)

        def DELAY(self):
            return self.getToken(tsqlParser.DELAY, 0)

        def DELETED(self):
            return self.getToken(tsqlParser.DELETED, 0)

        def DENSE_RANK(self):
            return self.getToken(tsqlParser.DENSE_RANK, 0)

        def DISABLE(self):
            return self.getToken(tsqlParser.DISABLE, 0)

        def DYNAMIC(self):
            return self.getToken(tsqlParser.DYNAMIC, 0)

        def ENCRYPTION(self):
            return self.getToken(tsqlParser.ENCRYPTION, 0)

        def EXPAND(self):
            return self.getToken(tsqlParser.EXPAND, 0)

        def FAST(self):
            return self.getToken(tsqlParser.FAST, 0)

        def FAST_FORWARD(self):
            return self.getToken(tsqlParser.FAST_FORWARD, 0)

        def FIRST(self):
            return self.getToken(tsqlParser.FIRST, 0)

        def FIRST_VALUE(self):
            return self.getToken(tsqlParser.FIRST_VALUE, 0)

        def FOLLOWING(self):
            return self.getToken(tsqlParser.FOLLOWING, 0)

        def FORCE(self):
            return self.getToken(tsqlParser.FORCE, 0)

        def FORCESEEK(self):
            return self.getToken(tsqlParser.FORCESEEK, 0)

        def FORWARD_ONLY(self):
            return self.getToken(tsqlParser.FORWARD_ONLY, 0)

        def FULLSCAN(self):
            return self.getToken(tsqlParser.FULLSCAN, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def GO(self):
            return self.getToken(tsqlParser.GO, 0)

        def GROUPING(self):
            return self.getToken(tsqlParser.GROUPING, 0)

        def GROUPING_ID(self):
            return self.getToken(tsqlParser.GROUPING_ID, 0)

        def HASH(self):
            return self.getToken(tsqlParser.HASH, 0)

        def IMPERSONATE(self):
            return self.getToken(tsqlParser.IMPERSONATE, 0)

        def INSENSITIVE(self):
            return self.getToken(tsqlParser.INSENSITIVE, 0)

        def INSERTED(self):
            return self.getToken(tsqlParser.INSERTED, 0)

        def ISOLATION(self):
            return self.getToken(tsqlParser.ISOLATION, 0)

        def KEEP(self):
            return self.getToken(tsqlParser.KEEP, 0)

        def KEEPFIXED(self):
            return self.getToken(tsqlParser.KEEPFIXED, 0)

        def FORCED(self):
            return self.getToken(tsqlParser.FORCED, 0)

        def KEYSET(self):
            return self.getToken(tsqlParser.KEYSET, 0)

        def IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX(self):
            return self.getToken(tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0)

        def LAG(self):
            return self.getToken(tsqlParser.LAG, 0)

        def LAST(self):
            return self.getToken(tsqlParser.LAST, 0)

        def LAST_VALUE(self):
            return self.getToken(tsqlParser.LAST_VALUE, 0)

        def LEAD(self):
            return self.getToken(tsqlParser.LEAD, 0)

        def LEVEL(self):
            return self.getToken(tsqlParser.LEVEL, 0)

        def LOCAL(self):
            return self.getToken(tsqlParser.LOCAL, 0)

        def LOCK_ESCALATION(self):
            return self.getToken(tsqlParser.LOCK_ESCALATION, 0)

        def LOGIN(self):
            return self.getToken(tsqlParser.LOGIN, 0)

        def LOOP(self):
            return self.getToken(tsqlParser.LOOP, 0)

        def MARK(self):
            return self.getToken(tsqlParser.MARK, 0)

        def MAX(self):
            return self.getToken(tsqlParser.MAX, 0)

        def MAXDOP(self):
            return self.getToken(tsqlParser.MAXDOP, 0)

        def MAXRECURSION(self):
            return self.getToken(tsqlParser.MAXRECURSION, 0)

        def MIN(self):
            return self.getToken(tsqlParser.MIN, 0)

        def MODIFY(self):
            return self.getToken(tsqlParser.MODIFY, 0)

        def NAME(self):
            return self.getToken(tsqlParser.NAME, 0)

        def NEXT(self):
            return self.getToken(tsqlParser.NEXT, 0)

        def NOCOUNT(self):
            return self.getToken(tsqlParser.NOCOUNT, 0)

        def NOEXPAND(self):
            return self.getToken(tsqlParser.NOEXPAND, 0)

        def NORECOMPUTE(self):
            return self.getToken(tsqlParser.NORECOMPUTE, 0)

        def NTILE(self):
            return self.getToken(tsqlParser.NTILE, 0)

        def NUMBER(self):
            return self.getToken(tsqlParser.NUMBER, 0)

        def NUMERIC(self):
            return self.getToken(tsqlParser.NUMERIC, 0)

        def OFFSET(self):
            return self.getToken(tsqlParser.OFFSET, 0)

        def ONLINE(self):
            return self.getToken(tsqlParser.ONLINE, 0)

        def ONLY(self):
            return self.getToken(tsqlParser.ONLY, 0)

        def OPTIMISTIC(self):
            return self.getToken(tsqlParser.OPTIMISTIC, 0)

        def OPTIMIZE(self):
            return self.getToken(tsqlParser.OPTIMIZE, 0)

        def OUT(self):
            return self.getToken(tsqlParser.OUT, 0)

        def OUTPUT(self):
            return self.getToken(tsqlParser.OUTPUT, 0)

        def OWNER(self):
            return self.getToken(tsqlParser.OWNER, 0)

        def PARAMETERIZATION(self):
            return self.getToken(tsqlParser.PARAMETERIZATION, 0)

        def PARTITION(self):
            return self.getToken(tsqlParser.PARTITION, 0)

        def PATH(self):
            return self.getToken(tsqlParser.PATH, 0)

        def PRECEDING(self):
            return self.getToken(tsqlParser.PRECEDING, 0)

        def PRIOR(self):
            return self.getToken(tsqlParser.PRIOR, 0)

        def PRIVILEGES(self):
            return self.getToken(tsqlParser.PRIVILEGES, 0)

        def RANGE(self):
            return self.getToken(tsqlParser.RANGE, 0)

        def RANK(self):
            return self.getToken(tsqlParser.RANK, 0)

        def READONLY(self):
            return self.getToken(tsqlParser.READONLY, 0)

        def READ_ONLY(self):
            return self.getToken(tsqlParser.READ_ONLY, 0)

        def RECOMPILE(self):
            return self.getToken(tsqlParser.RECOMPILE, 0)

        def RELATIVE(self):
            return self.getToken(tsqlParser.RELATIVE, 0)

        def REMOTE(self):
            return self.getToken(tsqlParser.REMOTE, 0)

        def REPEATABLE(self):
            return self.getToken(tsqlParser.REPEATABLE, 0)

        def ROBUST(self):
            return self.getToken(tsqlParser.ROBUST, 0)

        def ROOT(self):
            return self.getToken(tsqlParser.ROOT, 0)

        def ROW(self):
            return self.getToken(tsqlParser.ROW, 0)

        def ROWGUID(self):
            return self.getToken(tsqlParser.ROWGUID, 0)

        def ROWS(self):
            return self.getToken(tsqlParser.ROWS, 0)

        def ROW_NUMBER(self):
            return self.getToken(tsqlParser.ROW_NUMBER, 0)

        def SAMPLE(self):
            return self.getToken(tsqlParser.SAMPLE, 0)

        def SCHEMABINDING(self):
            return self.getToken(tsqlParser.SCHEMABINDING, 0)

        def SCROLL(self):
            return self.getToken(tsqlParser.SCROLL, 0)

        def SCROLL_LOCKS(self):
            return self.getToken(tsqlParser.SCROLL_LOCKS, 0)

        def SELF(self):
            return self.getToken(tsqlParser.SELF, 0)

        def SERIALIZABLE(self):
            return self.getToken(tsqlParser.SERIALIZABLE, 0)

        def SIMPLE(self):
            return self.getToken(tsqlParser.SIMPLE, 0)

        def SIZE(self):
            return self.getToken(tsqlParser.SIZE, 0)

        def SNAPSHOT(self):
            return self.getToken(tsqlParser.SNAPSHOT, 0)

        def SPATIAL_WINDOW_MAX_CELLS(self):
            return self.getToken(tsqlParser.SPATIAL_WINDOW_MAX_CELLS, 0)

        def STATIC(self):
            return self.getToken(tsqlParser.STATIC, 0)

        def STATS_STREAM(self):
            return self.getToken(tsqlParser.STATS_STREAM, 0)

        def STDEV(self):
            return self.getToken(tsqlParser.STDEV, 0)

        def STDEVP(self):
            return self.getToken(tsqlParser.STDEVP, 0)

        def SUM(self):
            return self.getToken(tsqlParser.SUM, 0)

        def TEXTIMAGE_ON(self):
            return self.getToken(tsqlParser.TEXTIMAGE_ON, 0)

        def THROW(self):
            return self.getToken(tsqlParser.THROW, 0)

        def TIES(self):
            return self.getToken(tsqlParser.TIES, 0)

        def TIME(self):
            return self.getToken(tsqlParser.TIME, 0)

        def TRY(self):
            return self.getToken(tsqlParser.TRY, 0)

        def TYPE(self):
            return self.getToken(tsqlParser.TYPE, 0)

        def TYPE_WARNING(self):
            return self.getToken(tsqlParser.TYPE_WARNING, 0)

        def UNBOUNDED(self):
            return self.getToken(tsqlParser.UNBOUNDED, 0)

        def UNCOMMITTED(self):
            return self.getToken(tsqlParser.UNCOMMITTED, 0)

        def UNKNOWN(self):
            return self.getToken(tsqlParser.UNKNOWN, 0)

        def USING(self):
            return self.getToken(tsqlParser.USING, 0)

        def VAR(self):
            return self.getToken(tsqlParser.VAR, 0)

        def VARP(self):
            return self.getToken(tsqlParser.VARP, 0)

        def VALUE(self):
            return self.getToken(tsqlParser.VALUE, 0)

        def VIEW_METADATA(self):
            return self.getToken(tsqlParser.VIEW_METADATA, 0)

        def VIEWS(self):
            return self.getToken(tsqlParser.VIEWS, 0)

        def WORK(self):
            return self.getToken(tsqlParser.WORK, 0)

        def XML(self):
            return self.getToken(tsqlParser.XML, 0)

        def XMLNAMESPACES(self):
            return self.getToken(tsqlParser.XMLNAMESPACES, 0)

        def ZONE(self):
            return self.getToken(tsqlParser.ZONE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_simple_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_id" ):
                listener.enterSimple_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_id" ):
                listener.exitSimple_id(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_id" ):
                return visitor.visitSimple_id(self)
            else:
                return visitor.visitChildren(self)




    def simple_id(self):

        localctx = tsqlParser.Simple_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_simple_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3191
            _la = self._input.LA(1)
            if not(((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (tsqlParser.FORCESEEK - 73)) | (1 << (tsqlParser.NEXT - 73)) | (1 << (tsqlParser.NUMERIC - 73)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (tsqlParser.VALUE - 192)) | (1 << (tsqlParser.ABSOLUTE - 192)) | (1 << (tsqlParser.APPLY - 192)) | (1 << (tsqlParser.AUTO - 192)) | (1 << (tsqlParser.AVG - 192)) | (1 << (tsqlParser.BASE64 - 192)) | (1 << (tsqlParser.CALLER - 192)) | (1 << (tsqlParser.CAST - 192)) | (1 << (tsqlParser.CATCH - 192)) | (1 << (tsqlParser.CHECKSUM_AGG - 192)) | (1 << (tsqlParser.COMMITTED - 192)) | (1 << (tsqlParser.CONCAT - 192)) | (1 << (tsqlParser.CONTROL - 192)) | (1 << (tsqlParser.COOKIE - 192)) | (1 << (tsqlParser.COUNT - 192)) | (1 << (tsqlParser.COUNT_BIG - 192)) | (1 << (tsqlParser.DATE - 192)) | (1 << (tsqlParser.DELAY - 192)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (tsqlParser.DELETED - 257)) | (1 << (tsqlParser.DENSE_RANK - 257)) | (1 << (tsqlParser.DISABLE - 257)) | (1 << (tsqlParser.DYNAMIC - 257)) | (1 << (tsqlParser.ENCRYPTION - 257)) | (1 << (tsqlParser.EXPAND - 257)) | (1 << (tsqlParser.FAST - 257)) | (1 << (tsqlParser.FAST_FORWARD - 257)) | (1 << (tsqlParser.FIRST - 257)) | (1 << (tsqlParser.FIRST_VALUE - 257)) | (1 << (tsqlParser.FOLLOWING - 257)) | (1 << (tsqlParser.FORCE - 257)) | (1 << (tsqlParser.FORCED - 257)) | (1 << (tsqlParser.FORWARD_ONLY - 257)) | (1 << (tsqlParser.FULLSCAN - 257)) | (1 << (tsqlParser.GLOBAL - 257)) | (1 << (tsqlParser.GO - 257)) | (1 << (tsqlParser.GROUPING - 257)) | (1 << (tsqlParser.GROUPING_ID - 257)) | (1 << (tsqlParser.HASH - 257)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 257)) | (1 << (tsqlParser.IMPERSONATE - 257)) | (1 << (tsqlParser.INSENSITIVE - 257)) | (1 << (tsqlParser.INSERTED - 257)) | (1 << (tsqlParser.ISOLATION - 257)) | (1 << (tsqlParser.IO - 257)) | (1 << (tsqlParser.KEEP - 257)) | (1 << (tsqlParser.KEEPFIXED - 257)) | (1 << (tsqlParser.KEYSET - 257)) | (1 << (tsqlParser.LAG - 257)) | (1 << (tsqlParser.LAST - 257)) | (1 << (tsqlParser.LAST_VALUE - 257)) | (1 << (tsqlParser.LEAD - 257)) | (1 << (tsqlParser.LEVEL - 257)) | (1 << (tsqlParser.LOCAL - 257)) | (1 << (tsqlParser.LOCK_ESCALATION - 257)) | (1 << (tsqlParser.LOGIN - 257)) | (1 << (tsqlParser.LOOP - 257)) | (1 << (tsqlParser.MARK - 257)) | (1 << (tsqlParser.MAX - 257)) | (1 << (tsqlParser.MAXDOP - 257)) | (1 << (tsqlParser.MAXRECURSION - 257)) | (1 << (tsqlParser.MIN - 257)))) != 0) or ((((_la - 324)) & ~0x3f) == 0 and ((1 << (_la - 324)) & ((1 << (tsqlParser.MODIFY - 324)) | (1 << (tsqlParser.NAME - 324)) | (1 << (tsqlParser.NOCOUNT - 324)) | (1 << (tsqlParser.NOEXPAND - 324)) | (1 << (tsqlParser.NORECOMPUTE - 324)) | (1 << (tsqlParser.NTILE - 324)) | (1 << (tsqlParser.NUMBER - 324)) | (1 << (tsqlParser.OFFSET - 324)) | (1 << (tsqlParser.ONLINE - 324)) | (1 << (tsqlParser.ONLY - 324)) | (1 << (tsqlParser.OPTIMISTIC - 324)) | (1 << (tsqlParser.OPTIMIZE - 324)) | (1 << (tsqlParser.OUT - 324)) | (1 << (tsqlParser.OUTPUT - 324)) | (1 << (tsqlParser.OWNER - 324)) | (1 << (tsqlParser.PARAMETERIZATION - 324)) | (1 << (tsqlParser.PARTITION - 324)) | (1 << (tsqlParser.PATH - 324)) | (1 << (tsqlParser.PRECEDING - 324)) | (1 << (tsqlParser.PRIOR - 324)) | (1 << (tsqlParser.PRIVILEGES - 324)) | (1 << (tsqlParser.RANGE - 324)) | (1 << (tsqlParser.RANK - 324)) | (1 << (tsqlParser.READONLY - 324)) | (1 << (tsqlParser.READ_ONLY - 324)) | (1 << (tsqlParser.RECOMPILE - 324)) | (1 << (tsqlParser.RELATIVE - 324)) | (1 << (tsqlParser.REMOTE - 324)) | (1 << (tsqlParser.REPEATABLE - 324)) | (1 << (tsqlParser.ROBUST - 324)) | (1 << (tsqlParser.ROOT - 324)) | (1 << (tsqlParser.ROW - 324)) | (1 << (tsqlParser.ROWGUID - 324)) | (1 << (tsqlParser.ROWS - 324)) | (1 << (tsqlParser.ROW_NUMBER - 324)) | (1 << (tsqlParser.SAMPLE - 324)) | (1 << (tsqlParser.SCHEMABINDING - 324)) | (1 << (tsqlParser.SCROLL - 324)) | (1 << (tsqlParser.SCROLL_LOCKS - 324)) | (1 << (tsqlParser.SELF - 324)) | (1 << (tsqlParser.SERIALIZABLE - 324)) | (1 << (tsqlParser.SIMPLE - 324)) | (1 << (tsqlParser.SIZE - 324)))) != 0) or ((((_la - 389)) & ~0x3f) == 0 and ((1 << (_la - 389)) & ((1 << (tsqlParser.SNAPSHOT - 389)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 389)) | (1 << (tsqlParser.STATIC - 389)) | (1 << (tsqlParser.STATS_STREAM - 389)) | (1 << (tsqlParser.STDEV - 389)) | (1 << (tsqlParser.STDEVP - 389)) | (1 << (tsqlParser.SUM - 389)) | (1 << (tsqlParser.TEXTIMAGE_ON - 389)) | (1 << (tsqlParser.THROW - 389)) | (1 << (tsqlParser.TIES - 389)) | (1 << (tsqlParser.TIME - 389)) | (1 << (tsqlParser.TRY - 389)) | (1 << (tsqlParser.TYPE - 389)) | (1 << (tsqlParser.TYPE_WARNING - 389)) | (1 << (tsqlParser.UNBOUNDED - 389)) | (1 << (tsqlParser.UNCOMMITTED - 389)) | (1 << (tsqlParser.UNKNOWN - 389)) | (1 << (tsqlParser.USING - 389)) | (1 << (tsqlParser.VAR - 389)) | (1 << (tsqlParser.VARP - 389)) | (1 << (tsqlParser.VIEWS - 389)) | (1 << (tsqlParser.VIEW_METADATA - 389)) | (1 << (tsqlParser.WORK - 389)) | (1 << (tsqlParser.XML - 389)) | (1 << (tsqlParser.XMLNAMESPACES - 389)) | (1 << (tsqlParser.ZONE - 389)) | (1 << (tsqlParser.ID - 389)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comparison_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_comparison_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison_operator" ):
                listener.enterComparison_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison_operator" ):
                listener.exitComparison_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison_operator" ):
                return visitor.visitComparison_operator(self)
            else:
                return visitor.visitChildren(self)




    def comparison_operator(self):

        localctx = tsqlParser.Comparison_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_comparison_operator)
        try:
            self.state = 3208
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,448,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3193
                self.match(tsqlParser.EQUAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3194
                self.match(tsqlParser.GREATER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3195
                self.match(tsqlParser.LESS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3196
                self.match(tsqlParser.LESS)
                self.state = 3197
                self.match(tsqlParser.EQUAL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3198
                self.match(tsqlParser.GREATER)
                self.state = 3199
                self.match(tsqlParser.EQUAL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3200
                self.match(tsqlParser.LESS)
                self.state = 3201
                self.match(tsqlParser.GREATER)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3202
                self.match(tsqlParser.EXCLAMATION)
                self.state = 3203
                self.match(tsqlParser.EQUAL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3204
                self.match(tsqlParser.EXCLAMATION)
                self.state = 3205
                self.match(tsqlParser.GREATER)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3206
                self.match(tsqlParser.EXCLAMATION)
                self.state = 3207
                self.match(tsqlParser.LESS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assignment_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_assignment_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_operator" ):
                listener.enterAssignment_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_operator" ):
                listener.exitAssignment_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment_operator" ):
                return visitor.visitAssignment_operator(self)
            else:
                return visitor.visitChildren(self)




    def assignment_operator(self):

        localctx = tsqlParser.Assignment_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_assignment_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3210
            _la = self._input.LA(1)
            if not(((((_la - 443)) & ~0x3f) == 0 and ((1 << (_la - 443)) & ((1 << (tsqlParser.PLUS_ASSIGN - 443)) | (1 << (tsqlParser.MINUS_ASSIGN - 443)) | (1 << (tsqlParser.MULT_ASSIGN - 443)) | (1 << (tsqlParser.DIV_ASSIGN - 443)) | (1 << (tsqlParser.MOD_ASSIGN - 443)) | (1 << (tsqlParser.AND_ASSIGN - 443)) | (1 << (tsqlParser.XOR_ASSIGN - 443)) | (1 << (tsqlParser.OR_ASSIGN - 443)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class File_sizeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def KB(self):
            return self.getToken(tsqlParser.KB, 0)

        def MB(self):
            return self.getToken(tsqlParser.MB, 0)

        def GB(self):
            return self.getToken(tsqlParser.GB, 0)

        def TB(self):
            return self.getToken(tsqlParser.TB, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_file_size

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_size" ):
                listener.enterFile_size(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_size" ):
                listener.exitFile_size(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_size" ):
                return visitor.visitFile_size(self)
            else:
                return visitor.visitChildren(self)




    def file_size(self):

        localctx = tsqlParser.File_sizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_file_size)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3212
            self.match(tsqlParser.DECIMAL)
            self.state = 3214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 281)) & ~0x3f) == 0 and ((1 << (_la - 281)) & ((1 << (tsqlParser.GB - 281)) | (1 << (tsqlParser.KB - 281)) | (1 << (tsqlParser.MB - 281)))) != 0) or _la==tsqlParser.TB or _la==tsqlParser.MODULE:
                self.state = 3213
                _la = self._input.LA(1)
                if not(((((_la - 281)) & ~0x3f) == 0 and ((1 << (_la - 281)) & ((1 << (tsqlParser.GB - 281)) | (1 << (tsqlParser.KB - 281)) | (1 << (tsqlParser.MB - 281)))) != 0) or _la==tsqlParser.TB or _la==tsqlParser.MODULE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_or_alter_procedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.proc = None # Token

        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def sql_clauses(self):
            return self.getTypedRuleContext(tsqlParser.Sql_clausesContext,0)


        def ALTER(self):
            return self.getToken(tsqlParser.ALTER, 0)

        def PROC(self):
            return self.getToken(tsqlParser.PROC, 0)

        def PROCEDURE(self):
            return self.getToken(tsqlParser.PROCEDURE, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def procedure_param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Procedure_paramContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Procedure_paramContext,i)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def procedure_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Procedure_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Procedure_optionContext,i)


        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(tsqlParser.REPLICATION, 0)

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def OR(self):
            return self.getToken(tsqlParser.OR, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_or_alter_procedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_or_alter_procedure" ):
                listener.enterCreate_or_alter_procedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_or_alter_procedure" ):
                listener.exitCreate_or_alter_procedure(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_or_alter_procedure" ):
                return visitor.visitCreate_or_alter_procedure(self)
            else:
                return visitor.visitChildren(self)




    def create_or_alter_procedure(self):

        localctx = tsqlParser.Create_or_alter_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_create_or_alter_procedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3222
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CREATE]:
                self.state = 3216
                self.match(tsqlParser.CREATE)
                self.state = 3219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.OR:
                    self.state = 3217
                    self.match(tsqlParser.OR)
                    self.state = 3218
                    self.match(tsqlParser.ALTER)


                pass
            elif token in [tsqlParser.ALTER]:
                self.state = 3221
                self.match(tsqlParser.ALTER)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3224
            localctx.proc = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==tsqlParser.PROC or _la==tsqlParser.PROCEDURE):
                localctx.proc = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3225
            self.func_proc_name()
            self.state = 3228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.SEMI:
                self.state = 3226
                self.match(tsqlParser.SEMI)
                self.state = 3227
                self.match(tsqlParser.DECIMAL)


            self.state = 3244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.LOCAL_ID or _la==tsqlParser.LR_BRACKET:
                self.state = 3231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.LR_BRACKET:
                    self.state = 3230
                    self.match(tsqlParser.LR_BRACKET)


                self.state = 3233
                self.procedure_param()
                self.state = 3238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 3234
                    self.match(tsqlParser.COMMA)
                    self.state = 3235
                    self.procedure_param()
                    self.state = 3240
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.RR_BRACKET:
                    self.state = 3241
                    self.match(tsqlParser.RR_BRACKET)




            self.state = 3255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 3246
                self.match(tsqlParser.WITH)
                self.state = 3247
                self.procedure_option()
                self.state = 3252
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 3248
                    self.match(tsqlParser.COMMA)
                    self.state = 3249
                    self.procedure_option()
                    self.state = 3254
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FOR:
                self.state = 3257
                self.match(tsqlParser.FOR)
                self.state = 3258
                self.match(tsqlParser.REPLICATION)


            self.state = 3261
            self.match(tsqlParser.AS)
            self.state = 3262
            self.sql_clauses()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_or_alter_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(tsqlParser.FUNCTION, 0)

        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def ALTER(self):
            return self.getToken(tsqlParser.ALTER, 0)

        def func_body_returns_select(self):
            return self.getTypedRuleContext(tsqlParser.Func_body_returns_selectContext,0)


        def func_body_returns_table(self):
            return self.getTypedRuleContext(tsqlParser.Func_body_returns_tableContext,0)


        def func_body_returns_scalar(self):
            return self.getTypedRuleContext(tsqlParser.Func_body_returns_scalarContext,0)


        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def procedure_param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Procedure_paramContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Procedure_paramContext,i)


        def OR(self):
            return self.getToken(tsqlParser.OR, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_or_alter_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_or_alter_function" ):
                listener.enterCreate_or_alter_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_or_alter_function" ):
                listener.exitCreate_or_alter_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_or_alter_function" ):
                return visitor.visitCreate_or_alter_function(self)
            else:
                return visitor.visitChildren(self)




    def create_or_alter_function(self):

        localctx = tsqlParser.Create_or_alter_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_create_or_alter_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3270
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CREATE]:
                self.state = 3264
                self.match(tsqlParser.CREATE)
                self.state = 3267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.OR:
                    self.state = 3265
                    self.match(tsqlParser.OR)
                    self.state = 3266
                    self.match(tsqlParser.ALTER)


                pass
            elif token in [tsqlParser.ALTER]:
                self.state = 3269
                self.match(tsqlParser.ALTER)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3272
            self.match(tsqlParser.FUNCTION)
            self.state = 3273
            self.func_proc_name()
            self.state = 3287
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,463,self._ctx)
            if la_ == 1:
                self.state = 3274
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3275
                self.procedure_param()
                self.state = 3280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 3276
                    self.match(tsqlParser.COMMA)
                    self.state = 3277
                    self.procedure_param()
                    self.state = 3282
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3283
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.state = 3285
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3286
                self.match(tsqlParser.RR_BRACKET)
                pass


            self.state = 3292
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,464,self._ctx)
            if la_ == 1:
                self.state = 3289
                self.func_body_returns_select()
                pass

            elif la_ == 2:
                self.state = 3290
                self.func_body_returns_table()
                pass

            elif la_ == 3:
                self.state = 3291
                self.func_body_returns_scalar()
                pass


            self.state = 3295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,465,self._ctx)
            if la_ == 1:
                self.state = 3294
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_body_returns_selectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNS(self):
            return self.getToken(tsqlParser.RETURNS, 0)

        def TABLE(self):
            return self.getToken(tsqlParser.TABLE, 0)

        def RETURN(self):
            return self.getToken(tsqlParser.RETURN, 0)

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def function_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Function_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Function_optionContext,i)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_func_body_returns_select

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_body_returns_select" ):
                listener.enterFunc_body_returns_select(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_body_returns_select" ):
                listener.exitFunc_body_returns_select(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_body_returns_select" ):
                return visitor.visitFunc_body_returns_select(self)
            else:
                return visitor.visitChildren(self)




    def func_body_returns_select(self):

        localctx = tsqlParser.Func_body_returns_selectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_func_body_returns_select)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3297
            self.match(tsqlParser.RETURNS)
            self.state = 3298
            self.match(tsqlParser.TABLE)
            self.state = 3308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 3299
                self.match(tsqlParser.WITH)
                self.state = 3300
                self.function_option()
                self.state = 3305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 3301
                    self.match(tsqlParser.COMMA)
                    self.state = 3302
                    self.function_option()
                    self.state = 3307
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.AS:
                self.state = 3310
                self.match(tsqlParser.AS)


            self.state = 3313
            self.match(tsqlParser.RETURN)
            self.state = 3319
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,469,self._ctx)
            if la_ == 1:
                self.state = 3314
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3315
                self.select_statement()
                self.state = 3316
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.state = 3318
                self.select_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_body_returns_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNS(self):
            return self.getToken(tsqlParser.RETURNS, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def table_type_definition(self):
            return self.getTypedRuleContext(tsqlParser.Table_type_definitionContext,0)


        def BEGIN(self):
            return self.getToken(tsqlParser.BEGIN, 0)

        def RETURN(self):
            return self.getToken(tsqlParser.RETURN, 0)

        def END(self):
            return self.getToken(tsqlParser.END, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def function_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Function_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Function_optionContext,i)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def sql_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Sql_clauseContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Sql_clauseContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_func_body_returns_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_body_returns_table" ):
                listener.enterFunc_body_returns_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_body_returns_table" ):
                listener.exitFunc_body_returns_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_body_returns_table" ):
                return visitor.visitFunc_body_returns_table(self)
            else:
                return visitor.visitChildren(self)




    def func_body_returns_table(self):

        localctx = tsqlParser.Func_body_returns_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_func_body_returns_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3321
            self.match(tsqlParser.RETURNS)
            self.state = 3322
            self.match(tsqlParser.LOCAL_ID)
            self.state = 3323
            self.table_type_definition()
            self.state = 3333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 3324
                self.match(tsqlParser.WITH)
                self.state = 3325
                self.function_option()
                self.state = 3330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 3326
                    self.match(tsqlParser.COMMA)
                    self.state = 3327
                    self.function_option()
                    self.state = 3332
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.AS:
                self.state = 3335
                self.match(tsqlParser.AS)


            self.state = 3338
            self.match(tsqlParser.BEGIN)
            self.state = 3342
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,473,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3339
                    self.sql_clause() 
                self.state = 3344
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,473,self._ctx)

            self.state = 3345
            self.match(tsqlParser.RETURN)
            self.state = 3347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.SEMI:
                self.state = 3346
                self.match(tsqlParser.SEMI)


            self.state = 3349
            self.match(tsqlParser.END)
            self.state = 3351
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,475,self._ctx)
            if la_ == 1:
                self.state = 3350
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_body_returns_scalarContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ret = None # ExpressionContext

        def RETURNS(self):
            return self.getToken(tsqlParser.RETURNS, 0)

        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def BEGIN(self):
            return self.getToken(tsqlParser.BEGIN, 0)

        def RETURN(self):
            return self.getToken(tsqlParser.RETURN, 0)

        def END(self):
            return self.getToken(tsqlParser.END, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def function_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Function_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Function_optionContext,i)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def sql_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Sql_clauseContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Sql_clauseContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_func_body_returns_scalar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_body_returns_scalar" ):
                listener.enterFunc_body_returns_scalar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_body_returns_scalar" ):
                listener.exitFunc_body_returns_scalar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_body_returns_scalar" ):
                return visitor.visitFunc_body_returns_scalar(self)
            else:
                return visitor.visitChildren(self)




    def func_body_returns_scalar(self):

        localctx = tsqlParser.Func_body_returns_scalarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_func_body_returns_scalar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3353
            self.match(tsqlParser.RETURNS)
            self.state = 3354
            self.data_type()
            self.state = 3364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 3355
                self.match(tsqlParser.WITH)
                self.state = 3356
                self.function_option()
                self.state = 3361
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 3357
                    self.match(tsqlParser.COMMA)
                    self.state = 3358
                    self.function_option()
                    self.state = 3363
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.AS:
                self.state = 3366
                self.match(tsqlParser.AS)


            self.state = 3369
            self.match(tsqlParser.BEGIN)
            self.state = 3373
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,479,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3370
                    self.sql_clause() 
                self.state = 3375
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,479,self._ctx)

            self.state = 3376
            self.match(tsqlParser.RETURN)
            self.state = 3377
            localctx.ret = self.expression(0)
            self.state = 3379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.SEMI:
                self.state = 3378
                self.match(tsqlParser.SEMI)


            self.state = 3381
            self.match(tsqlParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Procedure_paramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.default_val = None # Default_valueContext

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def VARYING(self):
            return self.getToken(tsqlParser.VARYING, 0)

        def default_value(self):
            return self.getTypedRuleContext(tsqlParser.Default_valueContext,0)


        def OUT(self):
            return self.getToken(tsqlParser.OUT, 0)

        def OUTPUT(self):
            return self.getToken(tsqlParser.OUTPUT, 0)

        def READONLY(self):
            return self.getToken(tsqlParser.READONLY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_procedure_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_param" ):
                listener.enterProcedure_param(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_param" ):
                listener.exitProcedure_param(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedure_param" ):
                return visitor.visitProcedure_param(self)
            else:
                return visitor.visitChildren(self)




    def procedure_param(self):

        localctx = tsqlParser.Procedure_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_procedure_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3383
            self.match(tsqlParser.LOCAL_ID)
            self.state = 3387
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,481,self._ctx)
            if la_ == 1:
                self.state = 3384
                self.r_id()
                self.state = 3385
                self.match(tsqlParser.DOT)


            self.state = 3390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.AS:
                self.state = 3389
                self.match(tsqlParser.AS)


            self.state = 3392
            self.data_type()
            self.state = 3394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.VARYING:
                self.state = 3393
                self.match(tsqlParser.VARYING)


            self.state = 3398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.EQUAL:
                self.state = 3396
                self.match(tsqlParser.EQUAL)
                self.state = 3397
                localctx.default_val = self.default_value()


            self.state = 3401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & ((1 << (tsqlParser.OUT - 343)) | (1 << (tsqlParser.OUTPUT - 343)) | (1 << (tsqlParser.READONLY - 343)))) != 0):
                self.state = 3400
                _la = self._input.LA(1)
                if not(((((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & ((1 << (tsqlParser.OUT - 343)) | (1 << (tsqlParser.OUTPUT - 343)) | (1 << (tsqlParser.READONLY - 343)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Procedure_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(tsqlParser.ENCRYPTION, 0)

        def RECOMPILE(self):
            return self.getToken(tsqlParser.RECOMPILE, 0)

        def execute_clause(self):
            return self.getTypedRuleContext(tsqlParser.Execute_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_procedure_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_option" ):
                listener.enterProcedure_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_option" ):
                listener.exitProcedure_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedure_option" ):
                return visitor.visitProcedure_option(self)
            else:
                return visitor.visitChildren(self)




    def procedure_option(self):

        localctx = tsqlParser.Procedure_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_procedure_option)
        try:
            self.state = 3406
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.ENCRYPTION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3403
                self.match(tsqlParser.ENCRYPTION)
                pass
            elif token in [tsqlParser.RECOMPILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3404
                self.match(tsqlParser.RECOMPILE)
                pass
            elif token in [tsqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3405
                self.execute_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(tsqlParser.ENCRYPTION, 0)

        def SCHEMABINDING(self):
            return self.getToken(tsqlParser.SCHEMABINDING, 0)

        def RETURNS(self):
            return self.getToken(tsqlParser.RETURNS, 0)

        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.NULL)
            else:
                return self.getToken(tsqlParser.NULL, i)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def INPUT(self):
            return self.getToken(tsqlParser.INPUT, 0)

        def CALLED(self):
            return self.getToken(tsqlParser.CALLED, 0)

        def execute_clause(self):
            return self.getTypedRuleContext(tsqlParser.Execute_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_function_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_option" ):
                listener.enterFunction_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_option" ):
                listener.exitFunction_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_option" ):
                return visitor.visitFunction_option(self)
            else:
                return visitor.visitChildren(self)




    def function_option(self):

        localctx = tsqlParser.Function_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_function_option)
        try:
            self.state = 3420
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.ENCRYPTION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3408
                self.match(tsqlParser.ENCRYPTION)
                pass
            elif token in [tsqlParser.SCHEMABINDING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3409
                self.match(tsqlParser.SCHEMABINDING)
                pass
            elif token in [tsqlParser.RETURNS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3410
                self.match(tsqlParser.RETURNS)
                self.state = 3411
                self.match(tsqlParser.NULL)
                self.state = 3412
                self.match(tsqlParser.ON)
                self.state = 3413
                self.match(tsqlParser.NULL)
                self.state = 3414
                self.match(tsqlParser.INPUT)
                pass
            elif token in [tsqlParser.CALLED]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3415
                self.match(tsqlParser.CALLED)
                self.state = 3416
                self.match(tsqlParser.ON)
                self.state = 3417
                self.match(tsqlParser.NULL)
                self.state = 3418
                self.match(tsqlParser.INPUT)
                pass
            elif token in [tsqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3419
                self.execute_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Percentile_contContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERCENTILE_CONT(self):
            return self.getToken(tsqlParser.PERCENTILE_CONT, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def WITHIN(self):
            return self.getToken(tsqlParser.WITHIN, 0)

        def GROUP(self):
            return self.getToken(tsqlParser.GROUP, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(tsqlParser.Order_by_clauseContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(tsqlParser.Over_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_percentile_cont

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPercentile_cont" ):
                listener.enterPercentile_cont(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPercentile_cont" ):
                listener.exitPercentile_cont(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPercentile_cont" ):
                return visitor.visitPercentile_cont(self)
            else:
                return visitor.visitChildren(self)




    def percentile_cont(self):

        localctx = tsqlParser.Percentile_contContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_percentile_cont)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3422
            self.match(tsqlParser.PERCENTILE_CONT)
            self.state = 3423
            self.match(tsqlParser.LR_BRACKET)
            self.state = 3424
            self.expression(0)
            self.state = 3425
            self.match(tsqlParser.RR_BRACKET)
            self.state = 3426
            self.match(tsqlParser.WITHIN)
            self.state = 3427
            self.match(tsqlParser.GROUP)
            self.state = 3428
            self.match(tsqlParser.LR_BRACKET)
            self.state = 3429
            self.order_by_clause()
            self.state = 3430
            self.match(tsqlParser.RR_BRACKET)
            self.state = 3431
            self.over_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class String_aggContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_AGG(self):
            return self.getToken(tsqlParser.STRING_AGG, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)


        def WITHIN(self):
            return self.getToken(tsqlParser.WITHIN, 0)

        def GROUP(self):
            return self.getToken(tsqlParser.GROUP, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(tsqlParser.Order_by_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_string_agg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_agg" ):
                listener.enterString_agg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_agg" ):
                listener.exitString_agg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString_agg" ):
                return visitor.visitString_agg(self)
            else:
                return visitor.visitChildren(self)




    def string_agg(self):

        localctx = tsqlParser.String_aggContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_string_agg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3433
            self.match(tsqlParser.STRING_AGG)
            self.state = 3434
            self.match(tsqlParser.LR_BRACKET)
            self.state = 3435
            self.expression(0)
            self.state = 3436
            self.match(tsqlParser.COMMA)
            self.state = 3437
            self.expression(0)
            self.state = 3438
            self.match(tsqlParser.RR_BRACKET)
            self.state = 3439
            self.match(tsqlParser.WITHIN)
            self.state = 3440
            self.match(tsqlParser.GROUP)
            self.state = 3441
            self.match(tsqlParser.LR_BRACKET)
            self.state = 3442
            self.order_by_clause()
            self.state = 3443
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Data_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_id(self):
            return self.getTypedRuleContext(tsqlParser.R_idContext,0)


        def IDENTITY(self):
            return self.getToken(tsqlParser.IDENTITY, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DECIMAL)
            else:
                return self.getToken(tsqlParser.DECIMAL, i)

        def MAX(self):
            return self.getToken(tsqlParser.MAX, 0)

        def DATE(self):
            return self.getToken(tsqlParser.DATE, 0)

        def DATETIME2(self):
            return self.getToken(tsqlParser.DATETIME2, 0)

        def DOUBLE(self):
            return self.getToken(tsqlParser.DOUBLE, 0)

        def PRECISION(self):
            return self.getToken(tsqlParser.PRECISION, 0)

        def INT(self):
            return self.getToken(tsqlParser.INT, 0)

        def TINYINT(self):
            return self.getToken(tsqlParser.TINYINT, 0)

        def SMALLINT(self):
            return self.getToken(tsqlParser.SMALLINT, 0)

        def BIGINT(self):
            return self.getToken(tsqlParser.BIGINT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_type" ):
                listener.enterData_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_type" ):
                listener.exitData_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitData_type" ):
                return visitor.visitData_type(self)
            else:
                return visitor.visitChildren(self)




    def data_type(self):

        localctx = tsqlParser.Data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_data_type)
        self._la = 0 # Token type
        try:
            self.state = 3471
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,492,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3445
                self.r_id()
                self.state = 3447
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,488,self._ctx)
                if la_ == 1:
                    self.state = 3446
                    self.match(tsqlParser.IDENTITY)


                self.state = 3456
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,490,self._ctx)
                if la_ == 1:
                    self.state = 3449
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 3450
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.MAX or _la==tsqlParser.DECIMAL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3453
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.COMMA:
                        self.state = 3451
                        self.match(tsqlParser.COMMA)
                        self.state = 3452
                        self.match(tsqlParser.DECIMAL)


                    self.state = 3455
                    self.match(tsqlParser.RR_BRACKET)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3458
                self.match(tsqlParser.DATE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3459
                self.match(tsqlParser.DATETIME2)
                self.state = 3460
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3461
                self.match(tsqlParser.DECIMAL)
                self.state = 3462
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3463
                self.match(tsqlParser.DOUBLE)
                self.state = 3465
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.PRECISION:
                    self.state = 3464
                    self.match(tsqlParser.PRECISION)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3467
                self.match(tsqlParser.INT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3468
                self.match(tsqlParser.TINYINT)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3469
                self.match(tsqlParser.SMALLINT)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3470
                self.match(tsqlParser.BIGINT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[83] = self.expression_sempred
        self._predicates[90] = self.search_condition_sempred
        self._predicates[92] = self.query_expression_sempred
        self._predicates[111] = self.table_source_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 15)
         

    def search_condition_sempred(self, localctx:Search_conditionContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

    def query_expression_sempred(self, localctx:Query_expressionContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 2)
         

    def table_source_sempred(self, localctx:Table_sourceContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 4)
         




