conditions: v1
version: "= 0"
if: >  # Forbid running non-PR pushes from pyup bot
  not (type != pull_request AND branch =~ ^pyup\-scheduled\-update\-)

dist: xenial
sudo: required

language: python

python:
- 3.5
- 3.6
- &mainstream_python 3.7
- nightly
- &pypy3 pypy3.5-6.0.0

install:
- &upgrade_python_toolset pip install --upgrade pip wheel setuptools
- make cythonize
- pip install -r requirements/ci.txt

script:
- make cov-ci-run

after_success:
 - codecov

_helpers:
- &_mainstream_python_base
  python: *mainstream_python
- &_reset_steps
  env: []
  before_install: skip
  install: skip
  script: skip
  after_success: []
- &_lint_base
  stage: &doc_stage_name docs, linting and pre-test checks
  <<: *_mainstream_python_base
  <<: *_reset_steps
  install:
  - *upgrade_python_toolset
  - pip install -U -r requirements/ci.txt
- &_doc_base
  <<: *_lint_base
  install:
  - *upgrade_python_toolset
  - pip install -U -r requirements/doc.txt -r requirements/doc-spelling.txt
  after_failure: cat docs/_build/spelling/output.txt
  addons:
    apt:
      packages:
      - libenchant-dev
- &osx_python_base
  stage: &stage_test_osx_name test under OS X (last chance to fail before deploy available)
  os: osx
  language: generic
  python: *pypy3
  env:
  - &env_pypy3 PYTHON_VERSION=pypy3.6-7.1.1
  - &env_pyenv PYENV_ROOT="$HOME/.pyenv"
  - &env_path PATH="$PYENV_ROOT/bin:$PATH"
  before_install:
  - brew update
  - brew install pyenv || brew upgrade pyenv
  - &ensure_pyenv_preloaded |
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
  - &install_python pyenv install --skip-existing --keep --verbose "$PYTHON_VERSION"
  - &switch_python pyenv shell "$PYTHON_VERSION"
  - &python_version python --version
  before_cache:
  - brew --cache

os: linux

jobs:
  fast_finish: true
  allow_failures:
  - python: nightly

  include:
  - name: 3.7 without extensions
    python: 3.7
    env:
      FROZENLIST_NO_EXTENSIONS: 1

  - <<: *_doc_base
    name: Checking docs spelling
    script:
    - make doc-spelling

  - <<: *_doc_base
    name: Checking Towncrier fragments
    install:
    - *upgrade_python_toolset
    - pip install -r requirements/cython.txt
    - FROZENLIST_NO_EXTENSIONS=1 pip install -r requirements/ci.txt
    - pip install -r requirements/towncrier.txt
    script:
    - towncrier --yes

  - <<: *_lint_base
    name: Linting source code with flake8
    install:
    - *upgrade_python_toolset
    - pip install -r requirements/flake.txt
    script:
    - flake8 frozenlist tests

  - <<: *_lint_base
    name: Linting source code with mypy
    install:
    - *upgrade_python_toolset
    - pip install -r requirements/cython.txt
    - FROZENLIST_NO_EXTENSIONS=1 pip install -r requirements/ci.txt
    script:
    - mypy frozenlist

  - <<: *_lint_base
    name: Verifying distribution package metadata
    install:
    - *upgrade_python_toolset
    - FROZENLIST_NO_EXTENSIONS=1 pip install -r requirements/ci.txt -r requirements/doc.txt
    script:
    - FROZENLIST_NO_EXTENSIONS=1 python setup.py --verbose sdist bdist_wheel
    - twine check dist/*

  - <<: *_lint_base
    name: Making sure that CONTRIBUTORS.txt remains sorted
    language: minimal
    install:
    - skip
    script:
    - LC_ALL=C sort -c CONTRIBUTORS.txt

  - <<: *osx_python_base
    python: 3.5.3
    env:
    - &env_py35 PYTHON_VERSION=3.5.3
    - *env_pyenv
    - *env_path
  - <<: *osx_python_base
    python: *mainstream_python
    env:
    - *env_py36
    - *env_pyenv
    - *env_path
  - <<: *osx_python_base
    python: 3.7
    env:
    - &env_py37 PYTHON_VERSION=3.7.0
    - *env_pyenv
    - *env_path
  # pypy3.5-5.10.0 fails under OS X because it's unsupported

stages:
- *doc_stage_name
- test
- name: *stage_test_osx_name
  if: type IN (api, cron)

cache: pip

before_cache:
- rm -f $HOME/.cache/pip/log/debug.log
